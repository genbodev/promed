(function(){	/**	 * Dialog reused by both 'add' and 'edit' commands.	 * @param {Object} editor	 * @param {String} command	The command name which indicate what the current command is.	 */	function swdataDialog( editor, command )	{			function load_datatags_combo(dialog,event)		{            sw.Promed.EvnXml.loadXmlDataSectionStore({}, function(storage) {                var store = storage.getStore();                var datatags_combo = dialog.getContentElement('swdata_tab1','swdata_id');                store.each(function(rec) {                    if (rec.get('XmlDataSection_Code') > 0) {                        datatags_combo.add(rec.get('XmlDataSection_Name'), rec.get('XmlDataSection_SysNick'));                    }                    return true;                });            });		}				var title = 'Создать область для ввода данных';		if (command == 'edit')		{			title = 'Редактировать область для ввода данных';		}				var dialog = {			title : title,			minWidth : 400,			minHeight : 200,			onLoad : function()			{				load_datatags_combo(this,'EvnVizitPL');			},			onShow : function()			{				if ( command == 'edit' )				{					var data_els = editor.getSelSwDataTag();					this._block_element = data_els.blockEl || null;					this._element = data_els.inputEl || null;					if (this._element)					{						this.setValueOf('swdata_tab1', 'swdata_id', this._element.getAttribute('id'));						this.setValueOf('swdata_tab1', 'swdata_defaultValue', this._element.getHtml());						this.getContentElement( 'swdata_tab1', 'swdata_id').disable();						//this.setValueOf('swdata_tab1', 'swdata_label', this._element.getAttribute('title'));					}				}			},			onOk: function() {				//var label = this.getContentElement( 'swdata_tab1', 'swdata_label').getInputElement().getValue();				//console.log(this.getContentElement( 'swdata_tab1', 'swdata_id').getInputElement());				var datatags_combo = this.getContentElement('swdata_tab1','swdata_id');				var id = datatags_combo.getInputElement().getValue();				if (!id)				{					// Добавить автоматически именуемую область ввода данных					var id_salt = Math.random();					id = 'autoname' + Math.floor(id_salt*100*(editor.SwDataTag_arr.length + 1));				}				for(var i = 0; i < editor.SwDataTag_arr.length; i++ )				{					if(command == 'add' && id == editor.SwDataTag_arr[i].getId()) {						//отображается под диалоговым окном sw.swMsg.alert('Ошибка', 'Нельзя повторно вставить одинаковый тэг!');						alert('Нельзя повторно вставить одинаковый тэг!');						return false;					}				}				var selectedIndex = datatags_combo.getInputElement().$.selectedIndex;				var label;				if (selectedIndex && selectedIndex>0) {					var sel_el = Ext.get(datatags_combo.getInputElement().$);					//console.log(selectedIndex,sel_el);					label = sel_el.dom.options[selectedIndex].text;				} else {					label = 'Название области ввода';				}				var defaultValue = this.getContentElement( 'swdata_tab1', 'swdata_defaultValue').getInputElement().getValue();				defaultValue = (defaultValue && defaultValue.length && defaultValue.length > 0)?defaultValue:'-';				if ( command == 'add' )				{					editor.insertHtml(						'<div class="template-block" id="block_' + id + '">'							+ '<p class="template-block-caption" id="caption_' + id + '"><span style="font-weight: bold; font-size:10px;">'+ label+ ': </span></p>'							+ '<div class="template-block-data"  id="data_' + id + '">'								+ '<div id="' + id + '" style="' + CKEDITOR.config.swtagStyles_data.designer + '" _cke_real_class="data" _cke_real_element_type="data">'								+ defaultValue								+ '</div>'							+ '</div>'						+ '</div><br>'					);					// обновляем список CKEDITOR.dom.node областей ввода					editor.createListSwDataTag(false);				}				if ( command == 'edit' && this._element)				{					//this._element.setAttribute('id',id);					this._element.setHtml(defaultValue);					//this._element.setAttribute('title',label);				}			},			onHide : function()			{				delete this._element;				delete this._block_element;			},			contents : [{				id : 'swdata_tab1',				label : 'Параметры области для ввода данных',				title : 'Параметры области для ввода данных',				expand:true,				padding:0,				elements : [{					type:'vbox',padding:1,children:[{					/*						type:'hbox',children:[{							id : 'swdata_content',							type : 'html',							html :'<div><p>После создания область ввода при заполнении шаблона будет выглядеть следующим образом:</p><p><span style="'+CKEDITOR.config.swtagStyles_data.input+'">Значение по умолчанию</span></p></div><br />',						}]					},{						type:'hbox',children:[{							id : 'swdata_label',							type : 'text',							label : 'Название поля ввода'							,default:''						}]					},{						type:'hbox',children:[{							id : 'swdata_id',							type : 'text',							label : 'Идентификатор поля ввода'							,default:''						}]					},{					*/						type:'select',						id:'swdata_id',						style:'width: 100%;',						label:'Выберите тип области ввода',						'default': '',						items:						[							//[editor.lang.common.notSet , '']							['автоматически именуемая область ввода данных', '']						]					},{						type:'hbox',children:[{							id : 'swdata_defaultValue',							type : 'text',							label : 'Значение по умолчанию'							,'default': '-'						}]					}]				}]			}]			//,buttons:[CKEDITOR.dialog.okButton]		};		return dialog;	}	CKEDITOR.dialog.add('swdata_add', function(editor) {		return swdataDialog(editor,'add');	});	CKEDITOR.dialog.add('swdata_edit', function(editor) {		return swdataDialog(editor,'edit');	});})();