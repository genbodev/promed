/**
* swPersonEmkWindow - окно электронной медицинской карты.
*
* PromedWeb - The New Generation of Medical Statistic Software
* http://swan.perm.ru/PromedWeb
*
*
* @package	  Common
* @access	   public
* @copyright	Copyright (c) 2009 Swan Ltd.
* @author	   Andrew Markoff, Alexander Permyakov
* @version	  10.2014
* @comment
*
*
* @input data: Person_id - человек
			   Server_id - сервер
			   PersonEvn_id - событие человека :)
			   ARMType - тип рабочего места (может открываться из рабочего места полки, стаца, стомат.полки и др.)
*/

/*NO PARSE JSON*/

sw.Promed.swPersonEmkWindow = Ext.extend(sw.Promed.BaseForm,
{
	codeRefresh: true,
	objectName: 'swPersonEmkWindow',
	objectSrc: '/jscore/Forms/Common/swPersonEmkWindow.js',
	title:langs('Электронная медицинская карта'),
	layout: 'border',
	id: 'PersonEmkForm',
	maximized: true,
	autoScroll: false,
	maximizable: false,
	shim: false,
	printArr:new Array(),
	countChk:0,
	notSelectEvnVizitMsg: langs('Для того, чтобы записать больного на исследование или консультацию,<br /> необходимо выбрать посещение.'),
	listeners:
	{
        beforehide: function(win, somethingElse, retParams)
        {
			// скрываем окно с выбором структурированных параметров
            if ( getWnd('swStructuredParamsWindow').items) {
                getWnd('swStructuredParamsWindow').hide();
            }
			if (Ext.get('printPanel')!=null) {
				this.printPanel.getEl().remove();
				Ext.select('.vPrint').addClass('vPrint-none');
				this.setHeightViewPanel();
			}
            // this === win
			var yes_handler = function() {
				win.hide(win);
			};
			win.inHideWnd = true;
            if (win.data && !win.checkChange(win.data.Code, win.data.key, win.data.id, yes_handler)) {
                return false;
            }
			sw.Promed.EvnXml.removeEditors(win.input_cmp_list);
            return true;
        },
        hide: function(win) {

			//log('win', win)

			//var retParams = {};
			//if (win.onHide && typeof win.onHide == 'function') retParams.callback = win.onHide
            //

			if (!win.fromQueryEvn && win.loadedFiles.length) {
				sw.swMsg.show({
					buttons: {yes: 'Добавить документы к запросу', no: 'Отмена'},
					fn: function( buttonId ){
						if ( buttonId == 'yes' ) {
							win.loadMask = win.getLoadMask('Прикрепление документов...');
							Ext.Ajax.request({
								failure: function(response, options) {
									win.loadMask.hide();
								},
								params: {
									 loadedFiles: Ext.util.JSON.encode(win.loadedFiles)
								},
								success: function(response, options) {
									win.loadMask.hide();
								},
								url: '/?c=QueryEvn&m=addDoc'
							});
						}
					},
					msg: 'Вы добавили документы в случай лечения, по которому есть запрос из другой МО<br><br><a href="#" onclick="getWnd(\'swQueryEvnEditWindow\').show({QueryEvn_id: '+win.loadedFiles[0].QueryEvn_id+'}); return false;">Показать запрос</a>',
					title: 'Добавить документы к запросу данных?'
				});
			} else if (win.owner) {
				win.owner.loadedFiles = win.loadedFiles;
			}

			win.returnFunc(win.owner, -1)
        }
	},
	/**
	* тип АРМа,
	* определяет к каким функциям будет иметь доступ врач через ЭМК,
	* например, у врача параклиники будет доступ только к параклиническим услугам
	*/
	ARMType: null,

	//объект с параметрами рабочего места, с которыми была открыта форма АРМа
	userMedStaffFact: null,

	/**
	 * Идентификатор вызова на дом.
	 * Передаётся при отрытии ЭМК из журнала вызовов для врача.
	 */
	HomeVisit_id: null,

	// eqAction - действия с ЭО после закрытия ЭМК
	electronicQueueAction: null,

	// Если при открытии формы передать id node, то удалятся все node кроме:
	// "Случай поликлинического лечения, в который входит данное посещение, со всеми входящими в случай посещениями."
	showOnlyId: null,

	allowHomeVisit: false,
	ResultDeseaseTypeFedstore : new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'ResultDeseaseType_id', mapping: 'ResultDeseaseType_id' },
			{ name: 'ResultDeseaseType_Code', mapping: 'ResultDeseaseType_Code' },
			{ name: 'ResultDeseaseType_Name', mapping: 'ResultDeseaseType_Name' }
		],
		key: 'ResultDeseaseType_id',
		sortInfo: { field: 'ResultDeseaseType_Code' },
		tableName: 'nsi_ResultDeseaseType'
	}),
	LeaveTypeFedstore : new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'LeaveType_id', mapping: 'LeaveType_id' },
			{ name: 'LeaveType_Code', mapping: 'LeaveType_Code' },
			{ name: 'LeaveType_Name', mapping: 'LeaveType_Name' },
			{ name: 'LeaveType_USLOV', mapping: 'LeaveType_USLOV' },
			{ name: 'LeaveType_begDT', mapping: 'LeaveType_begDT', type: 'date', dateFormat: 'd.m.Y' },
			{ name: 'LeaveType_endDT', mapping: 'LeaveType_endDT', type: 'date', dateFormat: 'd.m.Y' }
		],
		key: 'LeaveType_id',
		sortInfo: { field: 'LeaveType_Code' },
		tableName: 'LeaveTypeFed'
	}),
	diagAttribTypeStore: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'DiagAttribType_id', type: 'int', mapping: 'DiagAttribType_id' },
			{ name: 'DiagAttribType_Code', type: 'int', mapping: 'DiagAttribType_Code' },
			{ name: 'DiagAttribType_Name', type: 'string', mapping: 'DiagAttribType_Name' }
		],
		key: 'DiagAttribType_id',
		params: { object: 'DiagAttribType' },
		tableName: 'DiagAttribType'
	}),
	diagAttribDictStore: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'DiagAttribDict_id', type: 'int', mapping: 'DiagAttribDict_id' },
			{ name: 'DiagAttribDict_Code', type: 'int', mapping: 'DiagAttribDict_Code' },
			{ name: 'DiagAttribDict_Name', type: 'string', mapping: 'DiagAttribDict_Name' }
		],
		key: 'DiagAttribDict_id',
		params: { object: 'DiagAttribDict' },
		tableName: getRegionNick() != 'ekb' ? 'fed_DiagAttribDict' : 'DiagAttribDict'
	}),
	diagResultStore: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'DiagResult_id', type: 'int', mapping: 'DiagResult_id' },
			{ name: 'DiagResult_Code', type: 'int', mapping: 'DiagResult_Code' },
			{ name: 'DiagResult_Name', type: 'string', mapping: 'DiagResult_Name' },
			{ name: 'DiagAttribType_id', type: 'int', mapping: 'DiagAttribType_id' },
			{ name: 'DiagAttribDict_id', type: 'int', mapping: 'DiagAttribDict_id' }
		],
		key: 'DiagResult_id',
		params: { object: 'DiagResult' },
		tableName: getRegionNick() != 'ekb' ? 'fed_DiagResult' : 'DiagResult'
	}),
	payTypeStore: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'PayType_id', type: 'int', mapping: 'PayType_id' },
			{ name: 'PayType_Code', type: 'int', mapping: 'PayType_Code' },
			{ name: 'PayType_Name', type: 'string', mapping: 'PayType_Name' },
			{ name: 'PayType_SysNick', type: 'string', mapping: 'PayType_SysNick' }
		],
		key: 'PayType_id',
		params: { object: 'PayType', order_by_field: 'PayType_Code' },
		sortInfo: {
			field: 'PayType_Code'
		},
		tableName: 'PayType'
	}),
	uslugaMedTypeStore: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'UslugaMedType_id', type: 'int', mapping: 'UslugaMedType_id' },
			{ name: 'UslugaMedType_Code', type: 'int', mapping: 'UslugaMedType_Code' },
			{ name: 'UslugaMedType_Name', type: 'string', mapping: 'UslugaMedType_Name' },
		],
		key: 'UslugaMedType_id',
		params: { object: 'UslugaMedType', order_by_field: 'UslugaMedType_Code' },
		sortInfo: {
			field: 'UslugaMedType_Code'
		},
		tableName: 'UslugaMedType'
	}),
	serviceTypeStore: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'ServiceType_id', type: 'int', mapping: 'ServiceType_id' },
			{ name: 'ServiceType_Code', type: 'int', mapping: 'ServiceType_Code' },
			{ name: 'ServiceType_Name', type: 'string', mapping: 'ServiceType_Name' },
			{ name: 'ServiceType_SysNick', type: 'string', mapping: 'ServiceType_SysNick' }
		],
		key: 'ServiceType_id',
		params: { object: 'ServiceType', order_by_field: 'ServiceType_Code' },
		sortInfo: {
			field: 'ServiceType_Code'
		},
		tableName: 'ServiceType'
	}),
	vizitTypeStore: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'VizitType_id', type: 'int', mapping: 'VizitType_id' },
			{ name: 'VizitType_Code', type: 'int', mapping: 'VizitType_Code' },
			{ name: 'VizitType_Name', type: 'string', mapping: 'VizitType_Name' },
			{ name: 'VizitType_SysNick', type: 'string', mapping: 'VizitType_SysNick' }
		],
		key: 'VizitType_id',
		params: { object: 'VizitType', order_by_field: 'VizitType_Code' },
		sortInfo: {
			field: 'VizitType_Code'
		},
		tableName: 'VizitType'
	}),
	treatmentClassStore: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'TreatmentClass_id', type: 'int', mapping: 'TreatmentClass_id' },
			{ name: 'TreatmentClass_Code', type: 'string', mapping: 'TreatmentClass_Code' },
			{ name: 'TreatmentClass_Name', type: 'string', mapping: 'TreatmentClass_Name' },
			{ name: 'TreatmentClass_SysNick', type: 'string', mapping: 'TreatmentClass_SysNick' }
		],
		key: 'TreatmentClass_id',
		params: { object: 'TreatmentClass', order_by_field: 'TreatmentClass_Code' },
		sortInfo: {
			field: 'TreatmentClass_Code'
		},
		tableName: 'TreatmentClass'
	}),
	VizitActiveTypeStore: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'VizitActiveType_id', type: 'int', mapping: 'VizitActiveType_id' },
			{ name: 'VizitActiveType_Code', type: 'string', mapping: 'VizitActiveType_Code' },
			{ name: 'VizitActiveType_Name', type: 'string', mapping: 'VizitActiveType_Name' },
			{ name: 'TreatmentClass_id', type: 'int', mapping: 'TreatmentClass_id' }
		],
		key: 'VizitActiveType_id',
		params: { object: 'VizitActiveType', order_by_field: 'VizitActiveType_Code' },
		sortInfo: {
			field: 'VizitActiveType_Code'
		},
		tableName: 'VizitActiveType'
	}),
	PayTypeKAZStore: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'PayTypeKAZ_id', type: 'int', mapping: 'PayTypeKAZ_id' },
			{ name: 'PayTypeKAZ_Code', type: 'string', mapping: 'PayTypeKAZ_Code' },
			{ name: 'PayTypeKAZ_Name', type: 'string', mapping: 'PayTypeKAZ_Name' }
		],
		key: 'PayTypeKAZ_id',
		params: { object: 'PayTypeKAZ', order_by_field: 'PayTypeKAZ_Code' },
		sortInfo: {
			field: 'PayTypeKAZ_Code'
		},
		tableName: 'r101_PayTypeKAZ'
	}),
	OnkoMLinkStore: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'OnkoMLink_id', type: 'int', mapping: 'OnkoMLink_id' },
			{ name: 'OnkoM_id', type: 'int', mapping: 'OnkoM_id' },
			{ name: 'Diag_id', type: 'int', mapping: 'Diag_id' },
			{ name: 'OnkoM_fid', type: 'int', mapping: 'OnkoM_fid' },
			{ name: 'OnkoMLink_begDate', type: 'date', mapping: 'OnkoMLink_begDate', dateFormat: 'd.m.Y' },
			{ name: 'OnkoMLink_endDate', type: 'date', mapping: 'OnkoMLink_endDate', dateFormat: 'd.m.Y' }
		],
		key: 'OnkoMLink_id',
		tableName: 'OnkoMLink'
	}),
	OnkoNLinkStore: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'OnkoNLink_id', type: 'int', mapping: 'OnkoNLink_id' },
			{ name: 'OnkoN_id', type: 'int', mapping: 'OnkoN_id' },
			{ name: 'Diag_id', type: 'int', mapping: 'Diag_id' },
			{ name: 'OnkoN_fid', type: 'int', mapping: 'OnkoN_fid' },
			{ name: 'OnkoNLink_begDate', type: 'date', mapping: 'OnkoNLink_begDate', dateFormat: 'd.m.Y' },
			{ name: 'OnkoNLink_endDate', type: 'date', mapping: 'OnkoNLink_endDate', dateFormat: 'd.m.Y' }
		],
		key: 'OnkoNLink_id',
		tableName: 'OnkoNLink'
	}),
	OnkoTLinkStore: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'OnkoTLink_id', type: 'int', mapping: 'OnkoTLink_id' },
			{ name: 'OnkoT_id', type: 'int', mapping: 'OnkoT_id' },
			{ name: 'Diag_id', type: 'int', mapping: 'Diag_id' },
			{ name: 'OnkoT_fid', type: 'int', mapping: 'OnkoT_fid' },
			{ name: 'OnkoTLink_begDate', type: 'date', mapping: 'OnkoTLink_begDate', dateFormat: 'd.m.Y' },
			{ name: 'OnkoTLink_endDate', type: 'date', mapping: 'OnkoTLink_endDate', dateFormat: 'd.m.Y' }
		],
		key: 'OnkoTLink_id',
		tableName: 'OnkoTLink'
	}),
	TumorStageLinkStore: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'TumorStageLink_id', type: 'int', mapping: 'TumorStageLink_id' },
			{ name: 'TumorStage_id', type: 'int', mapping: 'TumorStage_id' },
			{ name: 'Diag_id', type: 'int', mapping: 'Diag_id' },
			{ name: 'TumorStage_fid', type: 'int', mapping: 'TumorStage_fid' },
			{ name: 'TumorStageLink_begDate', type: 'date', mapping: 'TumorStageLink_begDate', dateFormat: 'd.m.Y' },
			{ name: 'TumorStageLink_endDate', type: 'date', mapping: 'TumorStageLink_endDate', dateFormat: 'd.m.Y' }
		],
		key: 'TumorStageLink_id',
		tableName: 'TumorStageLink'
	}),
	DiagnosisResultDiagLinkStore: new Ext.data.JsonStore({
		autoLoad: false,
		fields: [
			{name: 'DiagnosisResultDiagLink_id', type: 'int'},
			{name: 'Diag_id', type: 'int'},
			{name: 'DiagResult_id', type: 'int'},
			{name: 'DiagnosisResultDiagLink_begDate', type: 'date', mapping: 'DiagnosisResultDiagLink_begDate', dateFormat: 'd.m.Y'},
			{name: 'DiagnosisResultDiagLink_endDate', type: 'date', mapping: 'DiagnosisResultDiagLink_endDate', dateFormat: 'd.m.Y'},
			{name: 'DiagAttribDict_id', type: 'int'},
			{name: 'DiagAttribType_id', type: 'int'}
		],
		key: 'DiagnosisResultDiagLink_id',
		url: '/?c=MorbusOnkoSpecifics&m=loadDiagnosisResultDiagLinkStore'
	}),
	TumorStageStore: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'TumorStage_id', type: 'int', mapping: 'TumorStage_id' },
			{ name: 'TumorStage_Code', type: 'int', mapping: 'TumorStage_Code' },
			{ name: 'TumorStage_Name', type: 'string', mapping: 'TumorStage_Name' }
		],
		key: 'TumorStage_id',
		params: { object: 'TumorStage' },
		tableName: 'TumorStage'
	}),
	OnkoTStore: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'OnkoT_id', type: 'int', mapping: 'OnkoT_id' },
			{ name: 'OnkoT_Code', type: 'int', mapping: 'OnkoT_Code' },
			{ name: 'OnkoT_Name', type: 'string', mapping: 'OnkoT_Name' }
		],
		key: 'OnkoT_id',
		params: { object: 'OnkoT' },
		tableName: 'OnkoT'
	}),
	OnkoNStore: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'OnkoN_id', type: 'int', mapping: 'OnkoN_id' },
			{ name: 'OnkoN_Code', type: 'int', mapping: 'OnkoN_Code' },
			{ name: 'OnkoN_Name', type: 'string', mapping: 'OnkoN_Name' }
		],
		key: 'OnkoN_id',
		params: { object: 'OnkoN' },
		tableName: 'OnkoN'
	}),
	OnkoMStore: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'OnkoM_id', type: 'int', mapping: 'OnkoM_id' },
			{ name: 'OnkoM_Code', type: 'int', mapping: 'OnkoM_Code' },
			{ name: 'OnkoM_Name', type: 'string', mapping: 'OnkoM_Name' }
		],
		key: 'OnkoM_id',
		params: { object: 'OnkoM' },
		tableName: 'OnkoM'
	}),
	/*OnkoTNMDiagStore: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'OnkoTNMDiag_id', type: 'int', mapping: 'OnkoTNMDiag_id' },
			{ name: 'Diag_id', type: 'int', mapping: 'Diag_id' },
			{ name: 'TumorStage_id', type: 'int', mapping: 'TumorStage_id' },
			{ name: 'OnkoT_id', type: 'int', mapping: 'OnkoT_id' },
			{ name: 'OnkoN_id', type: 'int', mapping: 'OnkoN_id' },
			{ name: 'OnkoM_id', type: 'int', mapping: 'OnkoM_id' },
			{ name: 'OnkoTNMDiag_begDate', type: 'date', mapping: 'OnkoTNMDiag_begDate', dateFormat: 'd.m.Y' },
			{ name: 'OnkoTNMDiag_endDate', type: 'date', mapping: 'OnkoTNMDiag_endDate', dateFormat: 'd.m.Y' }
		],
		key: 'OnkoTNMDiag_id',
		tableName: 'OnkoTNMDiag'
	}),*/
	saveFedField:function(ResultDeseaseType_id,LeaveTypeFed_id,record,object_pid){
		var object_code;
		switch ( record.object_code ) {
			case 'EvnPL': object_code = 'EvnPL_data'; break;
			case 'EvnPLStom': object_code = 'EvnPLStom_data'; break;
			default: object_code = record.object_code; break;
		}
		var form = this;
		if(ResultDeseaseType_id&&record.get('ResultDeseaseType_fedid')!=ResultDeseaseType_id){
			form.ResultDeseaseTypeFedstore.clearFilter();
			var inputFedResultDeseaseType = Ext.get(object_code + '_'+ object_pid +'_inputFedResultDeseaseType');
			var index = form.ResultDeseaseTypeFedstore.findBy(function(rec) {return (rec.get('ResultDeseaseType_id') == ResultDeseaseType_id);});
			if (index != -1) {
				inputFedResultDeseaseType.update(form.ResultDeseaseTypeFedstore.getAt(index).get('ResultDeseaseType_Name'));
			}
			Ext.Ajax.request({
				failure: function(response, options) {
					win.loadMask.hide();
					showSysMsg(langs('При загрузке сигнальный информации о диспансерном учете возникли ошибки'));
				},
				params: {
					 object: record.object_code
					,id: object_pid
					,options	:{"isEmk":true}
					,param_name: 'ResultDeseaseType_fedid'
					,param_value: ResultDeseaseType_id
				},
				success: function(response, options) {
					inputFedResultDeseaseType.setAttribute('dataid', ResultDeseaseType_id);
					record.set('ResultDeseaseType_fedid', ResultDeseaseType_id);
					record.commit(true);
					form.viewFormDataStore.commitChanges();
				},
				url: '/?c=EvnVizit&m=setEvnVizitParameter'
			});
		}
		if(LeaveTypeFed_id&&record.get('LeaveType_fedid')!=LeaveTypeFed_id){
			form.LeaveTypeFedstore.clearFilter();
			var inputFedLeaveType = Ext.get(object_code + '_'+  object_pid +'_inputFedLeaveType');
			var index = form.LeaveTypeFedstore.findBy(function(rec) {return (rec.get('LeaveType_id') == LeaveTypeFed_id);});
			if (index != -1) {
				inputFedLeaveType.update(form.LeaveTypeFedstore.getAt(index).get('LeaveType_Name'));
			}
			Ext.Ajax.request({
				failure: function(response, options) {
					win.loadMask.hide();
					showSysMsg(langs('При загрузке сигнальный информации о диспансерном учете возникли ошибки'));
				},
				params: {
					 object: record.object_code
					,id: object_pid
					,options	:{"isEmk":true}
					,param_name: 'LeaveType_fedid'
					,param_value: LeaveTypeFed_id
				},
				success: function(response, options) {
					inputFedLeaveType.setAttribute('dataid', LeaveTypeFed_id);
					record.set('LeaveType_fedid', LeaveTypeFed_id);
					record.commit(true);
					form.viewFormDataStore.commitChanges();
				},
				url: '/?c=EvnVizit&m=setEvnVizitParameter'
			});
		}
		if (getRegionNick() == 'khak') {
			var inputFedResultDeseaseType = Ext.get(object_code + '_'+ object_pid +'_inputFedResultDeseaseType');
			var inputFedLeaveType = Ext.get(object_code + '_'+  object_pid +'_inputFedLeaveType');
			record.set('FedLeaveType_Code', null);
			record.set('FedResultDeseaseType_Code', null);
			inputFedLeaveType.update(form.getEmptyValueText());
			inputFedResultDeseaseType.update(form.getEmptyValueText());
		}
	},
	getPayTypeSysNickOMS: function ()
	{
		var payTypeSysNickOMS = 'oms';
		switch ( getRegionNick() ) {
			case 'by': payTypeSysNickOMS = 'besus'; break;
			case 'kz': payTypeSysNickOMS = 'Resp'; break;
		}
		return payTypeSysNickOMS;
	},
	getDispClassListAvailable: function() {
		var form = this;

		form.EvnPLDispMenu.items.items[0].hide(); // ДВН 1
		form.EvnPLDispMenu.items.items[1].hide(); // ДВН 2
		form.EvnPLDispMenu.items.items[2].hide(); // ПРОФ
		form.EvnPLDispMenu.items.items[3].hide(); // ДДС 1
		form.EvnPLDispMenu.items.items[4].hide(); // ДДС 2
		form.EvnPLDispMenu.items.items[5].hide(); // МОН период
		form.EvnPLDispMenu.items.items[6].hide(); // МОН проф 1
		form.EvnPLDispMenu.items.items[7].hide(); // МОН проф 2
		form.EvnPLDispMenu.items.items[8].hide(); // МОН пред 1
		form.EvnPLDispMenu.items.items[9].hide(); // МОН пред 2

		form.getLoadMask('Получение доступных видов диспанеризации').show();
		Ext.Ajax.request({
			url: '/?c=EvnPLDisp&m=getDispClassListAvailable',
			params: {
				Person_id: form.getPersonId()
			},
			callback: function(options, success, response) {
				form.getLoadMask().hide();

				if ( success ) {
					var data = Ext.util.JSON.decode(response.responseText);

					// в зависимости от доступных типов диспансеризациий делаем доступными кнопки в меню
					if ("1".inlist(data)) {
						form.EvnPLDispMenu.items.items[0].show(); // ДВН 1
					}
					if ("2".inlist(data)) {
						form.EvnPLDispMenu.items.items[1].show(); // ДВН 2
					}
					if ("5".inlist(data)) {
						form.EvnPLDispMenu.items.items[2].show(); // ПРОФ
					}
					if ("3".inlist(data)) {
						form.EvnPLDispMenu.items.items[3].show(); // ДДС 1
					}
					if ("4".inlist(data)) {
						form.EvnPLDispMenu.items.items[4].show(); // ДДС 2
					}
					if ("6".inlist(data)) {
						form.EvnPLDispMenu.items.items[5].show(); // МОН период
					}
					if ("10".inlist(data)) {
						form.EvnPLDispMenu.items.items[6].show(); // МОН проф 1
					}
					if ("12".inlist(data)) {
						form.EvnPLDispMenu.items.items[7].show(); // МОН проф 2
					}
					if ("9".inlist(data)) {
						form.EvnPLDispMenu.items.items[8].show(); // МОН пред 1
					}
					if ("11".inlist(data)) {
						form.EvnPLDispMenu.items.items[9].show(); // МОН пред 2
					}
				}

			}
		});
	},
	completeDigitalTicketRequest: function(type, params) {

		var win = this;

		if (type == 'prof') {
			c = 'ProfService';
		} else {
			c = 'PaidService';
		}

		win.getLoadMask('Завершение приёма').show();
		Ext.Ajax.request({
			url: '/?c=' + c + '&m=finishCall',
			params: params,
			callback: function (opt, success, response) {
				win.getLoadMask().hide();
				if (success) {
					if ( response.responseText.length > 0 ) {
						var result = Ext.util.JSON.decode(response.responseText);
						if (result.success) {
							if (result.nextCab) {
								sw.swMsg.alert('Следующий кабинет', 'Следующий кабинет для пациента: ' + result.nextCab);
							}
							win.hide();
						}
					}
				}
			}
		});
	},
	finishElectronicTalon: function(type, ElectronicTalon_id, next, EvnPLDispObject_id) {

		var wnd = this;
		var params = {ElectronicTalon_id: ElectronicTalon_id };
		if (next) {params.takeNext = 1;}

		// если передан параметр EvnPLDispObject_id, то это 1-й пункт обслуживания
		if (EvnPLDispObject_id) {

			var saveData = {
				chainedSave: true,
				callback: function() {
					// то что мы вызовем после сохранения галочек в карте - завершим вызов
					wnd.completeDigitalTicketRequest(type, params)
				}
			};

			// сохраняем согласия\отказы если пришел айди
			// в зависимости от этого будет пропущен\включен тот или иной ПО
			wnd.saveDopDispInfoConsentList(EvnPLDispObject_id, saveData)
		} else {
			// иначе просто завершим прием в этом ПО и передадим в другой
			wnd.completeDigitalTicketRequest(type, params);
		}
	},
	finishElectronicTalonAndGoNext: function(type, ElectronicTalon_id, EvnPLDispObject_id) {

		this.finishElectronicTalon(type, ElectronicTalon_id, true, EvnPLDispObject_id);
	},
	getPersonId: function() {
		return this.private_Person_id;
	},

	/** Данный метод вызывается при открытии формы.
	* @param - {Object} массив содержащий входные функции и переменные
	*		  callback   - функция вызываемая при закрытии данной формы
	*		  owner	 - объект открывающий форму
	*		  action	- вариант открытия формы (add, edit, view)
	*		  Lpu_id, Person_id, PersonEvn_id, Server_id
	*/
	show: function()
	{
		var win = this;
		var args = arguments;
		var yes_handler = function() {
			args[0].ignoreCheckChange = true;
			win.show.createDelegate(win, args);
		};
		if (!args[0].ignoreCheckChange && !win.hidden && win.data && !win.checkChange(win.data.Code, win.data.key, win.data.id, yes_handler)) {
			win.toFront();
			return false;
		}
		
		if(getRegionNick()=='vologda') {
			win.T9mode = 1;
		}

		if(getRegionNick()=='ufa') {
			win.EvnPl_id = arguments[0].EvnPl_id;
			win.IsShowNewBornRisk = false;
		}
		sw.Promed.swPersonEmkWindow.superclass.show.apply(this, arguments);

		this.showArchive = false;
		this.processLoad = false;
		this.notfirstTime = false;
		this.afterCopyEvnVizitPLStom = false;
		this.inRequestTariffVolumes = false;
		this.inHideWnd = false;
		this.isFirstAdminCheck = false;
		this.isDigitalTicketCompleteSelected = false;
		this.electronicQueueAction = null;
		this.ignoreMotherCheck = false;
		this.loadedFiles = [];
		this.acceptWithoutRecording = false; //принять без записи

		if ((!arguments[0]) || (!arguments[0].ARMType))
		{
			this.hide();
			Ext.Msg.alert('Ошибка открытия формы', 'Ошибка открытия формы "'+this.title+'".<br/>Не указан тип АРМа врача.');
			return false;
		}
        if (!arguments[0].Person_id) {
            this.hide();
            Ext.Msg.alert(langs('Ошибка'), langs('Не указан пациент'));
			return false;
        }
		
		this.realARMType = arguments[0].ARMType;

        if (arguments[0].ARMType == 'spec_mz') {
			arguments[0].ARMType = 'common';
			arguments[0].readOnly = true;
		}

        if (arguments[0].ARMType == 'mse') {
			arguments[0].ARMType = 'common';
			arguments[0].readOnly = true;
		}

        if (arguments[0].ARMType == 'polka') {
			arguments[0].ARMType = 'common';
		}

        if (arguments[0].ARMType == 'phys') {
			arguments[0].ARMType = 'common';
		}
		
		this.isMseDepers = this.realARMType=='mse' && getGlobalOptions().use_depersonalized_expertise;
		Ext.getCmp('PEMK_groupPrint').setDisabled(this.isMseDepers);

		//BOB - 13.06.2018
		//console.log('BOB_arguments=',arguments);  //BOB - 13.06.2018
		this.ARMTypeFrom = null;
		if (arguments[0].ARMTypeFrom)
			this.ARMTypeFrom = arguments[0].ARMTypeFrom;
		//BOB - 13.06.2018

        this.private_Person_id = arguments[0].Person_id;

		if (arguments[0].addStacActions) {
			this.addStacActions = arguments[0].addStacActions;
		} else {
			this.addStacActions = false;
		}
		if(arguments[0].disAddPS){
			this.disAddPS = arguments[0].disAddPS;
		}else{
			this.disAddPS = false;
		}
		
		if (arguments[0].userMedStaffFact)
		{
			this.userMedStaffFact = arguments[0].userMedStaffFact;
		} else {
			if (sw.Promed.MedStaffFactByUser.last)
			{
				this.userMedStaffFact = sw.Promed.MedStaffFactByUser.last;
			}
			else
			{
				sw.Promed.MedStaffFactByUser.selectARM({
					ARMType: arguments[0].ARMType,
					onSelect: function(data) {
						this.userMedStaffFact = data;
					}.createDelegate(this)
				});
			}
		}

		if(getRegionNick() == 'vologda') {
			//нам понадобятся дополнительные профили пользователя
			this.loadLpuSectionLpuSectionProfileGrid();
		}

		if(arguments[0].acceptWithoutRecording){
			this.acceptWithoutRecording = arguments[0].acceptWithoutRecording;
		}

		this.allowHomeVisit = false;
		if (arguments[0].HomeVisit_id && arguments[0].allowHomeVisit)
		{
			this.HomeVisit_id = arguments[0].HomeVisit_id;
			this.allowHomeVisit = arguments[0].allowHomeVisit;
		}

		this.searchNodeObj = arguments[0].searchNodeObj || null;

        this.clearStateStore();
		Ext.getCmp('leftEPHPanel').setVisible(!arguments[0].hideLeftPanel);
		Ext.getCmp('mainEPHPanel').syncSize();		
		
		if (arguments[0].callback)
			this.returnFunc = arguments[0].callback;
		if (arguments[0].owner)
			this.owner = arguments[0].owner;
		if (arguments[0].action)
			this.action = arguments[0].action;
        this.Lpu_id = arguments[0].Lpu_id || null;
		this.readOnly = arguments[0].readOnly || null;
		this.Person_id = this.getPersonId();

		this.PersonEvn_id = arguments[0].PersonEvn_id || null;
		this.showOnlyId = arguments[0].showOnlyId || null;

		this.Server_id = arguments[0].Server_id;
		this.mode = arguments[0].mode || '';
		this.allowLoadSignInfo = false; // (typeof this.searchNodeObj != 'object' || this.searchNodeObj == null);
		this.onChangeLpuSectionWard = arguments[0].onChangeLpuSectionWard || null;
		//onSaveEvnDocument - функция, которая выполняет какой-то код после успешного сохранения случаев, документов
        this.onSaveEvnDocument = arguments[0].onSaveEvnDocument || Ext.emptyFn;
		this.onExecEvnPrescr = arguments[0].onExecEvnPrescr || Ext.emptyFn;//выполняет какой-то код после выполнения услуги
        this.onDeleteEvnPL = arguments[0].onDeleteEvnPL || Ext.emptyFn;
        this.onDeleteEvent = arguments[0].onDeleteEvent || Ext.emptyFn;
		this.isDigitalTicketCompleteSelected = arguments[0].isDigitalTicketCompleteSelected || false;
        this.onShow = arguments[0].onShow || Ext.emptyFn;
        this.EvnPrescr_id = arguments[0].EvnPrescr_id || null;
		//accessViewFormDelegate['FreeDocumentList_'+ record.data.EvnPrescrCons_pid +'_adddoc'] = true;
        this.accessViewFormDelegate = arguments[0].accessViewFormDelegate || {};
		this.fromQueryEvn = arguments[0].fromQueryEvn || false;

        this.allowAddEvnUslugaTelemed = arguments[0].allowAddEvnUslugaTelemed || false;
        this.openEvnUslugaTelemedEditWindowHandler = arguments[0].openEvnUslugaTelemedEditWindowHandler || null;
		if (this.allowAddEvnUslugaTelemed) {
			this.Actions.action_New_EvnUslugaTelemed.enable();
		} else {
			this.Actions.action_New_EvnUslugaTelemed.disable();
		}
		if (this.userMedStaffFact && this.userMedStaffFact.ARMType && this.userMedStaffFact.ARMType == 'stom') {
			this.Actions.action_Copy_EvnVizitPLStom.enable();
		} else {
			this.Actions.action_Copy_EvnVizitPLStom.disable();
		}

		this.isMyOwnRecord = arguments[0].isMyOwnRecord || false;
		this.electronicQueueData = arguments[0].electronicQueueData || false;
			
		if (this.mode == 'workplace')
		{
			// Проверяем не открыли ли мы эпз из места работы врача с передачей ID 
			this.TimetableGraf_id = arguments[0].TimetableGraf_id || null;
			this.TimetableMedService_id = arguments[0].TimetableMedService_id || null;
		}else {
			this.TimetableGraf_id = null;
			this.TimetableMedService_id = null;
		}
		if (arguments[0].EvnDirectionData && arguments[0].EvnDirectionData.EvnDirection_id) {
			this.EvnDirectionData = arguments[0].EvnDirectionData;
			this.TimetableGraf_id = arguments[0].EvnDirectionData.TimetableGraf_id || null;
		} else {
			this.EvnDirectionData = null;
		}

		// покажем панель ЭО
		this.ElectronicQueuePanel.initElectronicQueue();
		log('eqpanelenable',this.ElectronicQueuePanel.electronicQueueEnable);
		log('emkeqpanel',this.ElectronicQueuePanel);

		var form = this;

		if (this.electronicQueueData
			&& this.electronicQueueData.electronicTalonStatus_id
			&& this.electronicQueueData.electronicTalonStatus_id < 4) {
			this.ElectronicQueuePanel.show(); this.doLayout(); this.syncSize();
		} else {
			this.ElectronicQueuePanel.hide(); this.doLayout(); this.syncSize();
		}

        form.toggleARMType(arguments[0].ARMType, true);
        form.clearNodeViewForm();
		form.PersonInfoFrame.setTitle('...');

		// Загружаем справочник видов оплат
		// https://redmine.swan.perm.ru/issues/30152
		if ( form.LeaveTypeFedstore.getCount() == 0 ) {
			var loadMask = new Ext.LoadMask(form.getEl(), { msg: "Загрузка справочника ..." });
			loadMask.show();

			form.LeaveTypeFedstore.load({
				callback: function() {
					loadMask.hide();
				}.createDelegate(this)
			});
		}
		if ( form.ResultDeseaseTypeFedstore.getCount() == 0 ) {
			var loadMask = new Ext.LoadMask(form.getEl(), { msg: "Загрузка справочника ..." });
			loadMask.show();

			form.ResultDeseaseTypeFedstore.load({
				callback: function() {
					loadMask.hide();
				}.createDelegate(this)
			});
		}
		if ( form.diagAttribTypeStore.getCount() == 0 ) {
			var loadMask = new Ext.LoadMask(form.getEl(), { msg: "Загрузка справочника типов диагностических показателей..." });
			loadMask.show();

			form.diagAttribTypeStore.load({
				callback: function() {
					loadMask.hide();
				}.createDelegate(this)
			});
		}
		if ( form.diagAttribDictStore.getCount() == 0 ) {
			var loadMask = new Ext.LoadMask(form.getEl(), { msg: "Загрузка справочника диагностических показателей..." });
			loadMask.show();

			form.diagAttribDictStore.load({
				callback: function() {
					loadMask.hide();
				}.createDelegate(this)
			});
		}
		if ( form.diagResultStore.getCount() == 0 ) {
			var loadMask = new Ext.LoadMask(form.getEl(), { msg: "Загрузка справочника резкльтатов диагностики..." });
			loadMask.show();

			form.diagResultStore.load({
				callback: function() {
					loadMask.hide();
				}.createDelegate(this)
			});
		}
		if ( form.payTypeStore.getCount() == 0 ) {
			var loadMask = new Ext.LoadMask(form.getEl(), { msg: "Загрузка справочника видов оплаты..." });
			loadMask.show();

			form.payTypeStore.load({
				callback: function() {
					loadMask.hide();
				}.createDelegate(this)
			});
		}

		if ( form.uslugaMedTypeStore.getCount() == 0 ) {
			var loadMask = new Ext.LoadMask(form.getEl(), { msg: "Загрузка справочника видов услуг..." });
			loadMask.show();

			form.uslugaMedTypeStore.load({
				callback: function() {
					loadMask.hide();
				}.createDelegate(this)
			});
		}

		if ( form.vizitTypeStore.getCount() == 0 ) {
			var loadMask = new Ext.LoadMask(form.getEl(), { msg: "Загрузка справочника целей посещения..." });
			loadMask.show();

			form.vizitTypeStore.load({
				callback: function() {
					loadMask.hide();
				}.createDelegate(this)
			});
		}

		if ( form.serviceTypeStore.getCount() == 0 ) {
			var loadMask = new Ext.LoadMask(form.getEl(), { msg: "Загрузка справочника мест посещения..." });
			loadMask.show();

			form.serviceTypeStore.load({
				callback: function() {
					loadMask.hide();
				}.createDelegate(this)
			});
		}

		if ( form.treatmentClassStore.getCount() == 0 ) {
			var loadMask = new Ext.LoadMask(form.getEl(), { msg: "Загрузка справочника видов обращения..." });
			loadMask.show();

			form.treatmentClassStore.load({
				callback: function() {
					loadMask.hide();
				}.createDelegate(this)
			});
		}

		if ( form.PayTypeKAZStore.getCount() == 0 && getRegionNick() == 'kz' ) {
			form.PayTypeKAZStore.load();
		}
		
		if ( form.VizitActiveTypeStore.getCount() == 0 && getRegionNick() == 'kz' ) {
			form.VizitActiveTypeStore.load();
		}

		if ( form.OnkoMLinkStore.getCount() == 0 ) {
			form.OnkoMLinkStore.load();
		}

		if ( form.OnkoNLinkStore.getCount() == 0 ) {
			form.OnkoNLinkStore.load();
		}

		if ( form.OnkoTLinkStore.getCount() == 0 ) {
			form.OnkoTLinkStore.load();
		}

		if ( form.TumorStageLinkStore.getCount() == 0 ) {
			form.TumorStageLinkStore.load();
		}

		if ( form.DiagnosisResultDiagLinkStore.getCount() == 0 ) {
			form.DiagnosisResultDiagLinkStore.load();
		}

		if ( this.TumorStageStore.getCount() == 0 ) {
			this.TumorStageStore.load();
		}

		if ( this.OnkoTStore.getCount() == 0 ) {
			this.OnkoTStore.load();
		}

		if ( this.OnkoNStore.getCount() == 0 ) {
			this.OnkoNStore.load();
		}

		if ( this.OnkoMStore.getCount() == 0 ) {
			this.OnkoMStore.load();
		}

		/*if ( form.OnkoTNMDiagStore.getCount() == 0 ) {
			form.OnkoTNMDiagStore.load();
		}*/

		if (this.readOnly) {
			this.setReadOnly(true);
		}

		form.EvnPLDispMenu.items.items[0].hide(); // ДВН 1
		form.EvnPLDispMenu.items.items[1].hide(); // ДВН 2
		form.EvnPLDispMenu.items.items[2].hide(); // ПРОФ
		form.EvnPLDispMenu.items.items[3].hide(); // ДДС 1
		form.EvnPLDispMenu.items.items[4].hide(); // ДДС 2
		form.EvnPLDispMenu.items.items[5].hide(); // МОН период
		form.EvnPLDispMenu.items.items[6].hide(); // МОН проф 1
		form.EvnPLDispMenu.items.items[7].hide(); // МОН проф 2
		form.EvnPLDispMenu.items.items[8].hide(); // МОН пред 1
		form.EvnPLDispMenu.items.items[9].hide(); // МОН пред 2

		// Дисаблим все кнопки. и открываем их если только прогрузится фрейм человека
		form.setButtonPanelDisable(true);
		form.loadMask = form.getLoadMask(LOAD_WAIT);
		form.loadMask.show();
        form.PersonInfoFrame.load(
		{
			Person_id: form.getPersonId(),
			Server_id: form.Server_id,
			LoadShort: false,
			callback: function()
			{
				form.loadMask.hide();

				// если кнопка "диспансеризация/профосмотры" доступна, то надо запросить по человеку список доступных типов диспансеризации
				if ('action_New_EvnPLDisp'.inlist(form.actions_list)) {
					form.getDispClassListAvailable();
				}

				form.setButtonPanelDisable(false);

                if (!form.PersonInfoFrame.getFieldValue('PersonEvn_id')
                || !form.PersonInfoFrame.getFieldValue('Person_id')
                ) {
                    form.hide();
                    Ext.Msg.alert(langs('Ошибка'), langs('Не удалось загрузить информацию о человеке'));
                    return false;
                }
				form.PersonInfoFrame.setPersonTitle();
				form.PersonEvn_id = form.PersonInfoFrame.getFieldValue('PersonEvn_id'); 
				form.Person_id = form.PersonInfoFrame.getFieldValue('Person_id');
				form.Server_id = form.PersonInfoFrame.getFieldValue('Server_id'); 
				form.Person_Firname = form.PersonInfoFrame.getFieldValue('Person_Firname');
				form.Person_Surname = form.PersonInfoFrame.getFieldValue('Person_Surname');
				form.Person_Secname = form.PersonInfoFrame.getFieldValue('Person_Secname');
				form.Person_Birthday = form.PersonInfoFrame.getFieldValue('Person_Birthday');
				form.Age = form.PersonInfoFrame.getFieldValue('Person_Age');
				//form.Age = swGetPersonAge(form.PersonInfoFrame.getFieldValue('Person_Birthday'));

				form.setReadOnly(
					form.readOnly ||
					!Ext.isEmpty(form.PersonInfoFrame.getFieldValue('Person_deadDT')) || 
					!Ext.isEmpty(form.PersonInfoFrame.getFieldValue('Person_closeDT'))
				);

				form.leftMenu.items.each(function (item) {
					if (item.nn === 'action_New_EvnPLDispScreen')
					{
						if(form.readOnly)
						{
							item.setDisabled(true);
						} else
						{
							item.setDisabled(false);
						}
					}
					if (item.nn === 'action_TopTimetable' && form.isMseDepers)
					{
						item.setDisabled(false);
					}
				});

				//загрузка дерева при открытии формы с группировкой по дате
				form.Tree.getLoader().baseParams.Diag_id = 0;
				form.loadTree(0, function(tl,n){
					if(form.searchNodeObj && form.searchNodeObj.parentNodeId) {

						//ищем ноду в дереве и делаем с ней что-то
						if(form.searchNodeObj.parentNodeId == 'root') {
							var sparams = {
								parent_node: form.Tree.getRootNode(),
								last_child: false,//form.searchNodeObj.last_child ||
								disableLoadViewForm: form.searchNodeObj.disableLoadViewForm,
								node_attr_name: 'id',
								node_attr_value: form.searchNodeObj.EvnClass_SysNick +'_'+ form.searchNodeObj.Evn_id
							};
							form.searchNodeInTreeAndLoadViewForm(sparams);
						} else {
							var sparams = {
								parent_node: form.Tree.getNodeById(form.searchNodeObj.parentNodeId),
								last_child: false,//form.searchNodeObj.last_child ||
								disableLoadViewForm: form.searchNodeObj.disableLoadViewForm,
								node_attr_name: 'id',
								node_attr_value: form.searchNodeObj.EvnClass_SysNick +'_'+ form.searchNodeObj.Evn_id
							};
							form.searchNodeInTreeAndLoadViewForm(sparams);
						}
					}

                    if (form.electronicQueueData && form.electronicQueueData.onLoadEmkTree && typeof form.electronicQueueData.onLoadEmkTree === 'function') {
                        form.electronicQueueData.onLoadEmkTree(form);
                    }
					//При первом открытии из журнала выбывших форма скролится выше чем надо и перс панель уезжает, поэтому в первый раз не скролим ибо незачем
					//form.notfirstTime = true;
				});
				setTimeout(function() {
					form.showPersonDispSignalViewData();
				}, 5000);
                form.onShow(form);

                return true;
			}
		});
    },  // end show
    setMKB: function(cmp,id){
		var parentWin =this
		var sex = parentWin.PersonInfoFrame.getFieldValue('Sex_id');
		var date = this.getObjectData('EvnVizitPL',id).EvnVizitPL_setDate;
		var age = swGetPersonAge(parentWin.PersonInfoFrame.getFieldValue('Person_Birthday'),date);
		cmp.setMKBFilter(age,sex,true);
	},
	isAccessViewFormDelegate: function(section_id,action) {
		return this.accessViewFormDelegate[section_id+'_'+action] || false;
	},
	setButtonPanelDisable: function (disable)
	{
		for(var key in this.PanelActions)
		{
			this.PanelActions[key].setDisabled(disable);
		}
	},
	returnFunc: function(owner) {
	},
	changeARMType: function(setARMType) {
		this.toggleARMType(setARMType, false);
	},
	actions_list: [],
	toggleARMType: function(setARMType, first) {
		var form = this;

		this.ARMType = setARMType;
		//	,
		//Набор действий независимо от типа рабочего места
		this.actions_list = [];
		// По умолчанию тип группировки по хронологии (линейный)
		//var type = 0;
		var set_stac_btn = Ext.getCmp('PEMK_setStac');
		var set_common_btn = Ext.getCmp('PEMK_setCommon');
		var lpusection_combo = Ext.getCmp('PEMK_LpuSectionCombo');
		lpusection_combo.getStore().removeAll();
		lpusection_combo.clearValue();
		var medstafffact_combo = Ext.getCmp('PEMK_MedStaffFactCombo');
		medstafffact_combo.getStore().removeAll();
		medstafffact_combo.clearValue();
		var evndate_range = Ext.getCmp('EvnDate_Range');
		evndate_range.setValue('');
		var groupType_toogle_btn = Ext.getCmp('PEMK_GroupTypeToogle');
		var left_panel = Ext.getCmp('leftEPHPanel');
		//Наборы действий в зависимости от типа рабочего места
		switch(this.ARMType)
		{
			case 'par':
				this.setTitle(langs('Электронная медицинская карта'));
				set_stac_btn.hide();
				set_common_btn.hide();
				groupType_toogle_btn.hide();
				this.Tree.getLoader().baseParams.type = 0;
				// Если фильтр установлен, то показывать только список услуг, оказанных отделением, выбранным в поле фильтра. По умолчанию поле фильтра содержит название отделения (лаборатории) текущего пользователя. 
				lpusection_combo.enable();
				if ( lpusection_combo.getStore().getCount() == 0 ) {
					setLpuSectionGlobalStoreFilter({
						isParka: true,
						allowLowLevel: 'yes'
					});
					lpusection_combo.getStore().loadData(getStoreRecords(swLpuSectionGlobalStore));
				}
				lpusection_combo.setValue(this.userMedStaffFact.LpuSection_id);
				lpusection_combo.show();
				medstafffact_combo.hide();
				this.actions_list = ['action_New_EvnUslugaPar','action_New_ComplexUsluga','action_Open_EvnUslugaPar','action_EvnJournal'];
				//left_panel.setWidth(60);
			break;
			case 'stac':
				this.setTitle(langs('Электронная история болезни'));
				set_stac_btn.show();
				set_common_btn.show();
				groupType_toogle_btn.show();
				set_stac_btn.enable();
				set_stac_btn.toggle(true, false);
				if ( lpusection_combo.getStore().getCount() == 0 ) {
					setLpuSectionGlobalStoreFilter({
						//isStac: true,
						allowLowLevel: 'yes'
					});
					lpusection_combo.getStore().loadData(getStoreRecords(swLpuSectionGlobalStore));
				}
				lpusection_combo.setValue(this.userMedStaffFact.LpuSection_id);
				lpusection_combo.hide();
				lpusection_combo.disable();
				
				if ( medstafffact_combo.getStore().getCount() == 0 )
				{
					setMedStaffFactGlobalStoreFilter({
						allowLowLevel: 'yes'
						//isStac: true,
						//LpuSection_id: this.userMedStaffFact.LpuSection_id
					});
					medstafffact_combo.getStore().loadData(getStoreRecords(swMedStaffFactGlobalStore));
				}
				medstafffact_combo.setValue(this.userMedStaffFact.MedStaffFact_id);
				medstafffact_combo.hide();
				medstafffact_combo.disable();

				//type = 1;
				this.actions_list = ['action_Open_EvnPS','action_Print_EvnPS', 'action_Delete_EvnPS', 'action_Open_EvnSection','action_print_Discharge','action_print_Interim','action_print_EpicrisReab','action_print_TreatrList','action_print_List','action_print_Obs_List','action_Open_Form','action_Open_TherapyPlan','action_Open_Appointment','action_Send','action_Open_DirectMedCommission','action_Open_EvnStick','action_Open_JourOperation','action_Open_CardObservation','action_Open_DiaryEntrie','action_Open_Epicrisis','action_Open_Notice','action_Open_Document','action_EvnJournal','action_print_PersonSoglasieStac','action_print_PersonSoglasieAnst','action_print_PersonSoglasieOperStac','action_print_PersonInfoOtkaz'];
				if (getRegionNick() == 'ufa') {
					this.actions_list.push('action_PersonNewBorn');
				}
			break;
			case 'pl':
				this.setTitle(langs('Электронная медицинская карта'));
			break;
			case 'stom': //
                this.setTitle(langs('Электронная медицинская карта'));
				this.actions_list = ['action_New_EvnPLStom', 'action_New_PersonDisp', 'action_New_PersonCard', 'action_TopTimetable', 'action_EvnPrescrVK','action_EvnJournal'];
                set_stac_btn.hide();
                set_common_btn.hide();
                medstafffact_combo.hide();
                lpusection_combo.hide();
                groupType_toogle_btn.show();
                break;
			case 'common': // полка
				this.setTitle(langs('Электронная медицинская карта'));
				var actionadd = 'action_New_EvnPL';
				if (this.userMedStaffFact && this.userMedStaffFact.ARMType && this.userMedStaffFact.ARMType == 'remoteconsultcenter') {
					actionadd = 'action_New_EvnUslugaTelemed';
				}
				this.actions_list = [actionadd, 'action_New_EvnPLDispMigr', 'action_New_EvnPLDispDriver', 'action_New_PersonPrivilege', 'action_New_PersonDisp', 'action_New_PersonCard', 'action_TopTimetable', 'action_EvnPrescrVK','action_Kard063','action_EvnJournal',(isUserGroup('MedSvidDeath'))?'action_CommonSvid':'','action_Newslatter'];
				if (getRegionNick() == 'kz') {
					this.actions_list.push('action_New_EvnPLDispScreen');
				} else {
					this.actions_list.push('action_PersonQuarantine');
				}
				if (getRegionNick() == 'ufa') {
					this.actions_list.push('action_PersonNewBorn');
				}
				if (!Ext.isEmpty(getGlobalOptions().CurPostMed_id) && getGlobalOptions().CurPostMed_id.toString().inlist([73,74,75,76,40,46,47])) {
					// если терапевт или педиатр, то диспансеризация/профосмотры доступны
					//this.actions_list.push('action_New_EvnPLDisp');
				}
				//set_stac_btn.disable();
				set_stac_btn.hide();
				set_common_btn.hide();
				//set_stac_btn.show();
				//set_common_btn.show();
				//set_common_btn.toggle(true, false);
				medstafffact_combo.hide();
				lpusection_combo.hide();
				groupType_toogle_btn.show();
                break;
			case 'headnurse': //
				this.setTitle(langs('Электронная медицинская карта'));
				this.actions_list = ['action_New_EvnPL', 'action_New_PersonPrivilege', 'action_New_PersonDisp', 'action_New_PersonCard', 'action_TopTimetable', 'action_EvnPrescrVK','action_Kard063','action_EvnJournal'];
				set_stac_btn.hide();
				set_common_btn.hide();
				medstafffact_combo.hide();
				lpusection_combo.hide();
				groupType_toogle_btn.show();
				var filter = new Object();
				if(this.searchNodeObj && this.searchNodeObj.EvnClass_SysNick == 'EvnPS' && this.searchNodeObj.parentNodeId == 'root') {
					filter.EvnPS = this.searchNodeObj.Evn_id;
				} else {
					filter.EvnPS = null;
				}
				this.Tree.getLoader().baseParams.filter = Ext.util.JSON.encode(filter, true);
                break;
			case 'vk': //
				this.setTitle(langs('Электронная медицинская карта'));
				this.actions_list = ['action_EvnVK','action_EvnJournal','action_CommonSvid'];
				set_stac_btn.hide();
				set_common_btn.hide();
				medstafffact_combo.hide();
				lpusection_combo.hide();
				groupType_toogle_btn.show();
                break;
			default:
				this.setTitle(langs('Электронная медицинская карта'));

			break;
		}

		if (this.addStacActions) {
			this.actions_list = this.addStacActions;
			this.actions_list.push('action_EvnJournal');
			if (getRegionNick() == 'ufa') {
				this.actions_list.push('action_PersonNewBorn');
			}
		}

		//log('sdfsd',actions_list)
		this.leftMenu.items.each(function (item) {
			if (item.nn.inlist(form.actions_list)) {
				if(!item.initialConfig.hidden) {
					item.show();
				}
			} else {
				item.hide();
			}
		});
		
		if (!first)
		{
			this.loadTree();
		}
	},
	toggleGroupType: function (button, check)
	{
		this.showArchive = false;
		if (check) 
		{
			button.setText(langs('По событиям'));
			this.loadTree(0);
		}
		else
		{
			button.setText(langs('По хронологии'));
			this.loadTree(1);
		}
	},
	processLoad: false,
	/**
	* private
	*/
	setReadOnly: function (is_read_only)
	{
		if (this.readOnly) {
			is_read_only = true;
		}
		this.isReadOnly = is_read_only;
		this.leftMenu.items.each(function (item) {
			if (item.initialConfig.actionType && item.initialConfig.actionType == 'write') {
				if(!item.initialConfig.disabled) {
					item.setDisabled(is_read_only);
				}
				if (item.initialConfig.nn == 'action_New_PersonCard') {
					item.setDisabled(is_read_only ||
						(!Ext.isEmpty(getGlobalOptions().check_attach_allow) && getGlobalOptions().check_attach_allow == 1 && !isUserGroup('CardEditUser')) ||
						((Ext.isEmpty(getGlobalOptions().check_attach_allow) || getGlobalOptions().check_attach_allow != 1) && !isPolkaRegistrator())
					)
				}
			}
		});
	},
	expandedNodes: {},
	saveListExpandedNodes: function(node) {
		var child_nodes = node.childNodes;
		if(child_nodes.length > 0) {
			var list_arr = [];
			for(var i=0;i<child_nodes.length;i++){
				if (child_nodes[i].isExpanded()) {
					list_arr.push(child_nodes[i].attributes.id);
					this.saveListExpandedNodes(child_nodes[i]);
				}
			}
			if(list_arr.length > 0)
				this.expandedNodes[node.attributes.id] = list_arr;
		}
	},
	openPersonEvnJournalWindow: function()
	{
		if (typeof this.Person_id == 'undefined')
		{
			sw.swMsg.alert(langs('Ошибка'), langs('Ошибка загрузки формы просмотра. <br/>Не указан идентификатор человека.'));
			return false;
		}
		getWnd('swPersonEvnJournalWindow').show({
			Person_id: this.Person_id,
			ARMType: this.ARMType,
			userMedStaffFact: this.userMedStaffFact
		});
	},
	/**
	* Отображение данных по дисп. учету человека при открытии ЭМК #12461
	*/
	showPersonDispSignalViewData: function() {
		var win = this;
		if (this.isMseDepers) return false;

		Ext.Ajax.request({
			failure: function(response, options) {
				showSysMsg(langs('При загрузке сигнальный информации о диспансерном учете возникли ошибки'));
			},
			params: {
				Person_id: win.getPersonId(),
				UserMedStaffFact_id: win.userMedStaffFact.MedStaffFact_id
			},
			success: function(response, options) {
				if ( response.responseText )
				{
					var result  = Ext.util.JSON.decode(response.responseText),
						tmp1_str = '',
						tmp2_str = '',
						diag_str,
						date_str,
						title = '',
						msg = '';
					if ( Ext.isArray(result) && result.length > 0 )
					{
						title += win.PersonInfoFrame.getFieldValue('Person_Surname') +' ';
						title += win.PersonInfoFrame.getFieldValue('Person_Firname') +' ';
						title += win.PersonInfoFrame.getFieldValue('Person_Secname') +' ';
						title += langs('состоит на диспансерном учете по следующим диагнозам:');
						for (var i=0; i < result.length; i++)
						{
							diag_str = '<b>'+ result[i].Diag_Code +'</b>';
							date_str = result[i].LastOsmotr_setDate || '';
							/*
								3	поставлен ли пациент на ДУ текущим врачом
								2	поставлен ли пациент на ДУ на участке текущего врача
								1	пациент поставлен на ДУ чужим врачом
							*/
							if(result[i].PersonDispSetType_id != 3) {
								tmp1_str += '<br>'+ diag_str +' '+ date_str;
							} else {
								tmp2_str += '<br>'+ diag_str +' '+ date_str;
							}
						}
						if(tmp2_str.length > 0)
						{
							msg += langs('<br><u>установленные Вами:</u>')+ tmp2_str;
						}
						if(tmp1_str.length > 0)
						{
							msg += langs('<br><br><u>установленные другими врачами:</u>')+ tmp1_str;
						}
						showSysMsg(msg, title, null, {closable: true, delay: 15000, bodyStyle: 'text-align:left; margin-left:7px; padding: 0px 0px 20px 20px;background:transparent'});
					}
				}
			},
			url: '/?c=PersonDisp&m=getPersonDispSignalViewData'
		});
	},
	/**
	 * проверка на вхождение в регистры по психиатрии и наркологии
	 */
	checkDriverRegistry: function() {
		var win = this;
		if (this.isMseDepers) return false;
		
		Ext.Ajax.request({
			failure: function(response, options) {
				showSysMsg('При загрузке информации возникли ошибки');
			},
			params: {
				Person_id: win.getPersonId()
			},
			success: function(response, options) {
				if ( response.responseText ) {
					var result  = Ext.util.JSON.decode(response.responseText);
					if ( result && result.message ) {
						showSysMsg(result.message, 'Внимание', 'warning', {closable: true, delay: 15000, bodyStyle: 'text-align:left; margin-left:7px; padding: 0px 0px 20px 20px; background:transparent; color: #900;'});
					}
				}
			},
			url: '/?c=EvnPLDispDriver&m=getRegistryInfo'
		});
	},
	/**
	 * загрузка чекбоксов для освидетельствования водителей
	 */
	loadEvnPLDispDriverCB: function(id, itemSectionCode) {
		var win = this,
			sectionData = this.getObjectData(itemSectionCode, id);
		
		if(sectionData.DriverCategory && sectionData.DriverCategory.length > 0) {
			win.DriverCategoryCB = new Ext.form.CheckboxGroup({
				xtype: 'checkboxgroup',
				renderTo: 'EvnPLDispDriver_data_'+id+'_DriverCategory',
				hidden: false,
				hideLabel: true,
				vertical: true,
				allowBlank:true,
				columns: 4,
				width: 400,	
				items: sectionData.DriverCategory,
				listeners:{
					'change':function(){
						win.saveEvnPLDispDriverCB(id, 'DriverCategory', this.getValue());
					},
					'render':function() {
						this.items.each(function(item){
							if (item.value.inlist([3,4,5,6,7,8,9,13,14,15,16])) {
								item.disable();
							}
						});
					}
				},
				getValue: function() {
					var out = [];
					this.items.each(function(item){
						if(item.checked){
							out.push(item.value);
						}
					});
					return out.join(',');
				}
			});
		}
		
		if(sectionData.DriverMedicalClose && sectionData.DriverMedicalClose.length > 0) {
			win.DriverMedicalCloseCB = new Ext.form.CheckboxGroup({
				xtype: 'checkboxgroup',
				renderTo: 'EvnPLDispDriver_data_'+id+'_DriverMedicalClose',
				hidden: false,
				hideLabel: true,
				vertical: true,
				allowBlank:true,
				columns: 1,
				width: 650,	
				items: sectionData.DriverMedicalClose,
				listeners:{
					'change':function(){
						win.saveEvnPLDispDriverCB(id, 'DriverMedicalClose', this.getValue());
					}
				},
				getValue: function() {
					var out = [];
					this.items.each(function(item){
						if(item.checked){
							out.push(item.value);
						}
					});
					return out.join(',');
				}
			});
		}
		
		if(sectionData.DriverMedicalIndication && sectionData.DriverMedicalIndication.length > 0) {
			win.DriverMedicalIndicationCB = new Ext.form.CheckboxGroup({
				xtype: 'checkboxgroup',
				renderTo: 'EvnPLDispDriver_data_'+id+'_DriverMedicalIndication',
				hidden: false,
				hideLabel: true,
				vertical: true,
				allowBlank:true,
				columns: 1,
				width: 650,	
				items: sectionData.DriverMedicalIndication,
				listeners:{
					'change':function(){
						win.saveEvnPLDispDriverCB(id, 'DriverMedicalIndication', this.getValue());
					}
				},
				getValue: function() {
					var out = [];
					this.items.each(function(item){
						if(item.checked){
							out.push(item.value);
						}
					});
					return out.join(',');
				}
			});
		}
		
		if (sectionData.ResultDispDriver_id != 1) {
			win.DriverCategoryCB.disable();
			win.DriverMedicalCloseCB.disable();
			win.DriverMedicalIndicationCB.disable();
		}
		
	},
	fireDigitalTicketComplete: function(type, completeObject){

		var form = this,
			evn_data = form.getObjectData(completeObject.section_code, completeObject.id);

		form.finishElectronicTalon(type, evn_data.ElectronicTalon_id, false, completeObject.id);
	},
	saveDopDispInfoConsentList: function(obj_id, saveData) {

		var form = this,
			d = { object_id: obj_id };

		// собираем все галки из DopDispInfoConsentList_{EvnPLDisp_id}
		var section = 'DopDispInfoConsentList_' + d.object_id;
		var parent_object = Ext.get(section).getAttribute('parent_object');
		var evn_data = form.getObjectData(parent_object, d.object_id);

		var DopDispInfoConsentData = new Array();

		Ext.get(section).query('.list-item').forEach(function(rec) {
			if (Ext.get(rec) && rec.getAttribute('ddic_id')) {
				var record = Ext.get(rec);

				DopDispInfoConsentData.push({
					DopDispInfoConsent_id: rec.getAttribute('ddic_id'),
					SurveyTypeLink_id: rec.getAttribute('stl_id'),
					DopDispInfoConsent_IsEarlier: record.query('.ddic_isearlier')[0].checked,
					DopDispInfoConsent_IsAgree: record.query('.ddic_isagree')[0].checked
				});
			}
		});

		if (parent_object == 'EvnPLDispDriver') {
			// отказов быть не должно
			var IsOtkaz = false;
			DopDispInfoConsentData.forEach(function(item){
				if (item.DopDispInfoConsent_IsAgree != true && item.DopDispInfoConsent_IsEarlier != true) {
					IsOtkaz = true;
				}
			});

			if (IsOtkaz) {
				if (getRegionNick() == 'perm') {
					sw.swMsg.alert(langs('Ошибка'), 'Должно быть заполнено согласие на все обязательные осмотры и исследования не пройденные ранее');
				} else {
					sw.swMsg.alert(langs('Ошибка'), 'Должно быть заполнено согласие на все обязательные осмотры и исследования');
				}

				return false;
			}
		}

		// сохраняем
		form.getLoadMask('Сохранение добровольного информированного согласия').show();
		Ext.Ajax.request({
			url: '/?c=EvnPLDisp&m=updateDopDispInfoConsent',
			params: {
				EvnPLDisp_id: d.object_id,
				DopDispInfoConsentData: Ext.util.JSON.encode(DopDispInfoConsentData) // Данные грида по информир. добр. согласию
			},
			failure: function(response, options) {

				form.getLoadMask().hide();
			},
			success: function(response, action) {

				form.getLoadMask().hide();
				if (response.responseText) {

					var answer = Ext.util.JSON.decode(response.responseText);

					if (answer.success) {

						// всё чётко, обновляем списки услуг/осмотров
						if (parent_object == 'EvnPLDispOrp') {

							// Обновляем осмотры
							var reload_params = {
								section_code: 'EvnVizitDispOrp',
								object_key: 'EvnVizitDispOrp_id',
								object_value: 111222333,
								parent_object: parent_object,
								parent_object_key: 'EvnPLDisp_id',
								parent_object_value: d.object_id,
								section_id: 'EvnVizitDispOrpList_' + d.object_id
							};

							form.reloadViewForm(reload_params);

							// Обновляем услуги
							var reload_params = {
								section_code: 'EvnUslugaDispOrp',
								object_key: 'EvnUslugaDispOrp_id',
								object_value: 111222333,
								parent_object: parent_object,
								parent_object_key: 'EvnPLDisp_id',
								parent_object_value: d.object_id,
								section_id: 'EvnUslugaDispOrpList_' + d.object_id
							};

							form.reloadViewForm(reload_params);

						} else if (parent_object == 'EvnPLDispDriver') {

							var reload_params = {
								section_code: 'EvnPLDispDriver',
								object_key: 'EvnPLDispDriver_id',
								object_value: d.object_id,
								section_id: 'EvnPLDispDriver_'+ d.object_id
							};

							if (
								!Ext.isEmpty(evn_data.ElectronicTalon_id) &&
								form.userMedStaffFact.ARMType == 'paidservice' &&
								evn_data.ElectronicQueueInfo_IsOff == 1 &&
								evn_data.ElectronicTalonStatus_id == 3 &&
								evn_data.ElectronicService_id == form.userMedStaffFact.ElectronicService_id
							) 	{
									// если мы нажали кнопку "Завершить прием" то мессадж не показываем
									if (saveData && saveData.chainedSave) {

										// в кэллбэке завершаем прием
										if (saveData.callback) { saveData.callback.call(); }
										else { form.reloadViewForm(reload_params); }

									} else {

										Ext.Msg.show({
											title: 'Завершение приема',
											msg: 'Завершить прием пациента?',
											buttons: {
												yes: "Завершить прием",
												no: "Завершить прием и вызвать следующего",
												cancel: "Отмена"
											},
											fn: function (btn) {
												if (btn == 'yes') {
													form.finishElectronicTalon('paid', evn_data.ElectronicTalon_id, false);
												} else if (btn == 'no') {
													form.finishElectronicTalon('paid', evn_data.ElectronicTalon_id, true);
												} else if (btn == 'cancel') {
													form.reloadViewForm(reload_params);
												}
											}
										});
									}

								} else {
									form.reloadViewForm(reload_params);
								}

						} else if (parent_object == 'EvnPLDispTeenInspection') {

							//

						} else {
							// Обновляем услуги
							var reload_params = {
								section_code: 'EvnUslugaDispDop',
								object_key: 'EvnUslugaDispDop_id',
								object_value: 111222333,
								parent_object: parent_object,
								parent_object_key: 'EvnPLDisp_id',
								parent_object_value: d.object_id,
								section_id: 'EvnUslugaDispDopList_' + d.object_id
							};
							form.reloadViewForm(reload_params);
						}
					}
				}
			}
		});
	},
	saveEvnPLDispDriverCB: function(id, type, data) {
		var win = this;
		win.loadMask = win.getLoadMask('Сохранение');
		win.loadMask.show();
		Ext.Ajax.request({
			failure: function(response, options) {
				win.loadMask.hide();
				showSysMsg('При загрузке информации возникли ошибки');
			},
			params: {
				EvnPLDispDriver_id: id,
				type: type,
				data: data
			},
			success: function(response, options) {
				win.loadMask.hide();
				
				var data = Ext.util.JSON.decode(response.responseText);
				if (data.success == false) {
					// если произошла ошибка при сохранении, перезагрузим данные с сервера
					var reload_params = {
						section_code: 'EvnPLDispDriver',
						object_key: 'EvnPLDispDriver_id',
						object_value: id,
						section_id: 'EvnPLDispDriver_'+ id
					};
					win.reloadViewForm(reload_params);
				}
			},
			url: '/?c=EvnPLDispDriver&m=saveCB'
		});
		
	},
	/**
     * Загрузка дерева при изменении параметров:
	 * - Тип группировки (toggleGroupType)
	 * - Период
	 * - Врач, Отделение
	 * Используется при открытии окна, при toggleARMType не при открытии окна, 
	 * в операции "Показать случаи лечения с этим диагнозом",
	 * при toggleArchiveRecords
	 */
	loadTree: function (type, callback)
	{
		var me = this;
		if (me.processLoad) {
			return false;
		}
		if (type != undefined) {
			me.Tree.getLoader().baseParams.type = type;
		}
		if (typeof callback != 'function') {
			callback = Ext.emptyFn;
		}
		me.showArchive = false;
		me.tree_was_loaded = false;
        me.Tree.getRootNode().select();
		var node = me.Tree.getRootNode();
		if (node) {
			me.processLoad = true;
			node.collapse();
			me.Tree.getLoader().load(node,function(tl,n){
				me.processLoad = false;
				callback(tl,n);
			});
			node.expand();
		}
        return true;
	},
	/** 
	 * Перезагрузка всего дерева c восстановлением выделения и раскрытия подуровней дерева
	 * Может быть вызвана только при условии отсутствия изменений параметров
	 */
	reloadTree: function(conf) {
		this.showArchive = false;

		if (!conf)
			conf = {};
		if(this.processLoad){
			return false;
		}
		
		var root = this.Tree.getRootNode();
		if(root)
		{
			this.expandedNodes = {};
			//дерево отображать как при открытии формы ЭМК (случаи свернуты и курсор на сигнальной информации)
			if(conf.reset && root.id == 'root' && this.ARMType.inlist(['common','stac']) && root.firstChild) {
				this.tree_was_loaded = false;
				root.firstChild.select();
			} else {
				this.saveListExpandedNodes(root);
			}

			this.savePosition();
			this.processLoad = true;
			if (typeof conf.callback != 'function')
			{
				conf.callback = Ext.emptyFn;
			}

			this.Tree.getLoader().load(root,function(tl,n){
				this.processLoad = false;
				this.restorePosition({callback: conf.callback});
			}.createDelegate(this));
			root.expand();
		}
	},
	/**
     * Загрузка и раскрытие указанной ветки дерева.
	 * Используется после изменения данных
	 * Принимает параметры:
	 * node или id
	 * callback
	 * selectById По умолчанию после загрузки выделяется указанная ветка
	 */
	loadTreeNode: function (conf)
	{	
		//
		log('loadTreeNode', this.processLoad, conf); 
		if (this.processLoad){
			return false;
		}
		var me = this;
		if (typeof conf.callback != 'function') {
			conf.callback = Ext.emptyFn;
		}
		var node = null;
		if (conf.node) {
			node = conf.node;
		}
		if (conf.id) {
			node = me.Tree.getNodeById(conf.id);
		}
		if (!node) {
			node = me.Tree.getRootNode();
		}
		me.processLoad = true;
		if (node.id == 'root') {
			me.tree_was_loaded = true;
		}
		node.collapse();
		if (node.loaded) {		
			me.Tree.getLoader().load(node, function(tl,n){
				//
				log('load', n); 
				me.processLoad = false;
				var selNode = n;
				if (conf.selectById) {
					selNode = me.Tree.getNodeById(conf.selectById);
				}
				if (selNode) {
					selNode.select();
				}
				n.expand();
				conf.callback(me.Tree.getLoader(), n);
			});
		} else {
			node.expand(false, false, function(n){
				//
				log('expand', n); 
				me.processLoad = false;
				var selNode = n;
				if (conf.selectById) {
					selNode = me.Tree.getNodeById(conf.selectById);
				}
				if (selNode) {
					selNode.select();
				}
				conf.callback(me.Tree.getLoader(), n);
			});
		}
        return true;
	},
	openTimetable: function(top_timetable_params) {
		if (!top_timetable_params.TimetableObject_id)
		{
			sw.swMsg.alert(langs('Ошибка'), langs('Отсутствуют необходимые параметры для открытия расписания!'));
			return false;
		}
		var node = this.Tree.getSelectionModel().selNode;
		if (!node || 'EvnVizitPL' != node.attributes.object)
		{
			sw.swMsg.alert(langs('Выберите посещение'), this.notSelectEvnVizitMsg);
			return false;
		}
		var params = {
			Diag_id: node.attributes.Diag_id,
			UserMedStaffFact_id: this.userMedStaffFact.MedStaffFact_id,
			formMode:'top_timetable',
			top_timetable_params: top_timetable_params ,
			fromEmk:true
		};
		this.openForm('swMPRecordWindow','EvnDirection_pid',params);
	},
	getTopTimetable: function(btn) {
		var cur_wnd = this;
		var loadMask = new Ext.LoadMask(this.getEl(), {msg: "Загрузка списка часто используемых расписаний..."});
		loadMask.show();
		Ext.Ajax.request({
			failure: function(response, options) {
				loadMask.hide();
				sw.swMsg.alert(langs('Ошибка'), langs('При загрузке списка часто используемых расписаний возникли ошибки'));
			},
			params: {},
			success: function(response, options) {
				loadMask.hide();
				if ( response.responseText )
				{
					result  = Ext.util.JSON.decode(response.responseText);
					if ( result.success && result.data)
					{
						var TopTimetableContextMenu = new Ext.menu.Menu();
						for (i=0; i < result.data.length; i++)
						{
							TopTimetableContextMenu.add(new Ext.Action({
								name: result.data[i].TimetableCount_id,
								//text: result.data[i].caption + ' (' + result.data[i].TimetableCount_Count + ')',
								text: '<B>' + result.data[i].caption + '</B>',
								tooltip: result.data[i].caption,
								params: result.data[i],
								iconCls : 'eph-record16',
								handler: function() {
									var params = {
										personData: {
											PersonEvn_id	:		cur_wnd.PersonEvn_id,
											Person_Birthday	:		cur_wnd.Person_Birthday,
											Person_Firname	:		cur_wnd.Person_Firname,
											Person_Secname	:		cur_wnd.Person_Secname,
											Person_Surname	:		cur_wnd.Person_Surname,
											Person_id		:		cur_wnd.Person_id,
											Server_id		:		cur_wnd.Server_id,
										},
										userMedStaffFact: cur_wnd.userMedStaffFact
									};
									getWnd('swDirectionMasterWindow').show(params);
//									cur_wnd.openTimetable(this.params);
								}
							}));
						}
						TopTimetableContextMenu.showAt(btn.getEl().getXY());
					}
					else
						sw.swMsg.alert(langs('Ошибка'), langs('При загрузке списка часто используемых расписаний возникли ошибки'));
				}
			},
			url: '/?c=TimetableGraf&m=getTopTimetable'
		});
	},
	/** Сохраняет данные о позиции фокуса (выделенной ноды) перед перезагрузкой:
	*/
	savePosition: function()
	{
		this.position = null;
		var savePathToSelNode = function (node){
			if (node)
			{
				if( !Ext.isArray(this.position) )
					this.position = [];
				this.position.push(node.attributes.id);
				savePathToSelNode(node.parentNode);
			}
		}.createDelegate(this);
		
		var selNode = this.Tree.getSelectionModel().selNode;
		savePathToSelNode(selNode);
	},
	/** private
	*/
	restoreExpand: function(node)
	{
		if(node && this.expandedNodes[node.attributes.id]) {
			var list_arr = this.expandedNodes[node.attributes.id];
			var enode;
			for(var i=0;i<list_arr.length;i++){
				enode = this.Tree.getNodeById(list_arr[i]);
				if(enode && !enode.isExpanded() )
					enode.expand();
				this.restoreExpand(enode);
			}
		}
	},
	/** Восстанавливает фокус (выделение ноды) после перезагрузки дерева:
	*/
	restorePosition: function(options)
	{
		var selNode = function (node){
			if(node) {
				this.Tree.getSelectionModel().select(node); 
				this.Tree.fireEvent('select', node);
				if(typeof options.callback == 'function') {
					options.callback(this.Tree.getLoader(),this.Tree.getSelectionModel().selNode);
				}
			}
		}.createDelegate(this);

		var searchSelNode = function(i){
			var pnode;
			var node;
			var is_last = (this.position.length == (i + 1));
			//log(is_last);
			if(this.position[i-1] && this.position[i])
			{
				pnode = this.Tree.getNodeById(this.position[i-1]);
				//log('parent_node');
				//log(pnode);
				if (pnode)
				{
					if( !pnode.isExpanded() )
					{
						pnode.expand(false,false,function(n){
							node = n.findChild('id', this.position[i]);
							//log('parent_node not Expanded');
							//log(node);
							if(node){
								if(is_last)
									selNode(node);
								else
									searchSelNode(i + 1);
							} else if(is_last) {
								// нода не найдена, возможно, из-за того, что запись удалена
								selNode(pnode);
							}
							if(i==2)
								//так правильнее но не по ТЗ this.restoreExpand(pnode);
								this.restoreExpand(this.Tree.getRootNode());
						}.createDelegate(this));
					}
					else
					{
						node = pnode.findChild('id', this.position[i]);
						//log('parent_node Expanded');
						//log(node);
						if(node){
							if(is_last)
								selNode(node);
							else
								searchSelNode(i + 1);
						} else if(is_last) {
							// нода не найдена, возможно, из-за того, что запись удалена
							selNode(pnode);
						}
						if(i==2)
							//так правильнее но не по ТЗ this.restoreExpand(pnode);
							this.restoreExpand(this.Tree.getRootNode());
					}
				} else {
					if (typeof options.callback == 'function') {
						options.callback(this.Tree.getLoader(), null);
					}
				}
			}
		}.createDelegate(this);
		
		var node;
		if (Ext.isArray(this.position))
		{
			node = this.Tree.getNodeById(this.position[0]);
			if (node)
			{
				selNode(node);
				this.restoreExpand(this.Tree.getRootNode());
				/*
				так правильнее но не по ТЗ
				if(node.parentNode){
					this.restoreExpand(node.parentNode);
				} else {
					this.restoreExpand(node);
				}*/
			}
			else
			{ // была выделена нода 2-го уровня или ниже
				this.position.reverse();
				// 0 root
				// 1 1-й уровень
				// 2 2-й уровень и т.д.
				//log(this.position);
				searchSelNode(2);
			}
		}
	},
	/**
	* Store состояния фильтров дерева ЭМК
	*/
	filterStateStore: new Ext.data.SimpleStore(
	{
		key: 'filterState_id',
		autoLoad: true,
		fields:
		[
			{name:'filterState_id', type:'int'},
			//{name:'level', type:'int'},
			//{name:'object', type:'string'},
			//{name:'object_id', type:'string'},
			{name:'Person_id', type:'int'},
			{name:'ARMType', type:'string'},
			{name:'Diag_id', type:'int'},
			{name:'MedStaffFact_id', type:'int'},
			{name:'LpuSection_id', type:'int'},
			{name:'type', type:'int'}, // тип группировки
			{name:'EvnDate_Range', type:'string'} //период
		],
		last_record_id: null,
		addFilterState: function(filterState_id, tr_params)
		{
			var new_data = {
					filterState_id: filterState_id,
					Person_id: tr_params.Person_id,
					ARMType: tr_params.ARMType,
					Diag_id: tr_params.Diag_id,
					MedStaffFact_id: tr_params.MedStaffFact_id,
					LpuSection_id: tr_params.LpuSection_id,
					type: tr_params.type,
					EvnDate_Range: tr_params.EvnDate_Range
				},
				record = new Ext.data.Record(new_data);
			if(record)
			{
				this.add(record);
				this.last_record_id = record.id;
				return true;
			}
			return false;
		},
		isChangeFilters: function(tr_params,record_id)
		{
			var record = this.getById(record_id),
				is_change = false;
			//log(tr_params);
			//log(record.data);
			for(filter in record.data)
			{
				if (filter.inlist(['filterState_id'])) continue;
				if (typeof(tr_params[filter]).inlist(['number','string']) && tr_params[filter] != record.data[filter])
				{
					is_change = true;
					break;
				}
			}
			return is_change;
		},
		data : []
	}),
	current_filterStateRecord_id: null,
	saveFiltersState: function()
	{
		var count_record = this.filterStateStore.getCount(),
			filterState_id = count_record + 1,
			tr_params = this.Tree.getLoader().baseParams;
		if (count_record > 0)
		{
			// При изменении фильтров, после загрузки дерева необходимо запомнить состояние дерева
			if (this.filterStateStore.isChangeFilters(tr_params,this.current_filterStateRecord_id))
			{
				if (this.filterStateStore.addFilterState(filterState_id,tr_params))
				{
					this.current_filterStateRecord_id = this.filterStateStore.last_record_id;
					Ext.getCmp('PEMK_goHomeBtn').enable();
					return true;
				}
			}
			return false;
		}
		else
		{
			//Необходимо запомнить первичное состояние фильтров после первой загрузки дерева
			if (this.filterStateStore.addFilterState(filterState_id,tr_params))
			{
				this.current_filterStateRecord_id = this.filterStateStore.last_record_id;
				
				// log(this.filterStateStore);
				return true;
			}
			return false;
		}
	},
	/**
	* Store состояния панели просмотра ЭМК
	*/
	formViewStateStore: new Ext.data.SimpleStore(
	{
		key: 'formViewState_id',
		autoLoad: true,
		fields:
		[
			{name:'formViewState_id', type:'int'},
			{name:'filterStateRecord_id', type:'int'},
			{name:'node_id', type:'string'},
			{name:'node_path', type:'string'}
		],
		last_record_id: null,
		addFormViewState: function(id, fid, node)
		{
			var new_data = {
					formViewState_id: id,
					filterStateRecord_id: fid,
					node_id: node.id,
					node_path: this.joinNodeParent(node)
				},
				record = new Ext.data.Record(new_data);
			if(record)
			{
				this.add(record);
				this.last_record_id = record.id;
				return true;
			}
			return false;
		},
		arr_sep: ',',
		node_par_id_arr: [],
		getArrayNodeParentId: function(node)
		{
			if(node.parentNode)
			{
				//log(node.parentNode);
				this.node_par_id_arr.push(node.parentNode.id);
				return this.getArrayNodeParentId(node.parentNode);
			}
			else
			{
				return this.node_par_id_arr;
			}
		},
		joinNodeParent: function(node)
		{
			this.node_par_id_arr = [];
			this.node_par_id_arr = this.getArrayNodeParentId(node);//.reverse()
			return this.node_par_id_arr.join(this.arr_sep);
		},
		isChangeFormView: function(node,record_id)
		{
			var record = this.getById(record_id),
				is_change = (node.id != record.data.node_id);
			return is_change;
		},
		getNextRecord: function(record_id)
		{
			var i_record = this.indexOfId(record_id),//indexOf(this.getById(record_id))
				i_next_record = (i_record < 0)?(-1):(i_record + 1),
				next_record = false;
			if(i_next_record != -1)
			{
				next_record = this.getAt(i_next_record);
			}
			return next_record;
		},
		getPreviousRecord: function(record_id)
		{
			var i_record = this.indexOfId(record_id),//indexOf(this.getById(record_id))
				i_prev_record = (i_record < 0)?(-1):(i_record - 1),
				prev_record = false;
			if(i_prev_record != -1)
			{
				prev_record = this.getAt(i_prev_record);
			}
			return prev_record;
		},
		data : []
	}),
	current_formViewStateRecord_id: null,
	saveFormViewState: function(view_node)
	{
		//log('saveFormViewState: onload view by node');
		//log(view_node);
		var count_record = this.formViewStateStore.getCount(),
			formViewState_id = count_record + 1,
			filterStateRecord_id = this.filterStateStore.last_record_id;
		if (count_record > 0)
		{
			if (this.formViewStateStore.isChangeFormView(view_node,this.current_formViewStateRecord_id))
			{
				if (this.formViewStateStore.addFormViewState(formViewState_id,filterStateRecord_id,view_node))
				{
					this.current_formViewStateRecord_id = this.formViewStateStore.last_record_id;
					Ext.getCmp('PEMK_goHomeBtn').enable();
					Ext.getCmp('PEMK_gobackwardBtn').enable();
					return true;
				}
			}
		}
		else
		{
			//состояние после первой загрузки панели просмотра
			if (this.formViewStateStore.addFormViewState(formViewState_id,filterStateRecord_id,view_node))
			{
				this.current_formViewStateRecord_id = this.formViewStateStore.last_record_id;
				//
				// log(this.formViewStateStore);
				return true;
			}
		}
		return false;
	},
	clearStateStore: function()
	{
		this.current_filterStateRecord_id = null;
		this.filterStateStore.removeAll();
		this.current_formViewStateRecord_id = null;
		this.formViewStateStore.removeAll();
		Ext.getCmp('PEMK_goHomeBtn').disable();
		Ext.getCmp('PEMK_gobackwardBtn').disable();
		Ext.getCmp('PEMK_goforwardBtn').disable();
	},
	goHome: function()
	{
		var me = this,
			yes_handler = function() { 
				me.goHome();
			};
        if (this.data && !this.checkChange(this.data.Code, this.data.key, this.data.id, yes_handler)) {
            return false;
        }
		var first_fs_record = this.filterStateStore.getAt(0);
		if (first_fs_record && first_fs_record.data) {
			Ext.getCmp('EvnDate_Range').setValue(first_fs_record.data.EvnDate_Range);
			Ext.getCmp('PEMK_MedStaffFactCombo').setValue(first_fs_record.data.MedStaffFact_id);
			Ext.getCmp('PEMK_LpuSectionCombo').setValue(first_fs_record.data.LpuSection_id);
			this.Tree.getLoader().baseParams.Diag_id = 0;
			var type = first_fs_record.data.type;
			this.clearStateStore();
			this.toggleGroupType(Ext.getCmp('PEMK_GroupTypeToogle'), (type == 0));
            return true;
		}
        return false;
	},
	setFilterState: function(filterStateRecord_id, callback)
	{
		// log('setFilterState');
		// log(filterStateRecord_id);
		var record = this.filterStateStore.getById(filterStateRecord_id);
		// log(record); //undefined !!!
		if (record && record.data)
		{
			Ext.getCmp('EvnDate_Range').setValue(record.data.EvnDate_Range);
			Ext.getCmp('PEMK_MedStaffFactCombo').setValue(record.data.MedStaffFact_id);
			Ext.getCmp('PEMK_LpuSectionCombo').setValue(record.data.LpuSection_id);
			this.Tree.getLoader().baseParams.Diag_id = record.data.Diag_id;
			this.Tree.getLoader().baseParams.type = record.data.type;
			this.current_filterStateRecord_id = record.id;
			// перезагружаем дерево с новыми фильтрами
			var root = this.Tree.getRootNode();
			// log(root);
			this.Tree.getLoader().load(root, callback);
			root.expand();
			//root.select();
			//this.Tree.fireEvent('click', root);
		}
	},
	setViewState: function(params)
	{
		//log('setViewState');
		//log(params);
		var node_par_id_arr = params.state.node_path.split(this.formViewStateStore.arr_sep),
			node = this.Tree.getNodeById(params.state.node_id),
			parent_node_id;
		if(node)
		{
			this.loadNodeViewForm(node);
			this.current_formViewStateRecord_id = params.state_id;
			//this.current_filterStateRecord_id = params.state.filterStateRecord_id;
			params.callback();
		}
		else
		{
			parent_node_id = node_par_id_arr.shift();
			if ('root' != parent_node_id)
			{
				this.loadParentNode(parent_node_id,node_par_id_arr, params)
			}
		// если узел не загружен (после перезагрузки дерева), то нужно загрузить родительный узел и потом пропробовать снова setViewState
		// если и родительный узел не загружен,
		//		то загружаем род.узел род.узла, потом загружаем род.узел, и пробуем получить ноду...
		//		 если и род.узел род.узла не загружен,
		//				то загружаем род.узел род.узел род.узла, потом загружаем род.узел род.узла, потом загружаем род.узел, и пробуем получить ноду...
		}
	},
	loadParentNode: function(node_id,node_par_id_arr, params)
	{
		// log('loadParentNode');
		// log(node_id);
		// log(node_par_id_arr);
		// log(params);
		if (!node_id) return false;
		var node = this.Tree.getNodeById(node_id),
			parent_node_id,
			parent_node,
			form = this;
		// log(node);
		if (node)
		{
			/*
			this.Tree.getLoader().load(node, function(){form.setViewState(params);});
			node.expand();
			*/
			if (!node.isExpanded())
			{
				node.expand(false,false,function(){form.setViewState(params);});
			}
		}
		/*else .isExpanded()
		{
			parent_node_id = node_par_id_arr.shift();
			parent_node = this.Tree.getNodeById(parent_node_id);
			if(parent_node)
			{
				this.Tree.getLoader().load(parent_node, function(){
					form.loadParentNode(node_id,node_par_id_arr, params);
				});
				parent_node.expand();
			}
			//this.loadParentNode(parent_node_id,node_par_id_arr, params)
		}*/
	},
			/*
		else
		{
			pnode_id = node_par_id_arr.shift();
			pnode
			return getViewNode(pnode_id,node_par_id_arr);
			return false;
		}
		return false;
			*/
	gobackward: function()
	{
		var form = this,
			yes_handler = function() { 
				form.gobackward();
			};
        if (this.data && !this.checkChange(this.data.Code, this.data.key, this.data.id, yes_handler)) {
            return false;
        }
		var record = this.formViewStateStore.getPreviousRecord(this.current_formViewStateRecord_id);
		if (record && record.data) {
			var params = {
				state_id: record.id,
				state: record.data,
				callback: function(){
					Ext.getCmp('PEMK_goforwardBtn').enable();
					//Если имеется ещё предыдущее состояние, то разрешить кнопку назад, иначе запретить
					var record = form.formViewStateStore.getPreviousRecord(form.current_formViewStateRecord_id);
					var prev_btn = Ext.getCmp('PEMK_gobackwardBtn');
					(record)?prev_btn.enable():prev_btn.disable();
				}
			};
			if (record.data.filterStateRecord_id != this.current_filterStateRecord_id) {
				this.setFilterState(record.data.filterStateRecord_id, function(){form.setViewState(params);});
			} else {
				this.setViewState(params);
			}
            return true;
		}
        return false;
	},
	changeCountPrint:function(){
		var cnt = 0
		var fields = Ext.DomQuery.select('.checkPrint');
		for(var x =0;x<fields.length;x++){if(fields[x].checked)cnt++;}
		Ext.get('cntPrint').dom.innerHTML =langs('Выбрано документов:')+cnt;
	},
	checkAll:function(field,type){
			var fields = Ext.DomQuery.select('.'+type);
			var isCheck = field.checked;
			for(var x =0;x<fields.length;x++){
				if(fields[x].attributes.pid.value==field.value){
					fields[x].checked=isCheck;
				}
			}
		this.changeCountPrint();
	},
	kzCheckbox: function(str,id, check = false){
		var form = this;
		var isPaidVisit = Ext.get('isPaidVisit');

		var tct = Ext.get(str);

		var oldValue = tct.dom.innerHTML;
		var oldValueId = tct.getAttribute('dataid');
		var newValue = tct.dom.innerHTML;
		var newValueId = tct.getAttribute('dataid');

		if (check && isPaidVisit.getAttribute('checked')){
			newValue = 'Платные';
			newValueId = 153;
		} else if (check) {
			form.getFinanceSource(str.split('_')[0],id);
			return;
		}
		tct.update(newValue);
		tct.setAttribute('dataid', newValueId);

		this.requestSaveWithShowInfoMsg(
			'/?c=EvnVizit&m=setEvnVizitParameter',
			{
				object: "EvnVizit",
				id: id,
				param_name: "PayType_id",
				param_value: newValueId,
				options: '{"isEmk":true}'
			},
			function(response_obj) {
				if ( response_obj.success ) {
					var record = form.viewFormDataStore.getById('EvnVizitPL_' + id);
					if (record) {
						record.set('PayType_id', newValueId);
						form.viewFormDataStore.commitChanges();
					}
					form.isFirstAdminCheck = false;
					form.requireCheckChange = true;
				} else {
					tct.update(oldValue);
					tct.setAttribute('dataid', oldValueId);
				}
			},
			form,
			Ext.emptyFn,
			Ext.emptyFn
		);
	},
	printAll:function(){
		var elements = new Array();
		var params ={};
		var fields = Ext.DomQuery.select('.checkPrint');
		var onePage = !Ext.get('printOtherPage').dom.checked;
		var isPrint = false;
		for(var x =0;x<fields.length;x++){
			if(fields[x].checked){
				isPrint = true
				elements.push({
					type:fields[x].attributes.print.value,
					id:fields[x].value
				});

				//PROMEDWEB-6833
				//Печать протоколов для оперативных слуг
				if (getRegionNick() == 'msk' && fields[x].attributes.operprotocol) {
					elements.push({
						type:"EvnXml",
						id:fields[x].attributes.operprotocol.value
					});
				}
			}
		}
		if(isPrint){
			params.PrintArr = Ext.util.JSON.encode(elements);
			params.onePage = onePage;
			params.Person_id = this.getPersonId();
			//this.openPrintDoc('/?c=Common&m=printAll' );
			Ext.Ajax.request({
				url: '/?c=Common&m=printAll',
				params: params,
				callback: function(options, success, response) {
					if ( success ) {
						var data = Ext.util.JSON.decode(response.responseText)
						window.open('/'+data.path, '_blank');
					}
				}.createDelegate(this)
			});
		}else{
			sw.swMsg.alert('Сообщение',"Документы на печать не выбраны");
		}
	},
	setHeightViewPanel:function(){
		var rP = Ext.get('rightEmkPanel');
		var vP = rP.first();
		if(vP.id=='printPanel'){
			vP=vP.next().child('div');
			var h = vP.getHeight();
			vP.setHeight(h-50);
		}else{
			vP=vP.child('div');
			var h = vP.getHeight();
			vP.setHeight(h+50);
		}
	},
	getPrintPanel:function(){
		var pP = this.printPanel;
		var rP = Ext.get('rightEmkPanel');
		if(this.groupPrint){
			if (Ext.get('printPanel')!=null) {
				pP.getEl().remove();
				Ext.select('.vPrint').addClass('vPrint-none');
			} else {
				pP.render(rP);
				rP.insertFirst(pP.getEl());
				Ext.select('.vPrint').removeClass('vPrint-none');
				this.changeCountPrint();
				Ext.getCmp('printOtherPage').setValue(false);
				Ext.getCmp('printCheckAll').setValue(false)
			}
			this.setHeightViewPanel();
		}
    },
    openEvnUslugaTelemedEditWindow: function(action, el_data)
    {
		if (action == 'edit') {
			var form = this,
				form_title,
				params = {EvnUslugaTelemed_id: el_data.object_id},
				formParams = form.getObjectData('EvnUslugaTelemed',el_data.object_id),
				callback = function(data)
				{
					var reload_params = {
						section_code: 'EvnUslugaTelemed',
						object_key: 'EvnUslugaTelemed_id',
						object_value: el_data.object_id,
						section_id: 'EvnUslugaTelemed_'+ el_data.object_id
					};
					var node_eut = form.Tree.getNodeById(form.data.Code +'_'+ form.data.id);
					form.loadTreeNode({
						node: node_eut.parentNode,
						selectById: node_eut.id,
						callback: function(tl,n){
							form.reloadViewForm(reload_params);
						}
					});
				};
			if (formParams == false)
			{
				return false;
			}
			form_title = langs('Параклиническая услуга: Редактирование');
			params.onSaveUsluga = callback;
			params.formParams  = formParams;
			params.onHide = Ext.emptyFn;
			form.openForm('swEvnUslugaTelemedEditWindow', 'XXX_id', params ,action, form_title);
		} else if (typeof this.openEvnUslugaTelemedEditWindowHandler == 'function') {
			var win = this;
			if (!win.allowAddEvnUslugaTelemed) {
				return false;
			}
            this.openEvnUslugaTelemedEditWindowHandler(this, action, function(data) {
				if (data.EvnUslugaTelemed_id) {
					// задисаблить кнопку
					win.Actions.action_New_EvnUslugaTelemed.disable();
					win.allowAddEvnUslugaTelemed = false;
					// рефреш дерева					
					var parent_node_id = 'root';
					if (1 == win.Tree.getLoader().baseParams.type) {
						//@todo добавить при группировке по случаям
						parent_node_id = 'EvnUslugaTelemedList';
					}
					//win.requireCheckChange = false;
					win.loadTreeNode({
						id: parent_node_id,
						selectById: 'EvnUslugaTelemed_' + data.EvnUslugaTelemed_id,
						callback: function(tl,n){
							//win.loadNodeViewForm(win.Tree.getSelectionModel().selNode);
						}
					});
				}
			});
        } else if (action == 'editNoWork') {
			var form = this,
				form_title,
				params = {
					EvnUslugaTelemed_id: el_data.EvnUslugaTelemed_id,
					formParams: {
						EvnUslugaTelemed_id: el_data.EvnUslugaTelemed_id,
						Person_id: form.Person_id
					}
				};
			form_title = langs('Параклиническая услуга: Редактирование');
			params.onHide = Ext.emptyFn;
			form.openForm('swEvnUslugaTelemedEditWindow', 'XXX_id', params , 'edit', form_title);
		} else if (
			getRegionNick() == 'msk' &&
			!!el_data &&
			el_data.Org_IsNotForSystem == 2
		) {
			var form = this,
				wnd = getWnd('swEvnUslugaTelemedEditWindow'),
                params = {
                    action: 'add',
                    isNotForSystem: true,
                    formParams: {
                        EvnUslugaTelemed_id: null,
						PersonEvn_id: form.PersonEvn_id,
						Person_id: form.Person_id,
						Server_id: form.Server_id,
						EvnDirection_id: el_data.EvnDirection_id,
						Diag_id: el_data.Diag_id,
						Org_uid: el_data.Org_oid,
						UslugaComplex_id: el_data.UslugaComplex_did
                    },
                    callback: function(data) {
						form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
                    }
                };
				
            if (wnd.isVisible()) {
                return false;
            }
            wnd.show(params);
            return true;
		}
	},
	goforward: function()
	{
		var form = this,
			yes_handler = function() { 
				form.goforward();
			};
        if (this.data && !this.checkChange(this.data.Code, this.data.key, this.data.id, yes_handler)) {
            return false;
        }
		var record = this.formViewStateStore.getNextRecord(this.current_formViewStateRecord_id);
		if (record && record.data) {
			var params = {
				state_id: record.id,
				state: record.data,
				callback: function(){
					Ext.getCmp('PEMK_gobackwardBtn').enable();
					var record = form.formViewStateStore.getNextRecord(form.current_formViewStateRecord_id);
					var next_btn = Ext.getCmp('PEMK_goforwardBtn');
					(record)?next_btn.enable():next_btn.disable();
				}
			};
			if (record.data.filterStateRecord_id != this.current_filterStateRecord_id) {
				this.setFilterState(record.data.filterStateRecord_id, function(){form.setViewState(params);});
			} else {
				this.setViewState(params);
			}
            return true;
		}
        return false;
	},
	/**
	 * Открывает соответсвующую акшену форму 
	 * 
	 * @param {open_form} Название открываемой формы, такое же как название объекта формы
	 * @param {id} Наименование идентификатора таблицы, передаваемого в форму
	 */
	openForm: function (open_form, id, oparams, mode, title, callback)
	{
		// Для упрощения процесса ссылки на формы назовем также как и формы 
		// Получаем Id записи 
		// Открываем форму, если не открыта
		var win = this;

		// Проверка
		if (getWnd(open_form).isVisible())
		{
			if (open_form == 'swDirectionMasterWindow') {
				sw.swMsg.alert(langs('Сообщение'), langs('Форма ')+' '+ ((title)?title:open_form) +' '+langs(' в данный момент открыта.'));
			}
			//sw.swMsg.alert('Сообщение', 'Форма '+ ((title)?title:open_form) +' в данный момент открыта.');
			return false;
		}
		else
		{
            var object_value;
            if (!mode)
				mode = this.isReadOnly?'view':'edit';
			if (mode == 'edit' && this.isReadOnly)
				mode = 'view';
			if (mode.inlist(['view','edit']))
			{
				/*
				if (!this.Tree.getSelectionModel().selNode || this.Tree.getSelectionModel().selNode.attributes.object_id != id )
				{
					sw.swMsg.alert(langs('Сообщение'), langs('Вы не выбрали элемент дерева или задан неверный параметр ключа элемента!'));
					return false;
				}
				*/
                if (this.Tree.getSelectionModel().selNode) {
                    object_value = this.Tree.getSelectionModel().selNode.attributes.object_value;

					var pnode = this.Tree.getSelectionModel().selNode;
					var readOnlyNode = false;
					if ( getGlobalOptions().archive_database_enable ) {
						while(!Ext.isEmpty(pnode)) {
							if (pnode.attributes && pnode.attributes.archiveRecord) {
								readOnlyNode = true;
							}
							pnode = pnode.parentNode;
						}
					}

					if (readOnlyNode) {
						mode = 'view';
					}
                }
			}
			var params = {
				action: mode,
				onPersonChange: function(data) {
					var lastArguments = win.lastArguments;
					if (lastArguments && lastArguments.Person_id && data && data.Person_id) {
						getWnd('swPersonEmkWindow').hide();
						lastArguments.Person_id = data.Person_id;
						lastArguments.Server_id = data.Server_id;
						lastArguments.PersonEvn_id = data.PersonEvn_id;
						getWnd('swPersonEmkWindow').show(lastArguments);
					}
				},
				onHide: function() {
					if (callback){
						callback();
					}
				}.createDelegate(this),
				PersonEvn_id: this.PersonEvn_id,
				Person_id: this.getPersonId(),
				Server_id: this.Server_id,
				Person_Firname: this.PersonInfoFrame.getFieldValue('Person_Firname'),
				Person_Surname: this.PersonInfoFrame.getFieldValue('Person_Surname'),
				Person_Secname: this.PersonInfoFrame.getFieldValue('Person_Secname'),
				Person_Birthday: this.PersonInfoFrame.getFieldValue('Person_Birthday'),
				UserMedStaffFact_id: this.userMedStaffFact.MedStaffFact_id,
				UserLpuSection_id: this.userMedStaffFact.LpuSection_id,
				userMedStaffFact: this.userMedStaffFact,
				from:this.mode,
				ARMType:this.ARMType,
				TimetableGraf_id:this.TimetableGraf_id
			};
			// для новой формы записи 
			params.personData = {
				PersonEvn_id: this.PersonEvn_id,
				Person_id: this.Person_id,
				Server_id: this.Server_id,
				Person_Firname: this.PersonInfoFrame.getFieldValue('Person_Firname'),
				Person_Surname: this.PersonInfoFrame.getFieldValue('Person_Surname'),
				Person_Secname: this.PersonInfoFrame.getFieldValue('Person_Secname'),
				Person_Birthday: this.PersonInfoFrame.getFieldValue('Person_Birthday')
			}
			
			params = Ext.apply(params || {}, oparams || {});
			params[id] = object_value;
			/*
			if (IS_DEBUG)
			{
				console.debug('openForm | Форма %s с параметрами: %o', open_form, params);
			}
			*/

			if(id == 'EvnReceptGeneral_id')
			{
				params[id] = oparams.EvnReceptGeneral_id;
				params.EvnReceptGeneral_pid = oparams.parent_object_value;
				if(mode == 'add')
					params[id] = null;
			}
			if (oparams && oparams.EvnPrescrMse_id) {
				params.EvnPrescrMse_id = oparams.EvnPrescrMse_id;
			}

			getWnd(open_form).show(params);
		}
	},
	/*
	* Функции, параметры для формы просмотра. Старт
	*/
	/**
	* Нода, для которой, загружена форма просмотра,
	*/
	node: null,
    /**
     * Кэш параметров ноды, для которой, загружена форма просмотра,
     */
    data: null,
    /**
     * Признак, что требуется проверка целостности данных
     * @var {Boolean}
     */
    requireCheckChange: false,
    /**
     * Проверяет целостность данных объекта формы просмотра
     *
     * @param {string} object_nick Код объекта
     * @param {string} object_key Имя ключа объекта
     * @param {string} object_id Идентификатор объекта
     * @param {Function} yes_handler Функция продолжения действия, которая может быть вызвана в случае ответа "Да"
     * @return {Boolean}
     */
    checkChange: function (object_nick, object_key, object_id, yes_handler)
    {
        //log(['checkChange', object_nick, object_key, object_id, this.requireCheckChange]);
        if (!object_nick || !object_key || !object_id) {
            return false;
        }
		var me = this;
		if (this.loadedSpecifics) {
			// log('checkChange loadedSpecifics', this.requireCheckChange, object_nick, this.isReadOnly, this.loadedSpecifics);
			var specific_type, id;
			for (id in this.loadedSpecifics) {
				for (specific_type in this.loadedSpecifics[id]) {
					if (this.loadedSpecifics[id][specific_type].Morbus_id
						&& this.loadedSpecifics[id][specific_type].isLoaded
						&& false == this.loadedSpecifics[id][specific_type].hasMorbus
						&& false == this.loadedSpecifics[id][specific_type].isChanged
						&& 'onko' != specific_type
					) {
						/* если была раскрыта специфика заболевания с созданием заболевания
						 * и не был введен и сохранен ни один атрибут
						 * и не было создано извещения,
						 * то удаляем заболевание
						 */
						me.getLoadMask(langs('Удаления заболевания...')).show();
						Ext.Ajax.request({
							params: {
								Evn_id: id,
								Morbus_id: me.loadedSpecifics[id][specific_type].Morbus_id
							},
							failure: function(response, options) {
								me.getLoadMask().hide();
								showSysMsg(langs('При удалении заболевания возникли ошибки'));
							},
							success: function(response, options) {
								me.getLoadMask().hide();
								if ( response.responseText ) {
									var result  = Ext.util.JSON.decode(response.responseText);
									if ( result.success ) {
										me.loadedSpecifics[id][specific_type].Morbus_id = null;
										me.clearSpecific(specific_type, me.loadedSpecifics[id][specific_type].elData, 'onDeleteMorbus');
										if (typeof(yes_handler) == 'function') {
											// продолжаем выбранное действие
											yes_handler();
										}
									}
								}
							},
							url: '/?c=Morbus&m=doDelete'
						});
						return false;
					}
				}
			}
		}
        if ( !this.requireCheckChange || !object_nick.inlist(this.codeListForLoad)
            || this.isReadOnly
        ) {
            // разрешаем выйти
            return true;
        }
        //signedEvn object_nick.inlist(['EvnPL','EvnVizitPL','EvnSection'])
		var me = this,
			data = this.getObjectData(object_nick, object_id),
			params = {object: object_nick, object_id: object_id},
			checkResult = {success: true},
			childrens;
		if ( typeof data == 'object' ) {
			childrens = this.getObjectChildren(object_nick,object_id);
			switch (object_nick) {
				case 'EvnPS':
				childrens = (childrens && childrens.EvnSection && childrens.EvnSection.item) || null;
					checkResult = me._checkEvnPS(data, childrens, params, 'onChange', yes_handler);
					break;
				case 'EvnSection':
					checkResult = me._checkEvnSection(data, childrens, params, 'onChange', yes_handler);
					break;
				case 'EvnPL':
					childrens = (childrens && childrens.EvnVizitPL && childrens.EvnVizitPL.item) || null;
					checkResult = me._checkEvnPL(data, childrens, params, 'onChange', yes_handler);
					break;
				case 'EvnPLStom':
					childrens = (childrens && childrens.EvnVizitPLStom && childrens.EvnVizitPLStom.item) || null;
					checkResult = me._checkEvnPL(data, childrens, params, 'onChange', yes_handler);
					break;
				case 'EvnVizitPL':
				case 'EvnVizitPLStom':
					checkResult = me._checkEvnVizitPL(data, childrens, params, 'onChange', yes_handler);
					break;
				case 'EvnVK':
					checkResult = me._checkEvnVK(data, params, 'onChange', yes_handler);
					break;
				case 'EvnPLDispDriver':
					checkResult = me._checkEvnPLDispDriver(data, params, 'onChange', yes_handler);
					break;
			}
		}
		//log('checkChange checkResult', checkResult);
		
		if(isSuperAdmin()){
			if (!checkResult.success && !this.isFirstAdminCheck) {
				this.isFirstAdminCheck = true;
				me.showWarningMsg({
					msg: checkResult.msg || null,
					links: checkResult.links || {}
				}, (checkResult.field || null), (checkResult.link || null), checkResult.params);
				return false;
			}
		} else {
			if (!checkResult.success) {
				me.showWarningMsg({
					msg: checkResult.msg || null,
					links: checkResult.links || {}
				}, (checkResult.field || null), (checkResult.link || null), checkResult.params);
				return false;
			}
		}
		
		this.requireCheckChange = false;
		return true;
	},
	/**
	 * Общие проверки EvnVizitPL
	 */
	_checkEvnVizitPL: function (data, children, params, mode, yes_handler)
	{
		var me = this,
			person_age = swGetPersonAge(me.PersonInfoFrame.getFieldValue('Person_Birthday'),getGlobalOptions().date),
			person_age_on_vizit_date = swGetPersonAge(me.PersonInfoFrame.getFieldValue('Person_Birthday'),data.EvnVizitPL_setDate),
			isPayTypeOms = false,
			isFinish = false,
			parentClass = null,
			parentData = null,
			uslugaList = [],
			uslugaComplexCodeList = [],
			outputSuccess= {
				success: true
			},
			outputError = {
				params: params,
				success: false,
				msg: langs('Ошибка при проверке посещения!')
			},
			diag_reg = new RegExp("^Z"),
			lastEvnVizitPLDate,
			EvnUslugaCommon,
			EvnPLDate;
		log({
			debug: '_checkEvnVizitPL',
			args: arguments
		});
		var diag_code_full = !Ext.isEmpty(data.Diag_Code)?String(data.Diag_Code).slice(0, 3):'';

		if (!data || !data[params.object + '_id']) {
			return outputError;
		}
		parentClass = (params.object=='EvnVizitPL')?'EvnPL':'EvnPLStom';
		parentData = this.getObjectData(parentClass, data[params.object + '_pid']);
		isFinish = (parentData[parentClass + '_IsFinish']=='2');
        if (me.isReadOnly || data.accessType == 'view') {
            // не проверяем, т.к. недоступен для редактирования
            return outputSuccess;
        }
		if (data['PayType_SysNick'] && me.getPayTypeSysNickOMS() == data['PayType_SysNick']) {
			isPayTypeOms = true;
		}
		if (data.UslugaComplex_Code) {
			uslugaComplexCodeList.push(data.UslugaComplex_Code);
		}
		me.viewFormDataStore.each(function(rec){
			if (rec.object_code == 'EvnUsluga' && !Ext.isEmpty(rec.get('EvnUsluga_pid')) && rec.get('EvnUsluga_pid') == params.object_id && rec.get('Usluga_Code')) {
				uslugaList.push(rec.data);
				uslugaComplexCodeList.push(rec.get('Usluga_Code'));
			}
			if (rec.object_code=='EvnVizitPL'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPL_setDate')) && rec.get('EvnVizitPL_setDate') >= lastEvnVizitPLDate))){
				lastEvnVizitPLDate = rec.get('EvnVizitPL_setDate');
			} else if (rec.object_code=='EvnVizitPLStom'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPLStom_setDate')) && rec.get('EvnVizitPLStom_setDate') >= lastEvnVizitPLDate))){
				lastEvnVizitPLDate = rec.get('EvnVizitPLStom_setDate');
				EvnPLDate = rec.get('EvnPLStom_setDate');
			}
			if(rec.object_code=='EvnUsluga'){
				EvnUslugaCommon = (rec.get('EvnUslugaCommon_id') || rec.get('EvnUsluga_id')) ? true : false;
			}
		});

		var xdate = new Date(2016, 0, 1); // для стомат. ТАП Перми поля повяляются с 1 января 2016
		if (getRegionNick() != 'perm') {
			xdate = sw.Promed.EvnPL.getEvnPLStomNewBegDate(); // для стомат ТАП зависит от региона
		}

		if (
			!data.TreatmentClass_id && getRegionNick() != 'kareliya'
			&& (
				(parentClass == 'EvnPL' && Date.parseDate(lastEvnVizitPLDate, 'd.m.Y') >= new Date(2016, 0, 1))
				|| (parentClass == 'EvnPLStom' && Date.parseDate(EvnPLDate, 'd.m.Y') >= xdate)
			)
		) {
			outputError.msg = null;
			outputError.field = 'TreatmentClass';
			outputError.link = getRegionNick() == 'kz' ? langs('Повод обращения') : langs('Вид обращения');
			return outputError;
		}
		if (!data.ServiceType_id) {
			outputError.msg = null;
			outputError.field = 'ServiceType';
			outputError.link = langs('Место');
			return outputError;
		}
		if (!data.PayType_id && getRegionNick() != 'kz') {
			outputError.msg = null;
			outputError.field = 'PayType';
			outputError.link = langs('Вид оплаты');
			return outputError;
		}
		if (getRegionNick().inlist([ 'perm', 'ufa', 'buryatiya', 'pskov', 'vologda' ]) && params.object != 'EvnVizitPLStom' && !data.UslugaComplex_Code && isPayTypeOms) {
			outputError.msg = null;
			outputError.field = 'UslugaComplex';
			outputError.link = langs('Код посещения');
			return outputError;
		}
		if ('kz' == getRegionNick() && !data.UslugaComplex_Code) {
			outputError.msg = null;
			outputError.field = 'UslugaComplex';
			outputError.link = langs('Код услуги посещения');
			return outputError;
		}
		if ('ufa' == getRegionNick() && !data.UslugaComplex_Code 
			&& data.PayType_SysNick && data.PayType_SysNick.inlist([me.getPayTypeSysNickOMS(), 'dopdisp'])
		) {
			// Если ОМС или ДД, то код посещения должен быть обязательным. Иначе - нет.
			outputError.msg = null;
			outputError.field = 'UslugaComplex';
			outputError.link = langs('Код посещения');
			return outputError;
		}
		if (getRegionNick().inlist(['krasnoyarsk','vologda']) && data.TreatmentClass_Code == '1.3' && !data.PersonDisp_id) {
			outputError.msg = null;
			outputError.field = 'PersonDisp';
			outputError.link = langs('Карта дисп. учета');
			return outputError;
		}
		
		if(getRegionNick() == 'ekb' 
			&& parentClass == 'EvnPLStom' 
			&& !data.UslugaComplex_Code 
			&& !data.PayType_SysNick.inlist(['dms', 'bud'])
			&& !(data.Mes_Code && data.Mes_Code.inlist([5538]))
		){
			outputError.msg = langs('Поле "Код посещения" обязательно для заполнения');
			outputError.links = {
				UslugaComplex: {
					link: langs('Код посещения'),
					onclick: function(e, node, msg) {
						me.createInputArea('UslugaComplex', params.object, params);
						msg.hide();
					}
				}
			};
			outputError.field = null;
			outputError.link = null;
			return outputError;
		}else if ('ekb' == getRegionNick() && parentClass != 'EvnPLStom' && !data.UslugaComplex_Code && data.PayType_SysNick != 'dms') {
			var flagCodeVisits = false;
			if( data.Mes_Code && data.Mes_Code.inlist([901, 902, 664]) ) flagCodeVisits = true;
			if( data.Mes_Code && data.Mes_Code.inlist([811, 812]) && data.PayType_SysNick == 'bud' ) flagCodeVisits = true;
			//if( params.object != 'EvnVizitPLStom' ) flagCodeVisits = true;
			if(!flagCodeVisits){
				outputError.msg = langs('Поле "Код посещения" обязательно для заполнения');
				outputError.links = {
					UslugaComplex: {
						link: langs('Код посещения'),
						onclick: function(e, node, msg) {
							me.createInputArea('UslugaComplex', params.object, params);
							msg.hide();
						}
					}
				};
				outputError.field = null;
				outputError.link = null;
				return outputError;
			}
		} else if ('ekb' == getRegionNick() && parentClass != 'EvnPLStom' && !data.UslugaComplex_Code && !data.Mes_id && data.PayType_SysNick != 'bud' && data.PayType_SysNick != 'dms') {
			outputError.msg = langs('Обязательно для заполнения одно из полей Mes или UslugaComplex');
			outputError.links = {
				UslugaComplex: {
					link: langs('Код посещения'),
					onclick: function(e, node, msg) {
						me.createInputArea('UslugaComplex', params.object, params);
						msg.hide();
					}
				},
				Mes: {
					link: langs('МЭС'),
					onclick: function(e, node, msg) {
						me.createInputArea('Mes', params.object, params);
						msg.hide();
					}
				}
			};
			outputError.field = null;
			outputError.link = null;
			return outputError;
		} /*else if ('ekb' == getRegionNick() && data.UslugaComplex_Code && data.ServiceType_SysNick.inlist(['home','ahome','neotl'])) {
			var flag = false;
			var usluga_list = (parentClass == 'EvnPLStom' ? children.EvnUslugaStom.item : children.EvnUsluga.item);

			if (usluga_list && usluga_list.length > 0) {
				for (var i=0; i<usluga_list.length; i++) {
					if (usluga_list[i].data.Usluga_Code == 'B04.069.333') {
						flag = true;
					}
				}
			}

			if (data.UslugaComplexPartition_Code == '300' && !flag) {
				outputError.msg = langs('Необходимо ввести дополнительную услугу B04.069.333');
				outputError.field = null;
				outputError.link = null;
				return outputError;
			}
		}*/
		else if ('perm' == getRegionNick() && !data.UslugaComplex_Code && params.object == 'EvnVizitPL' && data.PayType_SysNick && data.PayType_SysNick.inlist([me.getPayTypeSysNickOMS()])) {
			var date = Date.parseDate(data.EvnVizitPL_setDate, 'd.m.Y');
			var xdate = new Date(2014, 11, 1);
			if ( !Ext.isEmpty(date) && date >= xdate) {
				outputError.msg = langs('Поле "Код посещения" обязательно для заполнения');
				outputError.links = {
					UslugaComplex: {
						link: langs('Код посещения'),
						onclick: function (e, node, msg) {
							me.createInputArea('UslugaComplex', params.object, params);
							msg.hide();
						}
					}
				};
				outputError.field = null;
				outputError.link = null;
				return outputError;
			}
		} else if ('perm' == getRegionNick() && !data.UslugaComplex_Code && params.object == 'EvnVizitPLStom' && data.PayType_SysNick && data.PayType_SysNick.inlist([me.getPayTypeSysNickOMS()])) {
			var date = Date.parseDate(data.EvnVizitPLStom_setDate, 'd.m.Y');
			var xdate = sw.Promed.EvnPL.getEvnPLStomNewBegDate();
			if ( !Ext.isEmpty(date) && date >= xdate) {
				outputError.msg = langs('Поле "Код посещения" обязательно для заполнения');
				outputError.links = {
					UslugaComplex: {
						link: langs('Код посещения'),
						onclick: function (e, node, msg) {
							me.createInputArea('UslugaComplex', params.object, params);
							msg.hide();
						}
					}
				};
				outputError.field = null;
				outputError.link = null;
				return outputError;
			}
		}
		
		if ('ekb' == getRegionNick() && !EvnUslugaCommon && data.Mes_Code && data.Mes_Code.inlist([811, 812, 901, 902, 664])) 
		{
			outputError.msg = 'Если в поле МЭС указано значение 811, 812, 901, 902, 664 то в разделе УСЛУГИ должна быть добавлена услуга';
			outputError.link = null;
			return outputError;
		}

		if (
			!Ext.isEmpty(data.UslugaComplex_Code) && (data.UslugaComplex_Code.substr(-3, 3).inlist(['805', '893'])) && getRegionNick().inlist(['ufa']) && !data.DispProfGoalType_id
		) {
			outputError.msg = null;
			outputError.field = 'DispProfGoalType';
			outputError.link = langs('В рамках дисп./мед.осмотра');
			return outputError;
		}

		if (getRegionNick().inlist(['kareliya','astra', 'ufa', 'vologda']) && !data.Diag_id) {
			outputError.msg = null;
			outputError.field = 'Diag';
			outputError.link = langs('Основной диагноз');
			return outputError;
		}
		if (!data.VizitType_id) {
			outputError.msg = null;
			outputError.field = 'VizitType';
			outputError.link = langs('Цель посещения');
			return outputError;
		}
		if (getRegionNick() == 'kz' && data.TreatmentClass_id.inlist([22,30]) && !data.VizitActiveType_id) {
			outputError.msg = null;
			outputError.field = 'VizitActiveType';
			outputError.link = langs('Вид активного посещения');
			return outputError;
		}
		if (data.Diag_id && !diag_reg.test(data.Diag_Code) && !data.DeseaseType_id) {
			outputError.msg = null;
			outputError.field = 'DeseaseType';
			outputError.link = langs('Характер заболевания');
			return outputError;
		}
		if (((getRegionNick() == 'kareliya' && data.DeseaseType_SysNick == 'new') || getRegionNick() == 'ekb') && !data.TumorStage_id &&
			((diag_code_full >= 'C00' && diag_code_full <= 'C97') || (diag_code_full >= 'D00' && diag_code_full <= 'D00')) &&
			(getRegionNick() != 'kareliya' || Date.parseDate(data.EvnVizitPL_setDate,'d.m.Y') >= Date.parseDate('01.09.2017','d.m.Y')) &&
			(getRegionNick() != 'ekb' || Date.parseDate(data.EvnVizitPL_setDate,'d.m.Y') < Date.parseDate('01.06.2018','d.m.Y'))
		) {
			outputError.msg = null;
			outputError.field = 'TumorStage';
			outputError.link = 'Стадия выявленного ЗНО';
			return outputError;
		}
		if (
			getRegionNick() == 'penza' && !data.PainIntensity_id
			&& (
				(diag_code_full >= 'C00' && diag_code_full <= 'C97')
				|| (diag_code_full >= 'D00' && diag_code_full <= 'D00')
			)
			&& Date.parseDate(data.EvnVizitPL_setDate,'d.m.Y') >= Date.parseDate('01.11.2018','d.m.Y')
		) {
			outputError.msg = null;
			outputError.field = 'PainIntensity';
			outputError.link = 'Интенсивность боли';
			return outputError;
		}
		if (getRegionNick() == 'ekb' && params.object == 'EvnVizitPL' 
			&& data.DiagFinance_IsRankin && data.DiagFinance_IsRankin == 2 && !data.RankinScale_id
			&& Date.parseDate(data.EvnVizitPL_setDate,'d.m.Y') < Date.parseDate('01.01.2016','d.m.Y')
		) {
			outputError.msg = null;
			outputError.field = 'RankinScale';
			outputError.link = langs('Значение по шкале Рэнкина');
			return outputError;
		}
		if (
			getRegionNick() == 'astra'
			&& data.VizitType_SysNick=='cz'
			&& !data.RiskLevel_id
			&& !(person_age_on_vizit_date >= 18 && Date.parseDate(data.EvnVizitPL_setDate,'d.m.Y') >= Date.parseDate('21.07.2017','d.m.Y'))
			&& !(person_age_on_vizit_date < 18 && Date.parseDate(data.EvnVizitPL_setDate,'d.m.Y') >= Date.parseDate('24.07.2017','d.m.Y'))
		) {
			outputError.msg = null;
			outputError.field = 'RiskLevel';
			outputError.link = langs('Фактор риска');
			return outputError;
		}
		if (
			getRegionNick() == 'astra'
			&& data.VizitType_SysNick == 'cz'
			&& !data.WellnessCenterAgeGroups_id
			&& person_age_on_vizit_date >= 2
			&& person_age_on_vizit_date < 18
			&& Date.parseDate(data.EvnVizitPL_setDate,'d.m.Y') >= Date.parseDate('24.07.2017','d.m.Y')
		) {
			outputError.msg = null;
			outputError.field = 'WellnessCenterAgeGroups';
			outputError.link = langs('Группа ЦЗ');
			return outputError;
		}
		if (params.object == 'EvnVizitPL' && getRegionNick() == 'kareliya'
			&& isFinish && (data.VizitType_SysNick == 'npom' || data.VizitType_SysNick == 'nform')
			&& Date.parseDate(data.EvnVizitPL_setDate,'d.m.Y') >= Date.parseDate('01.05.2015','d.m.Y')
		) {
			var flag = false;
			if (uslugaList.length > 0) {
				for (var i=0; i<uslugaList.length; i++) {
					var attributes = Ext.util.JSON.decode(uslugaList[i].UslugaComplexAttrbuteTypeList);
					log(attributes);
					if (attributes.indexOf('uslcmp') != -1) {
						flag = true;
					}
				}
			}
			if (!flag) {
				outputError.msg = langs('При посещении по поводу неотложной помощи должна быть указана хотя бы одна услуга из РК 20');
				outputError.field = null;
				outputError.link = null;
				return outputError;
			}
		}
		if ('ufa' == getRegionNick() && params.object == 'EvnVizitPL' && !data.HealthKind_id
			&& data.UslugaComplex_Code && data.UslugaComplex_Code.substr(-3, 3).inlist(['805', '893'])
			&& Date.parseDate(data.EvnVizitPL_setDate, 'd.m.Y') >= Date.parseDate('01.11.2016','d.m.Y')
		) {
			outputError.msg = null;
			outputError.field = 'HealthKind';
			outputError.link = 'Группа здоровья';
			return outputError;
		}
		if ('ufa' == getRegionNick() && params.object == 'EvnVizitPLStom' && !data.HealthKind_id
			&& data.UslugaComplex_Code && data.UslugaComplex_Code.substr(-3, 3).inlist(['805'])
			&& Date.parseDate(data.EvnVizitPLStom_setDate, 'd.m.Y') >= Date.parseDate('01.04.2018','d.m.Y')
		) {
			outputError.msg = null;
			outputError.field = 'HealthKind';
			outputError.link = 'Группа здоровья';
			return outputError;
		}
		if (params.object == 'EvnVizitPL' && isPayTypeOms && person_age < 18 && getRegionNick() == 'perm'
			&& !me.data.ignoreControl59536
			&& new String('B01.003.004.099').inlist(uslugaComplexCodeList)
			&& !(new String('A06.30.003.001').inlist(uslugaComplexCodeList) || new String('A05.30.003').inlist(uslugaComplexCodeList))
		) {
			me.data.ignoreControl59536 = 0;
			outputError.msg = langs('Случай не будет оплачен, так как услуга B01.003.004.099 Анестезиологическое пособие оплачивается для детей')
				+' '+langs(' только при наличии услуги A06.30.003.001 Проведение компьютерных томографических исследований')
				+' '+langs(' или A05.30.003 Проведение магнитно-резонансных томографических исследований. Продолжить? yes_text');
			outputError.links = {
				yes_text: {
					link: langs('Да'),
					onclick: function(e, link, msg) {
						me.data.ignoreControl59536 = 1;
						msg.hide();
						if (typeof(yes_handler) == 'function') {
							yes_handler();
						}
					}
				}
			};
			return outputError;
		}
		if (data.PayType_SysNick && data.PayType_SysNick == me.getPayTypeSysNickOMS() && me.afterCopyEvnVizitPLStom && getRegionNick() == 'perm') // проверка объёмов только для ОМС (refs #94352)
		{
			if(!me.inRequestTariffVolumes){
				loadMask = new Ext.LoadMask(me.getEl(), {
	                msg: "Проверка случая после копирования..."
	            });
				loadMask.show();
				me.inRequestTariffVolumes = true;
				Ext.Ajax.request({
					url: '/?c=TariffVolumes&m=checkVizitCodeHasVolume',
					params: {
						UslugaComplex_id: (data.UslugaComplex_uid)?data.UslugaComplex_uid:null,
						Lpu_id: (data.Lpu_id)?data.Lpu_id:null,
						LpuSectionProfile_id: (data.LpuSectionProfile_id)?data.LpuSectionProfile_id:null,
						VizitClass_id: (data.VizitClass_id)?data.VizitClass_id:null,
						VizitType_id: (data.VizitType_id)?data.VizitType_id:null,
						TreatmentClass_id: (data.TreatmentClass_id)?data.TreatmentClass_id:null,
						isPrimaryVizit: ((data.isPrimaryVizit_Name && data.isPrimaryVizit_Name == 'Да')?2:((data.isPrimaryVizit_Name && data.isPrimaryVizit_Name == 'Нет')?1:null)),
						UslugaComplex_Date: (data.EvnVizitPLStom_setDate)?data.EvnVizitPLStom_setDate:null,
						EvnClass_SysNick: 'EvnVizitPLStom',
						PayType_SysNick: data.PayType_SysNick
					},
					callback: function(options, success, response) {
						loadMask.hide();
						me.inRequestTariffVolumes = false;
						var result = Ext.util.JSON.decode(response.responseText);
						if(result && result[0] && result[0].Error_Msg){
							sw.swMsg.alert('Ошибка', result[0].Error_Msg);
							return false;
						} else {
							me.afterCopyEvnVizitPLStom = false;
							if(!me.inHideWnd){
								me.reloadTree({
									callback: function() {
										// обновить правую часть
										if (me.Tree.getSelectionModel().selNode) {
											me.requireCheckChange = false;
											me.loadNodeViewForm(me.Tree.getSelectionModel().selNode);
										}
									}
								});
							} else {
								yes_handler();
							}
						}
					}
				});
				return false;
			}
		}
		if (getRegionNick().inlist([ 'perm', 'ufa' , 'msk' ]) && data.EvnVizitPL_IsZNO == 2 && !data.Diag_spid)
		{
			outputError.msg = null;
			outputError.field = 'DiagSpid';
			outputError.link = 'Подозрение на диагноз';
			return outputError;
		}
		if (getRegionNick() != 'kz' && ((diag_code_full >= 'C00' && diag_code_full <= 'C97') || (diag_code_full >= 'D00' && diag_code_full <= 'D09')) && isFinish && parentClass == 'EvnPL')
		{
			// Проверить получится только если специфика раскрыта
			if (Ext.get('MorbusOnkoData_'+data.EvnVizitPL_id) && Ext.get('MorbusOnkoData_'+data.EvnVizitPL_id).child('div')) {
				var panelid = Ext.get('MorbusOnkoData_' + data.EvnVizitPL_id).child('div').id;
				var morbus_id = panelid.split('_')[2];
				var params = this.getObjectData('MorbusOnko', morbus_id);

				console.log([ 'param-pam-pams', params ]);

				if ( !params.MorbusOnko_histDT && params.HistologicReasonType_id ) {
					outputError.msg = null;
					outputError.field = 'MorbusOnko_histDT';
					outputError.link = 'Дата регистрации отказа / противопоказания';
					return outputError;
				}

				if ( !Ext.isEmpty(params.Diag_id) ) {
					var fieldsList = {
						'OnkoTreatment': 'Повод обращения',
						'OnkoM': 'Стадия опухолевого процесса по системе TNM (M)',
						'OnkoN': 'Стадия опухолевого процесса по системе TNM (N)',
						'OnkoT': 'Стадия опухолевого процесса по системе TNM (T)',
						'TumorStage': 'Стадия опухолевого процесса'
					}, allowBlank, linkStore, withDiagAndSpr, withoutDiag, withoutSpr,
					filterDate = Date.parseDate(!Ext.isEmpty(params['Evn_disDate']) ? params['Evn_disDate'] : getGlobalOptions().date, 'd.m.Y');

					if(getRegionNick() == 'perm'){
						if ( Ext.isEmpty(params['MorbusOnko_setDiagDT']) ) {
							outputError.msg = null;
							outputError.field = 'MorbusOnko_setDiagDT';
							outputError.link = langs('Дата установления диагноза');
							return outputError;
						}
					}

					for ( var field in fieldsList ) {
						if ( !Ext.isEmpty(params[field + (field.inlist(['OnkoM','OnkoN','OnkoT','TumorStage']) ? '_fid' : '_id')]) ) {
							continue;
						}

						withDiagAndSpr = new Array();
						withoutDiag = new Array();
						withoutSpr = new Array();

						allowBlank = true;
						linkStore = me[field + 'LinkStore'];

						if (linkStore) {
							linkStore.each(function(rec) {
								// добавить фильтр по params['Evn_disDate']
								if (
									(Ext.isEmpty(rec.get(field + 'Link_begDate')) || rec.get(field + 'Link_begDate') <= filterDate)
									&& (Ext.isEmpty(rec.get(field + 'Link_endDate')) || rec.get(field + 'Link_endDate') >= filterDate)
								) {
									if (!Ext.isEmpty(rec.get('Diag_id')) && rec.get('Diag_id') == params['Diag_id']) {
										if (!Ext.isEmpty(rec.get(field + '_fid'))) {
											withDiagAndSpr.push(rec.get(field + 'Link_id'));
										} else {
											withoutSpr.push(rec.get('Diag_id'));
										}
									} else if (Ext.isEmpty(rec.get('Diag_id')) && !Ext.isEmpty(rec.get(field + '_fid'))) {
										withoutDiag.push(rec.get(field + 'Link_id'));
									}
								}
							});

							if ( field == 'TumorStage' ) {
								allowBlank = !(getRegionNick() != 'kz' && !Ext.isEmpty(params.OnkoTreatment_id) && params.OnkoTreatment_Code != 5 && params.OnkoTreatment_Code != 6);
							}
							else {
								allowBlank = !(getRegionNick() != 'kz' && (withDiagAndSpr.length > 0 || (withoutDiag.length > 0 && withoutSpr.length == 0)) && person_age_on_vizit_date >= 18 && params.OnkoTreatment_Code === 0);
							}
						}

						if ( allowBlank === false ) {
							outputError.msg = null;
							outputError.field = field;
							outputError.link = fieldsList[field];
							return outputError;
						}
						
						if ( field.inlist(['OnkoM','OnkoN','OnkoT','TumorStage']) && Ext.isEmpty(params[field + '_id']) ) {
							outputError.msg = null;
							outputError.field = field;
							outputError.link = fieldsList[field];
							return outputError;
					}
				}
				}

			}
		}
		// также обязательны Дата и время посещения, Отделение, врач
		// но проверяем только те поля, которые можно редактировать в ЭМК
		return outputSuccess;
	},
	_checkEvnPS: function (data, sectionList, params, mode, yes_handler)
	{
		var me = this,
			outputSuccess= {
				success: true
			},
			outputError = {
				params: params,
				success: false,
				msg: langs('Ошибка при проверке КВС!')
			};
		log({
			debug: '_checkEvnPS',
			args: arguments
		});
		if (!data || !Ext.isArray(sectionList) || !data[params.object + '_id']) {
			// todo: Чтобы не показывалась базовая ошибка, потом надо будет разобраться почему она происходит.
			return outputSuccess; // return outputError;
		}
        if (me.isReadOnly || data.accessType == 'view') {
            // не проверяем, т.к. недоступен для редактирования
            return outputSuccess;
        }
		/*if (mode == 'onChange' && sectionList.length == 0) {
			outputError.msg = langs('Талон должен содержать не менее одного посещения!');
			return outputError;
		}*/
		var
			UslugaComplexCode = '',
			checkResult = {
				success: false,
				msg: langs('Ошибка при проверке движений!')
			},
			isFinish = data[params.object + '_IsFinish'] || 1,
			sectionData, sectionParams;
		for (var i=0; i < sectionList.length; i++) {
			sectionParams = null;
			if (params.object == 'EvnPS') {
				sectionParams = {
					object: 'EvnSection',
					object_id: sectionList[i].data['EvnSection_id']
				};
			}
			if (sectionParams) {
				// это неправильно vizitData = vizitList[i].data;
				sectionData  = this.getObjectData(sectionParams.object, sectionParams.object_id);
                if(sectionData.EvnSection_id!=sectionData.EvnSection_pid){
					checkResult = this._checkEvnSection(sectionData, sectionList[i].children, sectionParams, mode, yes_handler);
				}else{
					checkResult={success: true};
				}
			}
			if (!checkResult.success) {
				return checkResult;
			}
		}
		
		return outputSuccess;
	},
	_checkEvnSection: function (data, children, params, mode, yes_handler)
	{
		var me = this,
			person_age_on_evn_date = swGetPersonAge(me.PersonInfoFrame.getFieldValue('Person_Birthday'),data.EvnSection_setDate),
			outputSuccess= {
				success: true
			},
			outputError = {
				params: params,
				success: false,
				msg: langs('Ошибка при проверке движения !')
			};
		log({
			debug: '_checkEvnSection',
			args: arguments
		});
		if (!data || !data[params.object + '_id']) {
			return outputError;
		}
        if (me.isReadOnly || data.accessType == 'view') {
            // не проверяем, т.к. недоступен для редактирования
            return outputSuccess;
        }
		var diag_code_full = !Ext.isEmpty(data.Diag_Code)?String(data.Diag_Code).slice(0, 3):'';
		if (!data.EvnSection_IsPriem || 2 != data.EvnSection_IsPriem) {
			if (
				!data.UslugaComplex_Code
				&& (
					(getRegionNick() == 'pskov' && !data.HTMedicalCareClass_id && data.LpuUnitType_SysNick != 'stac')
					|| (getRegionNick() == 'buryatiya' && data.PayType_SysNick == 'oms')
				)
			) {
				outputError.msg = null;
				outputError.field = 'UslugaComplex';
				outputError.link = (getRegionNick()=='pskov')?langs('Услуга лечения'):langs('Профильная услуга');
				return outputError;
			}
			if (getRegionNick().inlist(['ekb','krym','perm','ufa','adygeya']) && data.DiagFinance_IsRankin && data.DiagFinance_IsRankin == 2 && !data.RankinScale_id) {
				outputError.msg = null;
				outputError.field = 'RankinScaleEs';
				outputError.link = langs('Значение по шкале Рэнкина при поступлении');
				return outputError;
			}
			if (getRegionNick().inlist(['ekb','krym','perm','ufa','adygeya']) && !Ext.isEmpty(data.EvnSection_disDate) && data.DiagFinance_IsRankin && data.DiagFinance_IsRankin == 2 && !data.RankinScale_sid) {
				outputError.msg = null;
				outputError.field = 'RankinScaleEsSid';
				outputError.link = langs('Значение по шкале Рэнкина при выписке');
				return outputError;
			}
			if (getRegionNick().inlist(['krym','perm','ufa']) && data.DiagFinance_IsRankin && data.DiagFinance_IsRankin == 2 && Ext.isEmpty(data.EvnSection_InsultScale)) {
				outputError.msg = null;
				outputError.field = 'EsInsultScale';
				outputError.link = langs('Значение шкалы инсульта Национального института здоровья');
				return outputError;
			}
		}
		if (getRegionNick() != 'kz' && ((diag_code_full >= 'C00' && diag_code_full <= 'C97') || (diag_code_full >= 'D00' && diag_code_full <= 'D09')) && !!data.LeaveType_id)
		{
			// Проверить получится только если специфика раскрыта
			if (Ext.get('MorbusOnkoData_'+data.EvnSection_id) && Ext.get('MorbusOnkoData_'+data.EvnSection_id).child('div')) {
				var panelid = Ext.get('MorbusOnkoData_' + data.EvnSection_id).child('div').id;
				var morbus_id = panelid.split('_')[2];
				var params = this.getObjectData('MorbusOnko', morbus_id);

				if ( !Ext.isEmpty(params.Diag_id) ) {
					var fieldsList = {
						'OnkoTreatment': 'Повод обращения',
						'OnkoM': 'Стадия опухолевого процесса по системе TNM (M)',
						'OnkoN': 'Стадия опухолевого процесса по системе TNM (N)',
						'OnkoT': 'Стадия опухолевого процесса по системе TNM (T)',
						'TumorStage': 'Стадия опухолевого процесса'
					}, allowBlank, linkStore, withDiagAndSpr, withoutDiag, withoutSpr,
					filterDate = Date.parseDate(!Ext.isEmpty(params.Evn_disDate) ? params.Evn_disDate : getGlobalOptions().date, 'd.m.Y');

					if(getRegionNick() == 'perm'){
						if ( Ext.isEmpty(params['MorbusOnko_setDiagDT']) ) {
							outputError.msg = null;
							outputError.field = 'MorbusOnko_setDiagDT';
							outputError.link = langs('Дата установления диагноза');
							return outputError;
						}
					}

					for ( var field in fieldsList ) {
						if ( !Ext.isEmpty(params[field + (field.inlist(['OnkoM','OnkoN','OnkoT','TumorStage']) ? '_fid' : '_id')]) ) {
							continue;
						}

						withDiagAndSpr = new Array();
						withoutDiag = new Array();
						withoutSpr = new Array();

						linkStore = me[field + 'LinkStore'];

						allowBlank = true;

						if (linkStore) {
							linkStore.each(function(rec) {
								// добавить фильтр по params.Evn_disDate
								if (
									(Ext.isEmpty(rec.get(field + 'Link_begDate')) || rec.get(field + 'Link_begDate') <= filterDate)
									&& (Ext.isEmpty(rec.get(field + 'Link_endDate')) || rec.get(field + 'Link_endDate') >= filterDate)
								) {
									if (!Ext.isEmpty(rec.get('Diag_id')) && rec.get('Diag_id') == params['Diag_id']) {
										if (!Ext.isEmpty(rec.get(field + '_fid'))) {
											withDiagAndSpr.push(rec.get(field + 'Link_id'));
										} else {
											withoutSpr.push(rec.get('Diag_id'));
										}
									} else if (Ext.isEmpty(rec.get('Diag_id')) && !Ext.isEmpty(rec.get(field + '_fid'))) {
										withoutDiag.push(rec.get(field + 'Link_id'));
									}
								}
							});

							if ( field == 'TumorStage' ) {
								allowBlank = !(getRegionNick() != 'kz' && !Ext.isEmpty(params.OnkoTreatment_id) && params.OnkoTreatment_Code != 5 && params.OnkoTreatment_Code != 6);
							}
							else {
								allowBlank = !(getRegionNick() != 'kz' && (withDiagAndSpr.length > 0 || (withoutDiag.length > 0 && withoutSpr.length == 0)) && person_age_on_evn_date >= 18 && params.OnkoTreatment_Code === 0);
							}
						}

						if ( allowBlank === false ) {
							outputError.msg = null;
							outputError.field = field;
							outputError.link = fieldsList[field];
							return outputError;
						}
						
						if ( field.inlist(['OnkoM','OnkoN','OnkoT','TumorStage']) && Ext.isEmpty(params[field + '_id']) ) {
							outputError.msg = null;
							outputError.field = field;
							outputError.link = fieldsList[field];
							return outputError;
					}
				}
				}

			}
		}
		// также обязательны Дата и время посещения, Отделение, врач
		// но проверяем только те поля, которые можно редактировать в ЭМК
		return outputSuccess;
	},
	/**
	 * Общие проверки EvnPL
	 */
	_checkEvnPL: function (data, vizitList, params, mode, yes_handler)
	{
		var me = this,
			lastEvnVizitPLDate,
			outputSuccess= {
				success: true,
				allowConsulDiagnVizitOnly: false,
				allowMorbusVizitOnly: false
			},
			outputError = {
				params: params,
				success: false,
				msg: langs('Ошибка при проверке ТАП!')
			};
		log({
			debug: '_checkEvnPL',
			args: arguments
		});
		me.viewFormDataStore.each(function(rec){
			if (rec.object_code=='EvnVizitPL'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPL_setDate')) && rec.get('EvnVizitPL_setDate') >= lastEvnVizitPLDate))){
				lastEvnVizitPLDate = rec.get('EvnVizitPL_setDate');
			} else if (rec.object_code=='EvnVizitPLStom'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPLStom_setDate')) && rec.get('EvnVizitPLStom_setDate') >= lastEvnVizitPLDate))){
				lastEvnVizitPLDate = rec.get('EvnVizitPLStom_setDate');
			}
		});
		if (!data || !Ext.isArray(vizitList) || !data[params.object + '_id']) {
			// todo: Чтобы не показывалась базовая ошибка, потом надо будет разобраться почему она происходит.
			return outputSuccess; // return outputError;
		}
        if (me.isReadOnly || data.accessType == 'view') {
            // не проверяем, т.к. недоступен для редактирования
            return outputSuccess;
        }
		if (mode == 'onChange' && vizitList.length == 0) {
			outputError.msg = langs('Талон должен содержать не менее одного посещения!');
			return outputError;
		}
		var isHasDiag = false,
			isPayTypeOms = false,
			checkNMPDouble = false,
			payTypeSysNickOMS = me.getPayTypeSysNickOMS(),
			person_age = swGetPersonAge(me.PersonInfoFrame.getFieldValue('Person_Birthday'),getGlobalOptions().date),
			consul_diagn_count = 0,
			desease_count = 0,
			disp_count = 0,
			other_count = 0,
			vizit_type_sys_nick = '',
			UslugaComplexCode = '',
			uslugaComplexCodeList = [],
			checkResult = {
				success: false,
				msg: langs('Ошибка при проверке посещений!')
			},
			isFinish = data[params.object + '_IsFinish'] || 1,
			resultClassCode = data['ResultClass_Code'] || '0',
			UKL = data[params.object + '_UKL'] || null,
			DiagL = data['Diag_lid'] || null,
			vizitData, vizitParams,
			wrapDiagConc = Ext.get(params.object +'_'+ data[params.object + '_id'] +'_wrapDiagConc');

		if (getRegionNick() == 'perm' && params.object == 'EvnPLStom' && !Ext.isEmpty(data[params.object + '_setDate']) && getValidDT(data[params.object + '_setDate'], '') >= getValidDT('01.11.2015', '')) {
			isHasDiag = true;
		}

		for (var i=0; i < vizitList.length; i++) {
			vizitParams = null;
			if (params.object == 'EvnPL') {
				vizitParams = {
					object: 'EvnVizitPL',
					object_id: vizitList[i].data['EvnVizitPL_id']
				};
			}
			if (params.object == 'EvnPLStom') {
				vizitParams = {
					object: 'EvnVizitPLStom',
					object_id: vizitList[i].data['EvnVizitPLStom_id']
				};
			}
			if (vizitParams) {
				// это неправильно vizitData = vizitList[i].data;
				vizitData  = this.getObjectData(vizitParams.object, vizitParams.object_id);
                checkResult = this._checkEvnVizitPL(vizitData, vizitList[i].children, vizitParams, mode, yes_handler);
			}
			if (!checkResult.success) {
				return checkResult;
			}
			if (payTypeSysNickOMS == vizitData['PayType_SysNick']) {
				isPayTypeOms = true;
			}
			if (vizitData.TreatmentClass_id == 2) {
				checkNMPDouble = true;
			}
			if (vizitData.UslugaComplex_Code){
				UslugaComplexCode = vizitData.UslugaComplex_Code.toString();
				//uslugaComplexCodeList.push(UslugaComplexCode);
			}
			me.viewFormDataStore.each(function(rec){
				if (rec.object_code == 'EvnUsluga' && !Ext.isEmpty(rec.get('EvnUsluga_pid')) && rec.get('EvnUsluga_pid') == vizitParams.object_id && rec.get('Usluga_Code')) {
					//uslugaComplexCodeList.push(rec.get('Usluga_Code'));
				}
			});
			if (vizitData.Diag_id) {
				isHasDiag = true;
			}
			vizit_type_sys_nick = vizitData.VizitType_SysNick;
			if (vizit_type_sys_nick == 'desease') {
				desease_count++;
			} else if (vizit_type_sys_nick == 'ConsulDiagn') {
				consul_diagn_count++;
			} else if (getRegionNick() == 'kareliya' && vizit_type_sys_nick == 'consulspec' && params.object == 'EvnPL' && !Ext.isEmpty(data[params.object + '_setDate']) && getValidDT(data[params.object + '_setDate'], '') >= getValidDT('01.01.2017', '') && getValidDT(data[params.object + '_setDate'], '') < getValidDT('01.01.2019', '')) {
				disp_count++;
			} else {
				other_count++;
			}
		}
		if (getRegionNick() == 'ufa' && 2 != isFinish && UslugaComplexCode && isProphylaxisVizitOnly(UslugaComplexCode)) {
			outputError.msg =langs('Добавление посещения невозможно, т.к. в рамках текущего ТАП уже есть посещение с кодом профилактического/консультативного посещения');
			return outputError;
		}
		if (getRegionNick() == 'ufa' && 2 != isFinish && UslugaComplexCode && isMorbusOneVizitCode(UslugaComplexCode)) {
			outputError.msg =langs('Случай должен быть закончен, т.к. содержит однократное посещение по заболеванию');
			return outputError;
		}
		if (getRegionNick().inlist(['buryatiya','kareliya','astra']) && vizitList.length > 1 && other_count > 0 ) {
			outputError.msg = langs('В случае АПЛ более одного посещения и присутствуют посещения с целью отличной от "Обращение по поводу заболевания"!');
			return outputError;
		}
		if (getRegionNick() == 'kareliya' && params.object == 'EvnPL' && !Ext.isEmpty(data[params.object + '_setDate']) && getValidDT(data[params.object + '_setDate'], '') >= getValidDT('01.01.2017', '') && getValidDT(data[params.object + '_setDate'], '') < getValidDT('01.01.2019', '')) {
			if (other_count == 1 && 2 != isFinish) {
				outputError.msg = 'Случай АПЛ с посещением, отличным от "Обращение по поводу заболевания" или "Диспансерное наблюдение", должен быть закрыт!';
				return outputError;
			}
		} else {
			if (getRegionNick().inlist(['buryatiya','kareliya','astra']) && other_count == 1 && 2 != isFinish) {
				outputError.msg = langs('Случай АПЛ с посещением, отличным от "Обращение по поводу заболевания", должен быть закрыт!');
				return outputError;
			}
		}
		if (getRegionNick() == 'buryatiya' && checkNMPDouble && !Ext.isEmpty(data[params.object + '_setDate']) && getValidDT(data[params.object + '_setDate'], '') >= getValidDT('01.05.2019', '') && mode == 'addEvnVizitPL') {
			outputError.msg = 'В рамках текущего ТАП есть посещение с видом обращения в неотложной форме по заболеванию. Добавление еще одного посещения невозможно.';
			return outputError;
		}
		if (getRegionNick().inlist(['buryatiya','kareliya','astra']) && other_count > 0 && mode == 'addEvnVizitPL') {
			outputError.msg = langs('Добавление посещения невозможно, т.к. в рамках текущего случая АПЛ уже есть посещение!');
			return outputError;
		}
		if (getRegionNick().inlist(['kareliya']) && desease_count == 1 && isFinish == 2) {
			outputError.msg = langs('Случай АПЛ с одним посещением по поводу заболевания не может быть закрыт!');
			return outputError;
		}
		if (getRegionNick().inlist(['astra']) && desease_count == 1 && isFinish == 2 && params.object == 'EvnPL') {
			outputError.msg = langs('Случай АПЛ с одним посещением по поводу заболевания не может быть закрыт!');
			return outputError;
		}
		/*if ('buryatiya' == getRegionNick() && desease_count == 1 && isFinish == 2 && params.object == 'EvnPL' && '301' == resultClassCode) {
			outputError.msg = langs('Если в посещении указана цель Заболевание и Результат обращения 301, то в ТАП должно быть не меньше двух посещений');
			return outputError;
		}*/
		if (mode == 'onChange' && 2 == isFinish && !data.ResultClass_id) {
			outputError.msg = null;
			outputError.field = 'ResultClass';
			outputError.link = langs('Результат');
			return outputError;
		}
		if (mode == 'onChange' && 2 == isFinish && !data.FedLeaveType_Code
			&& getRegionNick().inlist(['khak'])
		) {
			outputError.msg = null;
			outputError.field = 'FedLeaveType';
			outputError.link = lang['fed_rezultat'];
			return outputError;
		}
		if (mode == 'onChange' && 2 == isFinish && !data.FedResultDeseaseType_Code
			&& getRegionNick().inlist(['khak'])
		) {
			outputError.msg = null;
			outputError.field = 'ResultDeseaseType';
			outputError.link = lang['fed_ishod'];
			return outputError;
		}
		if (mode == 'onChange' && 2 == isFinish && !data.ResultDeseaseType_id
			&& getRegionNick().inlist(['adygeya', 'vologda', 'buryatiya', 'kareliya', 'krasnoyarsk', 'ekb', 'penza', 'pskov', 'krym', 'yakutiya', 'yaroslavl'])
		) {
			outputError.msg = null;
			outputError.field = 'ResultDeseaseType';
			outputError.link = langs('Исход');
			return outputError;
		}
		//закомментировал код по задаче #194971, так как то, что сделали в #191155 и откатили в #191880 могут обратно захтеть
		/*if (mode == 'onChange' && 2 == isFinish && !data.ResultDeseaseType_fedid && getRegionNick() == 'krasnoyarsk' ) {
			outputError.msg = null;
			outputError.field = 'FedResultDeseaseType';
			outputError.link = langs('Фед. исход');
			return outputError;
		}
		if (mode == 'onChange' && 2 == isFinish && !data.ResultDeseaseType_fedid && getRegionNick() == 'krasnoyarsk' ) {
			outputError.msg = null;
			outputError.field = 'FedResultDeseaseType';
			outputError.link = langs('Фед. исход');
			return outputError;
		}*/
		if (mode == 'onChange' && 2 == isFinish && !UKL && getRegionNick() != 'ekb') {
			outputError.msg = null;
			outputError.field = 'UKL';
			outputError.link = langs('УКЛ');
			return outputError;
		}
		if (mode == 'onChange' && 2 == isFinish && (UKL < 0 || UKL > 1) && getRegionNick() != 'ekb') {
			outputError.field = 'UKL';
			outputError.link = langs('УКЛ');
			outputError.msg = langs('Значение UKL должно быть от 0 до 1');
			return outputError;
		}
		if (mode == 'onChange' && 2 == isFinish && false == isHasDiag) {
			outputError.msg = langs('Случай лечения должен иметь хотя бы один основной диагноз');
			return outputError;
		}
		if (mode == 'onChange' && 2 == isFinish && Ext.isEmpty(DiagL) && getRegionNick() != 'kareliya') {
			outputError.field = 'DiagL';
			outputError.link = langs('Заключ. диагноз');
			outputError.msg = null;
			return outputError;
		}
		if (vizitList.length > 0 && desease_count > 0 && mode == 'addEvnVizitPL') {
			outputSuccess.allowMorbusVizitOnly = true;
		}
		if (vizitList.length > 0 && consul_diagn_count > 0 && mode == 'addEvnVizitPL') {
			outputSuccess.allowConsulDiagnVizitOnly = true;
		}
		if (Date.parseDate(lastEvnVizitPLDate, 'd.m.Y') >= new Date(2016, 0, 1) && 2 == isFinish && wrapDiagConc && wrapDiagConc.isVisible() && !data.Diag_concid && !Ext.isEmpty(data.DiagL_Code) && data.DiagL_Code.toString().substr(0, 1).inlist(['S', 'T'])) {
			outputError.field = 'DiagConc';
			outputError.link = langs('Заключ. внешняя причина');
			outputError.msg = null;
			return outputError;
		}
		if (getRegionNick() == 'kz'){
			var need_mother_check = false;
			if(vizitList.length) {
				for (var i=0; i < vizitList.length; i++) {
					if(vizitList[i].data['ServiceType_SysNick'].inlist(['home', 'ahome', 'neotl'])) {
						need_mother_check = true;
					}
				}
			}
			var firstvizittype_sysnick = null;
			if(vizitList.length && vizitList[0].data['VizitType_SysNick']) {
				firstvizittype_sysnick = vizitList[0].data['VizitType_SysNick']
			}
			if (isFinish == 2 && person_age < 1 && need_mother_check && firstvizittype_sysnick == 'prof' && !me.PersonInfoFrame.getFieldValue('DeputyPerson_id') && me.ignoreMotherCheck) {
				sw.swMsg.show({
					buttons: Ext.Msg.OKCANCEL,
					fn: function(buttonId, text, obj) {
						me.ignoreMotherCheck = true; // проверяем только один раз вне зависимости от результата
						if ('ok' == buttonId) {
							ShowWindow('swPersonEditWindow', {
								Person_id: me.PersonInfoFrame.getFieldValue('Person_id'),
								addMother: true
							});
						} else {
							if (typeof(yes_handler) == 'function') {
								// продолжаем выбранное действие
								yes_handler();
							}
						}
					},
					icon: Ext.Msg.WARNING,
					msg: 'Проверьте информацию о матери для пациента младше 1 года. Для корректной передачи данных в сервис должны быть заполнены поля «Представитель», «Статус представителя» на вкладке «2. Дополнительно» формы  «Человек» если пациент гражданин Казахстана и не является сиротой.',
					title: langs('Предупреждение')
				});
				return false;
			}
		}
		return outputSuccess;
	},
	_checkEvnVK: function(data, params, mode, yes_handler) {
		var me = this;
		var outputSuccess= {
			success: true
		},
		outputError = {
			params: params,
			success: false,
			msg: langs('Ошибка при проверке протокола ВК!')
		};

		if (data.accessType == 'view') {
			if (mode === 'print') {// #120412 в режиме просмотра распечатать без проверок
				yes_handler();
			}
			return outputSuccess;
		}

		var fields = me.EvnVKParams.fields;
		var loadedData = me.EvnVKParams.loadedData;
		var isChanged = false, f, v1, v2;

		for (f in fields) {
			v1 = Ext.isEmpty(loadedData[f])?null:loadedData[f];//загруженные значения
			v2 = Ext.isEmpty(data[f])?null:data[f];//значения для сохранения
			if (f=='EvnVK_isReserve') {
				v1 = v1 || 1;
				v2 = v2 || 1;
			}

			if (v1!=v2) {
				isChanged = true;
				break;
			}
		}

		for (f in fields) {
			v1 = Ext.isEmpty(loadedData[f])?null:loadedData[f];//загруженные значения
			v2 = Ext.isEmpty(data[f])?null:data[f];//значения для сохранения
			if (f=='EvnVK_isReserve') {
				v1 = v1 || 1;
				v2 = v2 || 1;
			}

			if (this.getEvnVKAllowBlank(f) === false && Ext.isEmpty(v2)) {
				outputError.msg = null;
				outputError.link = fields[f].label;
				outputError.field = fields[f].nick;
				return outputError;
			}
		}

		var cur_date = new Date();
		if(!Ext.isEmpty(data.EvnVK_DirectionDate) && data.EvnVK_DirectionDate > cur_date) {
			outputError.msg = langs('Дата направления должна быть не позднее текущей даты!');
			return outputError;
		}
		if(!Ext.isEmpty(data.EvnVK_ConclusionDate) && data.EvnVK_ConclusionDate > cur_date) {
			outputError.msg = langs('Дата получения заключения должна быть не позднее текущей даты!');
			return outputError;
		}
		if(!Ext.isEmpty(data.EvnVK_ConclusionPeriodDate) && !Ext.isEmpty(data.EvnVK_ConclusionDate) && data.EvnVK_ConclusionDate > data.EvnVK_ConclusionPeriodDate) {
			outputError.msg = langs('Дата, до которой действует заключение, должна быть не ранее даты получения заключения МСЭ!');
			return outputError;
		}

		// Если в поле «Вид экспертизы» выбрано значение «Экспертиза временной нетрудоспособности», то...
		if ( data.ExpertiseNameType_Code == 1 ) {
			// ... хотя бы одно из полей «ЛВН» или «ЛВН (ручной ввод)» должно быть заполнено
			if ( Ext.isEmpty(data.EvnStickBase_id) && Ext.isEmpty(data.EvnVK_LVN) ) {
				outputError.msg = langs('Хотя бы одно из полей "ЛВН" или "ЛВН (ручной ввод)" должно быть заполнено!');
				return outputError;
			}

			// ... хотя бы одно из полей «Период освобождения от работы» или «Период освобождения от работы (ручной ввод)» должно быть заполнено
			if ( Ext.isEmpty(data.EvnStickWorkRelease_id) && Ext.isEmpty(data.EvnVK_WorkReleasePeriod) ) {
				outputError.msg = langs('Хотя бы одно из полей "Период освобождения от работы" или "Период освобождения от работы (ручной ввод)" должно быть заполнено!');
				return outputError;
			}
		}

		if( mode != 'openEvnVKExpertWindow' && !this._isEvnVKChairmanSaved(data) ) {
			outputError.msg = langs('Необходимо указать Председателя врачебной комиссии!');
			return outputError;
		}

		if (isChanged) {
			sw.swMsg.show({
				buttons: Ext.Msg.YESNO,
				fn: function( buttonId ){
					if ( buttonId == 'yes' ) {
						me._saveEvnVK(data, {callback: yes_handler});
					}
				},
				msg: langs('Сохранить протокол ВК?'),
				title: langs('Вопрос')
			});
			return {success: false};
		}
		if (mode.inlist(['print','openEvnVKExpertWindow'])) {
			yes_handler();
		}

		return outputSuccess;
	},
	_checkEvnPLDispDriver: function(data, params, mode, yes_handler) {
		var me = this;
		var outputSuccess= {
			success: true
		},
		outputError = {
			params: params,
			success: false,
			msg: 'Ошибка при проверке карты'
		};

		if (data.accessType == 'view') {
			return outputSuccess;
		}
		
		if (Ext.isEmpty(data.EvnPLDispDriver_consDate)) {
			outputError.field = 'ConsDate';
			outputError.link = 'Дата подписания согласия/отказа';
			outputError.msg = null;
			return outputError;
		}
		
		if (data.EvnPLDispDriver_IsFinish == 2) {
			if (Ext.isEmpty(data.EvnPLDispDriver_MedSer)) {
				outputError.field = 'MedSer';
				outputError.link = 'Серия';
				outputError.msg = null;
				return outputError;
			}
			if (Ext.isEmpty(data.EvnPLDispDriver_MedNum)) {
				outputError.field = 'MedNum';
				outputError.link = 'Номер';
				outputError.msg = null;
				return outputError;
			}
			if (Ext.isEmpty(data.EvnPLDispDriver_MedDate)) {
				outputError.field = 'MedDate';
				outputError.link = 'Дата';
				outputError.msg = null;
				return outputError;
			}
			if (Ext.isEmpty(data.ResultDispDriver_id)) {
				outputError.field = 'ResultDispDriver';
				outputError.link = 'Результат';
				outputError.msg = null;
				return outputError;
			}
		}

		return outputSuccess;
	},
    /**
     * Проверяет наличие параметров ноды перед загрузкой в форму просмотра
     */
    isCorrectNode: function (node)
    {
        return (node && node.parentNode && node.getOwnerTree() && node.attributes && node.attributes.object && node.attributes.object_id && node.attributes.object_value);
    },
	isForbiddenCode: function (code)
	{
		return !code.inlist(this.codeListForLoad);
	},
	getDataNode: function (node)
	{
		var key = node.attributes.object_id;
		if (key.toLowerCase() == 'person_id')
		{
			key = 'Person_id';
		}
		return {
			accessType: node.attributes.accessType || '',
			Name: node.attributes.node_name || node.attributes.text,
			Code: node.attributes.object,
			key: key,
			id: node.attributes.object_value,
			level: node.getDepth()
		};
	},
	checkAccessEdit: function(formParams, msg) {
		if (!formParams || !formParams.pmUser_insID)
		{
			log('checkAccessEdit: invalid formParams');
			log(formParams);
			return false;
		}
		if (isSuperAdmin() || formParams.pmUser_insID == getGlobalOptions().pmuser_id)// || isLpuAdmin()
		{
			return true;
		}
		else
		{
			if (msg) sw.swMsg.alert(langs('Сообщение'), msg);
			return false;
		}
	},
	openPrintDoc: function(url)
	{
		window.open(url, '_blank');
	},
	printHtml: function(id)
	{
		var s = Ext.get(id);
        log(s);
		if (!s)
		{
			Ext.Msg.alert(langs('Сообщение'), langs('Секция ')+' '+ id+' ' +langs(' не найдена.'));
			return false;
		}
		var id_salt = Math.random();
		var win_id = 'printEvent' + Math.floor(id_salt*10000);
		var win = window.open('', win_id);
		win.document.write('<html><head><title>Печатная форма</title><link href="/css/emk.css?'+ id_salt +'" rel="stylesheet" type="text/css" /></head><body id="rightEmkPanelPrint">'+ s.dom.innerHTML +'</body></html>');
		var i, el;
		// нужно показать скрытые области для печати
		var printonly_list = Ext.query("div[class=printonly]",win.document);
		for(i=0; i < printonly_list.length; i++)
		{
			el = new Ext.Element(printonly_list[i]);
			el.setStyle({display: 'block'});
		}
		// нужно скрыть элементы управления 
		var tb_list = Ext.query("*[class*=section-toolbar]",win.document);
		tb_list = tb_list.concat(Ext.query("*[class*=sectionlist-toolbar]",win.document));
		tb_list = tb_list.concat(Ext.query("*[class*=item-toolbar]",win.document));
		//tb_list = tb_list.concat(Ext.query("*[class=section-button]",win.document));
		//log(tb_list);
		for(i=0; i < tb_list.length; i++)
		{
			el = new Ext.Element(tb_list[i]);
			el.setStyle({display: 'none'});
		}
		win.document.close();
		//win.print();
	},
	hidePrintOnly: function (rootnode_id)
	{
		//log('rootnode_id: '+ rootnode_id);
		var rootnode = Ext.getDom(rootnode_id);
		var node_list = Ext.query("div[class*=printonly]",rootnode);
		//log(node_list);
		var i, el;
		for(i=0; i < node_list.length; i++)
		{
			el = new Ext.Element(node_list[i]);
			//log(el);
			el.setStyle({display: 'none'});
		}
	},
	onMouseAction: function (e, c, d)
	{
		//log('onMouseAction');
		//log(d);
		var el;
		if (!d || !d.el_id || !d.action || !d.action_params)
		{
			return false;
		}
		// this is Ext.Element
		if (d.el_id != this.id)
		{
			el = Ext.get(d.el_id);
		}
		//log(el);
		if (el)
		{
			switch(d.action)
			{
				case 'setStyle':
					el.setStyle(d.action_params);
				break;
			}
		}
	},
	actionListDblClickBySection:{},
	actionListClickBySection:{},
	actionNameList_View:[],
	actionNameList_Add:[],
	actionNameList_Edit:[],
	actionNameList_Del:[],
	/**
	* Store данных событий, отображаемых в панели просмотра
	* атрибуты записей:
	* object_code string
	* object_key string
	* object_value int
	* parent_object_code string
	* parent_object_key string
	* parent_object_value int
	* subsection array
	* list string
	* id string Имеет формат: object_code +'_'+ object_value
	* data 
	*/
	viewFormDataStore: new Ext.data.SimpleStore(
	{
		autoLoad: true,
		fields:[],
		updateFromMap: function(map, parent)
		{
			this.completeFromMap(map, parent, true);
		},
		completeFromMap: function(map, parent, remove_existing)
		{
			log({
				debug: 'completeFromMap',
				args: arguments,
				store: this
			});
			if (typeof(map) != 'object') return false;
			var object = {},list,subsection, record, item_arr, i,index;
			var value_list = [];
			for (object.code in map)
			{
				//log(object.code);
				if (typeof(map[object.code]) == 'object' && map[object.code].item && Ext.isArray(map[object.code].item))
				{
					item_arr = map[object.code].item;
					object.key = map[object.code].object_key;
					list = map[object.code].list || null;
					subsection = map[object.code].subsection || null;
					//log(item_arr.length);
					for(i=0; i < item_arr.length; i++)
					{
						//log(item_arr[i].data);
						//item_arr[i].data._is_first = (i==0);
						//item_arr[i].data._is_last = (i==(item_arr.length-1));
						item_arr[i].data._item_count = item_arr.length;
						item_arr[i].data._item_index = i;
						record = new Ext.data.Record(item_arr[i].data);
						object.value = item_arr[i].data[object.key];
						value_list.push(object.value);
						if(record)
						{
							record.object_code = object.code;
							record.object_key = object.key;
							record.object_value = object.value;
							record.parent_object_code = (parent && parent.code) || null;
							record.parent_object_key = (parent && parent.key) || null;
							record.parent_object_value = (parent && parent.value) || null;
							record.subsection = subsection;
							record.list = list;
							record.id = object.code +'_'+ object.value;
							//log(record.id);
							if (remove_existing)
							{
								index = this.indexOfId(record.id);
								if(index)
								{
									this.removeAt(index);
								}
							}
							this.add(record);
						}
						if(item_arr[i].xml_data) {
							record = new Ext.data.Record(item_arr[i].xml_data);
							if(record)
							{
								record.object_code = 'EvnXml';
								record.object_key = 'EvnXml_id';
								record.object_value = item_arr[i].EvnXml_id;
								record.parent_object_code = object.code;
								record.parent_object_key = object.key;
								record.parent_object_value = object.value;
								record.XmlType_id = item_arr[i].XmlType_id;
								record.id = 'EvnXml_'+ object.value;
								if (remove_existing)
								{
									index = this.indexOfId(record.id);
									if(index)
									{
										this.removeAt(index);
									}
								}
								this.add(record);
							}
						}
						if (item_arr[i].children)
						{
							this.completeFromMap(item_arr[i].children, object,remove_existing);
						}
					}
					this.each(function(record) {
						if (
							record.object_code == object.code
							&& record.parent_object_key == parent.key && record.parent_object_value == parent.value
							&& !record.object_value.inlist(value_list)
						) {
							index = this.indexOfId(record.id);
							if(index != -1 && record.object_code != "MorbusOnko") //Попытка померить 2 и более онкоспецифики (#140090)
							{
								this.removeAt(index);
							}
						}
					}.createDelegate(this));
				} else {
					this.each(function(record) {
						if (record.object_code == object.code && record.parent_object_key == parent.key && record.parent_object_value == parent.value) {
							index = this.indexOfId(record.id);
							if(index)
							{
								this.removeAt(index);
							}
						}
					}.createDelegate(this));
				}
			}
		},
		data : []
	}),
	/**
	* Создает массивы экшенов для элементов управления формы просмотра в соответствии со списком map и config_actions
	*/
	createActionListForTpl:function (map)
	{
		if (typeof(map) != 'object')
		{
			return false;
		}
		var object_code, obj, action_name, action_obj, i, item_arr;   //BOB - 22.03.2018
		for (object_code in map)
		{
			if (typeof(this.config_actions[object_code]) != 'object' || typeof(map[object_code]) != 'object')
			{
				continue;
			}
			obj = this.config_actions[object_code];
			for (action_name in obj)
			{
				if (typeof(obj[action_name]) != 'object' || !obj[action_name].sectionCode || !obj[action_name].handler || (typeof obj[action_name].handler != 'function'))
				{
					continue;
				}
				action_obj = obj[action_name];
				if (action_obj.actionType)
				{
					switch(action_obj.actionType)
					{
						case 'view':
							if (this.readOnly || this.isReadOnly) {
								if (false == action_name.inlist(['cancelSigned'])) {
									this.actionNameList_View.push(action_name);
								}
							} else {
								this.actionNameList_View.push(action_name);
							}
							break;
						case 'add':this.actionNameList_Add.push(action_name);break;
						case 'edit':this.actionNameList_Edit.push(action_name);break;
						case 'del':this.actionNameList_Del.push(action_name);break;
					}
				}
				if (action_obj.dblClick)
				{
					this.actionListDblClickBySection[action_obj.sectionCode] = action_obj.handler;
				}
				if(typeof(this.actionListClickBySection[action_obj.sectionCode]) != 'object')
				{
					this.actionListClickBySection[action_obj.sectionCode] = {};
				}
				this.actionListClickBySection[action_obj.sectionCode][action_name] = action_obj.handler;
			}
			if (map[object_code] && map[object_code].item && Ext.isArray(map[object_code].item))
			{
				item_arr = map[object_code].item;
				for(i=0; i < item_arr.length; i++)
				{
					if (item_arr[i].children)
					{
						this.createActionListForTpl(item_arr[i].children);
					}
				}
			}
		}
		return true;
	},
	/**
	* Устанавливает обработчики на элементы управления секции формы просмотра с идентификатором code +'_'+ id
	*/
	addHandlerForObject: function (code, id, is_readonly)
	{
		// id секции должны быть в формате: EvnVizitPL_data_21374
		var section_id = code +'_'+ id,
			s = Ext.get(section_id);
		if (!s)
		{
			//log('addHandlerForObject: Section '+ section_id +' NOT found ');
			return false;
		}
		//log('Section '+ section_id +' found');
		var section_action = this.actionListClickBySection[code];
       // log([code,section_action]);
		if (section_action)
		{
			var el;
			var params = {object:code, object_id:id, section_id: section_id, isReadOnly: is_readonly};
			for(var action in section_action)
			{
				// id элементов управления должны быть в формате: EvnVizitPL_protocol_21374_edit
				el = Ext.get(section_id +'_'+ action);
				if (el && this.isMseDepers && new RegExp('print|delete|viewCmpCloseCard').test(action)) {
					el.hide();
					continue;
				}
				if (action == 'uploadFile') {
					is_readonly = false;
				}
                if (action == 'addPrescription') {
                    //log([action, el, is_readonly, action.inlist(this.actionNameList_View), this.isAccessViewFormDelegate(section_id,action)]);
                }
				if (el)
				{
					// content_id = идентификатор содержимого секции, которое нужно обновлять после редактирования
					if(is_readonly)
					{
                        params.isAccessDelegate = this.isAccessViewFormDelegate(section_id,action);
						if (action.inlist(this.actionNameList_View) || params.isAccessDelegate )
						{
                            el.on('click', section_action[action],s,params);
						}
						else
						{
							// часть элементов не надо скрывать (интерактивные поля)
							if (el.id && el.id.indexOf('_input') > 0) {
								// el.hide();
							} else {
								el.hide();
							}
						}
					}
					else
					{
						if (action.inlist(this.actionNameList_Edit))
						{
							params.content_id = section_id +'_content';
						}
						el.on('click', section_action[action],s,params);
					}
				}
				/*
				else
				{
					log(Ext.get(section_id +'_'+ action));
					log('action By Element '+ section_id +'_'+ action +' not found');
				}
				*/
			}
			if(this.actionListDblClickBySection[code] && (!is_readonly))
			{
				s.on('dblclick', this.actionListDblClickBySection[code],s,params);
			}
			return true;
		}
		else
		{
			//log('action By Section '+ section_id +' not found');
			// log(this.actionListClickBySection);
			return false;
		}
	},
	map: null,
	/*
	* Навешивает обработчики на элементы управления формы просмотра в соответствии со списком map
	*/
	addHandlerInTpl: function (map, pid, readonly)
	{
		//log(map);
		//log(pid);
		if (typeof(map) != 'object')
		{
			return false;
		}
		var o='', b,i,j, code, id, id2, ss_arr, ro_arr = [], ro_id, item_arr, parent_id, node, data,
			is_readonly;
		for (o in map)
		{
			if (typeof(map[o]) != 'object')
			{
				continue;
			}
			is_readonly = readonly||false;
			ss_arr = null;
			if (Ext.isArray(map[o].subsection))
			{
				ss_arr = map[o].subsection;
			}
			ro_arr = [];
			if (Ext.isArray(map[o].related_objects))
			{
				ro_arr = map[o].related_objects;
			}
			if (map[o] && map[o].parent_value)
			{
				//log('For section-parent_value: '+ o +'_'+ map[o].parent_value);
				this.addHandlerForObject(o,map[o].parent_value,is_readonly);
			}

            if (map[o] && typeof(map[o].list) == 'string' && pid)
            {
                id2 = pid;
                if(map[o].first_key && map[o].parent_object) {
                    data = this.getObjectData(map[o].parent_object,pid);
                    if(data) {
                        id2 = data[map[o].first_key] +'_'+ pid;
                    }
                }
                //log('For section-list: '+ map[o].list +'_'+ id2);
                this.addHandlerForObject(map[o].list,id2,is_readonly);
            }

			if (map[o] && map[o].item && Ext.isArray(map[o].item))
			{
				item_arr = map[o].item; //parent_value
				code = o;
				for(i=0; i < item_arr.length; i++)
				{
					id = item_arr[i][map[o].object_key];

					if (id||(id==0&&o=='MorbusPregnancy'))
					{
						//получаем тип доступа из ноды
						//node = this.Tree.getNodeById(o +'_'+ id);
						//if(node && node.attributes.accessType && node.attributes.accessType == 'view')
						//получаем тип доступа из map
						data = this.getObjectData(o,id);
                        is_readonly = (this.isReadOnly || readonly || (data && data.accessType && data.accessType == 'view'));
                        if (
                            data && item_arr[i].EvnXml_id
                            && data.EvnXml_pid
                            && this.isAccessViewFormDelegate(o+'List_'+data.EvnXml_pid, 'adddoc')
                            && data.pmUser_insID && getGlobalOptions().pmuser_id == data.pmUser_insID
                        ) {
                            //если делегировано право добавлять документ и документ создан текущим пользователем,
                            //то он должен быть доступен для редактирования
                            is_readonly = false;
                        }
                        if (data && data[o+'_pid']
                            && this.isAccessViewFormDelegate(o+'List_'+data[o+'_pid'], 'add')
                            && data.pmUser_insID && getGlobalOptions().pmuser_id == data.pmUser_insID
                        ) {
                            //если делегировано право добавлять файл и файл создан текущим пользователем,
                            //то должны быть доступны действия редактирования файла
                            is_readonly = false;
                        }
                        if (data && data['EvnUsluga_pid']
                            && this.isAccessViewFormDelegate(o+'List_'+data['EvnUsluga_pid'], 'add')
                            && data.accessType && 'edit' == data.accessType
                        ) {
                            //если делегировано право добавлять услугу и есть доступ к редактированию услуги в accessType,
                            //то должны быть доступны действия редактирования услуги
                            is_readonly = false;
                        }
						if(item_arr[i].EvnXml_id && !is_readonly && (item_arr[i].data && item_arr[i].data.readOnly != 1)) {
                            //log([o,id]);
                            //log(item_arr[i]);
							this.processingXmlData({
								Evn_id: item_arr[i].Evn_id || null,
								Evn_pid: item_arr[i].Evn_pid || null,
								Evn_rid: item_arr[i].Evn_rid || null,
                                EvnClass_id: item_arr[i].EvnClass_id,
                                EvnXml_id: item_arr[i].EvnXml_id,
								XmlType_id: item_arr[i].XmlType_id,
								xml_data: item_arr[i].xml_data,
								instance_id: item_arr[i].data.instance_id || null
							});
						}
						
						id2 = id;
						if(map[o].first_key && map[o].first_key == 'get_pid') {
							id2 = pid +'_'+ id;
						} else if(map[o].first_key && data[map[o].first_key]) {
							id2 = data[map[o].first_key] +'_'+ id;
						}
						var sign_action = null;
						switch(code) {
							case 'EvnPS':
								sign_action = 'signedEvnPS';
								break;
							case 'EvnSection':
								sign_action = 'signedEvnSection';
								break;
							case 'EvnVizitPL':
							case 'EvnVizitPLStom':
								sign_action = 'signedEvnVizitPL';
								break;
						}
						this.accessViewFormDelegate[code+'_'+id2+'_'+sign_action] = (data.accessType == 'view' && data.allowUnsign);
						this.addHandlerForObject(code,id2,is_readonly);
						if (Ext.isArray(ss_arr))
						{
							for(j=0; j < ss_arr.length; j++)
							{
								//log('For subsection: '+ ss_arr[j] +'_'+ id);
								this.addHandlerForObject(ss_arr[j].code,id,is_readonly);
								if (ss_arr[j].code == 'EvnVizitPL_protocol' && item_arr[i].emptyxmltemplate)
								{
									b = Ext.get(ss_arr[j].code +'_'+ id +'_edit');
									b.setStyle({display: 'none'});
									b = Ext.get(ss_arr[j].code +'_'+ id +'_del');
									b.setStyle({display: 'none'});
									b = Ext.get(ss_arr[j].code +'_'+ id +'_print');
									b.setStyle({display: 'none'});
								}
							}
						}
					}

					for(j=0; j < ro_arr.length; j++)
					{
						ro_id = item_arr[i].data[ro_arr[j].field_code] +'_'+ item_arr[i].data[ro_arr[j].field_key];
						this.addHandlerForObject(ro_arr[j].field_code,ro_id,is_readonly);
					}

					if (item_arr[i].children && id)
					{
						this.addHandlerInTpl(item_arr[i].children, id, is_readonly);
					}
				}
			}
		}
		return true;
	},
	getItemObjectFromMap: function(data,object,object_id, map)
	{
		var o = '', i, id, sid = object +'_'+ object_id, item_arr, result;
		if (!map)
			map = this.map;
		if (typeof(map) != 'object')
		{
			return false;
		}
		for (o in map)
		{
			if (typeof(map[o]) != 'object')
			{
				continue;
			}
			if (map[o] && map[o].item && Ext.isArray(map[o].item))
			{
				item_arr = map[o].item;
				for(i=0; i < item_arr.length; i++)
				{
					id = o +'_'+ item_arr[i][o +'_id'];
					//log(id +'='+ sid);
					if (id == sid && typeof(item_arr[i][data]) == 'object')
					{
						return item_arr[i][data];
					}
					if (item_arr[i].children)
					{
						result = this.getItemObjectFromMap(data,object,object_id,item_arr[i].children);
						if (result)
						{
							return result;
						}
					}
				}
			}
		}
		return false;
	},
	getObjectData: function(object,object_id)
	{
		var record = this.viewFormDataStore.getById(object +'_'+ object_id);
		if (record && record.data)
		{
			return record.data;
		}
		//log('In viewFormDataStore not found record with id: '+ object +'_'+ object_id);
		//log(this.viewFormDataStore);
		return false;
	},
	getObjectDataWithFindBy: function(search)
	{
		var index = this.viewFormDataStore.findBy(search);
		if (index == -1) {
			return false;
		}
		return this.viewFormDataStore.getAt(index).data;
	},
	searchObjects: function(search) {
		var objects = [];
		this.viewFormDataStore.each(function(object, index) {
			if (search(object, index)) objects.push(object);
		});
		return objects;
	},
	/**
	 * @todo переписать, чтобы данные брать из this.viewFormDataStore
	 */
	getObjectChildren: function(object,object_id)
	{
		return this.getItemObjectFromMap('children',object,object_id);
	},
	errorControlCodaVisits: function(obj){
		var obj = obj || null;
		var form = this;
		var flagProfile = false;
		if(getRegionNick() == 'vologda' && form.data && form.data.Code.inlist(['EvnPL', 'EvnPLStom']) ){
			//form.data.Code
			var objectChildren = form.getObjectChildren(form.data.Code, form.data.id);
			var EvnClass_SysNick = form.defineParentEvnClass().EvnClass_SysNick;
			var vizits = (EvnClass_SysNick) ? objectChildren[EvnClass_SysNick] : null;
			if(!vizits) return flagProfile;

			var countVizit = vizits.item.length;
			var rootRec = form.viewFormDataStore.getById(form.data.Code + '_'+ form.data.id);

			var controlDate = new Date(2019, 7, 1);
			var evnDisDate = rootRec.get(form.data.Code+'_disDate');
			evnDisDate = Date.parseDate(evnDisDate, 'd.m.Y');
			if(evnDisDate >= controlDate && Ext.isArray(vizits.item) && countVizit>1){
				var firstVizit = vizits.item[countVizit-1];
				var firstVizitCode = firstVizit.data.LpuSectionProfile_Code;
				var arrNotControlProfileCode = [];
				var arrControlProfileCode = [];
				var arrVizitsProfileCode = [];
				for(var i=0; i<vizits.item.length; i++) {
					var vizit = vizits.item[i];
					var code = (obj && obj.object_id && obj.object_id == vizit.data[EvnClass_SysNick+'_id'] && obj.newCode) ? obj.newCode : vizit.data.LpuSectionProfile_Code;

					if(arrVizitsProfileCode.indexOf(code)<0) arrVizitsProfileCode.push(code);
					if(!code.inlist(getGlobalOptions().exceptionprofiles)) {
						flagProfile = true;
						if(arrNotControlProfileCode.indexOf(code)<0) arrNotControlProfileCode.push(code);
					}else{
						arrControlProfileCode.push(code);
					}
				}

				if(arrVizitsProfileCode.length == 1) flagProfile = false;
				if(flagProfile && arrControlProfileCode.length > 0 && arrNotControlProfileCode.length == 1){
					// есть одно или более посещений, в которых указаны профили «97», «57», «58», «42», «68», «3», «136»
					// И в остальных посещениях указан одинаковый профиль отделения, отличный от профилей «97», «57», «58», «42», «68», «3», «136»
					flagProfile = false;
				}
			}
		}
		return flagProfile;
	},
	/**
	 * При загрузке в панель просмотра создаются экземпляры компонента, в котором отображается редактируемый текст
	 * 
	 * @param options
	 * @return {Boolean}
	 */
	processingXmlData: function (options)
	{
		if (!options || typeof(options.xml_data) != 'object' || !options.XmlType_id || !options.XmlType_id.inlist([
			sw.Promed.EvnXml.STAC_PROTOCOL_TYPE_ID,
			sw.Promed.EvnXml.STAC_RECORD_TYPE_ID,
			sw.Promed.EvnXml.STAC_EPIKRIZ_TYPE_ID,
			sw.Promed.EvnXml.MULTIPLE_DOCUMENT_TYPE_ID,
			sw.Promed.EvnXml.EVN_VIZIT_PROTOCOL_TYPE_ID
		])) {
			return false;
		}
		var me = this;

		var dom = Ext.getDom(me.data.Code +'_'+ me.data.id);
		if (options.sectionCode) {
			dom = Ext.getDom(options.sectionCode +'_'+ options.EvnXml_id);
		}

		// Создание и отрисовка объектов для редактирования документа
		me.listEvnXml[options.EvnXml_id] = new sw.Promed.EvnXml({
			XmlType_id: options.XmlType_id,
			EvnClass_id: options.EvnClass_id,
			Evn_id: options.Evn_id,
			Evn_pid: options.Evn_pid,
			Evn_rid: options.Evn_rid,
			EvnXml_id: options.EvnXml_id,
			xml_data: options.xml_data,
			instance_id: options.instance_id,
			dom: dom,
			cmp: me,
			nicEditConfig: {},
			allowStructuredParams: true,
			outputMsg: function(msg, useCase) {
				me.showInfoMsg({
					msg: msg,
					useCase: useCase
				}, (useCase == 'loading'));
			},
			onBeforeSectionSave: function() {
				me.cntSaveRequests++;
				if (!me._viewPanelInfoMsg || me._viewPanelInfoMsg.getUseCase() != 'loading') {
					me.showInfoMsg({}, true);
				}
			},
			onAfterSectionSave: function() {
				me.isFirstAdminCheck = false;
				me.cntSaveRequests--;
				if (0 == me.cntSaveRequests 
				&& (!me._viewPanelInfoMsg || me._viewPanelInfoMsg.getUseCase() != 'info')
				) {
					me.showInfoMsg({}, false);
				}
			}
		});
		return true;
	},
	onLoadSection: function(section_id, section_code, id, map, pid) {
		//log(['test',section_id, section_code, id, map, pid]);
		this.hidePrintOnly(section_code +'_'+ id);
		this.addAutoLinksHandlers();
		var node_list = Ext.query("*[class*=allowed_hide_after_loading]",Ext.getDom(section_id));
		var i, el;
		for(i=0; i < node_list.length; i++)
		{
			el = new Ext.Element(node_list[i]);
			el.setStyle({display: 'none'});
		}
		//log("sdfsdfds",section_id ,section_code +'_'+ id)
		if (section_id == (section_code +'_'+ id))
		{
			this.addHandlerForObject(section_code, id, this.isReadOnly);
		}
		if (map && pid)
		{
			this.addHandlerInTpl(map, pid, this.isReadOnly);
		}
        this.onLoadViewPanel(section_id, section_code, id);
	},
	updateSection: function(section_id, section_code, id, html, map, pid) {
		var el = Ext.get(section_id);
		if (el)
		{
            //log(el.update(html, false));
            //log(Ext.DomHelper.overwrite(el, html, true));
            Ext.DomHelper.overwrite(el, html, false);
			sw.Promed.EvnXml.removeNonExistEditors(this.input_cmp_list);
			this.renderEMDButtons(el);
			this.onLoadSection(section_id, section_code, id, map, pid);
		}
	},
	addSection: function(section_id, params, html, afterSection, map) {
		var el = Ext.get(section_id);
		if (el)
		{
			var newsection_id = params.section_code +'_'+ params.object_id;
			var first_child = el.first();
			var a_s = afterSection && Ext.get(afterSection);
			//log(a_s);
			if (first_child)
			{
				try
				{
					if (a_s)
					{
						Ext.DomHelper.insertAfter(a_s, html);
					}
					else
					{
						// по умолчанию before first
						Ext.DomHelper.insertBefore(first_child, html);
					}
				}
				catch(err)
				{
					// log('При добавлении новой секции возникла ошибка.');
					// log(err.description);
					return false;
				}
			}
			else
			{
				Ext.DomHelper.overwrite(el, html);
				this.renderEMDButtons(el);
			}
			this.onLoadSection(newsection_id, params.section_code, params.object_id, map, params.parent_id);
			//this.updateMap('item_add',newsection_id, map, params);
			var parent = {
				code: null,
				key: params.parent_object_key || null,
				value: params.parent_id || null
			};
			this.viewFormDataStore.updateFromMap(map, parent);
			return true;
		}
		return false;
	},
	/*
	* option_obj.id - id секции, в которую надо добавить результат, например, "EvnPL_21533"
	* option_obj.afterSection - id секции, после которой надо вставить новую секцию (опционально)
	* option_obj.params.section_code - код новой секции
	* option_obj.params.object - код объекта
	* option_obj.params.object_key - имя столбца с id объекта (необходим для сигн.информации, документов)
	* option_obj.params.object_id - id объекта
	* option_obj.params.parent_code - код родителя объекта
	* option_obj.params.parent_key - имя столбца с id родителя объекта
	* option_obj.params.parent_id - id родителя объекта
	* option_obj.callback - метод, который надо вызвать после добавления
	*/
	getSectionContentForAdd: function(option_obj) {
		var form = this;
		Ext.Ajax.request({
			url: '/?c=Template&m=getSectionContentForAdd',
			callback: function(opt, success, response) {
				if (success && response.responseText != '')
				{
					var response_obj = Ext.util.JSON.decode(response.responseText);
					if ( response_obj.success && response_obj.success === true && response_obj['html'] && response_obj['map'])
					{
						var added = form.addSection(option_obj.id, option_obj.params, response_obj.html, option_obj.afterSection, response_obj.map);
						if (added && typeof option_obj.callback == 'function')
						{
							option_obj.callback();
						}
					}
				}
			},
			params: option_obj.params
		});
	},
	reloadEvnReceptGeneralSection: function(params) {
		var form = this;
		if (params.parent_object_value) {
			var el = Ext.get('EvnReceptGeneralList_' + params.parent_object_value);
			if (el) {
				var reload_params = {
					section_code: 'EvnReceptGeneralList',
					object_key: 'EvnReceptGeneral_id',
					object_value: 111222333,
					section_id: 'EvnReceptGeneralList_' + params.parent_object_value,
					parent_object_key: 'EvnVizitPL_id',
					parent_object_value: params.parent_object_value
				};

				form.reloadViewForm(reload_params);
			}
		}
	},
	reloadSection: function(params)
	{
		var emk_form = this;
		this.loadNodeViewSection({
			PersonChild_id: params.PersonChild_id,
			is_reload_one_section: 1,
			Code: params.section_code,
			object_key: params.object_key,
			object_value: params.object_value,
			parent_object: params.parent_object || null,
			parent_object_key: params.parent_object_key || null,
			parent_object_value: params.parent_object_value || null,
			accessType: params.accessType || null,
			param_name: params.param_name || null,
            param_value: params.param_value || null,
            scroll_value: params.scroll_value || null,
			isOnlyLast: params.isOnlyLast || null,
			countDiagConfs: params.countDiagConfs || null,
			MorbusType_id: params.MorbusType_id || null,
			MorbusOnkoVizitPLDop_id: params.MorbusOnkoVizitPLDop_id || null,
			MorbusOnkoLeave_id: params.MorbusOnkoLeave_id || null,
			EvnDiagPLSop_id: params.EvnDiagPLSop_id || null,
			msg: 'Пожалуйста, подождите, идет загрузка ...',//секции '+ params.section_id +'
			onSuccess: function(form, html, map){
				if (params.param_name && 'section' == params.param_name && map[params.section_code]) {
					var el = Ext.get(params.section_id),
						items = map[params.section_code].item || [],
						object_key = map[params.section_code].object_key,
						i, data, record, index;
					form.viewFormDataStore.each(function(rec){
						if (rec.data.PrescriptionType_id 
							&& rec.data.EvnPrescr_pid 
							&& rec.data.PrescriptionType_id == params.object_value 
							&& rec.data.EvnPrescr_pid == params.parent_object_value
							&& !rec.data.section
						) {
							form.viewFormDataStore.remove(rec);
						}
					});

					sw.Promed.EvnXml.removeNonExistEditors(form.input_cmp_list);

					if (el && items) {
						Ext.DomHelper.overwrite(el, html, false);
						form.renderEMDButtons(el);
						for (i=0; i < items.length; i++ ) {
							data = items[i].data;
							form.addHandlerForObject(params.param_value, items[i][object_key], form.isReadOnly || data.accessType == 'view');
							//form.viewFormDataStore.updateFromMap(map, parent);	
							record = new Ext.data.Record(data);
							record.object_code = params.param_value;
							record.object_key = object_key;
							record.object_value = items[i][object_key];
							record.parent_object_code = null;
							record.parent_object_key = null;
							record.parent_object_value = null;
							record.subsection = null;
							record.list = params.param_value + 'List';
							record.id = params.param_value +'_'+ items[i][object_key];
							index = form.viewFormDataStore.indexOfId(record.id);
							form.viewFormDataStore.add(record);
						}
					}
					log('onLoadViewPanel reloadSection', params.section_code);
					var node_list = Ext.query("span[class*=printEvnReceptGeneral]", Ext.getDom(params.section_id));
					var i, btn;
					for (i=0; i < node_list.length; i++) {
						btn = new Ext.Element(node_list[i]);
						btn.on('click', function(e, c, id){
							var parts = id.split('_');
							Ext.Ajax.request({
								url: '/?c=EvnRecept&m=saveEvnReceptGeneralIsPrinted',
								params:{
									EvnReceptGeneral_id: parts[0]
								},
								callback: function(){
									if (getRegionNick() == 'kz') {
										printBirt({
											'Report_FileName': 'EvnReceptMoney_print.rptdesign',
											'Report_Params': '&paramEvnRecept=' + parts[0],
											'Report_Format': 'pdf'
										});
										printBirt({
											'Report_FileName': 'EvnReceptMoney_Oborot_print.rptdesign',
											'Report_Params': '&paramEvnRecept=' + parts[0],
											'Report_Format': 'pdf'
										});
									} else {
										if ('107' == parts[1]) {
											Ext.Ajax.request({
												url: '/?c=EvnRecept&m=getReceptGeneralForm',
												params: {
													EvnReceptGeneral_id: parts[0]
												},
												callback: function(options, success, response) {
													var EvnReceptGeneral_setDate = null;
													if (success) {
														var result = Ext.util.JSON.decode(response.responseText);
														EvnReceptGeneral_setDate = result.EvnReceptGeneral_setDate;
													}
													if (!Ext.isEmpty(EvnReceptGeneral_setDate) && EvnReceptGeneral_setDate > '2019-04-06') { //при дате выписки рецепта позже 07.04.2019, для рецептов с формой 148-1/у-88 используются отдельные шаблоны
														printBirt({
															'Report_FileName': 'EvnReceptGenprint2_new.rptdesign',
															'Report_Params': '&paramEvnRecept=' + parts[0],
															'Report_Format': 'pdf'
														});
														printBirt({
															'Report_FileName': 'EvnReceptGenPrintOb_new.rptdesign',
															'Report_Params': '',
															'Report_Format': 'pdf'
														});
													} else {
														printBirt({
															'Report_FileName': 'EvnReceptGenprint2.rptdesign',
															'Report_Params': '&paramEvnRecept=' + parts[0],
															'Report_Format': 'pdf'
														});
														printBirt({
															'Report_FileName': 'EvnReceptGenPrintOb.rptdesign',
															'Report_Params': '',
															'Report_Format': 'pdf'
														});
													}
												}
											});
										}
										else if ('1-МИ' == parts[1]){
											printBirt({
												'Report_FileName': 'EvnReceptGenprint_1MI.rptdesign',
												'Report_Params': '&paramEvnRecept=' + parts[0],
												'Report_Format': 'pdf'
											});
										}
										else if ('148-88' == parts[1]){
											printBirt({
												'Report_FileName': 'EvnReceptGenprint_1MI.rptdesign',
												'Report_Params': '&paramEvnRecept=' + parts[0],
												'Report_Format': 'pdf'
											});
											Ext.Ajax.request({
												url: '/?c=EvnRecept&m=getReceptGeneralForm',
												params: {
													EvnReceptGeneral_id: parts[0]
												},
												callback: function(options, success, response) {
													var EvnReceptGeneral_setDate = null;
													if (success) {
														var result = Ext.util.JSON.decode(response.responseText);
														EvnReceptGeneral_setDate = result.EvnReceptGeneral_setDate;
													}
													if (!Ext.isEmpty(EvnReceptGeneral_setDate) && EvnReceptGeneral_setDate > '2019-04-07') { //при дате выписки рецепта позже 07.04.2019, для рецептов с формой 148-1/у-88 используются отдельные шаблоны
														printBirt({
															'Report_FileName': 'EvnReceptGenprint_2019.rptdesign',
															'Report_Params': '&paramEvnRecept=' + parts[0],
															'Report_Format': 'pdf'
														});
														printBirt({
															'Report_FileName': 'EvnReceptGenPrintOb_2019.rptdesign',
															'Report_Params': '',
															'Report_Format': 'pdf'
														});
													} else {
														printBirt({
															'Report_FileName': 'EvnReceptGenprint.rptdesign',
															'Report_Params': '&paramEvnRecept=' + parts[0],
															'Report_Format': 'pdf'
														});
														printBirt({
															'Report_FileName': 'EvnReceptGenPrintOb.rptdesign',
															'Report_Params': '',
															'Report_Format': 'pdf'
														});
													}
												}
											});
										}
										else if ('148-88' == parts[1]){
											printBirt({
												'Report_FileName': 'EvnReceptGenprint_1MI.rptdesign',
												'Report_Params': '&paramEvnRecept=' + parts[0],
												'Report_Format': 'pdf'
											});
											Ext.Ajax.request({
												url: '/?c=EvnRecept&m=getReceptGeneralForm',
												params: {
													EvnReceptGeneral_id: parts[0]
												},
												callback: function(options, success, response) {
													var EvnReceptGeneral_setDate = null;
													if (success) {
														var result = Ext.util.JSON.decode(response.responseText);
														EvnReceptGeneral_setDate = result.EvnReceptGeneral_setDate;
													}
													if (!Ext.isEmpty(EvnReceptGeneral_setDate) && EvnReceptGeneral_setDate > '2019-04-07') { //при дате выписки рецепта позже 07.04.2019, для рецептов с формой 148-1/у-88 используются отдельные шаблоны
														printBirt({
															'Report_FileName': 'EvnReceptGenprint_2019.rptdesign',
															'Report_Params': '&paramEvnRecept=' + parts[0],
															'Report_Format': 'pdf'
														});
														printBirt({
															'Report_FileName': 'EvnReceptGenPrintOb_2019.rptdesign',
															'Report_Params': '',
															'Report_Format': 'pdf'
														});
													} else {
														printBirt({
															'Report_FileName': 'EvnReceptGenprint.rptdesign',
															'Report_Params': '&paramEvnRecept=' + parts[0],
															'Report_Format': 'pdf'
														});
														printBirt({
															'Report_FileName': 'EvnReceptGenPrintOb.rptdesign',
															'Report_Params': '',
															'Report_Format': 'pdf'
														});
													}
												}
											});
										}
										else {
											printBirt({
												'Report_FileName': 'EvnReceptGenprint.rptdesign',
												'Report_Params': '&paramEvnRecept=' + parts[0],
												'Report_Format': 'pdf'
											});
											printBirt({
												'Report_FileName': 'EvnReceptGenPrintOb.rptdesign',
												'Report_Params': '',
												'Report_Format': 'pdf'
											});
										}
									}
								}
							});


							/*if (getRegionNick() == 'kz') {
								printBirt({
									'Report_FileName': 'EvnReceptMoney_print.rptdesign',
									'Report_Params': '&paramEvnRecept=' + parts[0],
									'Report_Format': 'pdf'
								});
								printBirt({
									'Report_FileName': 'EvnReceptMoney_Oborot_print.rptdesign',
									'Report_Params': '&paramEvnRecept=' + parts[0],
									'Report_Format': 'pdf'
								});
							} else {
								if ('107' == parts[1]) {
									printBirt({
										'Report_FileName': 'EvnReceptGenprint2.rptdesign',
										'Report_Params': '&paramEvnRecept=' + parts[0],
										'Report_Format': 'pdf'
									});
								} else {
									printBirt({
										'Report_FileName': 'EvnReceptGenprint.rptdesign',
										'Report_Params': '&paramEvnRecept=' + parts[0],
										'Report_Format': 'pdf'
									});
								}
							}*/




							genParams.EvnReceptGeneral_id = parts[0];
							genParams.EvnReceptGeneralDrugLink_id = parts[2];
							if(genParams.EvnReceptGeneralDrugLink_id > 0){
								Ext.Ajax.request({
									url: '/?c=EvnRecept&m=deleteEvnReceptGeneralDrugLink',
									callback: function(opt, success, response) {
										if (success && response.responseText != '')
										{
											var response_obj = Ext.util.JSON.decode(response.responseText);
											emk_form.reloadSection(genParams);
											emk_form.reloadEvnReceptGeneralSection(genParams);
										}
									},
									params: genParams
								});
							}
						}, btn, btn.id);
					}
					var sec_node_list = Ext.query("span[class*=editEvnReceptGeneral]", Ext.getDom(params.section_id));
					for (i=0; i < sec_node_list.length; i++) {
						btn = new Ext.Element(sec_node_list[i]);
						btn.on('click', function(e, c, id){
							if (form.isMseDepers) return false;
							var parts = id.split('_');
							genParams = {EvnReceptGeneral_id:parts[0]};
							form.openForm('swEvnReceptGeneralEditWindow', 'EvnReceptGeneral_id', genParams, 'edit');
						}, btn, btn.id);
					}
					var third_node_list = Ext.query("span[class*=deleteEvnReceptGeneral]", Ext.getDom(params.section_id));
					//var curParams = params;
					var curParams = {};
					Ext.apply(curParams, params);
					for (i=0; i < third_node_list.length; i++) {
						btn = new Ext.Element(third_node_list[i]);
						btn.on('click', function(e, c, id){
							var parts = id.split('_');
							var genParams = {};
							if(typeof curParams == 'object'){
								//genParams = curParams;
								Ext.apply(genParams,curParams);
							}
							genParams.EvnReceptGeneral_id = parts[0];
							genParams.EvnReceptGeneralDrugLink_id = parts[2];
							if(genParams.EvnReceptGeneralDrugLink_id > 0){
								Ext.Ajax.request({
									url: '/?c=EvnRecept&m=deleteEvnReceptGeneralDrugLink',
									callback: function(opt, success, response) {
										if (success && response.responseText != '')
										{
											var response_obj = Ext.util.JSON.decode(response.responseText);
											emk_form.reloadSection(genParams);
											emk_form.reloadEvnReceptGeneralSection(genParams);
										}
									},
									params: genParams
								});
							}
						}, btn, btn.id);
					}
					var four_node_list = Ext.query("span[class*=createEvnReceptGeneral]", Ext.getDom(params.section_id));
					for (i=0; i < four_node_list.length; i++) {
						//btn = new Ext.Element(four_node_list[i]);
						btn = Ext.get(four_node_list[i]);
						btn.on('click', function(e, c, id){
							var genParams = {};
							var ecomp = e;
							if(typeof curParams == 'object'){
								//genParams = curParams;
								Ext.apply(genParams,curParams);
							}
							genParams.EvnCourseTreatDrug_id = id;
							if(genParams.EvnCourseTreatDrug_id > 0){
								Ext.Ajax.request({
									url: '/?c=EvnRecept&m=checkBeforeCreateEvnReceptGeneral',
									callback: function(opt, success, response) {
										if (success && response.responseText != '')
										{
											var response_obj = Ext.util.JSON.decode(response.responseText);
											//addGenParams = genParams;
											var addGenParams = {};
											Ext.apply(addGenParams,genParams);
											delete addGenParams.callback;
											addGenParams.callback = function(){
												emk_form.reloadSection(genParams);
												emk_form.reloadEvnReceptGeneralSection(genParams);
											};
											var openForm = false;
											if(response_obj){

												if(response_obj[0])
												{
													if(response_obj[0].mi)
													{
														addGenParams.ReceptForm_id = 2;
														openForm = true;
													}
													if(response_obj[0].narco)
													{
														//наркотические
														addGenParams.ReceptForm_id = (response_obj[0].narco == 2) ? 8 : 5;
														openForm = true;
													}
													if(response_obj[0].stronggroup)
													{
														//сильнодействующие
														addGenParams.ReceptForm_id = 5;
														openForm = true;
													}
													if(response_obj[0].atxgroup)
													{
														//ATX-группы
														addGenParams.ReceptForm_id = 3;
														openForm = true;
													}

													if(openForm){
														var form = Ext.getCmp('PersonEmkForm');
														form.openForm('swEvnReceptGeneralEditWindow', 'EvnReceptGeneral_id', addGenParams, 'add');
													}
												}
												if(!openForm){
													var genMenu = new Ext.menu.Menu();
													genMenu.add({
														text: 'Новый рецепт по форме 107-1/у',
														value: '',
														handler: function () {
															var form = Ext.getCmp('PersonEmkForm');
															genParams.ReceptForm_id = 3;
															var stateParams = {};
															Ext.apply(stateParams,genParams);
															delete stateParams.callback;
															genParams.callback = function(){
																emk_form.reloadSection(stateParams);
																emk_form.reloadEvnReceptGeneralSection(stateParams);
															};
															form.openForm('swEvnReceptGeneralEditWindow', 'EvnReceptGeneral_id', genParams, 'add');
															
														}
													});
													if(response_obj.length > 0 && response_obj[0].EvnReceptGeneral_SerNum){
														for (var i = 0; i < response_obj.length; i++) {
															genParams.EvnReceptGeneral_id = response_obj[i].EvnReceptGeneral_id;
															var curParams = {};
															Ext.apply(curParams,genParams);
															genMenu.add({
																text: response_obj[i].EvnReceptGeneral_SerNum,
																value: curParams,
																handler: function () {
																	var form = Ext.getCmp('PersonEmkForm');
																	var stateParams = this.value;
																	var opParams = {
																		EvnReceptGeneral_id: this.value.EvnReceptGeneral_id,
																		callback: function(){
																			var form = Ext.getCmp('PersonEmkForm');
																			form.reloadSection(stateParams);
																			form.reloadEvnReceptGeneralSection(stateParams);
																		}
																	};
																	opParams.EvnCourseTreatDrug_id = genParams.EvnCourseTreatDrug_id;
																	form.openForm('swEvnReceptGeneralEditWindow', 'EvnReceptGeneral_id', opParams, 'edit');
																}
															});
														}
													}
													genMenu.show(ecomp.target);
												}
											}
										}
									},
									params: genParams
								});
							}
						}, btn, btn.id);
					}
				} else {
					var parent = {
						code: null,
						key: params.parent_object_key || null,
						value: params.parent_object_value || null
					};
					form.viewFormDataStore.updateFromMap(map, parent);
					if (params.allowCreateAction) {
						form.createActionListForTpl(map);
					}
					form.updateSection(params.section_id, params.section_code, params.object_value, html, map, params.parent_object_value);
					if (form.scroll_value && Ext.fly(form.scroll_value)){
						document.getElementById(form.scroll_value).scrollIntoView();
						document.getElementById('main-center-panel').scrollIntoView();
					}
				}
                //в params.callback может быть проведено позиционирование на другой раздел
				if (typeof params.callback == 'function') {
					params.callback(map);
				}
				form.isFirstAdminCheck = false;
			},
			onError: function(form){
				//sw.swMsg.alert('Ошибка', 'Ошибка загрузки секции. <br/>Не найдена форма отображения.');
			}
		});
	},
	reloadViewForm: function(params)
	{
		if (this.node.id != params.section_id)
		{
			this.reloadSection(params);
		}
		else
		{
			this.loadNodeViewForm(this.Tree.getNodeById(this.node.id), (params.callback||null), (params.scroll_value||null));
		}
	},
	/**
	 * Загружает форму отображения документа объекта
	 */
	loadNodeViewForm: function (node, callback, scroll_value)
	{
		this.openEmkEditWindow(false, node, callback, scroll_value);
	},
	clearNodeViewForm: function ()
	{
		this.rightPanel.collapse();
		this.node = null;
		this.data = null;
		this.requireCheckChange = false;
		this.rightPanel.setTitle(' ');
		this.actionListDblClickBySection = {};
		this.actionListClickBySection = {};
		this.listEvnXml = {};
		this.cntSaveRequests = 0;
		this.actionNameList_View = [];
		this.actionNameList_Add = [];
		this.actionNameList_Edit = [];
		this.actionNameList_Del = [];
		this.map = null;
		sw.Promed.EvnXml.removeEditors(this.input_cmp_list);
		this.input_cmp_list = null;
		this.viewFormDataStore.removeAll();
		this.loadedSpecifics = {};
		var tpl = new Ext.XTemplate(' ');
		tpl.overwrite(this.rightPanel.body, {});
	},
	applyNodeData: function (node)
	{
		log('applyNodeData', node);
		if (!this.isCorrectNode(node)) {
			sw.swMsg.alert(langs('Ошибка'), langs('Ошибка загрузки формы просмотра. <br/>Не передана нода или нода имеет неправильные параметры.'));
			return false;
		}
		if (this.isForbiddenCode(node.attributes.object)) {
			sw.swMsg.alert(langs('Сообщение'), langs('Для данного объекта отсутствует шаблон отображения'));
			return false;
		}
		var data_node = this.getDataNode(node);
		if (!data_node) {
			sw.swMsg.alert(langs('Ошибка'), langs('Ошибка загрузки формы просмотра. <br/>Не удалось получить параметры ноды.'));
			return false;
		}
		//Ext.getCmp('rightEmkPanelButtonPrint').disable();
		this.node = node;
		this.data = data_node;
		this.rightPanel.setTitle(this.data.Name);
		var pnode = node;
		if ( getGlobalOptions().archive_database_enable ) {
			while(!Ext.isEmpty(pnode)) {
				if (pnode.attributes && pnode.attributes.archiveRecord) {
					this.isReadOnly = true;
				}
				pnode = pnode.parentNode;
			}
		}
		return true;
	},
	openEmkEditWindow: function (id, node, callback, scroll_value)
	{
		var form = this;
		form.clearNodeViewForm();

		if ((typeof form.Person_id == 'undefined') || (typeof form.PersonEvn_id == 'undefined') || (typeof form.Server_id == 'undefined') || (!form.Person_Surname) /*|| (!form.Person_Birthday)*/)
		{
			sw.swMsg.alert(langs('Ошибка'), langs('Ошибка загрузки формы просмотра. <br/>Не указаны параметры человека, необходимые для правильной работы формы просмотра.'));
			return false;
		}
		if (!this.applyNodeData(node)) {
			return false;
		}

		form.loadNodeViewSection({
			Code: (!node.attributes.isMicroLab || node.attributes.isMicroLab == 1) ? form.data.Code : 'BactEvnUslugaPar',
			object_key: form.data.key,
			object_value: form.data.id,
            scroll_value: scroll_value || null,
			msg: langs('Пожалуйста, подождите, идет загрузка формы просмотра...'),
			onSuccess: function(form, html, map){
				var tpl = new Ext.XTemplate(html);
				tpl.overwrite(form.rightPanel.body, {});
				form.renderEMDButtons(form.rightPanel.body);
				form.createActionListForTpl(map);
				var parent = {};
				form.viewFormDataStore.completeFromMap(map,parent);
				form.map = map;
				var access_type = 'edit';
				var data = form.getObjectData(form.data.Code,form.data.id);
				if(data && data.accessType)
					access_type = data.accessType;
				if (form.data.key == 'Person_id')
				{
					form.addHandlerInTpl(map,form.data.id, (form.isReadOnly || access_type == 'view'));
					parent.code = 'Person';
					parent.key = 'Person_id';
					parent.value = form.data.id;
				}
				else
				{
					form.addHandlerInTpl(map, null, (form.isReadOnly || access_type == 'view'));
				}
				
				if ( getRegionNick() == 'buryatiya' && !Ext.isEmpty(map.EvnPLStom) ) {
					var EvnVizitPLStom_list = map.EvnPLStom.item[0].children.EvnVizitPLStom.item;

					for ( var index = 0; index < EvnVizitPLStom_list.length; index++ ) {
						var EvnDiagPLStom_list = EvnVizitPLStom_list[index].children.EvnDiagPLStom.item;
						var EvnVizitPLStom_id = EvnVizitPLStom_list[index].EvnVizitPLStom_id;
						if ( typeof(EvnDiagPLStom_list) == 'object' && EvnDiagPLStom_list.length != 0 ) {
							Ext.get('EvnDiagPLStomList_' + EvnVizitPLStom_id + '_add').hide();
						} else {
							Ext.get('EvnDiagPLStomList_' + EvnVizitPLStom_id + '_add').show();
						}
					}
				}

				form.hidePrintOnly(form.data.Code +'_'+ form.data.id);
				form.addAutoLinksHandlers();
				var node_list = Ext.query("*[class*=allowed_hide_after_loading]",Ext.getDom(form.data.Code +'_'+ form.data.id));
				var i, el;
				for(i=0; i < node_list.length; i++)
				{
					el = new Ext.Element(node_list[i]);
					el.setStyle({display: 'none'});
				}
				if(data.EvnPS_setDate){
					form.Person_age = swGetPersonAge(form.PersonInfoFrame.getFieldValue('Person_Birthday'),Date.parseDate(data.EvnPS_setDate,'d.m.Y'));
				}else{
					form.Person_age = 999;
				}
				/*
				node_list = Ext.query("tr[class*=list-item]");
				for(i=0; i < node_list.length; i++)
				{
					el = new Ext.Element(node_list[i]);
					el.on('mouseover', form.onMouseAction,el,{el_id: (el.id +'_toolbar'), action: 'setStyle', action_params: {display: 'block'}});
					el.on('mouseout', form.onMouseAction,el,{el_id: (el.id +'_toolbar'), action: 'setStyle', action_params: {display: 'none'}});
				}
				// log(form.actionListClickBySection);
				// log(form.data);
				// log(form.actionListDblClickBySection);
				// log(form.actionNameList_Edit);
				*/
				form.rightPanel.expand();
				//Ext.getCmp('rightEmkPanelButtonPrint').enable();
				if (!form.Tree.getSelectionModel().isSelected(node)) 
				{
					form.Tree.getSelectionModel().select(node); 
				}
				form.savePosition();
				form.saveFormViewState(node);
                if (form.scroll_value && Ext.fly(form.scroll_value) && !form.notfirstTime){
					form.rightPanel.body.dom.scrollTop = document.getElementById(form.scroll_value).offsetTop;
                    //document.getElementById(form.scroll_value).scrollIntoView();
                    //document.getElementById('main-center-panel').scrollIntoView();
                }
                form.onLoadViewPanel((form.data.Code +'_'+ form.data.id), form.data.Code, form.data.id);
                //в callback может быть проведено позиционирование на другой раздел
                if (typeof callback == 'function') {
                    callback();
                }
               	form.isFirstAdminCheck = false;
				form.requireCheckChange = true;
				var r = Ext.get('rightEmkPanel');
				if(node.attributes.archiveRecord&&node.attributes.archiveRecord==1){
					r.insertFirst("<div id='ArchivePanel'><img style='margin: 7px 9px 0 10px;' src='img/icons/archiveEmk16.png'/><span>Архивные данные в режиме просмотра.</span><div style='margin: 7px 13px 0 0;' onclick='Ext.get(\"ArchivePanel\").remove()' id='clsarchbtn'></div></div>")
				}
				//BOB - 13.06.2018
				//alert(form.ARMTypeFrom);   //BOB - 13.06.2018
//				$('a[id^="EvnReanimatPeriod_"][id$="_delete"]').hide();
//				$('a[id^="EvnReanimatPeriod_"][id$="_edit"]').hide();
				if ((form.ARMTypeFrom) && (form.ARMTypeFrom.inlist(['reanimation','stac']))){				
					//alert('show ' + form.ARMTypeFrom);   //BOB - 13.06.2018
					Ext.select('a[id^="EvnReanimatPeriod_"][id$="_delete"]').each(function(el){
						el.show();
					});
					Ext.select('a[id^="EvnReanimatPeriod_"][id$="_edit"]').each(function(el){
						el.show();
					});					
				}
				else {
					//alert('hide ' + form.ARMTypeFrom);   //BOB - 13.06.2018
					Ext.select('a[id^="EvnReanimatPeriod_"][id$="_delete"]').each(function(el){
						el.hide();
					});
					Ext.select('a[id^="EvnReanimatPeriod_"][id$="_edit"]').each(function(el){
						el.hide();
					});
				}
			},
			onError: function(form){
				form.clearNodeViewForm();
				sw.swMsg.alert(langs('Ошибка'), langs('Ошибка загрузки формы просмотра. <br/>Возможно, документ был удален либо указан идентификатор несуществующего документа.'));
				if (!form.Tree.getSelectionModel().isSelected(node)) form.Tree.getSelectionModel().select(node); 
				form.savePosition();
			}
		});
        return true;
	},
	renderEMDButtons: function(el) {
		if (getRegionNick() == 'kz') {
			return; // для Казахстана не нужна подпись refs #113642
		}

		var form = this;
		// рендерим кнопку для подписи (компонент 6-го ExtJS).
		if (el && typeof el.query == 'function') {
			var els = el.query('div.emd-here');
			Ext6.each(els, function(domEl) {
				//#160801 если в элементе уже есть emd панель, дублировать не будем
				var emd = domEl.querySelector('.emd-panel');
				if(!emd){
					var el = Ext6.get(domEl);
					var swEMDPanel = Ext6.create('sw.frames.EMD.swEMDPanel', {
						renderTo: domEl,
						width: 40,
						height: 30
					});
					swEMDPanel.setParams({
						EMDRegistry_ObjectName: el.getAttribute('data-objectname'),
						EMDRegistry_ObjectID: el.getAttribute('data-objectid')
					});
					if (el.getAttribute('data-minsigncount')) {
						swEMDPanel.setMinSignCount(el.getAttribute('data-minsigncount'));
					}
					if (el.getAttribute('data-signcount')) {
						swEMDPanel.setSignCount(el.getAttribute('data-signcount'));
					}
					swEMDPanel.setIsSigned(el.getAttribute('data-issigned'));
					if (el.getAttribute('data-disabledsign') && el.getAttribute('data-disabledsign') == "1") {
						swEMDPanel.setReadOnly(true);
					}
				}
			});
		}
	},
	temperatureChart: function( chartData ){
		// SERIAL CHART
		var chart = new AmCharts.AmSerialChart();
		chart.dataProvider = chartData;
		chart.pathToImages = "http://www.amcharts.com/lib/3/images/";
		chart.categoryField = "date";
		chart.balloon.bulletSize = 5;
		chart.colors = ['#0F88C9'];
		chart.zoomOutText = langs('Показать все');
		
		// this method is called when chart is first inited as we listen for "dataUpdated" event
		function zoomChart() {
			// different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues
			chart.zoomToIndexes(chartData.length - 40, chartData.length - 1);
		}

		// listen for "dataUpdated" event (fired when chart is rendered) and call zoomChart method when it happens
		chart.addListener("dataUpdated", zoomChart);

		// AXES
		// category
		var categoryAxis = chart.categoryAxis;
		categoryAxis.axisAlpha = 0;
		categoryAxis.parseDates = true;
		categoryAxis.minPeriod = "DD";
		categoryAxis.position = 'bottom';

		// value                
		var valueAxis = new AmCharts.ValueAxis();
		valueAxis.autoGridCount = false;
		valueAxis.axisAlpha = 0;
		valueAxis.labelsEnabled = true;
		valueAxis.minimum = 35;
		valueAxis.maximum = 42;
		valueAxis.gridCount = 8;
		valueAxis.labelFrequency = 1;
		chart.addValueAxis(valueAxis);

		// GRAPH
		var graph = new AmCharts.AmGraph();
		graph.title = "red line";
		graph.valueField = "value";
		graph.bullet = "round";
		graph.bulletBorderColor = "#FFFFFF";
		graph.bulletBorderThickness = 2;
		graph.bulletBorderAlpha = 1;
		graph.lineThickness = 2;
		graph.lineColor = "#0F88C9";
//		graph.negativeLineColor = "#efcc26";
		graph.hideBulletsCount = 50; // this makes the chart to hide bullets when there are more than 50 series in selection
		chart.addGraph(graph);

		// CURSOR
		/*
		var chartCursor = new AmCharts.ChartCursor();
		chartCursor.cursorPosition = "mouse";
		chartCursor.pan = true; // set it to fals if you want the cursor to work in "select" mode
		chart.addChartCursor(chartCursor);
		*/

		// SCROLLBAR
		var chartScrollbar = new AmCharts.ChartScrollbar();
		chart.addChartScrollbar(chartScrollbar);
		
		return chart;
	},
	bloodPressureChart: function( chartData ){
		
		var dataProvider = [];
		var i = 0;
		for( var key in chartData ) if ( chartData.hasOwnProperty(key) ) {
			var item = chartData[key];
			var start = { date: item.date }
			start['value'+i] = item.low
			var end = { date: item.date }
			end['value'+i] = item.high
			dataProvider.push(start);
			dataProvider.push(end);
			i++;
		}
		
		// SERIAL CHART
		var chart = new AmCharts.AmSerialChart();
		chart.dataProvider = dataProvider;
		chart.pathToImages = "http://www.amcharts.com/lib/3/images/";
		chart.categoryField = "date";
		chart.balloon.bulletSize = 5;
		chart.colors = ['#0F88C9'];
		chart.zoomOutText = langs('Показать все');
		
		// this method is called when chart is first inited as we listen for "dataUpdated" event
		function zoomChart() {
			// different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues
			chart.zoomToIndexes(chartData.length - 40, chartData.length - 1);
		}

		// listen for "dataUpdated" event (fired when chart is rendered) and call zoomChart method when it happens
		chart.addListener("dataUpdated", zoomChart);

		// AXES
		// category
		var categoryAxis = chart.categoryAxis;
		categoryAxis.axisAlpha = 0;
		categoryAxis.parseDates = true;
		categoryAxis.minPeriod = "DD";
		categoryAxis.position = 'bottom';

		// value                
		var valueAxis = new AmCharts.ValueAxis();
//		valueAxis.autoGridCount = false;
		valueAxis.axisAlpha = 0;
		valueAxis.labelsEnabled = true;
		valueAxis.minimum = 50;
		valueAxis.maximum = 225;
//		valueAxis.gridCount = 8;
		valueAxis.labelFrequency = 1;
		chart.addValueAxis(valueAxis);

		// GRAPH
		var i = 0;
		for( var key in chartData ){
			var graph = new AmCharts.AmGraph();
			graph.title = "red line";
			graph.valueField = "value"+i;
			graph.bullet = "round";
			graph.bulletBorderColor = "#FFFFFF";
			graph.bulletBorderThickness = 2;
			graph.bulletBorderAlpha = 1;
			graph.lineThickness = 2;
			graph.lineColor = "#0F88C9";
			graph.hideBulletsCount = 50;
			chart.addGraph(graph);
			
			i++;
		}

		// CURSOR
		/*
		var chartCursor = new AmCharts.ChartCursor();
		chartCursor.cursorPosition = "mouse";
		chartCursor.pan = true; // set it to fals if you want the cursor to work in "select" mode
		chart.addChartCursor(chartCursor);
		*/

		// SCROLLBAR
		var chartScrollbar = new AmCharts.ChartScrollbar();
		chart.addChartScrollbar(chartScrollbar);
		
		return chart;
	},
	pulseChart: function( chartData ){
		// SERIAL CHART
		var chart = new AmCharts.AmSerialChart();
		chart.dataProvider = chartData;
		chart.pathToImages = "http://www.amcharts.com/lib/3/images/";
		chart.categoryField = "date";
		chart.balloon.bulletSize = 5;
		chart.colors = ['#0F88C9'];
		chart.zoomOutText = langs('Показать все');
		
		// this method is called when chart is first inited as we listen for "dataUpdated" event
		function zoomChart() {
			// different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues
			chart.zoomToIndexes(chartData.length - 40, chartData.length - 1);
		}

		// listen for "dataUpdated" event (fired when chart is rendered) and call zoomChart method when it happens
		chart.addListener("dataUpdated", zoomChart);

		// AXES
		// category
		var categoryAxis = chart.categoryAxis;
		categoryAxis.axisAlpha = 0;
		categoryAxis.parseDates = true;
		categoryAxis.minPeriod = "DD";
		categoryAxis.position = 'bottom';

		// value                
		var valueAxis = new AmCharts.ValueAxis();
		valueAxis.autoGridCount = false;
		valueAxis.axisAlpha = 0;
		valueAxis.labelsEnabled = true;
		// valueAxis.minimum = 60;
		// valueAxis.maximum = 220;
		valueAxis.gridCount = 10;
		valueAxis.labelFrequency = 1;
		chart.addValueAxis(valueAxis);

		// GRAPH
		var graph = new AmCharts.AmGraph();
		graph.title = "red line";
		graph.valueField = "value";
		graph.bullet = "round";
		graph.bulletBorderColor = "#FFFFFF";
		graph.bulletBorderThickness = 2;
		graph.bulletBorderAlpha = 1;
		graph.lineThickness = 2;
		graph.lineColor = "#0F88C9";
//		graph.negativeLineColor = "#efcc26";
		graph.hideBulletsCount = 50; // this makes the chart to hide bullets when there are more than 50 series in selection
		chart.addGraph(graph);

		// CURSOR
		/*
		var chartCursor = new AmCharts.ChartCursor();
		chartCursor.cursorPosition = "mouse";
		chartCursor.pan = true; // set it to fals if you want the cursor to work in "select" mode
		chart.addChartCursor(chartCursor);
		*/

		// SCROLLBAR
		var chartScrollbar = new AmCharts.ChartScrollbar();
		chart.addChartScrollbar(chartScrollbar);
		
		return chart;
	},
	
    /**
     * Дополнительная логика после того, как в панель просмотра
     * был загружен раздел или полный интерактивный документ
     * и были добавлены обработчики и была выполнена другая общая логика
     * @param section_id
     * @param section_code
     * @param id
     */
    onLoadViewPanel: function(section_id, section_code, id)
    {
        var me = this, data, children, cnt, isReadOnly;
        log({
            debug: 'onLoadViewPanel',
            scroll_value: me.scroll_value,
            notfirstTime: me.notfirstTime,
            section_id: section_id,
            section_code: section_code,
            id: id
        });
        if(!me.input_cmp_list) me.input_cmp_list = {};
        switch (section_code) {
            case 'EvnPLStom':
                data = me.getObjectData('EvnPLStom', id);
                children = me.getObjectChildren('EvnPLStom', id);
                if (data && children && children.EvnVizitPLStom
                    && children.EvnVizitPLStom.item.length > 0
                ) {
                    isReadOnly = (me.isReadOnly || data.accessType == 'view');
                    cnt = children.EvnVizitPLStom.item.length;
                    for (var i=0; i < cnt; i++) {
                        data = children.EvnVizitPLStom.item[i].data;
                        if (data) {
                            me.createToothMap(data, isReadOnly);
                            me.createParodontogram(data, isReadOnly);
                            me.toogleAddEvnUslugaStomByMes(data, isReadOnly);
							me.onChangeVizitDiag('EvnVizitPLStom', data.EvnVizitPLStom_id, data, false, 'onLoadViewPanel');
                        }
                    }
                }
                break;
            case 'EvnVizitPLStom':
                data = me.getObjectData(section_code, id);
                if (data) {
                    me.createToothMap(data, me.isReadOnly);
                    me.createParodontogram(data, me.isReadOnly);
                    me.toogleAddEvnUslugaStomByMes(data, me.isReadOnly);
					me.onChangeVizitDiag(section_code, id, data, false, 'onLoadViewPanel');
					me.onChangeVizitDeseaseType(section_code, id, data, true);
                }
                break;
            case 'EvnUslugaStom':
                id = section_id.split('_')[1];
                data = me.getObjectData('EvnVizitPLStom', id);
                if (data) {
                    me.toogleAddEvnUslugaStomByMes(data, me.isReadOnly);
                }
                break;
			case 'EvnPL':
				data = me.getObjectData('EvnPL', id);
				children = me.getObjectChildren('EvnPL', id);
				me.setDiagConcComboVisible('EvnPL', data.EvnPL_id, data, 'onLoadViewPanel');
				me.ignoreMotherCheck = false;
				if (data && children && children.EvnVizitPL && children.EvnVizitPL.item
					&& children.EvnVizitPL.item.length > 0
					) {
					isReadOnly = (me.isReadOnly || data.accessType == 'view');
					cnt = children.EvnVizitPL.item.length;
					for (var i=0; i < cnt; i++) {
						data = children.EvnVizitPL.item[i].data
						if (data) {
							me.onChangeVizitDiag('EvnVizitPL', data.EvnVizitPL_id, data, false, 'onLoadViewPanel');
						}
					}
				}
				break;
			case 'EvnVizitPL':
				data = me.getObjectData(section_code, id);
				if (data) {
					me.onChangeVizitDiag(section_code, id, data, false, 'onLoadViewPanel');
					me.onChangeVizitDeseaseType(section_code, id, data, true);
				}
				break;
			case 'EvnPS':
				data = me.getObjectData('EvnPS', id);
				children = me.getObjectChildren('EvnPS', id);
				if (data && children && children.EvnSection && children.EvnSection.item && children.EvnSection.item.length > 0) {
					isReadOnly = (me.isReadOnly || data.accessType == 'view');
					cnt = children.EvnSection.item.length;
					for (var i=0; i < cnt; i++) {
						data = children.EvnSection.item[i].data
						if (data) {
							me.checkDiagSpecific('EvnSection', data.EvnSection_id, data, 'onLoadViewPanel');
						}
					}
				}
				break;
			case 'EvnSection':
				data = me.getObjectData(section_code, id);
				log(['es', data]);
				if (data) {
					me.checkDiagSpecific('EvnSection', data.EvnSection_id, data, 'onLoadViewPanel');
				}
				break;
			case 'EvnVK':
				data = me.getObjectData(section_code, id);
				me._onEvnVKLoad(data);
				break;

			case 'SignalInformationAll':
			case 'EvnStickOpenInfo':
				var item = Ext.get('EvnStickOpenInfo_' + id +'_containerWorkReleaseCalculation');
				if (item) {
					if (this.PersonInfoFrame.getFieldValue('Person_Age') < 15) {
						item.setDisplayed('inline');
					} else {
						item.setDisplayed('none');
					}
				}
				break;
			case 'FreeDocument':
				me.toggleDisplayDocument(id, section_code, false);
			case 'EvnPLDispDriver':

				me.checkDriverRegistry();
				me.loadEvnPLDispDriverCB(id, section_code);

				if (me.isDigitalTicketCompleteSelected) {
					var prms = {
						section_code: section_code,
						id: id
					};


					me.fireDigitalTicketComplete('paid', prms);
				}

				break;
        }
    },
    toogleAddEvnUslugaStomByMes: function(data, readOnly)
    {
        var me = this,
            id = data.EvnVizitPLStom_id,
            el = Ext.get('EvnUslugaStomList_' + id + '_addByMes');
        if (readOnly || data.accessType == 'view' || !el) {
            return false;
        }
        el.setStyle({display: data.Mes_id ? 'block' : 'none'});
    },
    createToothMap: function(data, readOnly)
    {
        var me = this,
            id = data.EvnVizitPLStom_id,
            el_id = 'EvnVizitPLStom_' + id + '_ToothMap',
            cmp_id = el_id + 'Panel';
        if (!Ext.get(el_id)) {
            return false
        }
        if (me.input_cmp_list[cmp_id]) {
            me.input_cmp_list[cmp_id].destroy();
        }
        me.input_cmp_list[cmp_id] = new sw.Promed.ToothMapPanel({
            id: cmp_id,
            renderTo: el_id,
            border: false,
            collapsible: false,
            bodyStyle: 'background-color: #fff;',
            layout: 'border',
            width:750,
            height:300,
            topToolbarStyle: 'background: #E8E8E8; border: 1px solid #C0C0C0;',
            style: 'margin-left:-1px;',
            onLoad: function(panel) {
            	var rH = Ext.select('.ToothMap').elements[0].clientHeight;
            	if(rH){
            		rH += 30; 
            		panel.setHeight(rH);
            	}
                panel.expand();
            }
        });
        me.input_cmp_list[cmp_id].doReset();
        me.input_cmp_list[cmp_id].isLoaded = false;
        me.input_cmp_list[cmp_id].setReadOnly(readOnly || data.accessType == 'view');
        me.input_cmp_list[cmp_id].applyParams(me.Person_id, id, data.EvnVizitPLStom_setDate);
        me.input_cmp_list[cmp_id].doLoad();
        return true;
    },
    createParodontogram: function(data, readOnly) {
        var me = this,
            id = data.EvnVizitPLStom_id,
            wrap = Ext.get('EvnVizitPLStom_' + id + '_ParodontogramWrap'),
            btn = Ext.get('EvnVizitPLStom_' + id + '_addParodontogram'),
            isDisableBtn = (
                (data.EvnUslugaParodontogram_id 
                && data.EvnVizitPLStom_id == data.EvnUslugaParodontogram_pid)
                || readOnly || data.accessType == 'view'
            ),
            el_id = 'EvnVizitPLStom_' + id + '_Parodontogram',
            el = Ext.get(el_id),
            cmp_id = el_id + 'Panel';
        if (btn && wrap && !isDisableBtn) {
            wrap.on('mouseover', function(){ 
                btn.setDisplayed(true);
            });
            wrap.on('mouseout', function(){ 
                btn.setDisplayed(false);
            });
        }
        if (!el || !data.EvnUslugaParodontogram_id) {
            return false
        }
        if (me.input_cmp_list[cmp_id]) {
            me.input_cmp_list[cmp_id].destroy();
        }
        me.input_cmp_list[cmp_id] = new sw.Promed.ParodontogramPanel({
            id: cmp_id,
            renderTo: el_id,
			hiddenDelBtn: true,
            width: 660,
            topToolbarStyle: 'background: #E8E8E8; border: 1px solid #C0C0C0;',
            style: 'margin-left:-1px;'
        });
        me.input_cmp_list[cmp_id].doReset();
        me.input_cmp_list[cmp_id].setReadOnly(true || data.accessType == 'view');
        me.input_cmp_list[cmp_id].applyParams(me.Person_id,
            data.EvnUslugaParodontogram_id,
            data.EvnVizitPLStom_setDate);
        el.setStyle({display: 'none'});
    },
    toggleParodontogram: function(el_data) {
        var me = this,
            section_id = 'EvnVizitPLStom_'+ el_data.object_id + '_Parodontogram',
            section_el = Ext.get(section_id),
            cmp_id = section_id + 'Panel';
        if(!section_el || !me.input_cmp_list[cmp_id]) {
            return false;
        }
        if(!me.input_cmp_list) me.input_cmp_list = {};
        if(0 == me.input_cmp_list[cmp_id].mainViewPanelStore.getCount()) {
            me.input_cmp_list[cmp_id].doLoad();
        }
        me.toggleDisplay(section_id, section_el.isDisplayed());
        return true;
    },

    toggleDisplayEvnObservGraphs: function(d) {		
		var EvnObserv_pid = d.object_id,
			section_id = 'EvnSection_data_'+ EvnObserv_pid + '_wrapEvnObservGraphs',
			section_el = Ext.get(section_id),
			me = this;
		if (!section_el) {
			return false;
		}
		if (section_el.dom.innerHTML.length == 0) {
			me.reloadViewForm({
				section_code: 'EvnObservGraphs',
				object_key: 'EvnObservGraphs_id',
				object_value: 0,
				parent_object_key: 'EvnObserv_pid',
				parent_object_value: EvnObserv_pid,
				section_id: section_id,
                callback: function() {
                    var data = me.getObjectData('EvnObservGraphs', EvnObserv_pid),
						ts = 0,
						tt = 0,
						temperatureData = [],
						pulseData = [],
						bloodPressureData = [];
					if (data && data.data && data.data.time_dates) {
						data = data.data;
					} else {
						data = {};
					}
					// Данные температуры
					if (typeof data.temperature == 'object') {
						for (ts in data.temperature) {					
							if (typeof data.temperature[ts] == 'object' && data.time_dates[ts])  {
								for (tt in data.temperature[ts]) {					
									temperatureData.push({
										value: parseFloat( data.temperature[ts][tt] ),
										date: Date.parseDate(data.time_dates[ts], 'd.m.Y')
									});
								}
							}
						}
					}
					// Данные пульса
					if (typeof data.pulse == 'object') {
						for (ts in data.pulse) {					
							if (typeof data.pulse[ts] == 'object' && data.time_dates[ts])  {
								for (tt in data.pulse[ts]) {					
									pulseData.push({
										value: parseFloat( data.pulse[ts][tt] ),
										date: Date.parseDate(data.time_dates[ts], 'd.m.Y')
									});
								}
							}
						}
					}
					// Данные артериального давления
					if (typeof data.blood_pressure == 'object') {
						for (ts in data.blood_pressure) {					
							if (typeof data.blood_pressure[ts] == 'object' && data.time_dates[ts])  {
								for (tt in data.blood_pressure[ts]) {
									if (typeof data.blood_pressure[ts][tt] == 'object')  {
										data.blood_pressure[ts][tt].date = Date.parseDate(data.time_dates[ts], 'd.m.Y');
										bloodPressureData.push(data.blood_pressure[ts][tt]);
									}
								}
							}
						}
					}
					// Рисуем график температуры
					if ( temperatureData.length ) {
						var temperatureChart = me.temperatureChart(temperatureData);
						temperatureChart.write('eog-'+EvnObserv_pid+'-temperature');
					} else {
						Ext.get('eog-'+EvnObserv_pid+'-temperature-title').setStyle('display','none');
						Ext.get('eog-'+EvnObserv_pid+'-temperature').setStyle('display','none');
					}
					// Рисуем график пульса
					if ( pulseData.length ) {
						var pulseChart = me.pulseChart(pulseData);
						pulseChart.write('eog-'+EvnObserv_pid+'-pulse');
					} else {
						Ext.get('eog-'+EvnObserv_pid+'-pulse-title').setStyle('display','none');
						Ext.get('eog-'+EvnObserv_pid+'-pulse').setStyle('display','none');
					}
					// Рисуем график артериального давления
					if ( bloodPressureData.length ) {
						var bloodPressureChart = me.bloodPressureChart(bloodPressureData);
						bloodPressureChart.write('eog-'+EvnObserv_pid+'-blood-pressure');
					} else {
						Ext.get('eog-'+EvnObserv_pid+'-blood-pressure-title').setStyle('display','none');
						Ext.get('eog-'+EvnObserv_pid+'-blood-pressure').setStyle('display','none');
					}
                }
			});
		}
		me.toggleCanvasDisplay(section_id);
		return true;
    },

	loadNodeViewSection: function(option_obj)
	{
		var selNode = this.Tree.getSelectionModel().getSelectedNode();
		var params = {
			user_MedStaffFact_id: this.userMedStaffFact.MedStaffFact_id,
			scroll_value: option_obj.scroll_value||null,
			object: option_obj.Code,
			object_id: option_obj.object_key,
			object_value: option_obj.object_value,
			archiveRecord: 0
		};

		if (selNode && selNode.attributes && selNode.attributes.archiveRecord) {
			params.archiveRecord = selNode.attributes.archiveRecord;
		}

		if(Ext.get('ArchivePanel')!=null){
					Ext.get('ArchivePanel').remove();
				}
		if(option_obj.is_reload_one_section)
		{
			params.is_reload_one_section = 1;
		}
		if(option_obj.parent_object)
		{
			params.parent_object = option_obj.parent_object;
		}
		if(option_obj.parent_object_key)
		{
			params.parent_object_id = option_obj.parent_object_key;
		}
		if(option_obj.parent_object_value)
		{
			params.parent_object_value = option_obj.parent_object_value;
		}
		if(option_obj.param_name)
		{
			params.param_name = option_obj.param_name;
		}
		if(option_obj.param_value)
		{
			params.param_value = option_obj.param_value;
		}
		if(option_obj.accessType)
		{
			params.accessType = option_obj.accessType;
		}
		if(option_obj.MorbusOnkoVizitPLDop_id) params.MorbusOnkoVizitPLDop_id = option_obj.MorbusOnkoVizitPLDop_id;
		if(option_obj.MorbusOnkoLeave_id) params.MorbusOnkoLeave_id = option_obj.MorbusOnkoLeave_id;
		if(option_obj.EvnDiagPLSop_id) params.EvnDiagPLSop_id = option_obj.EvnDiagPLSop_id;
		params.from_MZ = getWnd('swWorkPlaceMZSpecWindow').isVisible()?2:1; //https://redmine.swan.perm.ru/issues/104824
		params.from_MSE = this.realARMType=='mse'?2:1;
		if(this.searchNodeObj) {
			params.scroll_value = this.searchNodeObj.scroll_value||(params.object +'_'+ option_obj.object_value);
			this.searchNodeObj = null;
		}
		// Специфические параметры в зависимости от ноды
		switch ( params.object )
		{
			case 'SignalInformationAll':
			case 'Anthropometry':
				params.view_section = 'main';
			case 'AllergHistory':
			case 'FeedingType':
			case 'PersonMedHistory':
			case 'BloodData':
			case 'PalliatInfoConsentData':
			case 'PersonLpuInfoPersData':
			case 'ExpertHistory':
			case 'DiagList':
			case 'PersonSvidInfo':
			case 'PersonDispInfo':
			case 'EvnPLDispInfo':
			case 'SurgicalList':
			case 'PersonQuarantine':
			// #182475
			// Три пункта о прививках в сигнальной информации (регионы 'ufa', 'vologda'):
			case 'MantuReaction':
			case 'Inoculation':
			case 'InoculationPlan':

			case 'EvnStickOpenInfo':
            case 'DirFailList':
            case 'PersonOnkoProfileInfo':
            case 'PersonDrugRequestInfo':
				params.PersonChild_id = this.PersonInfoFrame.getFieldValue('PersonChild_id');
				params.parent_object_value = option_obj.object_value;
				params.parent_object_id = 'Person_id';
				params.Person_id = option_obj.object_value;
			    break;
            case 'EvnVizitPLStom':
                params.scroll_value = 'EvnVizitPLStom_head_' + option_obj.object_value;
                break;
            case 'EvnVizitPL':
				if (this.isCorrectNode(this.node.parentNode) && this.node.parentNode.attributes.object == 'EvnPL') {
					if (!this.applyNodeData(this.node.parentNode)) {
						return false;
					}
					params.object_value = this.node.attributes.object_value;
					params.object = this.node.attributes.object;// = 'EvnPL';
					params.object_id = this.node.attributes.object_id;// = 'EvnPL_id';
					params.scroll_value = 'EvnVizitPL_head_' + option_obj.object_value;
				} else {
					return false;
				}
				break;
			case 'EvnPL':
				params.scroll_value = 'EvnPL_' + option_obj.object_value;
			break;
			case 'EvnPLDispAdult':
			case 'EvnPLDispChild':
				params.scroll_value = 'EvnPLDisp_' + option_obj.object_value;
			break;
			case 'EvnPLDispDop13':
				params.scroll_value = 'EvnPLDispDop13_' + option_obj.object_value;
			break;
			case 'EvnPLDispProf':
				params.scroll_value = 'EvnPLDispProf_' + option_obj.object_value;
			break;
			case 'EvnPLDispOrp':
				params.scroll_value = 'EvnPLDispOrp_' + option_obj.object_value;
			break;
			case 'EvnPLDispOrp':
				params.scroll_value = 'EvnPLDispOrp_' + option_obj.object_value;
			break;
			case 'EvnPLDispTeenInspection':
				params.scroll_value = 'EvnPLDispTeenInspection_' + option_obj.object_value;
			break;
			case 'EvnDiagPLStom':
				params.view_section = 'main';
			break;
			case 'EvnUslugaPar':
				params.view_section = 'main';
			case 'EvnUslugaCommon':
				params.view_section = 'main';
			break;
			case 'EvnUslugaTelemed':
				params.view_section = 'main';
			break;
			case 'EvnUslugaOper':
				params.view_section = 'main';
			break;
			case 'EvnRecept':
				params.object = 'EvnReceptView';
			break;
			case 'EvnReceptList':
				params.object = 'EvnRecept';
			break;
			case 'EvnReceptGeneral':
				params.object = 'EvnReceptGeneralView';
			break;
			case 'EvnReceptGeneralList':
				params.object = 'EvnReceptGeneral';
			break;
            case 'EvnReceptKardio':
                params.object = 'EvnReceptView';
                break;
            case 'EvnReceptKardioList':
                params.object = 'EvnReceptKardio';
                break;
			case 'FreeDocument':
				params.view_section = 'main';
				break;
            case 'FreeDocumentList':
                params.object = 'FreeDocument';
                break;
            case 'MorbusNephroLab':
            case 'MorbusNephroDisp':
                params.isOnlyLast = option_obj.isOnlyLast || 0;
                break;
            case 'MorbusOnko':
            	var MorbusOnko =true;
                params.countDiagConfs = option_obj.countDiagConfs || 0;
                break;
            case 'MorbusCrazy':
				params.MorbusType_id = option_obj.MorbusType_id;
                break;
		}
        var form = this;
        form.scroll_value = params.scroll_value;
		form.loadMask = form.getLoadMask(option_obj.msg || LOAD_WAIT);
		form.loadMask.show();
		form.formReloadObj = option_obj;
		Ext.Ajax.request({
			url: '/?c=Template&m=getEvnForm',
			callback: function(opt, success, response) {
				form.loadMask.hide();
				if (success && response.responseText != '')
				{
					var response_obj = Ext.util.JSON.decode(response.responseText);
					//console.log('response_obj=',response_obj);
					//console.log('form=',form);
					if ( response_obj.success ) {
						if (response_obj['html'] && response_obj['map'])
						{
							option_obj.onSuccess(form,response_obj.html,response_obj.map);
						}
						if(MorbusOnko) {
							Ext.Ajax.request({
								url: '/?c=EvnOnkoNotify&m=getEvnOnkoNotifyList',
								params: {
									Person_id: form.Person_id
								},
								success: function(response) {

									var data = JSON.parse(response.responseText);
									var newNotifyDiagCode = response_obj['map']['MorbusOnko'].item[0].data.Diag_Code;
									var addNotifyButton = Ext.select('#MorbusOnkoData_' + option_obj.parent_object_value + ' [id*="addEvnOnkoNotifyContainer"]');

									var exist = false;
									for(var key in data) {
										if(newNotifyDiagCode == data[key].Diag_Code) {
											exist = true;
										}
									}
									if(!exist) {
										addNotifyButton.show();
									} else {
										addNotifyButton.hide();
									}
								}
							});
						}

						if(getRegionNick()=='ekb' && opt.params.object=='EvnPL') {
							if(response_obj['map'] && response_obj['map']['EvnPL'] && response_obj['map']['EvnPL'].item.length>0 && response_obj['map']['EvnPL'].item[0].children && response_obj['map']['EvnPL'].item[0].children.EvnVizitPL) {
								
								var evpl_ids = [];
								response_obj['map']['EvnPL'].item[0].children.EvnVizitPL.item.forEach(function(evpl) { evpl_ids.push(evpl.EvnVizitPL_id); });
								
								evpl_ids.forEach(function(evpl_id) {
									form.checkZNO({
										action: 'edit',
										EvnVizitPL_id: evpl_id,
										EvnClass_SysNick: form.defineParentEvnClass().EvnClass_SysNick
									});
									Ext.QuickTips.register({
										target: Ext.get('EvnVizitPL_data_'+evpl_id+'_inputBiopsyDate'),
										text: 'Дата взятия биопсии, по результатам которой снимается подозрение на ЗНО',
										enabled: true,
										showDelay: 5,
										trackMouse: true,
										autoShow: true
									});
								});
							}
						}
						if(getRegionNick()=='msk'){
							var eloutput = Ext.query('span.datefield_addDateMenu');
							var EvnXml_setDTarray = new Array();
							eloutput.forEach(
								function(f){
									EvnXml_setDTarray.push(f.getAttribute('id').split('_'));
								}
							);
							for(var i = 0; i < EvnXml_setDTarray.length; i++ ){
								var name = EvnXml_setDTarray[i][0];
								var el_data = EvnXml_setDTarray[i][1];
								var cmp, ct, eloutputid, eloutput;
								var me = this;
								ct = Ext.get(name +'_data_'+ el_data +'_inputarea'+ name);
								eloutputid = name +'_data_'+ el_data +'_input'+ name;
								eloutput = Ext.get(eloutputid);

								if(ct && ct.dom.children.length == 0) {
									ct.setDisplayed('inline-block');
									eloutput.setDisplayed('none');
									var EvnXml_id = eloutput.getAttribute('dataid');
									if(!Ext.isEmpty(EvnXml_id)) {
										EvnXml_id = parseInt(EvnXml_id);
									}
									var EvnXml_setDT = eloutput.getAttribute('datasetdt');

									cmp = new sw.Promed.SwDateTimeField({
										renderTo: name + '_data_' + el_data + '_inputarea'+ name,
										EvnXml_id: EvnXml_id,
										allowBlank: true,
										dateLabel: langs('&nbsp; Дата проведения'),
										dateLabelWidth: 120,
										timeLabel: langs('&nbsp; Время'),
										timeLabelWidth: 50,
										format: 'd.m.Y H:i',
										xtype: 'swdatetimefield',
										triggerCls: 'x-form-clock-trigger',
										cls: 'stateCombo',
										onChange: function(c,value){
											Ext.Ajax.request({
												url: '/?c=EvnSection&m=saveEvnXmlDate',
												params: {
													'EvnXml_id': c.EvnXml_id,
													'EvnXml_setDT': value
												}
											});
										}


									});
									if(Ext.isEmpty(EvnXml_setDT)){
										EvnXml_setDT = new Date();
										Ext.Ajax.request({
											url: '/?c=EvnSection&m=saveEvnXmlDate',
											params: {
												'EvnXml_id': cmp.EvnXml_id,
												'EvnXml_setDT': EvnXml_setDT
											}
										});
									}
									cmp.setValue(EvnXml_setDT);
								}

							}
							var link = Ext.query('a.EvnDirection_deleteProtocol');
							var filename_elem = Ext.query('a.RCP_file_name');
							if (link.length > 0) {
								for(i = 0; i < link.length; i++ ){
									var Protocol_id = link[i].getAttribute('dataid');
									var FilePath = filename_elem[i].getAttribute('datapath');
									filename_elem[i].addEventListener("click", function() {
										window.open('/?c=RemoteConsult&m=downloadRemoteConsult&RemoteConsultProtocol_id='+Protocol_id)
									});
									link[i].addEventListener("click", function() {
										Ext.Ajax.request({
											url: '/?c=RemoteConsult&m=deleteRemoteProtocol',
											method: 'POST',
											params: {
												RemoteConsultProtocol_id: Protocol_id
											},
											callback: function(frm, success, response) {
												var response_obj = Ext.util.JSON.decode(response.responseText);
												if (response_obj.success) {
													var node = form.Tree.getNodeById(form.data.Code +'_'+ form.data.id);
													form.requireCheckChange = false;
													form.loadTreeNode({
														node: node.parentNode,
														selectById: node.id,
														callback: function(tl,n){
															form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
														}
													});
													sw.swMsg.alert('Сообщение','Протокол удален.');
												}
											},
										});
									});
								}
							}
						}
					}
					else
					{
						if (typeof option_obj.onError == 'function')
						{
							option_obj.onError(form);
						}
					}
				}
			},
			params: params
		});
	},
	uploadRemoteFileToRKC: function (d) {
    	var form = this;
		var params = {
			saveUrl: '/?c=RemoteConsult&m=uploadRemoteProtocol',
			ignoreCheckData: true,
			saveParams: {
				EvnDirection_id: d.object_id,
				Lpu_id: form.userMedStaffFact.Lpu_id,
				LpuSection_id: form.userMedStaffFact.LpuSection_id
			},
			callback: function(data){
				var node = form.Tree.getNodeById(form.data.Code +'_'+ form.data.id);
				form.requireCheckChange = false;
				form.loadTreeNode({
					node: node.parentNode,
					selectById: node.id,
					callback: function(tl,n){
						form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
					}
				});
				sw.swMsg.alert('Сообщение','Файл успешно загружен.');
			}
		};
		getWnd('swFileUploadWindow').show(params);
	},
	/**
	 * Что-то делает после выполнения экшенов
	 * 
	 * @param {action} Код экшена
	 * @param {data} данные переданные в callback экшена
	 */
	onAfterAction: function (action, data, object, parentNode)
	{
		//log(data);
		var exdew_params = {
			object: 'EvnVizitPL',
			object_key: 'EvnVizitPL_id',
			object_value: data.EvnVizitPL_id,
			EvnClass_id: 11,
			name: langs('Протокол осмотра')
		}, object_value, node_id, form = this;
		switch(action)
		{
			case 'action_New_EvnVizitPL':
				exdew_params.Evn_pid = data.EvnPL_id;
			case 'action_New_EvnPL':
				if (Ext.isEmpty(parentNode) && Ext.isEmpty(object))
				{
					return false;
				}
				else
				{
					object_value = data[object +'_id'];
					if (Ext.isEmpty(object_value) || object_value == 0)
					{
						return false;
					}
					node_id = object +'_'+ object_value;
					var tl = this.Tree.getLoader();

					//tl.load(parentNode.parentNode,function(){
						tl.load(parentNode,function(tl,n){
							var node = form.Tree.getNodeById(node_id);// || n.findChild('id', node_id);
							form.openEmkEditWindow(object +'_id', node);
						});
						if (!parentNode.isExpanded())
						{
							parentNode.expand();
						}
					//});
				}
			case 'action_New_EvnPS':
				if (Ext.isEmpty(parentNode) && Ext.isEmpty(object))
				{
					return false;
				}
				else
				{
					object_value = data[object +'_id'];
					if (Ext.isEmpty(object_value) || object_value == 0)
					{
						return false;
					}
					node_id = object +'_'+ object_value;
					var tl = this.Tree.getLoader();

					//tl.load(parentNode.parentNode,function(){
						tl.load(parentNode,function(tl,n){
							var node = form.Tree.getNodeById(node_id);// || n.findChild('id', node_id);
							form.openEmkEditWindow(object +'_id', node);
						});
						if (!parentNode.isExpanded())
						{
							parentNode.expand();
						}
					//});
				}
			break;
		}
	},
	/*
	* Поиск ноды в дереве и загрузка объекта ноды в форму просмотра
	* @params.node_attr_name string required
	* @params.node_attr_value string, integer required
	* @params.parent_node object 
	* @params.last_child bool 
	* @params.disableLoadViewForm bool 
	*
	*/
	searchNodeInTreeAndLoadViewForm: function(params) {
		var node, parent_node;
		if (typeof params.parent_node == 'object')
		{
			parent_node = params.parent_node;
		}
		else
		{
			// нужно найти родительную ноду, если её нет в params.parent_node
		}
		if (!parent_node)
		{
			//log('searchNodeInTreeAndLoadViewForm(): parent_node NOT found!');
			//sw.swMsg.alert('Сообщение','Действует ограниченный режим электронной медицинской карты. <br/>Переход по гиперссылке невозможен');
			return false;
		}
		var loadViewForm = function(form, params)
		{
			if(params.node_attr_name && params.node_attr_value && !params.last_child)
			{
				node = parent_node.findChild(params.node_attr_name, params.node_attr_value);
			}
			if(params.last_child && parent_node.lastChild)
			{
				node = parent_node.lastChild;
			}
			if (node)
			{
				node.select();
				if(!params.disableLoadViewForm)
					form.Tree.fireEvent('click', node);
			}
			else
			{
				//sw.swMsg.alert('Сообщение','Действует ограниченный режим электронной медицинской карты. <br/>Переход по гиперссылке невозможен');
				if ( getGlobalOptions().archive_database_enable && !form.showArchive ) {
					// если включены архивные записи и не отображаются, то прогрузим архивные записи, вероятно node можно найти там, upd: убрал
					/*form.loadArchiveRecords(function() {
						loadViewForm(form, params);
					});*/
					//log('searchNodeInTreeAndLoadViewForm(): The node NOT found in actual Tree! Loading archive!');
					return false;
				}
				//log('searchNodeInTreeAndLoadViewForm(): The node NOT found in Tree!');
				return false;
			}
            return true;
		};
		if (parent_node.isExpanded())
		{
			loadViewForm(this,params);
		}
		else
		{
			parent_node.expand(false,false,function(){
				loadViewForm(this,params);
			}.createDelegate(this));
		}
	},
	openPersonMedHistoryEditWindow: function(el_data) {
		var data = this.getObjectData(el_data.object,el_data.object_id);
		if ( data == false ) {
			return false;
		}
		var action;
		if(data.accessType=='edit'){
			action = 'add';
			if(data.PersonMedHistory_id > 0)
				action = 'edit';
		} else {
			return false;
		}
		var my_params = new Object({
			PersonMedHistory_id: data.PersonMedHistory_id,
			Person_id: data.Person_id,
			callback: function(d) {
				this.loadNodeViewForm(this.Tree.getNodeById(this.node.id));
			}.createDelegate(this)
		});
		my_params.onHide = Ext.emptyFn;
		this.openForm('swPersonMedHistoryEditWindow','XXX_id',my_params,action,langs('Анамнез жизни'));
	},
	openPersonBloodGroupEditWindow: function(action, el_data) {
		var form = this;
		var formParams = new Object();

		if ( action == 'add' ) {
			formParams.PersonBloodGroup_id = 0;
			//formParams.EvnDirection_pid = el_data.object_id;
			formParams.Person_id = form.Person_id;
			formParams.PersonEvn_id = form.PersonEvn_id;
			formParams.Server_id = form.Server_id;
			// после добавления записи кнопку добавить нужно прятать
		}
		else {
			formParams = form.getObjectData(el_data.object,el_data.object_id);
			if ( formParams == false || (action == 'edit' && form.checkAccessEdit(formParams,langs('Вы можете редактировать только свою запись')) == false))
			{
				return false;
			}
		}

		var my_params = new Object({
			PersonBloodGroup_id: formParams.PersonBloodGroup_id,
			callback: function(data) {
				if ( !data || !data.personBloodGroupData )
				{
					return false;
				}
				var reload_params = {
					section_code: 'BloodData',
					object_key: 'Person_id',
					object_value: data.personBloodGroupData.Person_id,
					parent_object_key: 'Person_id',
					parent_object_value: form.Person_id,
					section_id: 'BloodData_'+ data.personBloodGroupData.Person_id
				};
				this.reloadViewForm(reload_params);
			}.createDelegate(this),
			formParams: formParams
		});
		my_params.onHide = Ext.emptyFn;
		form.openForm('swPersonBloodGroupEditWindow','XXX_id',my_params,action,langs('Группа крови и Rh-фактор'));
	},
	openPalliatInfoConsentEditWindow: function(action, el_data, PalliatInfoConsentType_id) {
		var form = this;
		var formParams = new Object();

		if ( action == 'add' ) {
			formParams.PalliatInfoConsent_id = 0;
			formParams.Person_id = form.Person_id;
			formParams.PalliatInfoConsentType_id = PalliatInfoConsentType_id;
		}
		else {
			formParams = form.getObjectData(el_data.object,el_data.object_id);
			if ( formParams == false || (action == 'edit' && form.checkAccessEdit(formParams,langs('Вы можете редактировать только свою запись')) == false))
			{
				return false;
			}
		}

		var my_params = new Object({
			PalliatInfoConsent_id: formParams.PalliatInfoConsent_id,
			callback: function() {
				var reload_params = {
					section_code: 'PalliatInfoConsentData',
					object_key: 'Person_id',
					object_value: form.Person_id,
					parent_object_key: 'Person_id',
					parent_object_value: form.Person_id,
					section_id: 'PalliatInfoConsentData_'+ form.Person_id
				};
				this.reloadViewForm(reload_params);
			}.createDelegate(this),
			formParams: formParams
		});
		my_params.onHide = Ext.emptyFn;
		form.openForm('swPalliatInfoConsentEditWindow','XXX_id',my_params,action,langs('Информированное согласие/отказ в рамках паллиативной помощи'));
	},
    openPersonPrivilegeEditWindow: function(action, el_data) {
        if (getGlobalOptions().person_privilege_add_source == 2) { //2 - Включение в регистр выполняется пользователем
	        this._openPersonPrivilegeEditWindow(action, el_data);
        } else {
            if (action == 'add') {
                var params = new Object();
                params.action = action;
                params.Person_id = this.Person_id;
                params.userMedStaffFact = this.userMedStaffFact;
                getWnd('swPersonPrivilegeReqEditWindow').show(params);
            } else {
                sw.swMsg.alert(langs('Сообщение'), langs('Редактирование данных льготы не доступно, так как эта операция осуществляется только в ситуационном центре ЛЛО. Подайте запрос в ситуационный центр'));
            }
        }
    },
	_openPersonPrivilegeEditWindow: function(action, el_data) {
		var formParams = new Object(), title;
		if ( action == 'add' )
		{
			formParams.PersonPrivilege_id = 0;
			title = WND_DLO_LGOTADD;
		}
		else
		{
			formParams = this.getObjectData(el_data.object,el_data.object_id);
			if ( formParams == false )
			{
				return false;
			}
			title = WND_DLO_LGOTEDIT;
		}
		var my_params = new Object({
			PersonPrivilege_id: formParams.PersonPrivilege_id,
			callback: function(data) {
				if ( !data || !data.PersonPrivilegeData )
				{
					return false;
				}
				var reload_params = {
					section_code: 'ExpertHistory',
					object_key: 'Person_id',
					object_value: data.PersonPrivilegeData.Person_id,
					parent_object_key: 'Person_id',
					parent_object_value: this.Person_id,
					section_id: 'ExpertHistory_'+ data.PersonPrivilegeData.Person_id
				};
				this.reloadViewForm(reload_params);
			}.createDelegate(this)
		});
		my_params.onHide = Ext.emptyFn;
		this.openForm('swPrivilegeEditWindow','XXX_id',my_params,action,'"'+ title +'"');
	},
	openPersonDispEditWindow: function(action, el_data) {
		var form = this;
		var formParams = new Object();

		if ( action == 'add' ) {
			// Проверяем, может ли текущий пользователь добавлять данные по дисп. учету
			// https://redmine.swan.perm.ru/issues/110660
			// Доработал вывод сообщения об ошибке
			var errorText,
				msfFilter = {
					id: form.userMedStaffFact.MedStaffFact_id,
					isDisp: true,
					isPolka: true
				};

			if ( getGlobalOptions().allowed_disp_med_staff_fact_group == 2 ) {
				msfFilter.isDoctorOrMidMedPersonal = true;
			}

			setMedStaffFactGlobalStoreFilter(msfFilter);

			if ( swMedStaffFactGlobalStore.getCount() == 0 ) {
				errorText = 'Добавление контрольных карт диспансерного наблюдения доступно для '
					+ (getGlobalOptions().allowed_disp_med_staff_fact_group == 2 ? 'врачей и среднего мед. персонала' : 'сотрудников')
					+ ' из групп отделений с типами "Поликлиника", "Городской центр", "Травматологический пункт", "Фельдшерско-акушерский пункт"';

				sw.swMsg.alert(langs('Ошибка'), errorText);
				return false;
			}

			formParams.PersonDisp_begDate = new Date();
			formParams.PersonDisp_id = 0;
			formParams.Person_id = form.Person_id;
			formParams.PersonEvn_id = form.PersonEvn_id;
			formParams.Server_id = form.Server_id;
		}
		else {
			formParams = form.getObjectData(el_data.object,el_data.object_id);

			if ( formParams == false ) {
				return false;
			}
		}

		var my_params = new Object({
			PersonDisp_id: formParams.PersonDisp_id,
			callback: function(data) {
				if ( !data || !data.PersonDispData )
				{
					return false;
				}
				var reload_params = {
					section_code: 'PersonDispInfo',
					object_key: 'Person_id',
					object_value: data.PersonDispData.Person_id,
					parent_object_key: 'Person_id',
					parent_object_value: form.Person_id,
					section_id: 'PersonDispInfo_'+ data.PersonDispData.Person_id
				};
				this.reloadViewForm(reload_params);
			}.createDelegate(this),
			UserMedStaffFact_id: this.userMedStaffFact.MedStaffFact_id,
			UserLpuSection_id: this.userMedStaffFact.LpuSection_id,
			formParams: formParams
		});
		my_params.onHide = Ext.emptyFn;
		form.openForm('swPersonDispEditWindow','XXX_id',my_params,action,langs('Редактирование карты диспансерного учета'));
	},
	printEvnPLDisp: function(el_data) {
		var data = this.getObjectData(el_data.object, el_data.object_id);

		if ( data == false ) {
			return false;
		}

		/*var params = {};
		params['Server_id'] = data.Server_id;
		params[data.Object+'_id'] = data.EvnPLDisp_id;*/
		var url = '';

		switch(data.Object) {
			case 'EvnPLDispOrp':
				url = C_EPLDO13_PRINT+'&EvnPLDispOrp_id='+data.EvnPLDisp_id+'&Server_id='+data.Server_id;
			break;

			case 'EvnPLDispTeenInspection':
				printBirt({
					'Report_FileName': 'pan_EvnPLTeenCard.rptdesign',
					'Report_Params': '&paramEvnPLTeen=' + data.EvnPLDispTeenInspection_id + '&paramDispType=' + data.DispClass_id,
					'Report_Format': 'pdf'
				});
				return true;
			break;

			default:
				return false;
		}

		window.open(url, '_blank');
	},
	openEvnPLDispEditWindow: function(action, el_data) {
		if (!action.inlist(['edit','view'])) {
			return false;
		}
		var form = this;
		var data = new Object();
		var my_params = new Object();
		var wnd_name = '';

		data = form.getObjectData(el_data.object, el_data.object_id);

		if ( data == false ) {
			return false;
		}

		my_params = {
			Person_id: form.Person_id,
			Server_id: form.Server_id,
			DispClass_id: data.DispClass_id
		}
		my_params[data.Object+'_id'] = el_data.object_id;

		switch(data.Object) {
			case 'EvnPLDispDop':
				wnd_name = 'swEvnPLDispDopEditWindow';
			break;

			case 'EvnPLDispDop13':
				wnd_name = 'swEvnPLDispDop13EditWindow';
			break;

			case 'EvnPLDispOrp':
				if (data.DispClass_Code.inlist([3,7])) {
					wnd_name = 'swEvnPLDispOrp13EditWindow';
				} else
				if (data.DispClass_Code.inlist([4,8])) {
					wnd_name = 'swEvnPLDispOrp13SecEditWindow';
				}
			break;

			case 'EvnPLDispProf':
				wnd_name = 'swEvnPLDispProfEditWindow';
			break;

			case 'EvnPLDispTeen14':
				wnd_name = 'swEvnPLDispTeen14EditWindow';
			break;

			case 'EvnPLDispTeenInspection':
			switch(data.DispClass_Code) {
				case 6:
					wnd_name = 'swEvnPLDispTeenInspectionEditWindow';
				break;
				case 9:
					wnd_name = 'swEvnPLDispTeenInspectionPredEditWindow';
				break;
				case 10:
					wnd_name = 'swEvnPLDispTeenInspectionProfEditWindow';
				break;
				case 11:
					wnd_name = 'swEvnPLDispTeenInspectionPredSecEditWindow';
				break;
				case 12:
					wnd_name = 'swEvnPLDispTeenInspectionProfSecEditWindow';
				break;
			}
			break;

			case 'EvnPLDispMigrant':
				wnd_name = 'swEvnPLDispMigrantEditWindow';
				my_params.callback = function(data) {
					if ( !data ) {
						return false;
					}
					var reload_params = {
						section_code: 'EvnPLDispMigrant',
						object_key: 'EvnPLDispMigrant_id',
						object_value: el_data.object_id,
						section_id: 'EvnPLDispMigrant_'+ el_data.object_id
					};
					form.reloadViewForm(reload_params);
				};
			break;

			case 'EvnPLDispDriver':
				wnd_name = 'swEvnPLDispDriverEditWindow';
				my_params.callback = function(data) {
					if ( !data ) {
						return false;
					}
					var reload_params = {
						section_code: 'EvnPLDispDriver',
						object_key: 'EvnPLDispDriver_id',
						object_value: el_data.object_id,
						section_id: 'EvnPLDispDriver_'+ el_data.object_id
					};
					form.reloadViewForm(reload_params);
				};
			break;
		}

		if (wnd_name == '') {
			return false;
		}

		form.openForm(wnd_name,'XXX_id',my_params,action,langs('Просмотр карты диспансеризации/мед. осмотра'));
	},
	DopDispInfoConsentCheckAll: function(EvnClass_SysNick, c, el_data) {
		var form = this,
			evn_data = form.getObjectData(EvnClass_SysNick, el_data.object_id);
		
		var formParams = new Object();
		if (EvnClass_SysNick == 'EvnPLDispDriver') {
			Ext.Ajax.request({
				url: '/?c=EvnPLDispDriver&m=checkAllDopDispInfoConsent',
				params: {
					EvnPLDispDriver_id: el_data.object_id,
					DopDispInfoConsent_IsAgree: c.checked ? 2 : 1
				},
				callback: function(options, success, response) {
					var reload_params = {
						section_code: 'EvnPLDispDriver',
						object_key: 'EvnPLDispDriver_id',
						object_value: el_data.object_id,
						section_id: 'EvnPLDispDriver_' + el_data.object_id
					};
					form.reloadViewForm(reload_params);
					if (
						!Ext.isEmpty(evn_data.ElectronicTalon_id) && 
						form.userMedStaffFact.ARMType == 'paidservice' && 
						evn_data.ElectronicQueueInfo_IsOff == 1 && 
						evn_data.ElectronicTalonStatus_id == 3 &&
						evn_data.ElectronicService_id == form.userMedStaffFact.ElectronicService_id
					) {
						Ext.Msg.show({
							title: 'Завершение приема',
							msg: 'Завершить прием пациента?',
							buttons: {
								yes: "Завершить прием",
								no: "Завершить прием и вызвать следующего",
								cancel: "Отмена"
							},
							fn: function (btn) {
								if (btn == 'yes') {
									form.finishElectronicTalon('paid', evn_data.ElectronicTalon_id, false);
								} else if (btn == 'no') {
									form.finishElectronicTalon('paid', evn_data.ElectronicTalon_id, true);
								} else if (btn == 'cancel') {

								}
							}
						});
					}
				}
			});
		}
	},
	open_amm_Kard063: function(el_data){
		var form = this;
		var Person_id = form.PersonInfoFrame.getFieldValue('Person_id');
		var Server_id = form.PersonInfoFrame.getFieldValue('Server_id');
		if(!Person_id || !Server_id) return false;
		var params = {
			person_id: Person_id,
			Server_id: Server_id,
			parent_id: 'swPersonEmkWindow',
			viewOnly: false,
			age: form.PersonInfoFrame.getFieldValue('Person_Age')
		}
		getWnd('amm_Kard063').show(params);
	},
	openPersonAllergicReactionEditWindow: function(action, el_data) {
		var form = this;
		var formParams = new Object();

		if ( action == 'add' ) {
			formParams.PersonAllergicReaction_id = 0;
			formParams.Person_id = form.Person_id;
			formParams.PersonEvn_id = form.PersonEvn_id;
			formParams.Server_id = form.Server_id;
		}
		else {
			formParams = form.getObjectData(el_data.object,el_data.object_id);
			if ( formParams == false || (action == 'edit' && form.checkAccessEdit(formParams,langs('Вы можете редактировать только свою запись')) == false))
			{
				return false;
			}
		}

		var my_params = new Object({
			PersonAllergicReaction_id: formParams.PersonAllergicReaction_id,
			callback: function(data) {
				if ( !data || !data.personAllergicReactionData )
				{
					return false;
				}
				var reload_params = {
					section_code: 'AllergHistory',
					object_key: 'Person_id',
					object_value: data.personAllergicReactionData.Person_id,
					parent_object_key: 'Person_id',
					parent_object_value: form.Person_id,
					section_id: 'AllergHistory_'+ data.personAllergicReactionData.Person_id
				};
				this.reloadViewForm(reload_params);
			}.createDelegate(this),
			formParams: formParams
		});
		my_params.onHide = Ext.emptyFn;
		form.openForm('swPersonAllergicReactionEditWindow','XXX_id',my_params,action,langs('Редактирование вида аллергической реакции'));
	},
	openPersonFeedingTypeEditWindow: function (action, el_data) {
		var form = this;
		var formParams = new Object();

		if (action == 'add') {
			formParams.PersonChild_id = this.PersonInfoFrame.getFieldValue('PersonChild_id');
			formParams.FeedingTypeAge_id = 0;
			formParams.Person_id = form.Person_id;
			formParams.PersonEvn_id = form.PersonEvn_id;
			formParams.Server_id = form.Server_id;
		}
		else {
			formParams = form.getObjectData(el_data.object, el_data.object_id);
			if (formParams == false || (action == 'edit' &&
					form.checkAccessEdit(formParams, langs('Вы можете редактировать только свою запись')) ==
					false)) {
				return false;
			}
		}

		var my_params = new Object({
			PersonChild_id: formParams.PersonChild_id,
			FeedingTypeAge_id: formParams.FeedingTypeAge_id,
			callback: function (data) {
				if (!data || !data.personFeedingTypeData) {
					return false;
				}
				var reload_params = {
					PersonChild_id: this.PersonInfoFrame.getFieldValue('PersonChild_id'),
					section_code: 'FeedingType',
					object_key: 'Person_id',
					object_value: data.personFeedingTypeData.Person_id,
					parent_object_key: 'Person_id',
					parent_object_value: form.Person_id,
					section_id: 'FeedingType_' + data.personFeedingTypeData.Person_id
				};
				this.reloadViewForm(reload_params);
			}.createDelegate(this),
			formParams: formParams
		});
		my_params.onHide = Ext.emptyFn;
		form.openForm('swPersonFeedingTypeEditWindow', 'XXX_id', my_params, action,
			langs('Редактирование способа вскармливания'));
	},
	openPersonHeightEditWindow: function(action, el_data) {
		var form = this;
		var formParams = new Object();

		if ( action == 'add' ) {
			formParams.PersonHeight_id = 0;
			formParams.Person_id = form.Person_id;
			formParams.Server_id = form.Server_id;
		}
		else {
			formParams = form.getObjectData(el_data.object, el_data.object_id);

			if ( formParams == false || (action == 'edit' && form.checkAccessEdit(formParams,langs('Вы можете редактировать только свою запись')) == false) ) {
				return false;
			}
		}

		var my_params = new Object({
			measureTypeExceptions: [ 1, 2 ],
			PersonHeight_id: formParams.PersonHeight_id,
			callback: function(data) {
				if ( !data || !data.personHeightData || !data.personHeightData.PersonHeight_id)
				{
					return false;
				}
				//log(data);
				var reload_params = {
					section_code: 'Anthropometry',
					object_key: 'Person_id',
					object_value: data.personHeightData.Person_id,
					parent_object_key: 'Person_id',
					parent_object_value: form.Person_id,
					section_id: 'Anthropometry_'+ data.personHeightData.Person_id
				};
				this.reloadViewForm(reload_params);
			}.createDelegate(this),
			formParams: formParams
		});
		my_params.onHide = Ext.emptyFn;
		form.openForm('swPersonHeightEditWindow','XXX_id',my_params,action,langs('Редактирование измерения роста человека'));
	},
	addMigrantContact: function(el_data){
		var form = this;
		getWnd('swPersonSearchWindow').show({
			onClose: function() {},
			onSelect: function(person_data) {
				getWnd('swPersonSearchWindow').hide();
				person_data.EvnPLDispMigrant_id = el_data.object_id;
				person_data.MigrantContact_id = null;
				person_data.Person_cid = person_data.Person_id;
				Ext.Ajax.request({
					url: '/?c=EvnPLDispMigrant&m=saveMigrantContact',
					params: person_data,
					callback: function(options, success, response) {
						var reload_params = {
							section_code: 'EvnPLDispMigrant',
							object_key: 'EvnPLDispMigrant_id',
							object_value: el_data.object_id,
							section_id: 'EvnPLDispMigrant_' + el_data.object_id
						};
						form.reloadViewForm(reload_params);
					}
				});
				return;			
			}
		});
	},
	deleteMigrantContact: function(el_data){
		var form = this;
		var data = this.getObjectData(el_data.object, el_data.object_id);
		Ext.Ajax.request({
			url: '/?c=EvnPLDispMigrant&m=deleteMigrantContact',
			params: {
				MigrantContact_id: el_data.object_id
			},
			callback: function(options, success, response) {
				var reload_params = {
					section_code: 'EvnPLDispMigrant',
					object_key: 'EvnPLDispMigrant_id',
					object_value: data.EvnPLDispMigrant_id,
					section_id: 'EvnPLDispMigrant_' + data.EvnPLDispMigrant_id
				};
				form.reloadViewForm(reload_params);
			}
		});
	},
	openDiagSpecEditWindow: function(action, el_data){
		var form = this;
		var formParams = new Object();
		
		if ( action == 'add' ) {
			formParams.EvnDiagSpec_id = 0;
			formParams.Person_id = form.Person_id;
			formParams.Server_id = form.Server_id;
		}else {
			formParams.EvnDiagSpec_id = (el_data.object_id.split('_').length > 1)?el_data.object_id.split('_')[1]:el_data.object_id;

			/*if ( formParams == false || (action == 'edit' && form.checkAccessEdit(formParams,langs('Вы можете редактировать только свою запись')) == false) ) {
				return false;
				log(formParams);
			}*/
		}
		if (action=='delete') {
			form.requestSaveWithShowInfoMsg('/?c=EvnDiag&m=delEvnDiagSpec', 
				formParams, 
				function(result) {
					if (result.success) {
						var reload_params = {
							section_code: 'DiagList',
							object_key: 'Person_id',
							object_value: form.Person_id,
							parent_object_key: 'Person_id',
							parent_object_value: form.Person_id,
							section_id: 'DiagList_'+ form.Person_id
						};
						form.reloadViewForm(reload_params);
					}
				}, form);
			return false;
		}
		var my_params = new Object({
			EvnDiagSpec_id: formParams.EvnDiagSpec_id,
			callback: function(data) {
				
				if ( !data )
				{
					return false;
				}
				var reload_params = {
					section_code: 'DiagList',
					object_key: 'Person_id',
					object_value: data.Person_id,
					parent_object_key: 'Person_id',
					parent_object_value: form.Person_id,
					section_id: 'DiagList_'+ data.Person_id
				};
				this.reloadViewForm(reload_params);
			}.createDelegate(this),
			formParams: formParams
		});
		my_params.onHide = Ext.emptyFn;
		form.openForm('swDiagSpecEditWindow','XXX_id',my_params,action,langs('Редактирование уточненного диагноза'));
	},
	openPersonWeightEditWindow: function(action, el_data) {
		var form = this;
		var formParams = new Object();

		if ( action == 'add' ) {
			formParams.PersonWeight_id = 0;
			formParams.Person_id = form.Person_id;
			formParams.Server_id = form.Server_id;
		}
		else {
			formParams = form.getObjectData(el_data.object, el_data.object_id);

			if ( formParams == false || (action == 'edit' && form.checkAccessEdit(formParams,langs('Вы можете редактировать только свою запись')) == false) ) {
				return false;
			}
		}

		var my_params = new Object({
			measureTypeExceptions: [ 1, 2 ],
			PersonWeight_id: formParams.PersonWeight_id,
			callback: function(data) {
				if ( !data || !data.personWeightData )
				{
					return false;
				}
				//log(data);
				var reload_params = {
					section_code: 'Anthropometry',
					object_key: 'Person_id',
					object_value: data.personWeightData.Person_id,
					parent_object_key: 'Person_id',
					parent_object_value: form.Person_id,
					section_id: 'Anthropometry_'+ data.personWeightData.Person_id
				};
				this.reloadViewForm(reload_params);
			}.createDelegate(this),
			formParams: formParams,
			Okei_InterNationSymbol: 'kg'
		});
		my_params.onHide = Ext.emptyFn;
		form.openForm('swPersonWeightEditWindow','XXX_id',my_params,action,langs('Редактирование измерения массы человека'));
	},

/******* openHeadCircumferenceEditWindow **************************************
 * #182939
 * Открыть форму "Окружность головы"
 ******************************************************************************/
	openHeadCircumferenceEditWindow: function(action, el_data)
	{
		var me = this,
			formParams = {},
			hcewPars; // параметры формы "Окружность головы"

		if (action == 'add')
		{
			formParams.HeadCircumference_id = 0;
			formParams.Person_id = me.Person_id;
		}
		else
		{
			formParams = me.getObjectData(el_data.object, el_data.object_id);

			if (formParams == false ||
				(action == 'edit' &&
					me.checkAccessEdit(formParams,
										langs('vyi_mojete_redaktirovat_tolko_svoyu_zapis')) == false))
				return false;
		}

		hcewPars =
			{
				formParams: formParams,
				onHide: Ext.emptyFn,

				callback: function(data)
					{
						var pars;

						if (!data || !data.headCircumferenceData)
							return false;

						pars =
							{
								section_code: 'Anthropometry',
								object_key: 'Person_id',
								object_value: data.headCircumferenceData.Person_id,
								parent_object_key: 'Person_id',
								parent_object_value: me.Person_id,
								section_id: 'Anthropometry_' + data.headCircumferenceData.Person_id
							};

						this.reloadViewForm(pars);
					}.createDelegate(this)
			};

		me.openForm('swHeadCircumferenceEditWindow',
					'XXX_id',
					hcewPars,
					action,
					langs('Окружность головы'));
	},

/******* openChestCircumferenceEditWindow *************************************
 * #182939
 * Открыть форму "Окружность груди"
 ******************************************************************************/
	openChestCircumferenceEditWindow: function(action, el_data)
	{
		var me = this,
			formParams = {},
			ccewPars; // параметры формы "Окружность груди"

		if (action == 'add')
		{
			formParams.ChestCircumference_id = 0;
			formParams.Person_id = me.Person_id;
		}
		else
		{
			formParams = me.getObjectData(el_data.object, el_data.object_id);

			if (formParams == false ||
				(action == 'edit' &&
					me.checkAccessEdit(formParams,
										langs('vyi_mojete_redaktirovat_tolko_svoyu_zapis')) == false))
				return false;
		}

		ccewPars =
			{
				formParams: formParams,
				onHide: Ext.emptyFn,

				callback: function(data)
					{
						var pars;

						if (!data || !data.chestCircumferenceData)
							return false;

						pars =
							{
								section_code: 'Anthropometry',
								object_key: 'Person_id',
								object_value: data.chestCircumferenceData.Person_id,
								parent_object_key: 'Person_id',
								parent_object_value: me.Person_id,
								section_id: 'Anthropometry_' + data.chestCircumferenceData.Person_id
							};

						this.reloadViewForm(pars);
					}.createDelegate(this)
			};

		me.openForm('swChestCircumferenceEditWindow',
					'XXX_id',
					ccewPars,
					action,
					langs('Окружность груди'));
	},
/******* openPersonRaceEditWindow *************************************
 * #183123
 * Открыть форму "Раса"
 ******************************************************************************/
	openPersonRaceEditWindow: function(action, el_data) {
		var me = this,
			formParams = {},
			prPars; // параметры формы "Раса"

		if (action == 'add') {
			formParams.PersonRace_id = 0;
			formParams.Person_id = me.Person_id;
		} else {
			formParams = me.getObjectData(el_data.object, el_data.object_id);

			if (formParams == false) return false;
		}

		prPars = {
			formParams: formParams,
			onHide: Ext.emptyFn,

			callback: function(data) {
				if (!data || !data.personRaceData)
					return false;

				var pars = {
					section_code: 'Anthropometry',
					object_key: 'Person_id',
					object_value: data.personRaceData.Person_id,
					parent_object_key: 'Person_id',
					parent_object_value: me.Person_id,
					section_id: 'Anthropometry_' + data.personRaceData.Person_id
				};

				this.reloadViewForm(pars);
			}.createDelegate(this)
		};

		me.openForm('swPersonRaceEditWindow',
			'XXX_id',
			prPars,
			action,
			langs('Раса'));
	},

    createDirection: function(el_data, dir_type_rec, excList) {
        var form = this;
        var parent_code = this.defineParentEvnClass().EvnClass_SysNick;
        var vizit_data = form.getObjectData(parent_code, el_data.object_id);
        if (vizit_data == false) {
            vizit_data = {};
        }

        if (dir_type_rec.get('DirType_Code') == '18') {
        	// На консультацию в другую МИС
			var Person_Fio = form.PersonInfoFrame.getFieldValue('Person_Surname') + ' ' + form.PersonInfoFrame.getFieldValue('Person_Firname') + ' ' + form.PersonInfoFrame.getFieldValue('Person_Secname');
			getWnd('swDirectionMasterMisRbWindow').show({
				personData: {
					Person_Fio: Person_Fio,
					Person_id: vizit_data.Person_id || form.Person_id
				}
			});
			return true;
		}

        var personData = {};
        personData.Person_id = vizit_data.Person_id || form.Person_id;
        personData.Server_id = vizit_data.Server_id || form.Server_id;
        personData.PersonEvn_id = vizit_data.PersonEvn_id || form.PersonEvn_id;
        personData.Person_IsDead = this.PersonInfoFrame.getFieldValue('Person_IsDead');
        personData.Person_Firname = this.PersonInfoFrame.getFieldValue('Person_Firname');
        personData.Person_Secname = this.PersonInfoFrame.getFieldValue('Person_Secname');
        personData.Person_Surname = this.PersonInfoFrame.getFieldValue('Person_Surname');
        personData.Person_Birthday = this.PersonInfoFrame.getFieldValue('Person_Birthday');

        var directionData = {
            EvnDirection_pid: el_data.object_id || null
			,DopDispInfoConsent_id: el_data.DopDispInfoConsent_id || null
            ,Diag_id: vizit_data.Diag_id || null
            ,DirType_id: dir_type_rec.get('DirType_id')
            ,MedService_id: this.userMedStaffFact.MedService_id
            ,MedStaffFact_id: this.userMedStaffFact.MedStaffFact_id
            ,MedPersonal_id: this.userMedStaffFact.MedPersonal_id
            ,LpuSection_id: this.userMedStaffFact.LpuSection_id
			,ARMType_id: this.userMedStaffFact.ARMType_id
			,TreatmentClass_id: vizit_data.TreatmentClass_id
			,Lpu_sid: getGlobalOptions().lpu_id
			,withDirection: true
        };
        directionData.Person_id = personData.Person_id;
        directionData.PersonEvn_id = personData.PersonEvn_id;
        directionData.Server_id = personData.Server_id;

        if (getRegionNick() == 'msk') {
        	directionData.CVIConsultRKC_id = el_data.CVIConsultRKC_id || null;
        	directionData.RepositoryObserv_sid = el_data.RepositoryObserv_sid || null;
        	directionData.isRKC = el_data.isRKC || null;
		}
        
        var onDirection = Ext.emptyFn;
        if (el_data.object && el_data.object.inlist(['EvnDirectionStom', 'EvnDirectionStac', 'EvnDirection'])) {
            onDirection = function () {
                var reload_params = {};
                reload_params.object_value = 0;
                reload_params.section_code = el_data.object;
                var parent_node_id;
                reload_params.object_key = el_data.object +'_id';
                reload_params.parent_object_key = parent_code +'_id';
                reload_params.parent_object_value = el_data.object_id;
                reload_params.section_id = el_data.object+ 'List' +'_'+reload_params.parent_object_value;
                parent_node_id = reload_params.parent_object_key.split('_')[0] +'_'+ reload_params.parent_object_value;
                form.reloadViewForm(reload_params);
                form.loadTreeNode({id: parent_node_id});
                return true;
            };
        }
        if (el_data.object && el_data.object.inlist(['EvnPLDispDop13', 'EvnPLDispTeenInspection', 'EvnPLDispProf', 'EvnPLDispOrp', 'EvnPLDispMigrant', 'EvnPLDispDriver'])) {
            onDirection = function () {
				form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
			}
		}
        /*
        if (el_data.object && el_data.object.inlist(['EvnPrescrPlan', 'EvnPrescrPolka'])) {
            onDirection = function () {
                var dirdata, dirrec, reload_params = {};
                dirdata = form.getObjectDataWithFindBy(function(record,id){
                    if(record.object_code == el_data.object && record.get(el_data.object +'_id') == el_data.object_id) {
                        dirrec = record;
                        return true;
                    }
                    return false;
                });
                if (!dirdata || !dirrec) return false;
                reload_params.object_value = dirdata.EvnPrescr_id;
                reload_params.section_code = el_data.object;
                var parent_node_id;
                reload_params.object_key = dirrec.object_key;
                reload_params.parent_object_key = dirrec.parent_object_key || parent_code +'_id';
                reload_params.parent_object_value = dirrec.get('timetable_pid');
                reload_params.section_id = el_data.object+ 'List' +'_'+reload_params.parent_object_value;
                parent_node_id = (dirrec.parent_object_code || reload_params.parent_object_key.split('_')[0])+'_'+reload_params.parent_object_value;
                form.reloadViewForm(reload_params);
                form.loadTreeNode({id: parent_node_id});
                return true;
            };
        }*/
        if (dir_type_rec.get('DirType_Code') == 23) {
			checkEvnPrescrMseExists({
				Person_id: personData.Person_id,
				callback: function() {
					createEvnPrescrMse({
						personData: personData,
						userMedStaffFact: this.userMedStaffFact,
						directionData: directionData,
						callback: onDirection
					})
				}.createDelegate(this)
			});
            return true;
        }

		if (dir_type_rec.get('DirType_Code') === 15 && getRegionNick() != 'kz') {
			// окно мастера направлений #101026
			getWnd('swDirectionMasterWindow').show({
				type: 'HTM',
				dirTypeData: { DirType_id: 19, DirType_Code: 15, DirType_Name: 'На высокотехнологичную помощь' },
				personData: {
					Person_id:	personData.Person_id,
					PersonEvn_id:	personData.PersonEvn_id,
					Server_id:	personData.Server_id,
				},
				directionData: {
					action: 'add',
					EvnDirectionHTM_pid: this.data.Evn_id || null,
					EvnDirection_pid: this.data.Evn_id || null,
					Person_id: personData.Person_id,
					PersonEvn_id: personData.PersonEvn_id,
					Server_id: personData.Server_id,
					// MedService_id: sw.Promed.MedStaffFactByUser.current.MedService_id,
					LpuSection_id: directionData.LpuSection_id,
					LpuSection_did: directionData.LpuSection_id,
					withCreateDirection: false,
					// ARMType: 'htm',
				},
				MedService_id: sw.Promed.MedStaffFactByUser.current.MedService_id,
				onSave: onDirection
			});
			return true;
		}
		
        if (dir_type_rec.get('DirType_Code').inlist([8,16])) {
        	if (getRegionNick().inlist(['perm', 'vologda']) && dir_type_rec.get('DirType_Code') == 8) {
				createEvnPrescrVK({
					personData: personData,
					userMedStaffFact: this.userMedStaffFact,
					directionData: directionData,
					windowId: this.getId(),
					callback: onDirection
				});
			} else {
				// Направление на ВК или МСЭ
				getWnd('swUslugaComplexMedServiceListWindow').show({
					userMedStaffFact: this.userMedStaffFact,
					personData: personData,
					dirTypeData: dir_type_rec.data,
					directionData: directionData,
					onDirection: onDirection
				});
			}
            return true;
        }
        if (13 == dir_type_rec.get('DirType_Code')) {
            // Направление на удаленную консультацию
            getWnd('swUslugaComplexMedServiceListWindow').show({
                userMedStaffFact: this.userMedStaffFact,
                personData: personData,
                dirTypeData: dir_type_rec.data,
                directionData: directionData,
                onDirection: onDirection
            });
            return true;
        }
		if (5 == dir_type_rec.get('DirType_Code') || 26 == dir_type_rec.get('DirType_Code')) {
            // Направление на экстренную госпитализацию или направление в органы социальной защиты
            form.openForm('swEvnDirectionEditWindow','XXX_id',{
                EvnDirection_id: null,
                callback: onDirection,
                formParams: {
                    EvnDirection_pid: el_data.object_id
                    ,Diag_id: vizit_data.Diag_id || null
                    ,DirType_id: dir_type_rec.get('DirType_id')
                    ,MedService_id: this.userMedStaffFact.MedService_id
                    ,MedPersonal_id: this.userMedStaffFact.MedPersonal_id
					,LpuSection_id: this.userMedStaffFact.LpuSection_id
					,MedStaffFact_id: this.userMedStaffFact.MedStaffFact_id
					,Lpu_did: getGlobalOptions().lpu_id
					,Lpu_sid: getGlobalOptions().lpu_id
                }
            },'add',langs('Добавление направления'));
            return true;
        }
        if (7 == dir_type_rec.get('DirType_Code')) {
        	// На патологогистологическое исследование
        	directionData.EvnDirectionHistologic_pid = el_data.object_id;
        	if(form.ARMTypeFrom == 'stac'){
        		//из стационарного случая лечения
        		var data = form.getObjectData(form.data.Code,form.data.id);
        		if(data.EvnPS_NumCard) directionData.EvnDirectionHistologic_NumCard = data.EvnPS_NumCard;
        		if(data.EvnPS_id) directionData.EvnPS_id = data.EvnPS_id;
        	}
        	getWnd('swEvnDirectionHistologicEditWindow').show({
        		action: 'add',
        		formParams: directionData,
        		callback: onDirection,
				userMedStaffFact: this.userMedStaffFact
        	});
        	return true;
        }

		if (29 == dir_type_rec.get('DirType_Code')) {
        	// На цитологическое диагностическое исследование
        	directionData.EvnDirectionCytologic_pid = el_data.object_id;
        	directionData.Diag_spid = null;
        	directionData.EvnVizitPL_IsZNO = null;
        	if(form.ARMTypeFrom == 'stac'){
        		//из стационарного случая лечения
        		var data = form.getObjectData(form.data.Code,form.data.id);
        		if(data.EvnPS_NumCard) directionData.EvnDirectionCytologic_NumCard = data.EvnPS_NumCard;
        		if(data.EvnPS_id) directionData.EvnPS_id = data.EvnPS_id;
        	}
        	if(vizit_data && vizit_data.EvnVizitPL_IsZNO && vizit_data.EvnVizitPL_IsZNO == 2){
        		if(vizit_data.Diag_spid) {
        			directionData.Diag_id = vizit_data.Diag_spid;
        			directionData.EvnVizitPL_IsZNO = vizit_data.EvnVizitPL_IsZNO;
        		}else{
        			sw.swMsg.alert(langs('Сообщение'), 'Нельзя создать направление. Не указано подозрение на диагноз');
					return false;
        		}
        	}
        	getWnd('swEvnDirectionCytologicEditWindow').show({
        		action: 'add',
        		formParams: directionData,
        		callback: onDirection,
				callFromEmk: true,
				curentMedStaffFactByUser: this.userMedStaffFact
        	});
        	return true;
        }

		if (9 == dir_type_rec.get('DirType_Code')) {
			// Направление на исследование в другую МО
			var directionDataOtherMO = {
				userMedStaffFact: Ext.apply({}, this.userMedStaffFact),
				person: Ext.apply({}, personData),
				direction: Ext.apply({}, directionData),
				callback: function(data){
					onDirection();
					if (data.EvnDirection_id) {
						sw.swMsg.show({
							buttons: Ext.Msg.YESNO,
							msg: langs('Вывести направление на печать?'),
							title: langs('Вопрос'),
							icon: Ext.MessageBox.QUESTION,
							fn: function(buttonId){
								if (buttonId === 'yes') {
									sw.Promed.Direction.print({
										EvnDirection_id: data.EvnDirection_id
									});
								}
							}.createDelegate(this)
						});
					}
				}.createDelegate(this),
				mode: 'nosave',
				windowId: this.getId()
			};
			directionDataOtherMO.direction.LpuUnitType_SysNick = 'polka';
			directionDataOtherMO.direction.LpuUnit_did = null;
			directionDataOtherMO.direction.isNotForSystem = true;

			sw.Promed.Direction.queuePerson(directionDataOtherMO);

			return true;
		}

		if (30 == dir_type_rec.get('DirType_Code')) {
			// Направление внешнюю лабораторию по КВИ
        	directionData.EvnDirectionCVI_pid = el_data.object_id;
        	directionData.Diag_id = vizit_data.Diag_id || null;
        	directionData.EvnDirectionCVI_setDate = vizit_data.EvnVizitPL_setDate || vizit_data.EvnSection_setDate || null;
			directionData.MedPersonal_id = this.userMedStaffFact.MedPersonal_id;
        	getWnd('swEvnDirectionCviEditWindow').show({
        		action: 'add',
        		formParams: directionData,
        		callback: onDirection
        	});
        	return true;
		}

        if (!excList) {
            excList = [];
        }
        excList.push('8');
		excList.push('5');
        excList.push('13');
        getWnd('swDirectionMasterWindow').show({
            userMedStaffFact: this.userMedStaffFact,
            personData: personData,
            dirTypeData: dir_type_rec.data,
            dirTypeCodeExcList: excList,
            directionData: directionData,
            onHide: onDirection
        });
        return true;
    },
    openEvnDirectionEditWindow: function(action, el_data) {
		var form = this;
        var parent_code = this.defineParentEvnClass().EvnClass_SysNick;
        var root_code = '';
        var section_code = 'EvnDirection';
        switch (true) {
            case (parent_code == 'EvnSection'):
                root_code = 'EvnPS';
                section_code = 'EvnDirectionStac';
                break;
            case (parent_code == 'EvnVizitPL'):
                root_code = 'EvnPL';
                break;
            case (parent_code == 'EvnVizitPLStom'):
                root_code = 'EvnPLStom';
                section_code = 'EvnDirectionStom';
                break;
        }
		var formParams = {},
			reloadEvnDirectionList = function(data) {
				var reload_params = {
					section_code: section_code,
					object_key: 'EvnDirection_id',
					object_value: data.EvnDirection_id,
					parent_object_key: parent_code +'_id',
					parent_object_value: data.EvnDirection_pid,
					section_id: section_code + 'List_' + data.EvnDirection_pid
				};
				form.reloadViewForm(reload_params);
			},
			onEvnDirectionSave = function(data) {
				if ( !data || !data.evnDirectionData )
				{
					return false;
				}
				reloadEvnDirectionList({
					EvnDirection_id: data.evnDirectionData.EvnDirection_id,
					EvnDirection_pid: data.evnDirectionData.EvnDirection_pid
				});
				var vizit_node;
				if (parent_code == form.data.Code) {
					vizit_node = form.Tree.getNodeById(form.data.Code +'_'+ form.data.id);
				} else {
					vizit_node = form.Tree.getNodeById(parent_code +'_'+ data.evnDirectionData.EvnDirection_pid);
				}
				if (vizit_node) {
					form.loadTreeNode({
						node: vizit_node
					});
				} else if (root_code == form.data.Code) {
					var evnpl_node = form.Tree.getNodeById(form.data.Code +'_'+ form.data.id);
					if (evnpl_node.isExpanded()) {
						evnpl_node.collapse();
					}
					evnpl_node.expand(false,false,function(p){
						vizit_node = p.findChild('id', parent_code +'_'+ data.evnDirectionData.EvnDirection_pid);
						if (vizit_node) {
							form.loadTreeNode({
								node: vizit_node
							});
						}
					});
				}
			};

		if ( action == 'add' || action == 'addtome' ) {
			// запись пациента к другому врачу с выпиской электр.направления
			var vizit_data = form.getObjectData(parent_code,el_data.object_id);
			if (vizit_data == false)
			{
				return false;
			}
			var my_params = new Object({
				EvnDirection_id: 0,
				EvnDirection_pid: el_data.object_id,
				Diag_id: vizit_data.Diag_id,
				UserMedStaffFact_id: form.userMedStaffFact.MedStaffFact_id,
				formMode: 'vizit_PL'
			});
			
			if (action == 'addtome') {
				my_params.isThis = true;
				my_params.type = 'HimSelf';
			}
				my_params.fromEmk = true;
			
			my_params.onHide = function(){
				onEvnDirectionSave({
					evnDirectionData: {
						EvnDirection_id: 0,
						EvnDirection_pid: el_data.object_id
					}
				});
			};
			if (action == 'addtome') {
                my_params.onClose = my_params.onHide;
				form.openForm('swDirectionMasterWindow','XXX_id',my_params,action,langs('Запись к врачу'));
			} else 
				form.openForm('swMPRecordWindow','XXX_id',my_params,action,langs('Запись к врачу'));
		}
		else
		{
			var opt = el_data.object_id.split('_');
			formParams = form.getObjectDataWithFindBy(function(record,id){
				if (/*record.object_code == 'EvnDirection'*/ ['EvnDirection','EvnDirectionStac'].indexOf(record.object_code) >=0 && record.get('timetable') == opt[0] && record.get('timetable_id') == opt[1]) {
					return true;
				}
                if (record.object_code == el_data.object && record.get(el_data.object + '_id') == el_data.object_id) {
                    return true;
                }
				return false;
			});
			if (formParams == false) {
				formParams = form.getObjectData(el_data.object,el_data.object_id);
			}
			if (formParams == false)
			{
				return false;
			}

			if (formParams.EvnPrescrVK_id) {
				getWnd('swEvnPrescrVKWindow').show({
					EvnPrescrVK_id: formParams.EvnPrescrVK_id,
					action: 'edit'
				});
				return true;
			}
			// направление на тест КВИ
			if (formParams.EvnDirectionCVI_id) {
				var params = {
					action: (formParams.Lpu_id == getGlobalOptions().lpu_id) ? 'edit' : 'view',
					EvnDirectionCVI_id: formParams.EvnDirectionCVI_id,
					Person_id: formParams.Person_id,
					Server_id: formParams.Server_id,
					callback: onEvnDirectionSave
				};
				getWnd('swEvnDirectionCviEditWindow').show(params);
				return true;
			}
			// если направление на МСЭ, открываем соответсвующую форму
			if (formParams.EvnPrescrMse_id) {
				var action = (formParams.Lpu_gid == getGlobalOptions().lpu_id) ? 'edit' : 'view';
				var params = {
					EvnPrescrMse_id: formParams.EvnPrescrMse_id,
					Person_id: formParams.Person_id,
					Server_id: formParams.Server_id,
					onHide: Ext.emptyFn
				};
				form.openForm('swDirectionOnMseEditForm', 'EvnPrescrMse_id',params,action);
				return true;
			}
			// если направление на ВМП, открываем соответсвующую форму
			if (formParams.EvnDirectionHTM_id) {
				var params = {
					action: 'edit',
					EvnDirectionHTM_id: formParams.EvnDirectionHTM_id,
					Person_id: formParams.Person_id,
					Server_id: formParams.Server_id,
					onHide: Ext.emptyFn
				};
				getWnd('swDirectionOnHTMEditForm').show(params);
				return true;
			}
			// если направление на ВМП, открываем соответсвующую форму
			if (formParams.EvnDirectionHTM_id) {
				var params = {
					action: 'edit',
					EvnDirectionHTM_id: formParams.EvnDirectionHTM_id,
					Person_id: formParams.Person_id,
					Server_id: formParams.Server_id,
					onHide: Ext.emptyFn
				};
				getWnd('swDirectionOnHTMEditForm').show(params);
				return true;
			}
			// если направление на патологогистологическое исследование:, открываем соответсвующую форму
			if (formParams.EvnDirectionHistologic_id) {				
				var action = (formParams.Lpu_gid == getGlobalOptions().lpu_id) ? 'edit' : 'view';
				formParams.EvnDirectionHistologic_pid = el_data.object_id;
				getWnd('swEvnDirectionHistologicEditWindow').show({
					action: action,
					formParams: formParams,
					onHide: Ext.emptyFn,
					userMedStaffFact: this.userMedStaffFact,
					callback: function(){
						// --
					}.createDelegate(this)
				});
	        	return true;
			}
		
			var my_params = new Object({
				Person_id: form.Person_id,
				EvnDirection_id: formParams.EvnDirection_id,
				callback: onEvnDirectionSave,
				formParams: formParams
			});
			my_params.onHide = Ext.emptyFn;
			form.openForm('swEvnDirectionEditWindow','XXX_id',my_params,action,langs('Редактирование направления'));
		}
	},
	onChangeVizitDeseaseType: function(EvnClass_SysNick, id, data, onlyEvnPl) {
		var form = this;

		// Сперва апдейтим данные в посещении
		if (!onlyEvnPl) {
			//обновить в viewFormDataStore данные посещения
			var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ id);
			if (record) {
				record.set('DeseaseType_id', data.DeseaseType_id);
				record.set('DeseaseType_Name', data.DeseaseType_Name);
				record.set('DeseaseType_SysNick', data.DeseaseType_SysNick);
				record.commit(true);
				form.viewFormDataStore.commitChanges();
			}
		}
		// обновить поле Характер заболевания в EvnPL (на последний по дате)
		var lastVizitId = 0, lastVizitIndex = -1, lastDeseaseTypeData = new Object();

		form.viewFormDataStore.each(function(rec){
			if (rec.object_code == EvnClass_SysNick && (lastVizitIndex == -1 || rec.get('_item_index') < lastVizitIndex)){
				lastVizitIndex = rec.get('_item_index');

				lastDeseaseTypeData.DeseaseType_id = rec.get('DeseaseType_id');
				lastDeseaseTypeData.DeseaseType_Name = rec.get('DeseaseType_Name');
			}
		});

		var parRecord = form.viewFormDataStore.getById(form.data.Code + '_'+ form.data.id);
		var textInEvnPlCmp = Ext.get(form.data.Code + '_'+ form.data.id + '_DeseaseTypeText');
		var text = lastDeseaseTypeData.DeseaseType_id ? lastDeseaseTypeData.DeseaseType_Name : form.getEmptyValueText();
		if (textInEvnPlCmp) {
			textInEvnPlCmp.update(text);
		}
		if (parRecord) {
			if (lastDeseaseTypeData.DeseaseType_id > 0){
				parRecord.set('DeseaseType_Name', lastDeseaseTypeData.DeseaseType_Name);
			} else {
				parRecord.set('DeseaseType_Name', null);
			}
			parRecord.set('DeseaseType_id', lastDeseaseTypeData.DeseaseType_id);
			parRecord.commit(true);
			form.viewFormDataStore.commitChanges();
		}

		var diag_code_full = record.get('Diag_Code')?record.get('Diag_Code').slice(0, 3):'';
		var inputTumorStage = Ext.get(EvnClass_SysNick +'_data_'+ id +'_inputTumorStage');

		if (((getRegionNick() == 'kareliya' && record.get('DeseaseType_SysNick') != 'new') || getRegionNick() == 'ekb') &&
			((diag_code_full >= 'C00' && diag_code_full <= 'C97') || (diag_code_full >= 'D00' && diag_code_full <= 'D09'))
		) {
			record.set('TumorStage_id', null);
			record.set('TumorStage_Name', '');
			record.commit(true);
			form.viewFormDataStore.commitChanges();
			inputTumorStage.update(form.getEmptyValueText());
			Ext.Ajax.request({
				url: '/?c=EvnVizit&m=setEvnVizitParameter',
				params: {
					object: EvnClass_SysNick,
					id: id,
					param_name: 'TumorStage_id',
					param_value: null,
					options: {isEmk: true}
				}
			});
		}
	},
	onChangeVizitDiag: function(EvnClass_SysNick, id, data, onlyEvnPl, mode) {
		var form = this;

		// Сперва апдейтим данные в посещении
		if (!onlyEvnPl) {
			//обновить в viewFormDataStore данные посещения
			var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ id);
			if (record) {
				record.data.Diag_id = data.Diag_id;
				record.data.Diag_Code = data.Diag_Code;
				record.data.Diag_Name = data.Diag_Name;
				record.data.DiagFinance_IsOms = data.DiagFinance_IsOms;
				record.data.DiagFinance_IsRankin = data.DiagFinance_IsRankin;
				//record.data.VizitType_id = data.VizitType_id;
				record.data.listMorbus = data.listMorbus || {};
				record.data.listPersonRegister = data.listPersonRegister || {};
				record.data.CureStandart_Count = data.CureStandart_Count || 0;
				record.data.DiagFedMes_FileName = data.DiagFedMes_FileName || null;
				record.commit(true);
				form.viewFormDataStore.commitChanges();
			}
			// обновить поле диагноз в EvnVizitPL
			var eloutput = Ext.get(EvnClass_SysNick +'_data_'+ id +'_inputDiag');
			if (eloutput) eloutput.update(data.Diag_Name||form.getEmptyValueText());
			// обновить кнопку в назначениях
			var evnPrescrButton;
			if (EvnClass_SysNick == 'EvnVizitPL') {
				evnPrescrButton = Ext.get('EvnPrescrPolkaList_'+ id +'_addwithtemplate');
			}
			if (EvnClass_SysNick == 'EvnVizitPLStom') {
				evnPrescrButton = Ext.get('EvnPrescrStomList_'+ id +'_addwithtemplate');
			}
			if (evnPrescrButton) {
				if (data.CureStandart_Count > 0) {
					evnPrescrButton.setDisplayed('block');
				} else {
					evnPrescrButton.setDisplayed('none');
				}
			}
			form.checkDiagSpecific(EvnClass_SysNick, id, data, mode);
		}

		if (data.deletedMorbusOnkoVizitPLDop_id) {
			var node = form.Tree.getNodeById('MorbusOnkoVizitPLDop_'+data.deletedMorbusOnkoVizitPLDop_id);
			if (node) node.remove();
		}

		// обновить поле диагноз в EvnPL (на последний по дате)
		var lastVizitId = 0, lastVizitIndex = -1, lastDiagData = new Object();

		form.viewFormDataStore.each(function(rec){
			if (rec.object_code == EvnClass_SysNick && !Ext.isEmpty(rec.get('Diag_id')) && (lastVizitIndex == -1 || rec.get('_item_index') < lastVizitIndex)){
				lastVizitIndex = rec.get('_item_index');

				lastDiagData.Diag_id = rec.get('Diag_id');
				lastDiagData.Diag_Code = rec.get('Diag_Code');
				lastDiagData.Diag_Name = rec.get('Diag_Name');
				lastDiagData.DiagFedMes_FileName = rec.get('DiagFedMes_FileName');
				lastDiagData.CureStandart_Count = rec.get('CureStandart_Count');
			}
		});

		var parRecord = form.viewFormDataStore.getById(form.data.Code + '_'+ form.data.id);
		var diagTextInEvnPlCmp = Ext.get(form.data.Code + '_'+ form.data.id + '_DiagText');
		if (diagTextInEvnPlCmp) {
			diagTextInEvnPlCmp.update(lastDiagData.Diag_Name||form.getEmptyValueText());
			parRecord.set('Diag_id', lastDiagData.Diag_id);
			parRecord.set('Diag_Code', lastDiagData.Diag_Code);
			parRecord.commit(true);
			form.viewFormDataStore.commitChanges();
		}
		// обновить код диагноза в EvnVizitPL и в EvnPL
		var diagCodeInEvnPlCmp = Ext.get(form.data.Code + '_'+ form.data.id + '_DiagCode');
		var codeInputWrap = Ext.get(EvnClass_SysNick +'_'+ id +'_DiagCode');
		var showFm;
		if (lastDiagData.DiagFedMes_FileName) {
			showFm = function() {
				form.openPrintDoc('/?c=Common&m=showFm&name=' + data.DiagFedMes_FileName);
			};
		} else if (lastDiagData.CureStandart_Count && lastDiagData.CureStandart_Count > 0) {
			showFm = function() {
				sw.Promed.EvnPrescr.showCureStandart(id, form);
			};
		}
		if (showFm) {
			var linkId, link;
			if (diagCodeInEvnPlCmp) {
				linkId = form.data.Code + '_'+ form.data.id + '_showFm';
				diagCodeInEvnPlCmp.update('<span id="'+ linkId + '" class="link" title="' + (getRegionNick() == 'kz' ? 'Показать протокол лечения по этому диагнозу' : 'Показать федеральный ' + getMESAlias() + ' по этому диагнозу') + '">'+ lastDiagData.Diag_Code +'</span>');
				link = Ext.get(linkId);
				if (link) {
					link.on('click', showFm);
				}
			}
			if (codeInputWrap && !onlyEvnPl) {
				linkId = EvnClass_SysNick +'_'+ id + '_showFm';
				codeInputWrap.update('<span id="' + linkId +'" class="link" title="' + (getRegionNick() == 'kz' ? 'Показать протокол лечения по этому диагнозу' : 'Показать федеральный ' + getMESAlias() + ' по этому диагнозу') + '">'+ data.Diag_Code +'</span>');
				link = Ext.get(linkId);
				if (link) {
					link.on('click', showFm);
				}
			}
		} else {
			if (diagCodeInEvnPlCmp) {
				diagCodeInEvnPlCmp.update(lastDiagData.Diag_Code);
			}
			if (codeInputWrap && !onlyEvnPl) {
				codeInputWrap.update(data.Diag_Code);
			}
		}

		var diagLCodeInEvnPlCmp = Ext.get(form.data.Code + '_'+ form.data.id + '_DiagLCode');
		var diagLTextInEvnPlCmp = Ext.get(form.data.Code + '_data_'+ form.data.id + '_inputDiagL');
		if (diagLCodeInEvnPlCmp && diagLTextInEvnPlCmp && mode && mode == 'onChangeDiag') {
			diagLCodeInEvnPlCmp.update(lastDiagData.Diag_Code);
			diagLTextInEvnPlCmp.update(lastDiagData.Diag_Name||form.getEmptyValueText());
			diagLTextInEvnPlCmp.setAttribute('dataid', lastDiagData.Diag_id);
			parRecord.set('Diag_lid', lastDiagData.Diag_id);
			parRecord.set('DiagL_Code', lastDiagData.Diag_Code);
			parRecord.commit(true);
			form.viewFormDataStore.commitChanges();
			log([99, diagLTextInEvnPlCmp.dom.innerHTML, parRecord.get('DiagL_Code')]);
			log([1, diagCodeInEvnPlCmp.dom.innerHTML, lastDiagData.Diag_Code]);
		}
		
		if (data && data.Diag_Code) {
			var editPersonPregnancyLink = Ext.get(EvnClass_SysNick +'_data_'+ id +'_editPersonPregnancy');
			if (editPersonPregnancyLink && data.listPersonRegisterTypeDiag) {
				editPersonPregnancyLink.setDisplayed(String('pregnancy').inlist(data.listPersonRegisterTypeDiag));
			}

			var inputTreatmentClass = Ext.get(EvnClass_SysNick +'_data_'+ id +'_inputTreatmentClass');
			var TreatmentClass_id = inputTreatmentClass ? inputTreatmentClass.getAttribute('dataid') : null;
			form.treatmentClassStore.filterBy(function(rec) {
				if (data.Diag_Code == 'Z51.5') {
					return (rec.get('TreatmentClass_id').inlist([ 9 ]));
				} else if (data.Diag_Code.substr(0,1) == 'Z' || (getRegionNick() == 'perm' && data.Diag_Code.substr(0,3) == 'W57')) {
					return (rec.get('TreatmentClass_id').inlist([ 6, 7, 8, 9, 10, 11, 12 ]));
				} else if ( getRegionNick() == 'penza' ) {
					return (rec.get('TreatmentClass_id').inlist([ 1, 2, 3, 4, 11, 13 ]));
				} else {
					return (rec.get('TreatmentClass_id').inlist([ 1, 2, 3, 4, 13 ]));
				}
			});

			var vizitData = form.getObjectData('EvnVizitPL', id);

			if (getRegionNick() == 'kareliya') {
				var aindex = form.treatmentClassStore.findBy(function(rec) {
					var bindex = swTreatmentClassServiceTypeGlobalStore.findBy(function(r) {
						var cindex = swTreatmentClassVizitTypeGlobalStore.findBy(function(r2) {
							return (
								r.get('ServiceType_id') == data.ServiceType_id && r2.get('VizitType_id') == data.VizitType_id && 
								r.get('TreatmentClass_id') == rec.get('TreatmentClass_id') && r2.get('TreatmentClass_id') == rec.get('TreatmentClass_id')
							);
						});
						return (cindex != -1);
					});
					return (bindex != -1);
				});
		
				if (aindex == -1) {
					aindex = 0;
				}
				
				if (form.treatmentClassStore.getAt(aindex)) {
					TreatmentClass_id = form.treatmentClassStore.getAt(aindex).get('TreatmentClass_id');
					TreatmentClass_Name = form.treatmentClassStore.getAt(aindex).get('TreatmentClass_Name');
					record.set('TreatmentClass_id', TreatmentClass_id);					
					Ext.Ajax.request({
						url: '/?c=EvnVizit&m=setEvnVizitParameter',
						params: {
							object: EvnClass_SysNick,
							id: id,
							param_name: 'TreatmentClass_id',
							param_value: TreatmentClass_id,
							options: {isEmk: true}
						}
					});
				}
			} else if (
				getRegionNick() == 'pskov' && EvnClass_SysNick == 'EvnVizitPL' && !Ext.isEmpty(mode) && mode == 'onChangeDiag'
				&& vizitData.LpuSectionProfile_Code == '160'
				&& data.Diag_Code.substr(0,1) != 'Z'
			) {
				// установить TreatmentClass_Code = 1.1, если диагноз не Z и профиль 160
				var aindex = form.treatmentClassStore.findBy(function(rec) {
					return (rec.get('TreatmentClass_Code') == '1.1');
				});

				if ( aindex >= 0 ) {
					TreatmentClass_id = form.treatmentClassStore.getAt(aindex).get('TreatmentClass_id');
					TreatmentClass_Name = form.treatmentClassStore.getAt(aindex).get('TreatmentClass_Name');
					record.set('TreatmentClass_id', TreatmentClass_id);
					inputTreatmentClass.update(TreatmentClass_Name);
					inputTreatmentClass.setAttribute('dataid', TreatmentClass_id);
					Ext.Ajax.request({
						url: '/?c=EvnVizit&m=setEvnVizitParameter',
						params: {
							object: EvnClass_SysNick,
							id: id,
							param_name: 'TreatmentClass_id',
							param_value: TreatmentClass_id,
							options: {isEmk: true}
						}
					});
				}
			} else {
				index = form.treatmentClassStore.findBy(function(rec) {return (rec.get('TreatmentClass_id') == TreatmentClass_id);});
				if (TreatmentClass_id && index == -1 && getRegionNick()!='kz') {
					inputTreatmentClass.update(form.getEmptyValueText());
					inputTreatmentClass.setAttribute('dataid', '');
					record.set('TreatmentClass_id', null);
				}
			}

			if (getRegionNick().inlist(['kareliya','ekb'])) {
				var wrapTumorStage = Ext.get(EvnClass_SysNick +'_data_'+ id +'_wrapTumorStage');
				var inputTumorStage = Ext.get(EvnClass_SysNick +'_data_'+ id +'_inputTumorStage');
				var diag_code_full = data.Diag_Code?data.Diag_Code.slice(0, 3):'';
				if ( wrapTumorStage ) {
					if ((diag_code_full >= 'C00' && diag_code_full <= 'C97') || (diag_code_full >= 'D00' && diag_code_full <= 'D09')) {
						wrapTumorStage.setDisplayed('block');
					} else {
						wrapTumorStage.setDisplayed('none');
						inputTumorStage.update(form.getEmptyValueText());
						record.set('TumorStage_id', null);
						record.set('TumorStage_Name', '');
						record.commit(true);
						form.viewFormDataStore.commitChanges();
						Ext.Ajax.request({
							url: '/?c=EvnVizit&m=setEvnVizitParameter',
							params: {
								object: EvnClass_SysNick,
								id: id,
								param_name: 'TumorStage_id',
								param_value: null,
								options: {isEmk: true}
							}
						});
					}
				}
			}
			if (getRegionNick().inlist(['penza']) && EvnClass_SysNick == 'EvnVizitPL') {
				var wrapPainIntensity = Ext.get(EvnClass_SysNick +'_data_'+ id +'_wrapPainIntensity');
				var inputPainIntensity = Ext.get(EvnClass_SysNick +'_data_'+ id +'_inputPainIntensity');
				var showPainIntensity = false;
				var diag_code_full = data.Diag_Code?data.Diag_Code.slice(0, 3):'';
				if ( wrapPainIntensity ) {
					if ((diag_code_full >= 'C00' && diag_code_full <= 'C97') || (diag_code_full >= 'D00' && diag_code_full <= 'D09')) {
						showPainIntensity = true;
						wrapPainIntensity.setDisplayed('block');
					} else {
						wrapPainIntensity.setDisplayed('none');
					}

					var currentPainIntensity_id = record.get('PainIntensity_id');
					if ( mode && mode == 'onChangeDiag' && (
						(!showPainIntensity && !Ext.isEmpty(currentPainIntensity_id))
						|| (showPainIntensity && Ext.isEmpty(currentPainIntensity_id))
					)) {
						var PainIntensity_id = null;
						if (showPainIntensity) {
							PainIntensity_id = 1;
							record.set('PainIntensity_Name', 'боли нет');
							inputPainIntensity.update('боли нет');
						} else {
							record.set('PainIntensity_Name', '');
							inputPainIntensity.update(form.getEmptyValueText());
						}
						record.set('PainIntensity_id', PainIntensity_id);
						record.commit(true);
						form.viewFormDataStore.commitChanges();
						Ext.Ajax.request({
							url: '/?c=EvnVizit&m=setEvnVizitParameter',
							params: {
								object: EvnClass_SysNick,
								id: id,
								param_name: 'PainIntensity_id',
								param_value: PainIntensity_id,
								options: {isEmk: true}
							}
						});
					}
				}
			}
		}
		
		if ( !getRegionNick().inlist(['kz', 'krym']) && EvnClass_SysNick == 'EvnVizitPL' && data.Diag_Code
			&& (
				(getRegionNick() == 'ufa' && data.Diag_Code != 'Z03.1')
				|| (getRegionNick() != 'ufa' && data.Diag_Code.search(new RegExp("^(C|D0)", "i")) >= 0)
			)
		) {
			if ( mode && mode == 'onChangeDiag' ) {
				var inputIsZNO = Ext.get(EvnClass_SysNick +'_data_'+ id +'_inputIsZNO');
				var inputDiagSpid = Ext.get(EvnClass_SysNick +'_data_'+ id +'_inputDiagSpid');
				var DiagSpidCode = Ext.get(EvnClass_SysNick +'_'+ id +'_DiagSpidCode');
				inputIsZNO.setAttribute('dataid', '');
				inputIsZNO.update(form.getEmptyValueText());
				inputDiagSpid.setAttribute('dataid', '');
				inputDiagSpid.update(form.getEmptyValueText());
				DiagSpidCode.update('');
				record.set('Diag_spid', null);
				record.set('DiagSpid_Code', '');
				record.set('DiagSpid_Name', '');
				if (getRegionNick() == 'buryatiya' && data.Diag_Code && data.Diag_Code == 'Z03.1') {
					record.set('EvnVizitPL_IsZNO', 2);
					record.set('IsZNO_Name', 'Да');
				} else {
					record.set('EvnVizitPL_IsZNO', null);
					record.set('IsZNO_Name', '');
				}
				record.commit(true);
			}
			var DiagSpidField = Ext.get('EvnVizitPL_'+id+'_DiagSpidField');
			DiagSpidField.setDisplayed('none');
		}
		else if ( getRegionNick() == 'ufa' && EvnClass_SysNick == 'EvnVizitPL' && data.Diag_Code && data.Diag_Code == 'Z03.1' ) {
			var EvnVizitPL_IsZNO = data.EvnVizitPL_IsZNO;

			if ( mode && mode == 'onChangeDiag' ) {
				var inputIsZNO = Ext.get(EvnClass_SysNick +'_data_'+ id +'_inputIsZNO');
				inputIsZNO.setAttribute('dataid', '2');
				inputIsZNO.update('Да');
				record.set('EvnVizitPL_IsZNO', 2);
				record.set('IsZNO_Name', 'Да');
				record.commit(true);
				EvnVizitPL_IsZNO = 2;
			}

			var DiagSpidField = Ext.get('EvnVizitPL_'+id+'_DiagSpidField');
			DiagSpidField.setDisplayed(EvnVizitPL_IsZNO == 2 ? 'block' : 'none');
		}
	},

	getFinanceSource: function(EvnClass_SysNick,id) {
		var form = this;

		if (getRegionNick() != 'kz') return false;

		if (this.action.inlist(['view'])) return false;

		if (Ext.get('isPaidVisit').getAttribute('checked')) return false;

		var lastEvnVizitPLDate;

		form.viewFormDataStore.each(function(record){
			if (
				record.object_code == 'EvnVizitPL'
				&& (
					Ext.isEmpty(lastEvnVizitPLDate)
					|| (
						!Ext.isEmpty(record.get('EvnVizitPL_setDate120'))
						&& record.get('EvnVizitPL_setDate120') + record.get('EvnVizitPL_setTime') >= lastEvnVizitPLDate
					)
				)
			) {
				lastEvnVizitPLDate = record.get('EvnVizitPL_setDate120');
			}
			else if (record.object_code=='EvnVizitPLStom'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(record.get('EvnVizitPLStom_setDate')) && record.get('EvnVizitPLStom_setDate') >= lastEvnVizitPLDate))){
				lastEvnVizitPLDate = record.get('EvnVizitPLStom_setDate');
			}
		});

		var params = {
			EvnDirection_setDate: lastEvnVizitPLDate,
			Person_id: form.Person_id,
			TreatmentClass_id: Ext.get(EvnClass_SysNick+'_data_'+id+'_inputTreatmentClass').getAttribute('dataid'),
			LpuSectionProfile_id: Ext.get(EvnClass_SysNick+'_data_'+id+'_inputLpuSectionProfile').getAttribute('dataid'),
			UslugaComplex_id: Ext.get(EvnClass_SysNick+'_data_'+id+'_inputUslugaComplex').getAttribute('dataid'),
			//Diag_id: Ext.get(EvnClass_SysNick+'_data_'+id+'_inputDiag').getAttribute('dataid')
		};

		if (Ext.get(EvnClass_SysNick+'_data_'+id+'_inputDiag')) params.Diag_id = Ext.get(EvnClass_SysNick+'_data_'+id+'_inputDiag').getAttribute('dataid');

		params.Diag_id = ( params.TreatmentClass_id && params.TreatmentClass_id.inlist(['24','37']) )?'5944':params.Diag_id;

		if (!params.LpuSectionProfile_id || !params.Diag_id || !params.TreatmentClass_id || !params.UslugaComplex_id) return false;

		var loadMask = new Ext.LoadMask(this.getEl(), { msg: "Получение источника финансирования..." });
		loadMask.show();

		Ext.Ajax.request({
			callback: function (options, success, response) {
				loadMask.hide();
				var response_obj = Ext.util.JSON.decode(response.responseText);

				if (response_obj.success) {
					var tct = Ext.get(EvnClass_SysNick+'_data_'+id+'_inputPayType');
					tct.update(response_obj['PayType_Name']);
					tct.setAttribute('dataid', response_obj['PayType_id']);
					form.kzCheckbox(EvnClass_SysNick+'_data_'+id+'_inputPayType',id);
				}
				else {
					sw.swMsg.alert(langs('Ошибка'), langs('Ошибка при определении источника финансирования'));
				}
			}.createDelegate(this),
			params: params,
			url: '/?c=ExchangeBL&m=getPayType'
		});
	},

	/**
	 * Вызывается:
	 * onLoadViewPanel при загрузке в панель просмотра ТАП
	 */
	setDiagConcComboVisible: function(EvnClass_SysNick, id, data, mode) {
		var form = this;
		var el_data = {object: EvnClass_SysNick, object_id: id};
		var wrapDiagConc = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapDiagConc');
		var inputDiagLCode = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_DiagLCode');
		var DiagLCode = inputDiagLCode ? inputDiagLCode.dom.innerHTML : null;

		var lastEvnVizitPLDate, lastDiagCode;
		form.viewFormDataStore.each(function(record){
			if (
				record.object_code == 'EvnVizitPL'
				&& (
					Ext.isEmpty(lastEvnVizitPLDate)
					|| (
						!Ext.isEmpty(record.get('EvnVizitPL_setDate120'))
						&& record.get('EvnVizitPL_setDate120') + record.get('EvnVizitPL_setTime') >= lastEvnVizitPLDate
					)
				)
			) {
				lastDiagCode = record.get('Diag_Code');
				lastEvnVizitPLDate = record.get('EvnVizitPL_setDate120') + record.get('EvnVizitPL_setTime');
			}
			else if (record.object_code=='EvnVizitPLStom'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(record.get('EvnVizitPLStom_setDate')) && record.get('EvnVizitPL_setDate') >= lastEvnVizitPLDate))){
				lastEvnVizitPLDate = record.get('EvnVizitPL_setDate');
			}
		});

		if (getRegionNick() == 'kareliya') {
			if ( !Ext.isEmpty(lastDiagCode) && lastDiagCode.toString().substr(0, 1).inlist([ 'S', 'T' ]) ) {
				if(wrapDiagConc) wrapDiagConc.setDisplayed('block');
			} else {
				if(wrapDiagConc) wrapDiagConc.setDisplayed('none');
				var inputDiagConc = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputDiagConc');
				if (inputDiagConc) {
					inputDiagConc.dom.innerHTML = form.getEmptyValueText();
					inputDiagConc.setAttribute('dataid','');
				}
			}
		}
		else {
			if ( !Ext.isEmpty(DiagLCode) && DiagLCode.toString().substr(0, 1).inlist([ 'S', 'T' ]) ) {
				if(wrapDiagConc) wrapDiagConc.setDisplayed('block');
			} else {
				if(wrapDiagConc) wrapDiagConc.setDisplayed('none');
				var inputDiagConc = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputDiagConc');
				if (inputDiagConc) {
					inputDiagConc.dom.innerHTML = form.getEmptyValueText();
					inputDiagConc.setAttribute('dataid','');
				}
			}
		}
	},
	/**
	 * Вызывается:
	 * onLoadViewPanel при загрузке в панель просмотра КВС/ТАП/посещения/движения
	 * onChangeDiag при изменении диагноза посещения/движения
	 * onChangeEvnUsluga при изменении услуг посещения поликлиники
	 * onChangeVizitType при изменении типа посещения поликлиники
	 */
	checkDiagSpecific: function(EvnClass_SysNick, id, data, mode) {
        // показать/скрыть специфику по заболеванию
        var form = this,
            specificsOnko = Ext.get(EvnClass_SysNick +'_'+ id +'_specificsOnko'),
            specificsPregn = Ext.get(EvnClass_SysNick +'_'+ id +'_specificsPregn'),
            specificsHepatitis = Ext.get(EvnClass_SysNick +'_'+ id +'_specificsHepatitis'),
            specificsCrazy = Ext.get(EvnClass_SysNick +'_'+ id +'_specificsCrazy'),
            specificsPalliat = Ext.get(EvnClass_SysNick +'_'+ id +'_specificsPalliat'),
			el_data = {object: EvnClass_SysNick, object_id: id};

        data.listMorbus = data.listMorbus || {};
        data.listPersonRegister = data.listPersonRegister || {};
		log('checkDiagSpecific', data.listMorbus, data.listPersonRegister, mode);
        if (specificsOnko && false == mode.toString().inlist(['onChangeEvnUsluga','onChangeVizitType'])) {
            specificsOnko.setDisplayed((data.listMorbus['onko']) ? 'block' : 'none');
			if (data.listMorbus['onko']) {
				var html = '';
				for (var key in data.listMorbus['onko'])  {
					if (data.listMorbus['onko'][key]['Diag_id']) {
						if(getGlobalOptions().region.nick != 'ufa')
						{
							html += '<div class="caption">'
							+'<div style="float:right;">'
                            +'<a id="EvnVizitPL_'+id+'_'+data.listMorbus['onko'][key]['Diag_id']+'_MorbusOnkoPrint" onclick="printControlCardZno('+id+', '+data.listMorbus['onko'][key]['EvnDiagPLSop_id']+')" class="button icon icon-print16" title="Печать КЛУ при ЗНО"><span></span></a>'
							+'</div>';
							if (getRegionNick() == 'ekb') {
								html += '<div style="float:right;">'
								+'<a id="EvnVizitPL_'+id+'_'+data.listMorbus['onko'][key]['Diag_id']+'_MorbusOnkoPrint" onclick="printControlCardOnko('+id+', '+data.listMorbus['onko'][key]['EvnDiagPLSop_id']+')" class="button icon icon-print16" title="Печать выписки при онкологии"><span></span></a>'
								+'</div>';
							}
							html += '<h2><span id="EvnVizitPL_'+id+'_toggleDisplayMorbusOnko_'+data.listMorbus['onko'][key]['Diag_id']+'" class="collapsible" onclick="Ext.getCmp(\''+form.id+'\').loadSpecific(\'onko\', {object: \''+EvnClass_SysNick+'\', object_id: '+id+', EvnDiagPLSop_id: '+data.listMorbus['onko'][key]['EvnDiagPLSop_id']+'}, '+data.listMorbus['onko'][key]['Diag_id']+');">'
							+'Специфика (онкология) <span style="'+(!data.listMorbus['onko'][key]['diagIsMain'] ? 'font-weight: normal;' : '')+'">'+data.listMorbus['onko'][key]['Diag_Code']+'</span>'
							+'</span></h2></div><div id="MorbusOnkoData_'+id+'_'+data.listMorbus['onko'][key]['Diag_id']+'" style="display: none;"></div>';
						}
						else
						{
							html += '<div class="caption">'
							+'<div style="float:right;">'
                            +'<a id="EvnVizitPL_'+id+'_'+data.listMorbus['onko'][key]['Diag_id']+'_SpecificOnkoMenu" onclick="Ext.getCmp(\''+form.id+'\').SpecificOnkoMenu(\'EvnVizitPL_'+id+'_'+data.listMorbus['onko'][key]['Diag_id']+'_SpecificOnkoMenu\' )" class="button icon icon-print16" title="Печать"><span></span></a>'
							+'</div>'
							+'<h2><span id="EvnVizitPL_'+id+'_toggleDisplayMorbusOnko_'+data.listMorbus['onko'][key]['Diag_id']+'" class="collapsible" onclick="Ext.getCmp(\''+form.id+'\').loadSpecific(\'onko\', {object: \''+EvnClass_SysNick+'\', object_id: '+id+', EvnDiagPLSop_id: '+data.listMorbus['onko'][key]['EvnDiagPLSop_id']+'}, '+data.listMorbus['onko'][key]['Diag_id']+');">'
							+'Специфика (онкология) <span style="'+(!data.listMorbus['onko'][key]['diagIsMain'] ? 'font-weight: normal;' : '')+'">'+data.listMorbus['onko'][key]['Diag_Code']+'</span>'
							+'</span></h2></div><div id="MorbusOnkoData_'+id+'_'+data.listMorbus['onko'][key]['Diag_id']+'" style="display: none;"></div>';
						}
					}
				}
				//console.log('html=',html); 
				specificsOnko.dom.innerHTML = html;
				form.addHandlerForObject(EvnClass_SysNick, id, form.isReadOnly || data.accessType == 'view');
			}
			// @todo показать/скрыть кнопку добавления извещения
            form.clearSpecific('onko', el_data, mode);
        }

        if (specificsPalliat && false == mode.toString().inlist(['onDiagChange'])) {
			specificsPalliat.setDisplayed((data.listMorbus['palliat']) ? 'block' : 'none');
            form.clearSpecific('palliat', el_data, mode);
        }

        if (specificsPregn && false == mode.toString().inlist(['onChangeVizitType'])) {
			var isAbort = false;
			form.viewFormDataStore.each(function(rec){
				if (rec.object_code == 'EvnUsluga'){
					if (!Ext.isEmpty(rec.get('EvnUsluga_pid')) && rec.get('EvnUsluga_pid')==id&&rec.get('Usluga_Code')=='04250403'){
						isAbort = true;
						return true;
					}
				}
			});
            specificsPregn.setDisplayed((data.listMorbus['pregnancy']&&isAbort) ? 'block' : 'none');
            form.clearSpecific('pregnancy', el_data, mode);
        }

        if (specificsHepatitis && false == mode.toString().inlist(['onChangeEvnUsluga','onChangeVizitType'])) {
            specificsHepatitis.setDisplayed((data.listMorbus['hepa']) ? 'block' : 'none');
			// @todo показать/скрыть кнопку добавления извещения
            form.clearSpecific('hepa', el_data, mode);
        }

		if (data.listMorbus['narc']) {
			data.listMorbus['crazy'] = data.listMorbus['narc'];
			data.listMorbus['crazy']['morbusTypeSysNick'] = 'narc';
		}
		if (specificsCrazy && false == mode.toString().inlist(['onChangeEvnUsluga','onChangeVizitType'])) {
			specificsCrazy.setDisplayed((data.listMorbus['crazy']) ? 'block' : 'none');
			// @todo показать/скрыть кнопку добавления извещения
            form.clearSpecific('crazy', el_data, mode);
		}

		var	specificsTub = Ext.get(EvnClass_SysNick +'_'+ id +'_specificsTub');
		if (specificsTub && false == mode.toString().inlist(['onChangeEvnUsluga','onChangeVizitType'])) {
			specificsTub.setDisplayed((data.listMorbus['tub']) ? 'block' : 'none');
			// @todo показать/скрыть кнопку добавления извещения
            form.clearSpecific('tub', el_data, mode);
		}

		var	specificsVener = Ext.get(EvnClass_SysNick +'_'+ id +'_specificsVener');
		if (specificsVener && false == mode.toString().inlist(['onChangeEvnUsluga','onChangeVizitType'])) {
			// для группы диагнозов А50-А64
			specificsVener.setDisplayed((data.listMorbus['vener'] && new RegExp("^(A5[0-9]|A6[0-4])").test(data.Diag_Code)) ? 'block' : 'none');
			form.clearSpecific('vener', el_data, mode);
		}
		var addEvnNotifyVenerTools = Ext.get(EvnClass_SysNick +'_'+ id +'_addEvnNotifyVenerTools');
		if (addEvnNotifyVenerTools && false == mode.toString().inlist(['onChangeEvnUsluga','onChangeVizitType'])) {
			if (data.listMorbus['vener'] && !form.isReadOnly) {
				Ext.Ajax.request({
					url: '/?c=Common&m=checkEvnNotify',
					params: {
						Evn_id: id,
						MorbusType_SysNick: 'vener'
					},
					callback: function(options, success, response) {
						var result = Ext.util.JSON.decode(response.responseText);
						if (result.success) {
							if (Ext.isEmpty(result.MorbusType_List['vener'].EvnNotifyBase_id) && Ext.isEmpty(result.MorbusType_List['vener'].PersonRegister_id)) {
								addEvnNotifyVenerTools.setDisplayed('block');
							} else {
								addEvnNotifyVenerTools.setDisplayed('none');
							}
						} else {
							addEvnNotifyVenerTools.setDisplayed('none');
						}
					}
				});
			} else {
				addEvnNotifyVenerTools.setDisplayed('none');
			}
		}

		var	specificsNephro = Ext.get(EvnClass_SysNick +'_'+ id +'_specificsNephro');
		if (specificsNephro && false == mode.toString().inlist(['onChangeEvnUsluga'])) {
			// используем VizitType_id, т.к. только для Перми
			specificsNephro.setDisplayed((data.listMorbus['nephro'] && (2 == data.VizitType_id || 213 == data.VizitType_id)) ? 'block' : 'none');
			// @todo показать/скрыть кнопку добавления извещения
            form.clearSpecific('nephro', el_data, mode);
		}

		/*
		var	specificsProf = Ext.get(EvnClass_SysNick +'_'+ id +'_specificsProf');
		if (specificsProf && false == mode.toString().inlist(['onChangeEvnUsluga','onChangeVizitType'])) {
			specificsProf.setDisplayed((data.listMorbus['prof']) ? 'block' : 'none');
			// @todo показать/скрыть кнопку добавления извещения
            form.clearSpecific('prof', el_data, mode);
		}
		*/
		
		var addEvnInfectNotifyTools = Ext.get(EvnClass_SysNick +'_'+ id +'_addEvnInfectNotifyTools');
		if (addEvnInfectNotifyTools && false == mode.toString().inlist(['onChangeEvnUsluga','onChangeVizitType'])) {
			var infect058_reg = new RegExp("^(A0[0-9]|A2[0-8]|A[3-4]|A7[5-9]|A[8-9]|B0[0-9]|B1[5-9]|B2|B3[0-4]|B[5-7]|B8[0-3]|B9[0-6]|B97.[0-8]|B99)");
			if (infect058_reg.test(data.Diag_Code)) {
				if (data.listMorbus['infect058'] && 'onLoadViewPanel' == mode) {
					// загрузились данные в панель просмотра, обработанные методом swMorbus::processingEvnData
					addEvnInfectNotifyTools.setDisplayed((!data.listMorbus['infect058']['disableAddEvnNotify']) ? 'block' : 'none');
				} else {
					// изменился диагноз в форме редактирования или в панели просмотра
					form.checkEvnInfectNotify(id, function(isset){addEvnInfectNotifyTools.setDisplayed(isset?'none':'block')});
				}
			} else {
				addEvnInfectNotifyTools.setDisplayed('none');
			}
		}
		
		var addEvnNotifyRegisterIncludeNolosTools = Ext.get(EvnClass_SysNick +'_'+ id +'_addEvnNotifyRegisterIncludeNolosTools');
		if (addEvnNotifyRegisterIncludeNolosTools && false == mode.toString().inlist(['onChangeEvnUsluga','onChangeVizitType'])) {
			if (data.Diag_id 
				&& data.listPersonRegister && data.listPersonRegister['nolos']
				&& sw.Promed.personRegister.isAllow('nolos')
				&& !form.isReadOnly
			) {//data.accessType == 'edit'
				sw.Promed.personRegister.checkEvnNotifyRegisterInclude({
					PersonRegisterType_SysNick: 'nolos',
					Person_id: form.getPersonId(),
					Diag_id: data.Diag_id,
					callback: function(disabled){
						if (disabled) {
							addEvnNotifyRegisterIncludeNolosTools.setDisplayed('none');
						} else {
							addEvnNotifyRegisterIncludeNolosTools.setDisplayed('block');
						}
					}
				});
			} else {
				addEvnNotifyRegisterIncludeNolosTools.setDisplayed('none');
			}
		}
		
		var addEvnNotifyRegisterIncludeOrphanTools = Ext.get(EvnClass_SysNick +'_'+ id +'_addEvnNotifyRegisterIncludeOrphanTools');
		if (addEvnNotifyRegisterIncludeOrphanTools && false == mode.toString().inlist(['onChangeEvnUsluga','onChangeVizitType'])) {
			if (data.Diag_id 
				&& data.listPersonRegister && data.listPersonRegister['orphan']
				&& sw.Promed.personRegister.isAllow('orphan')
				&& !form.isReadOnly
			) {
				sw.Promed.personRegister.checkEvnNotifyRegisterInclude({
					PersonRegisterType_SysNick: 'orphan',
					Person_id: form.getPersonId(),
					Diag_id: data.Diag_id,
					callback: function(disabled){
						if (disabled) {
							addEvnNotifyRegisterIncludeOrphanTools.setDisplayed('none');
						} else {
							addEvnNotifyRegisterIncludeOrphanTools.setDisplayed('block');
						}
					}
				});
			} else {
				addEvnNotifyRegisterIncludeOrphanTools.setDisplayed('none');
			}
		}
	},
	addEvnNotifyRegisterInclude: function(type, el_data) {
		var evn = this.viewFormDataStore.getById(el_data.object +'_'+ el_data.object_id);
		var formParams = {
			EvnNotifyRegister_pid: el_data.object_id
			,Diag_Name: evn.data.Diag_Name
			,Diag_id: evn.data.Diag_id
			,Server_id: evn.data.Server_id
			,PersonEvn_id: evn.data.PersonEvn_id
			,Person_id: evn.data.Person_id
			,MedPersonal_id: evn.data.MedPersonal_id || this.userMedStaffFact.MedPersonal_id
			,Lpu_did: evn.data.Lpu_id || getGlobalOptions().lpu_id
		};
		var win, callback;
		switch (type) {
			case 'nolos':
				win = 'swEvnNotifyRegisterNolosIncludeWindow';
				callback = function() {
					Ext.get(el_data.object +'_'+ el_data.object_id +'_addEvnNotifyRegisterIncludeNolosTools').setDisplayed('none');
				};
				break;
			case 'orphan':
				win = 'swEvnNotifyRegisterOrphanIncludeWindow';
				callback = function() {
					Ext.get(el_data.object +'_'+ el_data.object_id +'_addEvnNotifyRegisterIncludeOrphanTools').setDisplayed('none');
				};
				break;
		}
		if (win && callback) {
			getWnd(win).show({formParams: formParams, callback: callback});
		}
	},
	signedEvn: function(EvnClass_SysNick, object_id) {
		var win = this,
			yes_handler = function() { 
				win.signedEvn(EvnClass_SysNick, object_id);
			};

        if (!this.checkChange(EvnClass_SysNick, EvnClass_SysNick+'_id', object_id, yes_handler) || this.isReadOnly) {
            return false;
        }

		var callback = function(success) {
			var node = win.node;
			win.requireCheckChange = false;
			win.loadTreeNode({
				node: node.parentNode,
				selectById: node.id,
				callback: function(tl,n){
					win.loadNodeViewForm(win.Tree.getSelectionModel().selNode);
				}
			});
		};
	},
    reloadEvnPrescrList: function(section_code, type, EvnPrescr_pid, callback) {
        var group_section_id = section_code + '_' + EvnPrescr_pid +'-' + type,
			collapsedClass = 'collapsed',
            expandedClass = 'expanded',
			gr_el = Ext.get(group_section_id),
			id = group_section_id +'_items',
			el = Ext.get(id),
			cnt_el = Ext.get(group_section_id +'_cnt'),
			record = this.viewFormDataStore.getById(group_section_id),
			ep_data = (record && record.data) || null,
			me = this;
			
		if (gr_el && el && ep_data && cnt_el) {
			this.reloadViewForm({
				section_code: ep_data.EvnClass_SysNick,
				object_key: ep_data.EvnClass_SysNick +'_id',
				object_value: ep_data.PrescriptionType_id,
				parent_object_key: 'EvnPrescr_pid',
				parent_object_value: EvnPrescr_pid,
				section_id: id,
				param_name: 'section',
				param_value: section_code,
				callback: function() {
					if (false == gr_el.hasClass(expandedClass)) {
						gr_el.removeClass(collapsedClass);
						gr_el.addClass(expandedClass);
					}
					var cnt = 0;
					me.viewFormDataStore.each(function(rec){
						if (rec.data.PrescriptionType_id 
							&& rec.data.EvnPrescr_pid 
							&& rec.data.PrescriptionType_id == type 
							&& rec.data.EvnPrescr_pid == EvnPrescr_pid
							&& !rec.data.section
							&& (!rec.data.EvnCourse_id || rec.data.isEvnCourse)
						) {
							cnt++;
						}
					});
					if (record.get('PrescriptionType_Cnt') != cnt) {
						record.set('PrescriptionType_Cnt', cnt);
						record.commit(true);
						me.viewFormDataStore.commitChanges();
						cnt_el.update(cnt);
					}
					if (typeof callback == 'function') {
						callback();
					}
				}
			});
		}
	},
    loadEvnPrescr: function(d, section_code) {
        var collapsedClass = 'collapsed',
            expandedClass = 'expanded',
			gr_el = Ext.get(d.section_id),
			id = d.section_id +'_items',
			el = Ext.get(id),
			ep_data = this.getObjectData(section_code, d.object_id);
		if (gr_el && el && ep_data) {
			if (el.dom.innerHTML.length == 0) {
				this.reloadViewForm({
					section_code: ep_data.EvnClass_SysNick,
					object_key: ep_data.EvnClass_SysNick +'_id',
					object_value: ep_data.PrescriptionType_id,
					parent_object_key: 'EvnPrescr_pid',
					parent_object_value: ep_data.EvnPrescr_pid,
					section_id: id,
					param_name: 'section',
					param_value: section_code
				});
			}
			//this.toggleDisplay(id, el.isDisplayed());		
			if (gr_el.hasClass(expandedClass)) {
				gr_el.removeClass(expandedClass);
				gr_el.addClass(collapsedClass);
			} else {
				gr_el.removeClass(collapsedClass);
				gr_el.addClass(expandedClass);
			}
		}
    },
    addPrescription: function(d, section_code) {
        var me = this,
			evnsysnick = this.defineParentEvnClass().EvnClass_SysNick,
            ep_data = this.getObjectData(section_code, d.object_id),
            evn_data = this.getObjectData(evnsysnick, ep_data.EvnPrescr_pid),
            option = {
                parentEvnClass_SysNick: evnsysnick,
                userMedStaffFact: this.userMedStaffFact,
				parentWin: this
            };
        if ( !evn_data|| !ep_data) { return false; }

        if (this.userMedStaffFact) {
            option.UserLpuSection_id = !Ext.isEmpty(this.userMedStaffFact.LpuSection_id) ? this.userMedStaffFact.LpuSection_id : null;
            option.UserLpuUnitType_id = !Ext.isEmpty(this.userMedStaffFact.LpuUnitType_id) ? this.userMedStaffFact.LpuUnitType_id : null;
        }
        option.PrescriptionType_id = ep_data.PrescriptionType_id;
        option.PrescriptionType_Code = ep_data.PrescriptionType_Code;
        option.action = 'add';
		option.callbackEditWindow = function(changedType){

			reloadCallback = function() {
				//определяем среди назначений на ФД выполнен ли редирект талона ЭО
				me.viewFormDataStore.each(function(rec){
					if (rec.object_code == section_code
						&& rec.get('PrescriptionType_Code') == 12 // ФД

					){
						log(rec.get(section_code+'_id'));
						if (rec.get('ElectronicTalon_id'))
						{
							log('electronicTalonRedirected');
							me.ElectronicQueuePanel.refreshPanel({disabled_state: [2]});
						}
					}
				});
			}

            log({id: evnsysnick + '_' + ep_data.EvnPrescr_pid});
            //me.loadTreeNode({id: evnsysnick + '_' + ep_data.EvnPrescr_pid});

			if (!Ext.isArray(changedType)) {
				// если не с формы назначений, то обновляем тот тип который редактировали
				me.reloadEvnPrescrList(section_code, ep_data.PrescriptionType_id, ep_data.EvnPrescr_pid);
			} else {
				var reloadPrescrParent = false;
				for (var i = 0; i < changedType.length; i++) {
					var type_id = changedType[i];

					me.reloadEvnPrescrList(section_code, type_id, ep_data.EvnPrescr_pid, reloadCallback);
					if (Number(type_id).inlist([6, 7, 11, 12, 13])) {
						reloadPrescrParent = true;
					}
				}
				if (reloadPrescrParent) {
					me.loadTreeNode({id: evnsysnick + '_' + ep_data.EvnPrescr_pid});
				}
			}
		};
        option.data = {
            Person_id: this.Person_id,
            PersonEvn_id: this.PersonEvn_id,
            Server_id: this.Server_id,
            Person_Firname: this.PersonInfoFrame.getFieldValue('Person_Firname'),
            Person_Surname: this.PersonInfoFrame.getFieldValue('Person_Surname'),
            Person_Secname: this.PersonInfoFrame.getFieldValue('Person_Secname'),
            Person_Age: this.PersonInfoFrame.getFieldValue('Person_Age'),
            Diag_Code: evn_data.Diag_Code,
            Diag_Name: evn_data.Diag_Name,
            Diag_id: evn_data.Diag_id,
            Evn_pid: ep_data.EvnPrescr_pid,
			MedPersonal_id: evn_data.MedPersonal_id,
			LpuSection_id: evn_data.LpuSection_id,
			TreatmentClass_id: evn_data.TreatmentClass_id,
            begDate: Date.parseDate(evn_data[evnsysnick+'_setDate'], 'd.m.Y'),
            parentEvnClass_SysNick: evnsysnick,
            userMedStaffFact: this.userMedStaffFact,
			electronicQueueData: this.electronicQueueData,
	        PayTypeKAZ_id: evn_data.PayTypeKAZ_id

        };
        
        if (getRegionNick()=='kz' && option.PrescriptionType_Code.toString().inlist(['6','7','11','12','13']) && Ext.get('isPaidVisit')) option.isPaidVisit = Ext.get('isPaidVisit').getAttribute('checked');
        
        if (option.PrescriptionType_Code == 5) {
            sw.Promed.EvnPrescr.openEvnCourseEditWindow(option);
        } else {
            sw.Promed.EvnPrescr.openEditWindow(option);
        }
        return true;

    },
	addPrescriptionDisp: function(d, section_code) {

		var isEvnPrescrDispDopHandler = false,
			EvnPrescrDispDop_id = 0;

		// для множественных назначений
		if (section_code && section_code == "EvnPrescrDispDop") {
			var pre_data = this.getObjectData(section_code, d.object_id);
			if (!pre_data && !pre_data.DopDispInfoConsent_id) return false;

			isEvnPrescrDispDopHandler = true;
			EvnPrescrDispDop_id = pre_data.EvnPrescrDispDop_id;

			// подменяем код секции
			section_code = "EvnUslugaDispDop";
			// подменяем объект
			d = {
				isReadOnly: undefined,
				menu: false,
				object: section_code,
				object_id: pre_data.DopDispInfoConsent_id,
				section_id: section_code + '_' + pre_data.DopDispInfoConsent_id
			}
		}

		var form = this,
			usluga_data = this.getObjectData(section_code, d.object_id),
			evn_data = this.getObjectData(usluga_data.parent_object, usluga_data.parent_object_id)
			option = {
				parentEvnClass_SysNick: usluga_data.parent_object,
				userMedStaffFact: this.userMedStaffFact
			};
		if ( !usluga_data || !evn_data || !usluga_data.DopDispInfoConsent_id ) { return false; }

		if (usluga_data.SurveyType_IsVizit && usluga_data.SurveyType_IsVizit == 2) {
			// осмотр
			option.PrescriptionType_id = 13; // Консультационная услуга
			option.PrescriptionType_Code = 13;
		} else {
			// исследование
			option.PrescriptionType_id = 11; // Лабораторная диагностика
			option.PrescriptionType_Code = 11;
		}

		if (usluga_data.SurveyType_IsVizit && usluga_data.SurveyType_IsVizit == 2 && !d.menu) {
			var me = this;
			if (me.printMenu) {
				me.printMenu.destroy();
				me.printMenu = null;
			}
			me.d = d;
			me.dirMenu = new Ext.menu.Menu();
			if (evn_data.DispClass_Code == 26) {
				var callback = function(menu) {
					me.dirMenu.add({
						text: 'Добавить назначение',
						value: 'Добавить назначение',
						menu: menu
					});
				}
				var e = {};
				e.object = usluga_data.parent_object;
				e.parent_object = usluga_data.parent_object;
				e.object_id = usluga_data.parent_object_id;
				e.parent_object_id = usluga_data.parent_object_id;
				e.DopDispInfoConsent_id = usluga_data.DopDispInfoConsent_id;
				e.SurveyTypeLink_id = usluga_data.SurveyTypeLink_id;
				e.EvnPLDisp_id = usluga_data.parent_object_id;
				e.DispClass_Code = evn_data.DispClass_Code;
				e.setDate = Date.parseDate(d[d.parent_object+'_setDate'], 'd.m.Y');
				form.createPrescriptionTypeMenu(e, callback);
			} else {
				me.dirMenu.add({
					text: 'Добавить назначение',
					value: 'Добавить назначение',
					handler: function() {
						d.menu = true;
						form.addPrescriptionDisp(d, section_code);
					}
				});
			}
			
			var dirTypeCodeExcList = ['1','4','5','6','7','8','9','10','11','13','14','15','16','17','18','23'];
			sw.Promed.Direction.createDirTypeMenu({
				excList: dirTypeCodeExcList,
				id: 'DirTypeListMenu',
				onSelect: function(rec) {
					var e = {};
					e.object = usluga_data.parent_object;
					e.object_id = usluga_data.parent_object_id;
					e.DopDispInfoConsent_id = usluga_data.DopDispInfoConsent_id;
					form.createDirection(e, rec, this.excList);
				},
				onCreate: function(menu) {
					me.dirMenu.add({
						text: 'Добавить направление',
						value: 'Добавить направление',
						menu: menu
					});
				}
			});
		}

		var btnEl = '';
		if (isEvnPrescrDispDopHandler && pre_data)
			btnEl = Ext.get('EvnPrescrDispDop_'+pre_data.EvnPrescrDispDop_id+'_add');
		else
			btnEl = Ext.get('EvnUslugaDispDop_'+usluga_data.DopDispInfoConsent_id+'_add');

		log('btnEl',btnEl);
		me.dirMenu.show(btnEl);
		return true;
	},
    openPrescrListActionMenu: function(e, d, section_code) {
	    var me = this;
        var evnsysnick = this.defineParentEvnClass().EvnClass_SysNick,
            PrescrListActions = {},
            data = this.getObjectData(evnsysnick,d.object_id);
        var actions = [
            {
                name: 'action_openPrescrPlanList',
                text: langs('Лист назначений'),
                disabled: (data == false),
                handler: function() {
                    getWnd('swEvnPrescrPlanRestyleWindow').show({
                        action: 'add',
                        Person_id: data.Person_id,
                        Person_Firname: this.PersonInfoFrame.getFieldValue('Person_Firname'),
                        Person_Surname: this.PersonInfoFrame.getFieldValue('Person_Surname'),
                        Person_Secname: this.PersonInfoFrame.getFieldValue('Person_Secname'),
                        Person_Birthday: this.PersonInfoFrame.getFieldValue('Person_Birthday'),
                        userMedStaffFact: this.userMedStaffFact,
                        UserMedStaffFact_id: this.userMedStaffFact.MedStaffFact_id,
                        callback: function() {
                            this.reloadViewForm({
                                section_code: section_code
                                ,section_id: section_code+'List_'+d.object_id
                                ,object_key: section_code+'_id'
                                ,object_value: 0
                                ,parent_object_key: evnsysnick+'_id'
                                ,parent_object_value: d.object_id
                            });
                        }.createDelegate(this),
                        formParams: {
                            'EvnPrescr_begDate': Date.parseDate(data[evnsysnick+'_setDate'], 'd.m.Y'),
                            'EvnPrescr_rid': data[evnsysnick+'_pid'],
                            'EvnPrescr_pid': data[evnsysnick+'_id'],
                            'Person_id': data.Person_id,
                            'PersonEvn_id': data.PersonEvn_id,
                            'Server_id': data.Server_id,
                            'LpuSection_id': data.LpuSection_id,
                            'Diag_id': data.Diag_id,
                            'Diag_Code': data.Diag_Code,
                            'Diag_Name': data.Diag_Name,
                            CureStandart_Count: data.CureStandart_Count
                        }
                    });
                }.createDelegate(this)
            },
            {
                name:'action_openObsHandler',
                text:langs('Наблюдения'),
                tooltip: langs('Открыть назначения с типом Наблюдение'),
                disabled: ( data == false ),
                handler: function() {
                    if ( data == false )
                    {
                        return false;
                    }
                    getWnd('swEvnObservDataViewWindow').show({
                        Person_id: data.Person_id,
                        Person_Firname: this.PersonInfoFrame.getFieldValue('Person_Firname'),
                        Person_Surname: this.PersonInfoFrame.getFieldValue('Person_Surname'),
                        Person_Secname: this.PersonInfoFrame.getFieldValue('Person_Secname'),
                        Person_Birthday: this.PersonInfoFrame.getFieldValue('Person_Birthday'),
                        userMedStaffFact: this.userMedStaffFact,
                        UserMedStaffFact_id: this.userMedStaffFact.MedStaffFact_id,
                        LpuSection_Name: data.LpuSection_Name,
                        formParams: {
                            'EvnObserv_pid': d.object_id,
                            'Person_id': data.Person_id,
                            'PersonEvn_id': data.PersonEvn_id,
                            'Server_id': data.Server_id
                        }
                    });
                }.createDelegate(this)
            },
			{
                name:'action_addwithtemplate',
                text:langs('Назначение на основе стандарта'),
                tooltip: langs('Создать назначения на основе стандарта'),
                disabled: ( data == false || data.accessType != 'edit' || !data.Diag_id
                    || !data.CureStandart_Count || data.CureStandart_Count == 0),
                handler: function() {
                    if ( data == false || data.accessType != 'edit' || !data.Diag_id
                        || !data.CureStandart_Count || data.CureStandart_Count == 0
                    ) {
                        return false;
                    }
                    sw.Promed.EvnPrescr.openCureStandartSelectWindow({
                        isForPrint: false
                        ,parentEvnClass_SysNick: evnsysnick
                        ,Evn_rid: data[evnsysnick+'_pid']
                        ,Evn_pid: data[evnsysnick+'_id']
                        ,PersonEvn_id: this.PersonEvn_id
                        ,Server_id: this.Server_id
                        ,ownerWindow: this
                        ,callback: function() {
                            this.loadNodeViewForm(this.Tree.getNodeById(this.node.id));
                        }.createDelegate(this)
                        ,onCreate: function(menu){
                            menu.show(Ext.get(section_code+'List_'+d.object_id+'_addwithtemplate'),'tr');
                        }
                    });
                    return true;
                }.createDelegate(this)
            },
			{
                name:'action_print',
                text:langs('Печать'),
                tooltip:langs('Печать листа назначений'),
                handler: function(){
					if(getGlobalOptions().region.nick == 'kz'){
						var params = {
							paramEvn: d.object_id,
							callback: function(data){
								printBirt({
									'Report_FileName': 'EvnPrescr_List.rptdesign',
									'Report_Params': '&paramEvn=' + data.paramEvn + '&paramBegDate=' + data.paramBegDate + '&paramEndDate=' + data.paramEndDate,
									'Report_Format': 'pdf'
								});
								printBirt({
									'Report_FileName': 'EvnPrescr_List_Oborot.rptdesign',
									'Report_Params': '&paramEvn=' + data.paramEvn + '&paramBegDate=' + data.paramBegDate + '&paramEndDate=' + data.paramEndDate,
									'Report_Format': 'pdf'
								});
							}
						};
						getWnd('swPrintPeriodWindow').show(params);
					}
					else
						this.openPrintDoc('/?c=EvnPrescr&m=printEvnPrescrList&Evn_pid=' + d.object_id);
                }.createDelegate(this)
            },
			{
			name:'action_print_all',
					text:langs('Печать'),
					tooltip:langs('Печать'),
					menu: new Ext.menu.Menu({
						items: [{
                			name:'action_printPO',
                			text:langs('Печать плана обследования'),
               				tooltip:langs('Печать плана обследования'),
                			handler: function(){
								this.openPrintDoc('/?c=EvnPrescr&m=printEvnPrescrList&Evn_pid=' + d.object_id + '&DocType_id=-5');
                			}.createDelegate(this)
           				},{
							name:'action_printLS',
							text:langs('Печать листа лекарственных назначений'),
							tooltip:langs('Печать листа лекарственных назначений'),
							handler: function(){
								this.openPrintDoc('/?c=EvnPrescr&m=printEvnPrescrList&Evn_pid=' + d.object_id + '&DocType_id=5');
							}.createDelegate(this)
            			},{
                			name:'action_printLN',
                			text:langs('Печать общего листа назначений'),
               				tooltip:langs('Печать общего листа назначений'),
                			handler: function(){
								this.openPrintDoc('/?c=EvnPrescr&m=printEvnPrescrList&Evn_pid=' + d.object_id);
                			}.createDelegate(this)
						},{
							name: 'action_printLabDirections',
							text: langs('Печать единого направления на лабораторные исследования'),
							hidden: getRegionNick() != 'ufa',
							tooltip: langs('Печать единого направления на лабораторные исследования'),
							handler: function() {
								this.openPrintDoc('/?c=EvnPrescr&m=printLabDirections&Evn_id=' + d.object_id);
							}.createDelegate(this)
						},{
							name:'action_printReasearch',
							text:langs('Печать списка исследований'),
							tooltip:langs('Печать списка исследований'),
							hidden: getRegionNick() != 'ufa',
							handler: function(){
								this.openPrintDoc('/?c=EvnPrescr&m=printEvnPrescrList&Evn_pid=' + d.object_id);
							}.createDelegate(this)
						}
					]
					})
			},
            /*{
                name: 'action_packet',
                text: langs('Пакетные назначения'),
                tooltip: langs('Пакетные назначения'),
                disabled: (data == false),
                handler: function () {
                    var packet,
                        mode,
                        PersonInfoPanel = me.PersonInfoFrame;
                    getWnd('swPacketPrescrSelectWindowExt2').show({
                        MedPersonal_id: data.MedPersonal_id,
                        Person_id: data.Person_id,
                        PersonEvn_id: data.PersonEvn_id,
                        Server_id: data.Server_id,
                        Evn_id: data.EvnSection_id,
                        Evn_setDate: data.EvnSection_setDate,
                        EvnParams: {
							Diag_id: data.Diag_id,
							Diag_Code: data.Diag_Code,
							Diag_Name: data.Diag_Name
						},
                        Diag_id: data.Diag_id,
                        mode: mode,
                        packet: packet,
                        data: data,
                        EvnPrescrPanelCntr: me,
                        PersonInfoPanel: PersonInfoPanel,
                        callback: function(){
                            this.loadNodeViewForm(me.Tree.getNodeById(me.node.id));
                        }.createDelegate(this)
                    })
                }
            },*/
            {
                name: 'action_all_usluga',
                text: langs('Все услуги'),
                tooltip: langs('Все услуги'),
                disabled: (data == false),
                handler: function () {

                    getWnd('swOpenWindowAllUslugaExt2').show({
						userMedStaffFact: this.userMedStaffFact,
						Person_id: me.Person_id,
						PersonEvn_id: me.PersonEvn_id,
						Server_id: me.Server_id,
						Evn_id: data.EvnSection_id,
						Evn_setDate: data.EvnSection_setDate,
						LpuSection_id: data.LpuSection_id,
						MedPersonal_id: data.MedPersonal_id,
						evnParams: {
							Diag_id: data.Diag_id,
							Diag_Code: data.Diag_Code,
							Diag_Name: data.Diag_Name
						},
                        callback: function(){
                            this.loadNodeViewForm(me.Tree.getNodeById(me.node.id));
                        }.createDelegate(this)
                    })
                }
            }
		];

        var callback = function(menu) {
            $('#'+section_code+'List_'+d.object_id+'_openPrescrListActionMenu').addClass('click');
            actions.push({
                name:'action_add',
                text:langs('Добавить назначение'),
                tooltip: langs('Добавить новое назначение'),
                disabled: ( data == false),
                menu: menu
            });
            var actionNameList = [];
            switch (evnsysnick) {
                case 'EvnSection':
                    actionNameList = ['action_openPrescrPlanList','action_openObsHandler',
                        'action_addwithtemplate','action_add', 'action_packet', 'action_all_usluga'];
					if (inlist(getRegionNick(),['ufa','vologda'])){
						actionNameList.push('action_print_all');
					}else{
						actionNameList.push('action_print');
					}
					break;
                case 'EvnVizitPL':
					actionNameList = ['action_addwithtemplate', 'action_add'];
					if (inlist(getRegionNick(),['ufa','vologda'])){
						actionNameList.push('action_print_all');
					}else{
						actionNameList.push('action_print');
					}
					break;
                case 'EvnVizitPLStom':
                    actionNameList = ['action_addwithtemplate','action_add','action_print'];
                    break;
            }
            for (var i=0; i<actions.length; i++) {
                if (actions[i]['name'].inlist(actionNameList)) {
                    PrescrListActions[actions[i]['name']] = new Ext.Action( {
                        id: 'id_'+actions[i]['name'],
                        text: actions[i]['text'],
                        disabled: actions[i]['disabled'] || false,
                        hidden: actions[i]['hidden'] || false,
                        tooltip: actions[i]['tooltip'],
                        iconCls : actions[i]['iconCls'] || 'x-btn-text',
                        icon: actions[i]['icon'] || null,
                        menu: actions[i]['menu'] || null,
                        scope: this,
                        handler: actions[i]['handler']
                    });
                }
            }

            this.PrescrListActionMenu = new Ext.menu.Menu();
            for (var key in PrescrListActions) {
                if (PrescrListActions.hasOwnProperty(key)) {
                    this.PrescrListActionMenu.add(PrescrListActions[key]);
                }
            }

            this.PrescrListActionMenu.on('beforehide',function(){
                $('#'+section_code+'List_'+d.object_id+'_openPrescrListActionMenu').removeClass('click');
            });
            var coords = e.getXY();
            this.PrescrListActionMenu.showAt([coords[0], coords[1]]);
        }.createDelegate(this);
        this.createPrescriptionTypeMenu(d,callback);
    },
	openPrescrActionMenu: function(e, d, section_code) {
		var form = this;

        $('#'+section_code+'_'+d.object_id+'_openPrescrActionMenu').addClass('click');
        $('#'+section_code+'_'+d.object_id).addClass('hover');
		$('#'+section_code+'_'+d.object_id+' > .prescriptioninfo').addClass('hover');

		var evnsysnick = this.defineParentEvnClass().EvnClass_SysNick,
			data = this.getObjectData(section_code, d.object_id);

		var evdata = this.getObjectData(evnsysnick, data.EvnPrescr_pid);

		data.Person_Surname = this.PersonInfoFrame.getFieldValue('Person_Surname');
		data.Person_Firname = this.PersonInfoFrame.getFieldValue('Person_Firname');
		data.Person_Secname = this.PersonInfoFrame.getFieldValue('Person_Secname');
		data.Person_Birthday = this.PersonInfoFrame.getFieldValue('Person_Birthday');

		data.callback = function(params) {
			form.reloadEvnPrescrList(section_code, data.PrescriptionType_id, data.EvnPrescr_pid);

			if (typeof form.onExecEvnPrescr == 'function')
				form.onExecEvnPrescr(true, data);

			if (params && params.reloadTreeNode) {
				if (data.EvnDirection_id) {
					form.loadTreeNode({id: evnsysnick + '_' + data.EvnPrescr_pid});
				}
			}
		};

		data.refreshEvnDrugSectionCallback = function() {
			form.reloadViewForm({
				section_code: 'EvnDrug',
				object_key: 'EvnDrug_id',
				object_value: 111222333,
				parent_object_key: 'EvnDrug_pid',
				parent_object_value: data.EvnPrescr_pid,
				section_id: 'EvnDrugList_'+ data.EvnPrescr_pid
			});
		};

		data.refreshEvnReceptGeneralSectionCallback = function() {
			form.reloadEvnReceptGeneralSection({
				parent_object_value: data.EvnPrescr_pid
			});
		};

		this.PrescrListActionMenu = sw.Promed.EvnPrescr.getPrescrActionMenu({
			data: data,
			evdata: evdata,
			evnsysnick: evnsysnick,
			ownerWindow: this,
			EvnClass_SysNick: section_code,
			d: d
		});

        this.PrescrListActionMenu.on('beforehide',function(){
            $('#'+section_code+'_'+d.object_id).removeClass('hover');
			$('#'+section_code+'_'+d.object_id+' > .prescriptioninfo').removeClass('hover');
            $('#'+section_code+'_'+d.object_id+'_openPrescrActionMenu').removeClass('click');
        });
        this.PrescrListActionMenu.showAt(e.getXY());
        return true;
	},
    addPacketPrescr: function(e, d, section_code) {
		var me = this,
			packet,
			mode,
			PersonInfoPanel = me.PersonInfoFrame,
			evnsysnick = this.defineParentEvnClass().EvnClass_SysNick,
            data = this.getObjectData(evnsysnick, d.object_id),
			LpuSection_id = getGlobalOptions().CurLpuSection_id;
		if(me.userMedStaffFact && me.userMedStaffFact.LpuSection_id){
			LpuSection_id = me.userMedStaffFact.LpuSection_id;
		}
			
		getWnd('swPacketPrescrSelectWindowExt2').show({
			LpuSection_id: LpuSection_id,
			MedPersonal_id: data.MedPersonal_id,
			Person_id: data.Person_id,
			PersonEvn_id: data.PersonEvn_id,
			Server_id: data.Server_id,
			Evn_id: data.EvnSection_id,
			Evn_setDate: data.EvnSection_setDate,
			EvnParams: {
				Diag_id: data.Diag_id,
				Diag_Code: data.Diag_Code,
				Diag_Name: data.Diag_Name
			},
			Diag_id: data.Diag_id,
			mode: mode,
			packet: packet,
			data: data,
			EvnPrescrPanelCntr: me,
			PersonInfoPanel: PersonInfoPanel,
			callback: function(){
				this.loadNodeViewForm(me.Tree.getNodeById(me.node.id));
			}.createDelegate(this)
		});
    },
    savePacketPrescr: function(e, d, section_code) {
		var me = this,
			packet,
			mode,
			PersonInfoPanel = me.PersonInfoFrame,
			evnsysnick = this.defineParentEvnClass().EvnClass_SysNick,
            data = this.getObjectData(evnsysnick, d.object_id);
		getWnd('swPacketPrescrCreateWindow').show({
			Evn_id: data.EvnSection_id,
			Diag_id: data.Diag_id,
			MedPersonal_id: data.MedPersonal_id,
			callback: function() {
				showSysMsg('Шаблон (пакет назначений) сохранен');
			}
		});
    },
	openDirActionMenu: function(e, d, section_code) {
		log('openDirActionMenu', e, d, section_code);

		$('#'+section_code+'_'+d.object_id+'_openDirActionMenu').addClass('click');
		var isEvnPrescrDispDopHandler = false;

		// для множественных назначений в маршрутной карте
		if (section_code && section_code == "EvnPrescrDispDop") {
			var pre_data = this.getObjectData(section_code, d.object_id);
			if (!pre_data && !pre_data.DopDispInfoConsent_id) return false;

			isEvnPrescrDispDopHandler = true;
			EvnPrescrDispDop_id = pre_data.EvnPrescrDispDop_id;

			// подменяем код секции
			section_code = "EvnUslugaDispDop";

			// подменяем объект
			d = {
				isReadOnly: undefined,
				menu: false,
				object: section_code,
				object_id: pre_data.DopDispInfoConsent_id,
				section_id: section_code + '_' + pre_data.DopDispInfoConsent_id
			}
		}

		var form = this;

		var evnsysnick = this.defineParentEvnClass().EvnClass_SysNick,
			data = this.getObjectData(section_code, d.object_id);

		// если это множенственные назначения мерджим данные по направлению с общими
		if (isEvnPrescrDispDopHandler) $.extend(data, pre_data);
		$('#'+section_code+'_'+data.EvnDirection_id).addClass('hover');

		var evdata = this.getObjectData(evnsysnick, data.EvnPrescr_pid);

		data.callback = function(params) {
			form.reloadEvnPrescrList(section_code, data.PrescriptionType_id, data.EvnPrescr_pid);
		}

		var dirdata = form.getObjectDataWithFindBy(function(record,id){
			if(record.object_code == d.object && record.get(d.object +'_id') == d.object_id) {
				dirrec = record;
				return true;
			}
			return false;
		});
		
		if (evdata.DispClass_id) { // для всех диспансеризаций данные о направлении в самой услуге.
			dirdata = data;
			data.callback = function(params) {
				form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
			}
		}

		this.DirListActionMenu = sw.Promed.EvnPrescr.getDirActionMenu({
			data: data,
			evdata: evdata,
			dirdata: dirdata,
			evnsysnick: evnsysnick,
			ownerWindow: this,
			EvnClass_SysNick: section_code,
			d: d
		});

        this.DirListActionMenu.on('beforehide',function(){
            $('#'+section_code+'_'+data.EvnDirection_id).removeClass('hover');
            $('#'+section_code+'_'+d.object_id+'_openDirActionMenu').removeClass('click');
        });
        this.DirListActionMenu.showAt(e.getXY());
        return true;
    },
	getEmptyValueText: function() {
		return '<span style="color: #666;">Не указано</span>';
	},
	createMorbusHtmlForm: function(name, el_data) {

		var morbus_id = el_data.object_id.split('_')[1];
		var params = this.getObjectData('MorbusCrazy',morbus_id);
		if(typeof params != 'object') {
			return false;
		}
		var evnsysnick = this.defineParentEvnClass().EvnClass_SysNick;
		var evndata = this.getObjectData(evnsysnick,params.MorbusCrazy_pid);
		if(!evndata) {
			return false;
		}
		if(evndata.accessType == 'view') {
			return false;
		}
		var form = this;
		var cmp, ct, elinputid, eloutputid, config;
		var empty_value = form.getEmptyValueText();
		var onChange = function(conf){

			var field_name = conf.field_name;
			params[field_name] = conf.value || '';
			
			params['Evn_pid'] = params.MorbusCrazy_pid;
			params['Mode'] = ('EvnSection' == evnsysnick)?'evnsection_viewform':'evnvizitpl_viewform';
			var form = this;
			form.isFirstAdminCheck = false;
			form.requestSaveWithShowInfoMsg('/?c=MorbusCrazy&m=saveMorbusCrazy', 
				params, 
				function(result) {
					if (result.success) {
						conf.elOutput.update(conf.outputValue);
						if (typeof conf.type == 'id') conf.elOutput.setAttribute('dataid',conf.value);
						onCancel(conf);
						//var conf;
						for(var field_name in form.changed_fields) {
							conf = form.changed_fields[field_name];
							conf.elOutput.setDisplayed('inline');
							conf.elOutput.update(conf.outputValue);
							if(conf.type == 'id') conf.elOutput.setAttribute('dataid',conf.value);
							conf.elInputWrap.setDisplayed('none');
							conf.elInput.destroy();
							form.input_cmp_list[conf.elOutputId] = false;
						}
						form.changed_fields = {};
						form.loadedSpecifics[params.MorbusCrazy_pid]['crazy'].isChanged = true;
					}
				}, form);

			if(!this.changed_fields) this.changed_fields = {};
			this.changed_fields[conf.field_name] = conf;
		}.createDelegate(this);

		var onCancel = function(conf){
			if(!this.changed_fields) this.changed_fields = {};
			if(!this.changed_fields[conf.field_name]) {
				conf.elOutput.setDisplayed('inline');
				conf.elInputWrap.setDisplayed('none');
				conf.elInput.destroy();
				this.input_cmp_list[conf.elOutputId] = false;
			}
		}.createDelegate(this);

		if(!this.input_cmp_list) this.input_cmp_list = {};

		var getBaseConfig = function(options){
			return {
				hideLabel: true
				,renderTo: options.elInputId
				,listeners:
				{
					blur: function(f) {
                        // лечим TypeError: combo.getStore(...) is null
                        if (f.disableBlurAction) {
                            return false;
                        }
						options.elInput = f;
						onCancel(options);
                        return true;
					},
					render: function(f) {
						if(options.type == 'id') {
							//if(!f.getStore() || f.getStore().getCount()==0) log('not store: ' + options.field_name);
							var dataid = options.elOutput.getAttribute('dataid');
							if(!Ext.isEmpty(dataid)) {
								f.setValue(parseInt(dataid));
							}
						} else {
							f.setValue(params[options.field_name]);
						}
					},
					change: function(f,n,o) {
                        // лечим TypeError: combo.getStore(...) is null
                        if (f.disableBlurAction) {
                            return false;
                        }
						if(options.type == 'date') {
							options.outputValue = (n)?n.format('d.m.Y'):empty_value;
							options.value = (n)?n.format('d.m.Y'):null;
						}
						if(options.type.inlist(['string','int'])) {
							options.outputValue = (n)?n:empty_value;
							options.value = n || null;
						}
						if(options.type == 'id') {
							if(options.name == 'Diag_nid' || options.name == 'Diag_sid'){
								if(n){
									if(f.getStore().getCount()>1){
										if(!(parseInt(n) > 0)) {
											var newn = n.split(' ');
											var newnn = f.getStore().findBy(function(recrd){
												return (recrd.get('Diag_Code') == newn[0]);
											});
											var rec = f.getStore().getAt(newnn);
										} else {
											var rec = f.getStore().getById(n);
										}
									} else {
										var rec = f.getStore().getAt(0);
									}
								} else {
									var rec = false;
								}
							} else {
								var rec = (n)?f.getStore().getById(n):false;
							}
							if(rec) {
								if(options.name == 'Diag_nid' || options.name == 'Diag_sid'){
									options.value = rec.get('Diag_id');
								} else {
									options.value = n;
								}
								if(options.codeField) {
									options.outputValue = rec.get(options.codeField) + '. ' + rec.get(f.displayField);
								} else {
									options.outputValue = rec.get(f.displayField);
								}
							} else {
								options.value = 0;
								options.outputValue = empty_value;
							}
						}
						options.elInput = f;
						if (n!=o)
							onChange(options);
                        return true;
					}
				}
			};
		};
		eloutputid = 'MorbusCrazy_'+ el_data.object_id +'_input'+name;
		elinputid = 'MorbusCrazy_'+ el_data.object_id +'_inputarea'+name;
		eloutput = Ext.get(eloutputid);
		ct = Ext.get(elinputid);

		switch(name){
			// даты
			case 'Morbus_setDT'://дата начала заболевания
			case 'Morbus_disDT':
			case 'MorbusCrazyBase_firstDT'://дата первого обращения
			case 'MorbusCrazyBase_DeathDT'://Дата установления диагноза
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'date'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: null
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 90;
					cmp = new sw.Promed.SwDateField(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'MorbusCrazyBase_LTMDayCount':
			case 'MorbusCrazyBase_HolidayDayCount':
			case 'MorbusCrazyBase_HolidayCount':
			case 'MorbusCrazyPerson_CompleteClassCount':

				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'int'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 100;
					config.maskRe = new RegExp("^[0-9]*$");
					config.allowDecimals = false;
					config.allowNegative = false;
					config.maxValue = (name.inlist(['MorbusCrazyBase_LTMDayCount','MorbusCrazyBase_HolidayDayCount']))?999:99;
					config.maxLength = (name.inlist(['MorbusCrazyBase_LTMDayCount','MorbusCrazyBase_HolidayDayCount']))?'3':'2';
					config.autoCreate = {tag: "input", size:14, maxLength: config.maxLength, autocomplete: "off"};

					cmp = new Ext.form.NumberField(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'MorbusCrazyPerson_IsWowInvalid':
			case 'MorbusCrazyPerson_IsWowMember':
			case 'MorbusCrazyPerson_IsEducation':
			case 'MorbusCrazyPerson_IsConvictionBeforePsych':
			case 'MorbusCrazyBase_IsUseAlienDevice':
			case 'MorbusCrazyBase_IsLivingConsumDrug':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 70;
					config.comboSubject = 'YesNo';
					config.typeCode = 'int';
					config.autoLoad = true;
					cmp = new sw.Promed.SwCommonSprCombo(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'CrazyResultDeseaseType':
			case 'CrazyDeathCauseType':
			case 'CrazyEducationType':
			case 'CrazySourceLivelihoodType':
			case 'CrazyResideType':
			case 'CrazyResideConditionsType':
			case 'CrazyCauseEndSurveyType':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name + '_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 250;
					//config.listWidth = 500;
					config.comboSubject = name;
					config.typeCode = 'int';
					config.autoLoad = true;
					cmp = new sw.Promed.SwCommonSprCombo(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'Diag_nid': //
			case 'Diag_sid': //
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var config_data = {
						name: name
						,type: 'id'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,codeField: 'Diag_Code'
						,elInputWrap: ct
						,elInput: null
					};
					config = getBaseConfig(config_data);
					config.width = 350;
					config.listWidth = 600;
					config.hiddenName = name;
					var change = Ext.apply(config.listeners.change);
					//delete config.listeners.change;
					cmp = new sw.Promed.SwDiagCombo(config);

					/*cmp.addListener('blur', function(f) {
						config_data.elInput = f;
						onCancel(config_data);
					});*/

					/*cmp.addListener('select', function(combo, record, index) {
						if ( record ) {
							combo.setRawValue(record.get('Diag_Code') + " " + record.get('Diag_Name'));
						}
					});
					cmp.addListener('change', function(combo, nv, ov) {

						if (/[^[0-9]/.test(nv)) {
							if ( combo.getRawValue() == '' ) {
								combo.setValue('');
							} else {
								var store = combo.getStore();
								var val = combo.getDiagCode(combo.getRawValue().toString().substr(0, combo.countSymbolsCode));
								var yes = false;
								combo.getStore().each(function(r){
									if ( r.get('Diag_Code') == val )
									{
										this.setValue(r.get(this.valueField));
										//combo.fireEvent('change', combo, r.get(this.valueField), '');
										yes = true;
										return true;
									}
								}.createDelegate(combo));
								if (!yes) {
									this.setValue(null);
								}
							}
						}
					});
					cmp.addListener('change',change);*/


					var dataid = params[name];
					if (dataid && dataid > 0) {
						cmp.getStore().load({
							params: {where: 'where Diag_id = '+dataid},
							callback: function(){
								if(this.getStore().getCount() > 0 && dataid && dataid > 0) {
									this.setValue(dataid);
									this.getStore().each(function(record) {
										if (record.get('Diag_id') == dataid) {
											cmp.fireEvent('select', cmp, record, 0);
										}
									});
								}
								this.focus(true, 100);
							},
							scope: cmp
						});
					} else {
						cmp.focus(true, 100);
					}
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
		}
	},
	openMorbusCrazySpecificForm: function(options) {

		if(!options.action || !options.object || !options.eldata) {
			return false;
		}

		var win_name,
			object_id,
			data,
			mhdata,
			evndata,
			evnsysnick = this.defineParentEvnClass().EvnClass_SysNick,
			params = {formParams: {}};

		/*
		object_id = (options.eldata.object_id.split('_').length > 1)?options.eldata.object_id.split('_')[1]:options.eldata.object_id;
		data = this.getObjectData(options.object,object_id);
		if(!data) {
			return false;
		}
		mhdata = options.mhdata || this.getObjectData('MorbusCrazy',data.MorbusCrazy_id);
		if(!mhdata) {
			return false;
		}
		*/
		
		object_id = (options.eldata.object_id.split('_').length > 1)?options.eldata.object_id.split('_')[1]:options.eldata.object_id;
		
		if(options.action == 'add') {
			mhdata = options.mhdata || this.getObjectData('MorbusCrazy',object_id);
		} else {
			data = this.getObjectData(options.object,object_id);
			if(!data) {
				return false;
			}
			mhdata = options.mhdata || this.getObjectData('MorbusCrazy',data.MorbusCrazy_id);
		}
		if(!mhdata) {
			return false;
		}
		if(mhdata.MorbusCrazy_id < 0) {
			sw.swMsg.alert(langs('Сообщение'), langs('Заболевание на человека не заведено'));
			return false;
		}
		evndata = this.getObjectData(evnsysnick,mhdata.MorbusCrazy_pid);
		if(!evndata) {
			return false;
		}
		/*
		if(evndata.accessType == 'view') {
			return false;
		}*/

        // должно быть также как в swMorbusCrazyWindow
		if (false && options.object.inlist(['MorbusCrazyBasePS', 'MorbusCrazyForceTreat', 'MorbusCrazyDrugVolume', 'MorbusCrazyBBK', 'MorbusCrazyPersonSurveyHIV'])) {
			params.callback = function() {
				this.loadedSpecifics[mhdata.MorbusCrazy_pid]['crazy'].isChanged = true;
				var reload_params = {
					section_code: 'MorbusCrazy',
					object_key: 'MorbusCrazy_id',
					object_value: 0,
					parent_object_key: 'MorbusCrazy_pid',
					parent_object_value: mhdata.MorbusCrazy_pid || null,
					section_id: 'MorbusCrazy_'+ mhdata.MorbusCrazy_pid +'_'+ mhdata.MorbusCrazy_id
				};
				this.reloadViewForm(reload_params);
			}.createDelegate(this);
		} else {
			params.callback = function() {
				this.loadedSpecifics[mhdata.MorbusCrazy_pid]['crazy'].isChanged = true;
				var reload_params = {
					section_code: options.object,
					object_key: options.object +'_id',
					object_value: object_id,
					parent_object_key: 'MorbusCrazy_id',
					parent_object_value: mhdata.MorbusCrazy_id,
					param_name: 'MorbusCrazy_pid',
					param_value: mhdata.MorbusCrazy_pid,
					section_id: options.object +'List_'+ mhdata.MorbusCrazy_pid +'_'+ mhdata.MorbusCrazy_id
				};
				this.reloadViewForm(reload_params);
			}.createDelegate(this);
		}

		switch(options.object) {
			case 'MorbusCrazyDiag':
			case 'MorbusCrazyDynamicsObserv':
			case 'MorbusCrazyVizitCheck':
			case 'MorbusCrazyDynamicsState':
			case 'MorbusCrazyBasePS':
			case 'MorbusCrazyForceTreat':
			case 'MorbusCrazyPersonSurveyHIV':
			case 'MorbusCrazyNdOsvid':
			case 'MorbusCrazyPersonStick':
			case 'MorbusCrazyPersonSuicidalAttempt':
			case 'MorbusCrazyPersonSocDangerAct':
			case 'MorbusCrazyBaseDrugStart':
			case 'MorbusCrazyDrug':
			case 'MorbusCrazyDrugVolume':
			case 'MorbusCrazyBBK':
			case 'MorbusCrazyPersonInvalid':
				win_name = 'sw'+options.object+'Window';
				//log(123,options,evndata,mhdata)
				var narko = new RegExp('^F1[0-9]');
				if(narko.test(evndata.Diag_Code)){
					params.type = 'narko';
				}
				params.action = options.action;
				params[options.object+'_id'] = (params.action=='edit')?object_id:null;
				params.evnsysnick = evnsysnick;
				params.formParams = {MorbusCrazy_id: mhdata.MorbusCrazy_id, MorbusCrazyBase_id: mhdata.MorbusCrazyBase_id, MorbusCrazyPerson_id: mhdata.MorbusCrazyPerson_id, Person_id: this.Person_id, Evn_id: null};
				if (evnsysnick == 'EvnSection') {
					params.formParams.Evn_id = mhdata.MorbusCrazy_pid;
				}
				break;
			default:
				return false;
		}
		getWnd(win_name).show(params);
	},
	submitMorbusCrazyHtmlForm: function(btn_name, el_data) {
		var save_tb1 = Ext.get('MorbusCrazy_'+el_data.object_id+'_toolbarDiag');
		var save_tb2 = Ext.get('MorbusCrazy_'+el_data.object_id+'_toolbarMorbusCrazyDynamicsObserv');
		var save_tb3 = Ext.get('MorbusCrazy_'+el_data.object_id+'_toolbarMorbusCrazyPerson');
		var save_tb4 = Ext.get('MorbusCrazy_'+el_data.object_id+'_toolbarMorbusCrazyDrug');

		var params = this.getObjectData('MorbusCrazy',el_data.object_id.split('_')[1]);
		if(!params) {
			return false;
		}
		var evnsysnick = this.defineParentEvnClass().EvnClass_SysNick;
		var evndata = this.getObjectData(evnsysnick,params.MorbusCrazy_pid);
		if(!evndata) {
			return false;
		}
		if(evndata.accessType == 'view') {
			return false;
		}

		for(var field_name in this.changed_fields) {
			params[field_name] = this.changed_fields[field_name].value || '';
		}
		params['Evn_pid'] = params.MorbusCrazy_pid;
		params['Mode'] = ('EvnSection' == evnsysnick)?'evnsection_viewform':'evnvizitpl_viewform';
		var form = this;
		
		form.requestSaveWithShowInfoMsg('/?c=MorbusCrazy&m=saveMorbusCrazy', 
			params, 
			function(result) {
				if (result.success) {
					save_tb1.setDisplayed('none');
					save_tb2.setDisplayed('none');
					save_tb3.setDisplayed('none');
					save_tb4.setDisplayed('none');
					var conf;
					for(var field_name in form.changed_fields) {
						conf = form.changed_fields[field_name];
						conf.elOutput.setDisplayed('inline');
						conf.elOutput.update(conf.outputValue);
						if(conf.type == 'id') conf.elOutput.setAttribute('dataid',conf.value);
						conf.elInputWrap.setDisplayed('none');
						conf.elInput.destroy();
						form.input_cmp_list[conf.elOutputId] = false;
					}
					form.changed_fields = {};
					form.loadedSpecifics[params.MorbusCrazy_pid]['crazy'].isChanged = true;
				}
			}, form);
	},

	createMorbusTubHtmlForm: function(name, el_data) {
		var morbus_id = el_data.object_id.split('_')[1];
		var params = this.getObjectData('MorbusTub',morbus_id);
		if(typeof params != 'object') {
			return false;
		}
		var evnsysnick = this.defineParentEvnClass().EvnClass_SysNick;
		var evndata = this.getObjectData(evnsysnick,params.MorbusTub_pid);
		if(!evndata) {
			return false;
		}
		if(evndata.accessType == 'view') {
			return false;
		}

		var form = this;
		var cmp, ct, elinputid, eloutputid, config;
		var empty_value = form.getEmptyValueText();
		var onChange = function(conf){
			var save_tb1 = Ext.get('MorbusTub_'+el_data.object_id+'_toolbarMorbusTub');
			var save_tb2 = Ext.get('MorbusTub_'+el_data.object_id+'_toolbarMorbusTub2');
			var save_tb3 = Ext.get('MorbusTub_'+el_data.object_id+'_toolbarMorbusTub3');
			var save_tb4 = Ext.get('MorbusTub_'+el_data.object_id+'_toolbarMorbusTub4');
			var save_tb5 = Ext.get('MorbusTub_'+el_data.object_id+'_toolbarMorbusTub5');
            var save_tb6 = Ext.get('MorbusTub_'+el_data.object_id+'_toolbarMorbusTub6');
			switch(conf.name){
				case 'Diag':
				case 'TubDiag':
                case 'PersonResidenceType':
				case 'PersonDecreedGroup':
				case 'PersonLivingFacilies':
					save_tb1.setDisplayed('block');
					break;
				
				case 'TubSickGroupType':
				case 'MorbusTub_RegNumCard':
				case 'MorbusTub_begDT':
				case 'MorbusTub_FirstDT':
				case 'MorbusTub_DiagDT':
					save_tb2.setDisplayed('block');
					break;
				
				case 'TubResultChemClass':
				case 'TubResultChemType':
				case 'MorbusTub_ResultDT':
				case 'TubResultDeathType':
				case 'MorbusTub_deadDT':
				case 'MorbusTub_breakDT':
				case 'TubBreakChemType':
				case 'MorbusTub_disDT':
				case 'MorbusTub_ConvDT':
				case 'MorbusTub_unsetDT':
				case 'MorbusTub_CountDay':
				case 'PersonDispGroup':
					save_tb3.setDisplayed('block');
					break;

				case 'MorbusTubMDR_RegNumPerson':
				case 'MorbusTubMDR_RegNumCard':
				case 'MorbusTubMDR_regDT':
				case 'MorbusTubMDR_regdiagDT':
				case 'MorbusTubMDR_begDT':
				case 'MorbusTubMDR_GroupDisp':
				case 'MorbusTubMDR_TubDiag':
				case 'MorbusTubMDR_TubSickGroupType':
				case 'MorbusTubMDR_IsPathology':
				case 'MorbusTubMDR_IsART':
				case 'MorbusTubMDR_IsCotrim':
				case 'MorbusTubMDR_IsDrugFirst':
				case 'MorbusTubMDR_IsDrugSecond':
				case 'MorbusTubMDR_IsDrugResult':
				case 'MorbusTubMDR_IsEmpiric':
					save_tb4.setDisplayed('block');
					break;
				case 'SopDiag1':
                case 'SopDiag2':
                case 'SopDiag3':
                case 'SopDiag4':
                case 'SopDiag5':
                case 'SopDiag6':
                case 'SopDiag7':
                case 'SopDiag8':
                case 'SopDiag_Descr':
					save_tb5.setDisplayed('block');
					break;

				case 'RiskType1':
                case 'RiskType2':
                case 'RiskType3':
                case 'RiskType4':
                case 'RiskType5':
                case 'RiskType6':
                case 'RiskType8':
					save_tb6.setDisplayed('block');
					break;
			}

			if(!this.changed_fields) this.changed_fields = {};
			this.changed_fields[conf.field_name] = conf;
		}.createDelegate(this);

		var onCancel = function(conf){
			if(!this.changed_fields) this.changed_fields = {};
			if(!this.changed_fields[conf.field_name]) {
				conf.elOutput.setDisplayed('inline');
				conf.elInputWrap.setDisplayed('none');
				conf.elInput.destroy();
				this.input_cmp_list[conf.elOutputId] = false;
			}
		}.createDelegate(this);

		if(!this.input_cmp_list) this.input_cmp_list = {};

		var getBaseConfig = function(options){
			return {
				hideLabel: true
				,renderTo: options.elInputId
				,listeners:
				{
					blur: function(f) {
						options.elInput = f;
						onCancel(options);
					},
					render: function(f) {
						/*if(options.type == 'id') {
						 //if(!f.getStore() || f.getStore().getCount()==0) log('not store: ' + options.field_name);
						 var dataid = options.elOutput.getAttribute('dataid');
						 if(!Ext.isEmpty(dataid)) {
						 f.setValue(parseInt(dataid));
						 }
						 } else */
						if(options.type == 'checkbox') {
							var dataid = options.elOutput.getAttribute('dataid');
							if(!Ext.isEmpty(dataid) && dataid == 1) {
								f.setValue(true);
							} else {
								f.setValue(false);
							}
						} else {
							f.setValue(params[options.field_name]);
						}
					},
					change: function(f,n,o) {
						if(options.type == 'date') {
							options.outputValue = (n)?n.format('d.m.Y'):empty_value;
							options.value = (n)?n.format('d.m.Y'):null;
						}
						if(options.type.inlist(['string','int'])) {
							options.outputValue = (n)?n:empty_value;
							options.value = n || null;
						}
						if(options.type == 'id') {
							var rec = (n)?f.getStore().getById(n):false;
							if(rec) {
								options.value = n;
								if(options.codeField) {
									options.outputValue = rec.get(options.codeField) + '. ' + rec.get(f.displayField);
								} else {
									options.outputValue = rec.get(f.displayField);
								}
							} else {
								options.value = 0;
								options.outputValue = empty_value;
							}
						}
						if(options.type.inlist(['checkbox'])) {
							options.outputValue = (n)?n:empty_value;
							options.value = (n)?2:1;
						}
						options.elInput = f;
						if (n!=o)
							onChange(options);
					}
				}
			};
		};

		eloutputid = 'MorbusTub_'+ el_data.object_id +'_input'+name;
		elinputid = 'MorbusTub_'+ el_data.object_id +'_inputarea'+name;
		eloutput = Ext.get(eloutputid);
		ct = Ext.get(elinputid);

		switch(name){
			// даты
			case 'MorbusTub_begDT'://дата начала заболевания
			case 'MorbusTub_FirstDT'://дата первого обращения
			case 'MorbusTub_DiagDT'://Дата установления диагноза
			case 'MorbusTub_ResultDT':
			case 'MorbusTub_deadDT':
			case 'MorbusTub_disDT':
			case 'MorbusTub_breakDT':
			case 'MorbusTub_unsetDT':
			case 'MorbusTub_ConvDT':
			case 'MorbusTubMDR_regDT':
			case 'MorbusTubMDR_regdiagDT':
			case 'MorbusTubMDR_begDT':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'date'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: null
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 90;
					cmp = new sw.Promed.SwDateField(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'MorbusTub_CountDay':
			case 'MorbusTub_RegNumCard':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'int'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 100;
					config.maskRe = new RegExp("^[0-9]*$");
					config.allowDecimals = false;
					config.allowNegative = false;
					cmp = new Ext.form.NumberField(config);
					cmp.focus(true, 200);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'MorbusTubMDR_RegNumPerson':
			case 'MorbusTubMDR_RegNumCard':
			case 'MorbusTubMDR_GroupDisp':
			case 'SopDiag_Descr':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'string'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.hideLabel = true;
					config.width = 200;
					//config.maskRe = new RegExp("^[0-9]*$");
					if ('MorbusTubMDR_GroupDisp' == name) {
						config.maxLength = 20;
						config.width = 100;
					}
					cmp = new Ext.form.TextField(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'MorbusTubMDR_IsPathology':
			case 'MorbusTubMDR_IsART':
			case 'MorbusTubMDR_IsCotrim':
			case 'MorbusTubMDR_IsDrugFirst':
			case 'MorbusTubMDR_IsDrugSecond':
			case 'MorbusTubMDR_IsDrugResult':
			case 'MorbusTubMDR_IsEmpiric':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 70;
					config.comboSubject = 'YesNo';
					config.typeCode = 'int';
					config.autoLoad = true;
					cmp = new sw.Promed.SwCommonSprCombo(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'SopDiag1':
            case 'SopDiag2':
            case 'SopDiag3':
            case 'SopDiag4':
            case 'SopDiag5':
            case 'SopDiag6':
            case 'SopDiag7':
            case 'SopDiag8':
            case 'RiskType1':
            case 'RiskType2':
            case 'RiskType3':
            case 'RiskType4':
            case 'RiskType5':
            case 'RiskType6':
            case 'RiskType8':
                if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('none');
                    eloutput.setDisplayed('block');
                    config = getBaseConfig({
                        name: name
                        ,type: 'checkbox'
                        ,field_name: name
                        ,elOutputId: eloutputid
                        ,elInputId: elinputid
                        ,elOutput: eloutput
                        ,outputValue: empty_value
                        ,elInputWrap: ct
                        ,elInput: null
                    });
                    cmp = new Ext.form.Checkbox(config);
                    cmp.focus(true, 500);
                    cmp.fireEvent('change',cmp,cmp.getValue());
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
			case 'TubSickGroupType':
			case 'MorbusTubMDR_TubSickGroupType':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name + '_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					if ('MorbusTubMDR_TubSickGroupType' == name) {
						config.hiddenName = 'MorbusTubMDR_TubSickGroupType_id';
						config.isMDR = true;
					}
					config.onLoadStore = function() {						
						this.focus(true, 500);
					};
					config.comboSubject = 'TubSickGroupType';
					config.typeCode = 'int';
					config.width = 250;
					config.listWidth = 500;
					cmp = new sw.Promed.SwTubCommonSprCombo(config);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'TubResultChemClass':
			case 'TubResultChemType':
			case 'TubResultDeathType':
			case 'TubDiag':
			case 'TubBreakChemType':
            case 'PersonResidenceType':
			case 'MorbusTubMDR_TubDiag':
			case 'PersonDecreedGroup':
			case 'PersonLivingFacilies':
			case 'PersonDispGroup':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name + '_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 250;
					config.listWidth = 500;
					config.comboSubject = name;
					if ('MorbusTubMDR_TubDiag' == name) {
						config.comboSubject = 'TubDiag';
					}
					config.typeCode = 'int';
					config.autoLoad = true;
					cmp = new sw.Promed.SwCommonSprCombo(config);
					this.input_cmp_list[eloutputid] = cmp;
					cmp.focus(true, 500);
				}
				break;
		}
	},
	openMorbusTubSpecificForm: function(options) {
		if(!options.action || !options.object || !options.eldata) {
			return false;
		}

		var win_name,
			object_id,
			data,
			mhdata,
			evndata,
			evnsysnick = this.defineParentEvnClass().EvnClass_SysNick,
			params = {formParams: {}};

		object_id = (options.eldata.object_id.split('_').length > 1)?options.eldata.object_id.split('_')[1]:options.eldata.object_id;
		if(options.action == 'add') {
			mhdata = options.mhdata || this.getObjectData('MorbusTub',object_id);
		} else {
			data = this.getObjectData(options.object,object_id);
			if(!data) {
				return false;
			}
			mhdata = options.mhdata || this.getObjectData('MorbusTub',data.MorbusTub_id);
			
		}
		if(!mhdata) {
			return false;
		}
		if(mhdata.MorbusTub_id < 0) {
			sw.swMsg.alert(langs('Сообщение'), langs('Заболевание на человека не заведено'));
			return false;
		}
		evndata = this.getObjectData(evnsysnick,mhdata.MorbusTub_pid);
		if(!evndata) {
			return false;
		}
		
		if(evndata.accessType == 'view') {
			return false;
		}
		
		 
		params.callback = function() {
			var reload_params = {
				section_code: options.object,
				object_key: options.object +'_id',
				object_value: (object_id<0)?data.MorbusTub_id:object_id,
				parent_object_key: 'MorbusTub_id',
				parent_object_value: mhdata.MorbusTub_id,
				param_name: 'MorbusTub_pid',
				param_value: mhdata.MorbusTub_pid,
				section_id: options.object +'List_'+ mhdata.MorbusTub_pid +'_'+ mhdata.MorbusTub_id
			};
			if(options.object == 'MorbusTubDiagGeneralForm') {
				reload_params.object_key = 'TubDiagGeneralForm_id';
			}
			if(options.object == 'MorbusTubAdvice') {
				// перезагружаем всю специфику
				reload_params = {
					allowCreateAction: true,
					section_code: 'MorbusTub',
					object_key: 'MorbusTub_id',
					object_value: 0,
					parent_object_key: 'MorbusTub_pid',
					parent_object_value: mhdata.MorbusTub_pid,
					section_id: 'MorbusTubData_'+ mhdata.MorbusTub_pid
				};
			}
			this.reloadViewForm(reload_params);
		}.createDelegate(this);


		switch(options.object) {
			case 'MorbusTubAdvice':
			case 'MorbusTubDiagSop':
			case 'MorbusTubDiagGeneralForm':
			case 'MorbusTubConditChem':
			case 'MorbusTubStudyResult':
			case 'MorbusTubPrescr':
			case 'EvnDirectionTub':
			case 'MorbusTubMDRPrescr':
			case 'MorbusTubMDRStudyResult':

				win_name = 'sw'+options.object+'Window';
				params.action = options.action;
				params[options.object+'_id'] = (params.action=='edit')?object_id:null;
				params.formParams = {
					MorbusTub_id: mhdata.MorbusTub_id,
					MorbusBase_id: mhdata.MorbusBase_id,
					MorbusTubMDR_id: mhdata.MorbusTubMDR_id,
					Person_id: this.Person_id,
					Evn_id: null
				};
				break;
			default:
				return false;
		}
		if(options.object == 'MorbusTubDiagGeneralForm') {
			params['TubDiagGeneralForm_id'] = (params.action=='edit')?object_id:null;
		}
		getWnd(win_name).show(params);
	},
	submitMorbusTubHtmlForm: function(btn_name, el_data) {
		var save_tb1 = Ext.get('MorbusTub_'+el_data.object_id+'_toolbarMorbusTub');
		var save_tb2 = Ext.get('MorbusTub_'+el_data.object_id+'_toolbarMorbusTub2');
		var save_tb3 = Ext.get('MorbusTub_'+el_data.object_id+'_toolbarMorbusTub3');
		var save_tb4 = Ext.get('MorbusTub_'+el_data.object_id+'_toolbarMorbusTub4');
		var save_tb5 = Ext.get('MorbusTub_'+el_data.object_id+'_toolbarMorbusTub5');
        var save_tb6 = Ext.get('MorbusTub_'+el_data.object_id+'_toolbarMorbusTub6');

		var params = this.getObjectData('MorbusTub',el_data.object_id.split('_')[1]);
		if(!params) {
			return false;
		}
		var SopDiags = {};
		var RiskTypes = {};
		var evnsysnick = this.defineParentEvnClass().EvnClass_SysNick;
		var evndata = this.getObjectData(evnsysnick,params.MorbusTub_pid);
		if(!evndata) {
			return false;
		}
		if(evndata.accessType == 'view') {
			return false;
		}

		for(var field_name in this.changed_fields) {
			if(this.changed_fields[field_name].name.indexOf('SopDiag') == 0 && this.changed_fields[field_name].name != 'SopDiag_Descr'){
				SopDiags[field_name] = this.changed_fields[field_name].value || '';
			} else if(this.changed_fields[field_name].name.indexOf('RiskType') == 0){
				RiskTypes[field_name] = this.changed_fields[field_name].value || '';
			} else {
				params[field_name] = this.changed_fields[field_name].value || '';
			}
		}
		params.SopDiags = JSON.stringify(SopDiags);
		params.RiskTypes = JSON.stringify(RiskTypes);
		params['Evn_pid'] = params.MorbusTub_pid;
		params['Mode'] = ('EvnSection' == evnsysnick)?'evnsection_viewform':'evnvizitpl_viewform';
		var form = this;
		form.requestSaveWithShowInfoMsg('/?c=MorbusTub&m=saveMorbusTub', 
			params, 
			function(result) {
				if ( result.success ) {
					save_tb1.setDisplayed('none');
					save_tb2.setDisplayed('none');
					save_tb3.setDisplayed('none');
					if (save_tb4) {
						save_tb4.setDisplayed('none');
					}
					save_tb5.setDisplayed('none');
                    save_tb6.setDisplayed('none');
					var conf;
					for(var field_name in form.changed_fields) {
						conf = form.changed_fields[field_name];
						conf.elOutput.setDisplayed('inline');
						conf.elOutput.update(conf.outputValue);
						if(conf.type == 'id') conf.elOutput.setAttribute('dataid',conf.value);
						conf.elInputWrap.setDisplayed('none');
						conf.elInput.destroy();
						form.input_cmp_list[conf.elOutputId] = false;
					}
					form.changed_fields = {};
					form.loadedSpecifics[params.MorbusTub_pid]['tub'].isChanged = true;
				} 
			}, form);
	},
		
	createMorbusNephroHtmlForm: function(name, el_data) {
		var morbus_id = el_data.object_id.split('_')[1];
		var params = this.getObjectData('MorbusNephro',morbus_id);
		if(typeof params != 'object') {
			return false;
		}
		var evnsysnick = this.defineParentEvnClass().EvnClass_SysNick;
		var evndata = this.getObjectData(evnsysnick,params.MorbusNephro_pid);
		if(!evndata) {
			return false;
		}
		if(evndata.accessType == 'view') {
			return false;
		}

		var form = this;
		var cmp, ct, elinputid, eloutputid, config;
		var empty_value = form.getEmptyValueText();
		var onChange = function(conf){
			var save_tb1 = Ext.get('MorbusNephro_'+el_data.object_id+'_toolbarMorbusNephro');
			switch(conf.name){
				case 'DialysisType':
                case 'NephroResultType':
				case 'PersonWeight':
				case 'PersonHeight':
				case 'MorbusNephro_begDate':
				case 'MorbusNephro_firstDate':
				case 'MorbusNephro_dialDate':
				case 'NephroDiagConfType':
				case 'NephroDiagConfTypeC':
				case 'NephroCRIType':
				case 'MorbusNephro_transDate':
				case 'KidneyTransplantType':
				case 'MorbusNephro_deadDT':
				case 'DispGroupType':
				case 'MorbusNephro_Treatment':
				case 'MorbusNephro_CRIDinamic':
				case 'MorbusNephro_IsHyperten':
					save_tb1.setDisplayed('block');
					break;
			}

			if(!this.changed_fields) this.changed_fields = {};
			this.changed_fields[conf.field_name] = conf;
		}.createDelegate(this);

		var onCancel = function(conf){
			if(!this.changed_fields) this.changed_fields = {};
			if(!this.changed_fields[conf.field_name]) {
				conf.elOutput.setDisplayed('inline');
				conf.elInputWrap.setDisplayed('none');
				conf.elInput.destroy();
				this.input_cmp_list[conf.elOutputId] = false;
			}
		}.createDelegate(this);

		if(!this.input_cmp_list) this.input_cmp_list = {};

		var getBaseConfig = function(options){
			return {
				hideLabel: true
				,renderTo: options.elInputId
				,listeners:
				{
					blur: function(f) {
						options.elInput = f;
						onCancel(options);
					},
					render: function(f) {
						/*if(options.type == 'id') {
						 //if(!f.getStore() || f.getStore().getCount()==0) log('not store: ' + options.field_name);
						 var dataid = options.elOutput.getAttribute('dataid');
						 if(!Ext.isEmpty(dataid)) {
						 f.setValue(parseInt(dataid));
						 }
						 } else */{
							f.setValue(params[options.field_name]);
						}
					},
					change: function(f,n,o) {
						if(options.type == 'date') {
							options.outputValue = (n)?n.format('d.m.Y'):empty_value;
							options.value = (n)?n.format('d.m.Y'):null;
						}
						if(options.type.inlist(['string','int'])) {
							options.outputValue = (n)?n:empty_value;
							options.value = n || null;
						}
						if(options.type == 'id') {
							var rec = (n)?f.getStore().getById(n):false;
							if(rec) {
								options.value = n;
								if(options.codeField) {
									options.outputValue = rec.get(options.codeField) + '. ' + rec.get(f.displayField);
								} else {
									options.outputValue = rec.get(f.displayField);
								}
							} else {
								options.value = 0;
								options.outputValue = empty_value;
							}
						}
						options.elInput = f;
						if (n!=o)
							onChange(options);
					}
				}
			};
		};

		eloutputid = 'MorbusNephro_'+ el_data.object_id +'_input'+name;
		elinputid = 'MorbusNephro_'+ el_data.object_id +'_inputarea'+name;
		eloutput = Ext.get(eloutputid);
		ct = Ext.get(elinputid);

		switch(name){
			// даты
			case 'MorbusNephro_begDate':
			case 'MorbusNephro_firstDate':
			case 'MorbusNephro_dialDate':
			case 'MorbusNephro_transDate':
			case 'MorbusNephro_deadDT':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'date'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: null
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 90;
					cmp = new sw.Promed.SwDateField(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'PersonHeight':
			case 'PersonWeight':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'int'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 100;
                    //config.maskRe = new RegExp("^([0-9]{0,3})$");
					//config.regex = new RegExp("^[0-9]{0,3}$");
					config.maxValue = 999;
					config.maxLength = 3;
					config.maxLengthText = langs('Максимальная длина этого поля 3 символа');
					config.allowDecimals = false;
					config.allowNegative = false;
					cmp = new Ext.form.NumberField(config);
					cmp.focus(true, 200);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;				
			case 'MorbusNephro_Treatment':
			case 'MorbusNephro_CRIDinamic':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'string'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.hideLabel = true;
					config.width = 200;
					config.maxLength = 100;
					if ('MorbusNephro_CRIDinamic' == name) {
						config.maxLength = 64;
					}
					cmp = new Ext.form.TextField(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'MorbusNephro_IsHyperten':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 70;
					config.comboSubject = 'YesNo';
					config.typeCode = 'int';
					config.autoLoad = true;
					cmp = new sw.Promed.SwCommonSprCombo(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'NephroDiagConfType':
			case 'NephroDiagConfTypeC':
			case 'NephroCRIType':
			case 'KidneyTransplantType':
			case 'DialysisType':
			case 'DispGroupType':
            case 'NephroResultType':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name + '_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 250;
					config.listWidth = 500;
					config.comboSubject = name;
					if ('NephroDiagConfTypeC' == name) {
						config.comboSubject = 'NephroDiagConfType';
					}
					config.typeCode = (name == 'NephroCRIType') ? 'string' : 'int'; 
					config.autoLoad = true;
					cmp = new sw.Promed.SwCommonSprCombo(config);
					this.input_cmp_list[eloutputid] = cmp;
					cmp.focus(true, 500);
				}
				break;
		}
	},
	createMorbusProfHtmlForm: function(name, el_data) {
		var morbus_id = el_data.object_id.split('_')[1];
		var params = this.getObjectData('MorbusProf',morbus_id);
		if(typeof params != 'object') {
			return false;
		}
		var evnsysnick = this.defineParentEvnClass().EvnClass_SysNick;
		var evndata = this.getObjectData(evnsysnick,params.MorbusProf_pid);
		if(!evndata) {
			return false;
		}
		if(evndata.accessType == 'view') {
			return false;
		}

		var form = this;
		var cmp, ct, elinputid, eloutputid, config;
		var empty_value = '<span style="color: #666;">Не указано</span>';
		var onChange = function(conf){
			var save_tb1 = Ext.get('MorbusProf_'+el_data.object_id+'_toolbarMorbusProf');
			switch(conf.name){
				case 'MorbusProfDiag':
				case 'MorbusProf_Year':
				case 'MorbusProf_Month':
				case 'MorbusProf_Day':
				case 'MorbusProf_IsFit':
				case 'Org':
				case 'OnkoOccupationClass':
					save_tb1.setDisplayed('block');
					break;
			}

			if(!this.changed_fields) this.changed_fields = {};
			this.changed_fields[conf.field_name] = conf;
		}.createDelegate(this);

		var onCancel = function(conf){
			if(!this.changed_fields) this.changed_fields = {};
			if(!this.changed_fields[conf.field_name] && !conf.field_name.inlist(['Org'])) {
				conf.elOutput.setDisplayed('inline');
				conf.elInputWrap.setDisplayed('none');
				conf.elInput.destroy();
				this.input_cmp_list[conf.elOutputId] = false;
			}
		}.createDelegate(this);

		if(!this.input_cmp_list) this.input_cmp_list = {};

		var getBaseConfig = function(options){
			return {
				hideLabel: true
				,renderTo: options.elInputId
				,listeners:
				{
					blur: function(f) {
						options.elInput = f;
						onCancel(options);
					},
					render: function(f) {
						/*if(options.type == 'id') {
						 //if(!f.getStore() || f.getStore().getCount()==0) log('not store: ' + options.field_name);
						 var dataid = options.elOutput.getAttribute('dataid');
						 if(!Ext.isEmpty(dataid)) {
						 f.setValue(parseInt(dataid));
						 }
						 } else */{
							f.setValue(params[options.field_name]);
						}
					},
					change: function(f,n,o) {
						if(options.type == 'date') {
							options.outputValue = (n)?n.format('d.m.Y'):empty_value;
							options.value = (n)?n.format('d.m.Y'):null;
						}
						if(options.type.inlist(['string','int'])) {
							options.outputValue = (n)?n:empty_value;
							options.value = n || null;
						}
						if(options.type == 'id') {
							var rec = (n)?f.getStore().getById(n):false;
							if(rec) {
								options.value = n;
								if(options.codeField) {
									options.outputValue = rec.get(options.codeField) + '. ' + rec.get(f.displayField);
								} else {
									options.outputValue = rec.get(f.displayField);
								}
							} else {
								options.value = 0;
								options.outputValue = empty_value;
							}
						}
						options.elInput = f;
						if (n!=o)
							onChange(options);
					}
				}
			};
		};

		eloutputid = 'MorbusProf_'+ el_data.object_id +'_input'+name;
		elinputid = 'MorbusProf_'+ el_data.object_id +'_inputarea'+name;
		eloutput = Ext.get(eloutputid);
		ct = Ext.get(elinputid);


		switch(name){
			case 'MorbusProfDiag':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name + '_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 300;
					config.moreFields = [
						{ name: 'Diag_ids', mapping: 'Diag_ids' }
					];
					config.comboSubject = 'MorbusProfDiag';
					config.typeCode = 'string';
					config.autoLoad = true;
					config.onLoadStore = function() {
						// накладываем фильтр на заболевание
						var combo = this;
						combo.getStore().clearFilter();
						combo.lastQuery = '';
						if (!Ext.isEmpty(eloutput.getAttribute('filterbydiagid'))) {
							combo.getStore().filterBy(function(record) {
								return (!Ext.isEmpty(record.get('Diag_ids')) && record.get('Diag_ids').replace(/ /g,'').split(',').indexOf(eloutput.getAttribute('filterbydiagid')) > -1);
							});
						}
					}
					onChange = function(conf){
						var save_tb1 = Ext.get('MorbusProf_'+el_data.object_id+'_toolbarMorbusProf');
						save_tb1.setDisplayed('block');

						if(!this.changed_fields) this.changed_fields = {};
						this.changed_fields[conf.field_name] = conf;

						var hwft_el = Ext.get('MorbusProf_'+el_data.object_id+'_inputHarmWorkFactorType');
						var diag_el = Ext.get('MorbusProf_'+el_data.object_id+'_inputDiag');

						if (!Ext.isEmpty(conf.value)) {
							Ext.Ajax.request({
								url: '/?c=MorbusProf&m=getMorbusProfDiagData',
								params: {MorbusProfDiag_id: conf.value},
								success: function(response, options) {
									var response_obj = Ext.util.JSON.decode(response.responseText);

									if (response_obj.length > 0) {
										hwft_el.update(response_obj[0].HarmWorkFactorType_Name);
										params.HarmWorkFactorType_id = response_obj[0].HarmWorkFactorType_id;
										params.HarmWorkFactorType_Name = response_obj[0].HarmWorkFactorType_Name;

										diag_el.update(response_obj[0].Diag_oName);
										params.Diag_oid = response_obj[0].Diag_oid;
										params.Diag_oName = response_obj[0].Diag_oName;
									} else {
										hwft_el.update(empty_value);
										params.HarmWorkFactorType_id = null;
										params.HarmWorkFactorType_Name = null;

										diag_el.update(empty_value);
										params.Diag_oid = null;
										params.Diag_oName = null;
									}
								}
							});
						} else {
							hwft_el.update(empty_value);
							params.HarmWorkFactorType_id = null;
							params.HarmWorkFactorType_Name = null;

							diag_el.update(empty_value);
							params.Diag_oid = null;
							params.Diag_oName = null;
						}

					}.createDelegate(this);
					cmp = new sw.Promed.SwCommonSprCombo(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'MorbusProf_Year':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'int'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 100;
					//config.maskRe = new RegExp("^[0-9]*$");
					//config.regex = new RegExp("^[0-9]{0,3}$");
					config.minValue = 0;
					config.maxLength = 3;
					config.maxLengthText = langs('Максимальная длина этого поля 3 символа');
					config.allowDecimals = false;
					config.allowNegative = false;
					cmp = new Ext.form.NumberField(config);
					cmp.focus(true, 200);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'MorbusProf_Month':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'int'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 100;
					//config.maskRe = new RegExp("^[0-9]*$");
					//config.regex = new RegExp("^[0-9]{0,3}$");
					config.minValue = 0;
					config.maxValue = 12;
					config.maxLength = 3;
					config.maxLengthText = langs('Максимальная длина этого поля 3 символа');
					config.allowDecimals = false;
					config.allowNegative = false;
					cmp = new Ext.form.NumberField(config);
					cmp.focus(true, 200);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'MorbusProf_Day':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'int'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 100;
					//config.maskRe = new RegExp("^[0-9]*$");
					//config.regex = new RegExp("^[0-9]{0,3}$");
					config.minValue = 0;
					config.maxValue = 30;
					config.maxLength = 3;
					config.maxLengthText = langs('Максимальная длина этого поля 3 символа');
					config.allowDecimals = false;
					config.allowNegative = false;
					cmp = new Ext.form.NumberField(config);
					cmp.focus(true, 200);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'MorbusProf_IsFit':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 300;
					config.comboSubject = 'MorbusProfIsFit';
					config.typeCode = 'int';
					config.autoLoad = true;
					cmp = new sw.Promed.SwCommonSprCombo(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'Org':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name + '_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 300;
					config.onTrigger1Click = function() {
						var combo = this;

						getWnd('swOrgSearchWindow').show({
							onSelect: function(orgData) {
								if ( orgData.Org_id > 0 ) {
									combo.getStore().load({
										params: {
											Object:'Org',
											Org_id: orgData.Org_id,
											Org_Name:''
										},
										callback: function() {
											combo.setValue(orgData.Org_id);
											combo.focus(true, 500);
											combo.fireEvent('change', combo, orgData.Org_id);
										}
									});
								}

								getWnd('swOrgSearchWindow').hide();
							},
							onClose: function() {combo.focus(true, 200)}
						});
					};
					cmp = new sw.Promed.SwOrgCombo(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'OnkoOccupationClass':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name + '_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 300;
					config.comboSubject = 'OnkoOccupationClass';
					config.typeCode = 'int';
					config.autoLoad = true;
					cmp = new sw.Promed.SwCommonSprCombo(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
		}
	},
	openMorbusNephroSpecificForm: function(options) {
		if(!options.action || !options.object || !options.eldata) {
			return false;
		}

		var win_name,
			object_id,
			data,
			mhdata,
			evndata,
			evnsysnick = this.defineParentEvnClass().EvnClass_SysNick,
			params = {formParams: {}};

		object_id = (options.eldata.object_id.split('_').length > 1)?options.eldata.object_id.split('_')[1]:options.eldata.object_id;
		if (options.action == 'add' || options.action == 'selectIsLast') {
			mhdata = options.mhdata || this.getObjectData('MorbusNephro',object_id);
		} else {
			data = this.getObjectData(options.object,object_id);
			if (!data || data.accessType == 'view') {
				return false;
			}
            if ('EvnDiagNephro' == options.object && data.isMainRec == 1) {
                options.action = 'view';
            }
			mhdata = options.mhdata || this.getObjectData('MorbusNephro',data.MorbusNephro_id);
			
		}
		if(!mhdata) {
			return false;
		}
		if(mhdata.MorbusNephro_id < 0) {
			sw.swMsg.alert(langs('Сообщение'), langs('Заболевание на человека не заведено'));
			return false;
		}
		if (options.action == 'selectIsLast') {
			var btn = Ext.get(options.object + 'List_' + options.eldata.object_id + '_selectIsLast'),
				isOnlyLast = btn.hasClass('viewAll') ? 1 : 0;
			this.reloadViewForm({
				section_code: options.object,
				object_key: options.object +'_id',
				object_value: (object_id<0)?data.MorbusNephro_id:object_id,
				parent_object_key: 'MorbusNephro_id',
				parent_object_value: mhdata.MorbusNephro_id,
				param_name: 'MorbusNephro_pid',
				param_value: mhdata.MorbusNephro_pid,
				section_id: options.object +'List_'+ mhdata.MorbusNephro_pid +'_'+ mhdata.MorbusNephro_id,
				isOnlyLast: isOnlyLast,
				callback: function() {
					var btn = Ext.get(options.object + 'List_' + options.eldata.object_id + '_selectIsLast');
					if (1 == isOnlyLast) {
						btn.removeClass('viewAll');
						btn.update(langs('Отображать все'));
					}
				}
			});
			return true;
		}
		evndata = this.getObjectData(evnsysnick,mhdata.MorbusNephro_pid);
		if(!evndata) {
			return false;
		}
		
		if(evndata.accessType == 'view') {
			return false;
		}
		
		 
		params.callback = function() {
			var reload_params = {
				section_code: options.object,
				object_key: options.object +'_id',
				object_value: (object_id<0)?data.MorbusNephro_id:object_id,
				parent_object_key: 'MorbusNephro_id',
				parent_object_value: mhdata.MorbusNephro_id,
				param_name: 'MorbusNephro_pid',
				param_value: mhdata.MorbusNephro_pid,
				section_id: options.object +'List_'+ mhdata.MorbusNephro_pid +'_'+ mhdata.MorbusNephro_id
			};
			this.reloadViewForm(reload_params);
		}.createDelegate(this);


		switch(options.object) {
			case 'EvnDiagNephro':
			case 'MorbusNephroLab':
			case 'MorbusNephroDisp':
			case 'MorbusNephroDialysis':
				win_name = 'sw'+options.object+'Window';
				params.action = options.action;
				params[options.object+'_id'] = (params.action=='edit')?object_id:null;
				params.formParams = {
					MorbusNephro_id: mhdata.MorbusNephro_id,
					Morbus_id: mhdata.Morbus_id,
					MorbusBase_id: mhdata.MorbusBase_id,
					Person_id: this.Person_id,
                    PersonEvn_id: this.PersonEvn_id,
                    Server_id: this.Server_id,
					Evn_id: null// mhdata.MorbusNephro_pid
				};
				break;
			default:
				return false;
		}
		getWnd(win_name).show(params);
		return true;
	},
	submitMorbusNephroHtmlForm: function(btn_name, el_data) {
		var save_tb1 = Ext.get('MorbusNephro_'+el_data.object_id+'_toolbarMorbusNephro');

		var params = this.getObjectData('MorbusNephro',el_data.object_id.split('_')[1]);
		if(!params) {
			return false;
		}

		var evnsysnick = this.defineParentEvnClass().EvnClass_SysNick;
		var evndata = this.getObjectData(evnsysnick,params.MorbusNephro_pid);
		if(!evndata) {
			return false;
		}
		if(evndata.accessType == 'view') {
			return false;
		}

		for(var field_name in this.changed_fields) {
			params[field_name] = this.changed_fields[field_name].value || '';
		}
		if (params['PersonHeight']) {
			params['PersonHeight_Height'] = params['PersonHeight'];
			delete params['PersonHeight'];
		}
		if (params['PersonWeight']) {
			params['PersonWeight_Weight'] = params['PersonWeight'];
			delete params['PersonWeight'];
		}
        if (params['NephroDiagConfTypeC_id']) {
            params['NephroDiagConfType_cid'] = params['NephroDiagConfTypeC_id'];
            delete params['NephroDiagConfTypeC_id'];
        }
		params['PersonHeight_id'] = params.PersonHeight_id || null;
		params['PersonWeight_id'] = params.PersonWeight_id || null;
		params['Evn_pid'] = params.MorbusNephro_pid;
		params['Mode'] = ('EvnSection' == evnsysnick)?'evnsection_viewform':'evnvizitpl_viewform';
		var form = this;
		form.requestSaveWithShowInfoMsg('/?c=MorbusNephro&m=doSaveMorbusNephro', 
			params, 
			function(result) {
				if ( result.success ) {
					save_tb1.setDisplayed('none');
					var conf;
					for(var field_name in form.changed_fields) {
						conf = form.changed_fields[field_name];
						conf.elOutput.setDisplayed('inline');
						conf.elOutput.update(conf.outputValue);
						if(conf.type == 'id') conf.elOutput.setAttribute('dataid',conf.value);
						conf.elInputWrap.setDisplayed('none');
						conf.elInput.destroy();
						form.input_cmp_list[conf.elOutputId] = false;
					}
					form.changed_fields = {};
					form.loadedSpecifics[params.MorbusNephro_pid]['nephro'].isChanged = true;
				} 
			}, form);
	},
	submitMorbusProfHtmlForm: function(btn_name, el_data) {
		var save_tb1 = Ext.get('MorbusProf_'+el_data.object_id+'_toolbarMorbusProf');

		var params = this.getObjectData('MorbusProf',el_data.object_id.split('_')[1]);
		if(!params) {
			return false;
		}

		var evnsysnick = this.defineParentEvnClass().EvnClass_SysNick;
		var evndata = this.getObjectData(evnsysnick,params.MorbusProf_pid);
		if(!evndata) {
			return false;
		}
		if(evndata.accessType == 'view') {
			return false;
		}

		for(var field_name in this.changed_fields) {
			params[field_name] = this.changed_fields[field_name].value || '';
		}
		if (params['PersonHeight']) {
			params['PersonHeight_Height'] = params['PersonHeight'];
			delete params['PersonHeight'];
		}
		if (params['PersonWeight']) {
			params['PersonWeight_Weight'] = params['PersonWeight'];
			delete params['PersonWeight'];
		}
		if (params['ProfDiagConfTypeC_id']) {
			params['ProfDiagConfType_cid'] = params['ProfDiagConfTypeC_id'];
			delete params['ProfDiagConfTypeC_id'];
		}
		params['PersonHeight_id'] = params.PersonHeight_id || null;
		params['PersonWeight_id'] = params.PersonWeight_id || null;
		params['Evn_pid'] = params.MorbusProf_pid;
		params['Mode'] = ('EvnSection' == evnsysnick)?'evnsection_viewform':'evnvizitpl_viewform';
		var url = '/?c=MorbusProf&m=doSaveMorbusProf';
		var form = this;
		form.loadMask = form.getLoadMask(LOAD_WAIT);
		form.loadMask.show();
		Ext.Ajax.request({
			url: url,
			params: params,
			callback: function(options, success, response) {
				form.loadMask.hide();
				var result = Ext.util.JSON.decode(response.responseText);
				if (result.success)
				{
					save_tb1.setDisplayed('none');
					var conf;
					for(var field_name in form.changed_fields) {
						conf = form.changed_fields[field_name];
						conf.elOutput.setDisplayed('inline');
						conf.elOutput.update(conf.outputValue);
						if(conf.type == 'id') conf.elOutput.setAttribute('dataid',conf.value);
						conf.elInputWrap.setDisplayed('none');
						conf.elInput.destroy();
						form.input_cmp_list[conf.elOutputId] = false;
					}
					form.changed_fields = {};
					form.loadedSpecifics[params.MorbusProf_pid]['prof'].isChanged = true;
				}
			}
		});
	},
	createMorbusVenerHtmlForm: function(name, el_data) {
		var morbus_id = el_data.object_id.split('_')[1];
		var params = this.getObjectData('MorbusVener',morbus_id);
		if(typeof params != 'object') {
			return false;
		}
		var evnsysnick = this.defineParentEvnClass().EvnClass_SysNick;
		var evndata = this.getObjectData(evnsysnick,params.MorbusVener_pid);
		if(!evndata) {
			return false;
		}
		if(evndata.accessType == 'view') {
			return false;
		}

		var form = this;
		var cmp, ct, elinputid, eloutputid, config;
		var empty_value = form.getEmptyValueText();
		var onChange = function(conf){

			var save_tb = Ext.get('MorbusVener_'+el_data.object_id+'_toolbarMorbusVener');
			save_tb.setDisplayed('block');

			if(!this.changed_fields) this.changed_fields = {};
			this.changed_fields[conf.field_name] = conf;
		}.createDelegate(this);

		var onCancel = function(conf){
			if(!this.changed_fields) this.changed_fields = {};
			if(!this.changed_fields[conf.field_name]) {
				conf.elOutput.setDisplayed('inline');
				conf.elInputWrap.setDisplayed('none');
				conf.elInput.destroy();
				this.input_cmp_list[conf.elOutputId] = false;
			}
		}.createDelegate(this);

		if(!this.input_cmp_list) this.input_cmp_list = {};

		var getBaseConfig = function(options){
			return {
				hideLabel: true
				,renderTo: options.elInputId
				,listeners:
				{
					blur: function(f) {
						options.elInput = f;
						onCancel(options);
					},
					render: function(f) {
						f.setValue(params[options.field_name]);
					},
					change: function(f,n,o) {
						if(options.type == 'date') {
							options.outputValue = (n)?n.format('d.m.Y'):empty_value;
							options.value = (n)?n.format('d.m.Y'):null;
						}
						if(options.type.inlist(['string','int'])) {
							options.outputValue = (n)?n:empty_value;
							options.value = n || null;
						}
						if(options.type == 'id') {
							var rec = (n)?f.getStore().getById(n):false;
							if(rec) {
								options.value = n;
								if(options.codeField) {
									options.outputValue = rec.get(options.codeField) + '. ' + rec.get(f.displayField);
								} else {
									options.outputValue = rec.get(f.displayField);
								}
							} else {
								options.value = 0;
								options.outputValue = empty_value;
							}
						}
						options.elInput = f;
						if (n!=o)
							onChange(options);
					}
				}
			};
		};

		eloutputid = 'MorbusVener_'+ el_data.object_id +'_input'+name;
		elinputid = 'MorbusVener_'+ el_data.object_id +'_inputarea'+name;
		eloutput = Ext.get(eloutputid);
		ct = Ext.get(elinputid);

		switch(name){
			// даты
			case 'MorbusVener_DiagDT':
			case 'MorbusVener_updDiagDT':
			case 'MorbusVener_HospDT':
			case 'MorbusVener_BegTretDT':
			case 'MorbusVener_EndTretDT':
			case 'MorbusVener_DeRegDT':
			case 'MorbusVener_MensLastDT':

				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'date'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: null
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 90;
					cmp = new sw.Promed.SwDateField(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'MorbusVener_MensBeg':
			case 'MorbusVener_MensEnd':
			case 'MorbusVener_MensOver':
			case 'MorbusVener_SexualInit':
			case 'MorbusVener_CountPregnancy':
			case 'MorbusVener_CountBirth':
			case 'MorbusVener_CountAbort':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'int'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 100;
					config.maskRe = new RegExp("^[0-9]*$");
					config.allowDecimals = false;
					config.allowNegative = false;
					//config.maxValue = 99;
					config.maxLength = '2';
					config.autoCreate = {tag: "input", size:14, maxLength: config.maxLength, autocomplete: "off"};
					cmp = new Ext.form.NumberField(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'MorbusVener_LiveCondit':
			case 'MorbusVener_WorkCondit':
			case 'MorbusVener_Heredity':
			case 'MorbusVener_UseAlcoNarc':
			case 'MorbusVener_PlaceInfect':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'string'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: null
						,elInputWrap: ct
						,elInput: null
					});
					config.hideLabel = true;
					config.width = 360;
					cmp = new Ext.form.TextField(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'MorbusVener_IsVizitProf':
			case 'MorbusVener_IsPrevent':
			case 'MorbusVener_IsAlco':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 70;
					config.comboSubject = 'YesNo';
					config.typeCode = 'int';
					config.autoLoad = true;
					cmp = new sw.Promed.SwCommonSprCombo(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'VenerDetectType':
			case 'VenerDeRegCauseType':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name + '_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 250;
					//config.listWidth = 500;
					config.comboSubject = name;
					config.typeCode = 'int';
					config.autoLoad = true;
					cmp = new sw.Promed.SwCommonSprCombo(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'Lpu_bid': //
			case 'Lpu_eid': //
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: null
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 200;
					config.listWidth = 300;
					cmp = new sw.Promed.SwLpuLocalCombo(config);
					var dataid = eloutput.getAttribute('dataid');
					cmp.getStore().load({
						callback: function(){
							if(this.getStore().getCount() > 0) {
								this.setValue(dataid);
							}
						},
						scope: cmp
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
		}
	},
	openMorbusVenerSpecificForm: function(options) {
		if(!options.action || !options.object || !options.eldata) {
			return false;
		}

		var win_name,
			object_id,
			data,
			mhdata,
			evndata,
			evnsysnick = this.defineParentEvnClass().EvnClass_SysNick,
			params = {formParams: {}};

		object_id = (options.eldata.object_id.split('_').length > 1)?options.eldata.object_id.split('_')[1]:options.eldata.object_id;
		if(options.action == 'add') {
			mhdata = options.mhdata || this.getObjectData('MorbusVener',object_id);
		} else {
			data = this.getObjectData(options.object,object_id);
			if(!data) {
				return false;
			}
			mhdata = options.mhdata || this.getObjectData('MorbusVener',data.MorbusVener_id);

		}
		if(!mhdata) {
			return false;
		}
		if(mhdata.MorbusVener_id < 0) {
			sw.swMsg.alert(langs('Сообщение'), langs('Заболевание на человека не заведено'));
			return false;
		}
		evndata = this.getObjectData(evnsysnick,mhdata.MorbusVener_pid);
		if(!evndata) {
			return false;
		}

		if(evndata.accessType == 'view') {
			return false;
		}
		params.callback = function() {
			var reload_params = {
				section_code: options.object,
				object_key: options.object +'_id',
				object_value: object_id,
				parent_object_key: 'MorbusVener_id',
				parent_object_value: mhdata.MorbusVener_id,
				param_name: 'MorbusVener_pid',
				param_value: mhdata.MorbusVener_pid,
				section_id: options.object +'List_'+ mhdata.MorbusVener_pid +'_'+ mhdata.MorbusVener_id
			};
			this.reloadViewForm(reload_params);
		}.createDelegate(this);


		switch(options.object) {
			case 'MorbusVenerContact':
			case 'MorbusVenerTreatSyph':
			case 'MorbusVenerAccurTreat':
			case 'MorbusVenerEndTreat':
				win_name = 'sw'+options.object+'Window';
				params.action = options.action;
				params[options.object+'_id'] = (params.action=='edit')?object_id:null;
				params.formParams = {MorbusVener_id: mhdata.MorbusVener_id, MorbusVenerBase_id: mhdata.MorbusVenerBase_id, MorbusVenerPerson_id: mhdata.MorbusVenerPerson_id, Person_id: this.Person_id, Evn_id: null};
				break;
			default:
				return false;
		}
		getWnd(win_name).show(params);
	},
	submitMorbusVenerHtmlForm: function(btn_name, el_data) {
		var save_tb = Ext.get('MorbusVener_'+el_data.object_id+'_toolbarMorbusVener');

		var params = this.getObjectData('MorbusVener',el_data.object_id.split('_')[1]);
		if(!params) {
			return false;
		}

		var evnsysnick = this.defineParentEvnClass().EvnClass_SysNick;
		var evndata = this.getObjectData(evnsysnick,params.MorbusVener_pid);
		if(!evndata) {
			return false;
		}
		if(evndata.accessType == 'view') {
			return false;
		}

		for(var field_name in this.changed_fields) {
			params[field_name] = this.changed_fields[field_name].value || '';
		}
		params['Evn_pid'] = params.MorbusVener_pid;
		params['Mode'] = ('EvnSection' == evnsysnick)?'evnsection_viewform':'evnvizitpl_viewform';
		var form = this;
		form.requestSaveWithShowInfoMsg('/?c=MorbusVener&m=saveMorbusVener', 
			params, 
			function(result) {
				if ( result.success ) {
					save_tb.setDisplayed('none');
					var conf;
					for(var field_name in form.changed_fields) {
						conf = form.changed_fields[field_name];
						conf.elOutput.setDisplayed('inline');
						conf.elOutput.update(conf.outputValue);
						if(conf.type == 'id') conf.elOutput.setAttribute('dataid',conf.value);
						conf.elInputWrap.setDisplayed('none');
						conf.elInput.destroy();
						form.input_cmp_list[conf.elOutputId] = false;
					}
					form.changed_fields = {};
					form.loadedSpecifics[params.MorbusVener_pid]['vener'].isChanged = true;
				} 
			}, form);
	},

	checkZNO: function(options){//запрашиваем последний признак зно для каждого посещения, т.к. запросы будут отличаться
		if(getRegionNick()!='ekb') return;
		var win = this,
			person_id = win.Person_id,
			Evn_id = options.EvnVizitPL_id;
		if(options.EvnClass_SysNick != 'EvnVizitPL') return;
		var params = new Object();
		params.object = 'EvnVizitPL';

		if ( !Ext.isEmpty(person_id) ) {
			params.Person_id = person_id;
		}
		
		if ( !Ext.isEmpty(Evn_id) && Evn_id!=0 ) {
			params.Evn_id = Evn_id;
		} else return;
		
		var record = win.viewFormDataStore.getById('EvnVizitPL_'+Evn_id);
		
		options.ZnoIsNull = Ext.isEmpty(record.get('EvnVizitPL_IsZNO'));
		//по ТЗ поле diagspid вроде как должно скрываться если не отмечен зно:
		var DiagSpidField = Ext.get('EvnVizitPL_'+Evn_id+'_DiagSpidField');
		DiagSpidField.setDisplayed(record.get('EvnVizitPL_IsZNO')==2 ? 'block' : 'none');
		
		var loadMask = new Ext.LoadMask(this.getEl(), {msg: "Проверка признака на подозрение ЗНО..."});
        loadMask.show();
        Ext.Ajax.request({
            callback: function(opts, success, response) {
                loadMask.hide();

                if ( success ) {
                    var data = Ext.util.JSON.decode(response.responseText);
                    record.set('lastIsZNO' ,data.iszno);                    
                    if(record.get('lastIsZNO')==2 && Ext.isEmpty(record.get('EvnVizitPL_IsZNO'))) {
						record.set('EvnVizitPL_IsZNO', 2);
						record.commit(true);
						win.viewFormDataStore.commitChanges();
						
						Ext.Ajax.request({
							url: '/?c=EvnVizit&m=setEvnVizitParameter',
							params: {
								object: options.EvnClass_SysNick,
								id: Evn_id,
								param_name: 'EvnVizitPL_IsZNO',
								param_value: 2,
								options: {isEmk: true}
							}
						});
						//если в EvnVizitPL_IsZNO null, считаем что можно подставлять значение по умолчанию
						var field = Ext.get('EvnVizitPL_data_'+Evn_id+'_inputIsZNO');
						field.dom.innerText = 'Да';						
						field.setAttribute('dataid', 2);
						DiagSpidField.setDisplayed('block');
						
						if(!Ext.isEmpty(data.Diag_spid)) {
							Ext.get('EvnVizitPL_'+Evn_id+'_DiagSpidCode').dom.innerText = data.Diag_Code;
							
							field = Ext.get('EvnVizitPL_data_'+Evn_id+'_inputDiagSpid');
							field.setAttribute('dataid', data.Diag_spid);
							field.dom.innerText = data.Diag_Name;
							
							record.set('Diag_spid', data.Diag_spid);
							record.commit(true);
							win.viewFormDataStore.commitChanges();
						
							Ext.Ajax.request({
							url: '/?c=EvnVizit&m=setEvnVizitParameter',
								params: {
									object: options.EvnClass_SysNick,
									id: Evn_id,
									param_name: 'Diag_spid',
									param_value: data.Diag_spid,
									options: {isEmk: true}
								}
							});
						}
					}
                }
                else {
                    sw.swMsg.alert('Ошибка', 'Ошибка при определении признака на подозрение ЗНО');
                }
            },
			params: params,
            url: '/?c=Person&m=checkEvnZNO_last'
        });
        
        win.checkBiopsyDate(options);
	},
	
	checkBiopsyDate: function(options) {
		if(getRegionNick()!='ekb') return;

		var win = this,
			person_id = win.Person_id,
			Evn_id = options.EvnVizitPL_id;
		if ( Ext.isEmpty(Evn_id) || Evn_id==0 ) return;
		
		var record = win.viewFormDataStore.getById('EvnVizitPL_'+Evn_id);
		var BiopsyDateField = Ext.get('EvnVizitPL_'+Evn_id+'_BiopsyDateField');
		
		if(record.get('EvnVizitPL_IsZNORemove') == '2') {
			BiopsyDateField.setDisplayed('block');
			
			if(options.ZnoIsNull && Ext.isEmpty(record.get('EvnVizitPL_BiopsyDate')) ) {
				var params = new Object();
				params.object = 'EvnVizitPL';
				params.Person_id = person_id;
				Ext.Ajax.request({
					url: '/?c=Person&m=getEvnBiopsyDate',
					params: params,
					callback:function (options, success, response) {
						if (success) {
							var response_obj = Ext.util.JSON.decode(response.responseText);
							if (response_obj.success && response_obj.data) {
								record.set('EvnVizitPL_BiopsyDate', response_obj.data);
								record.commit(true);
								win.viewFormDataStore.commitChanges();
								
								var field = Ext.get('EvnVizitPL_data_'+Evn_id+'_inputBiopsyDate');
								field.setAttribute('dataid', response_obj.data);
								field.dom.innerText = response_obj.data;
							}
						}
					}
				});
			}
		} else BiopsyDateField.setDisplayed('none');
	},

    defineParentEvnClass: function() {
        var evnClass = {
            EvnClass_SysNick: '',
            EvnClass_id: 0
        };
        switch (true) {
            case (this.data && this.data.Code.inlist(['EvnPL','EvnVizitPL'])):
                evnClass.EvnClass_SysNick = 'EvnVizitPL';
                evnClass.EvnClass_id = 11;
                break;
            case (this.data && this.data.Code.inlist(['EvnPLStom','EvnVizitPLStom'])):
                evnClass.EvnClass_SysNick = 'EvnVizitPLStom';
                evnClass.EvnClass_id = 13;
                break;
            case (this.data && this.data.Code.inlist(['EvnPS','EvnSection'])):
                evnClass.EvnClass_SysNick = 'EvnSection';
                evnClass.EvnClass_id = 32;
                break;
            case (this.data && this.data.Code.inlist(['EvnPLDispDop13'])):
                evnClass.EvnClass_SysNick = 'EvnPLDispDop13';
                evnClass.EvnClass_id = 101;
                break;
            case (this.data && this.data.Code.inlist(['EvnPLDispProf'])):
                evnClass.EvnClass_SysNick = 'EvnPLDispProf';
                evnClass.EvnClass_id = 103;
                break;
            case (this.data && this.data.Code.inlist(['EvnPLDispOrp'])):
                evnClass.EvnClass_SysNick = 'EvnPLDispOrp';
                evnClass.EvnClass_id = 9;
                break;
            case (this.data && this.data.Code.inlist(['EvnPLDispTeenInspection'])):
                evnClass.EvnClass_SysNick = 'EvnPLDispTeenInspection';
                evnClass.EvnClass_id = 104;
                break;
            case (this.data && this.data.Code.inlist(['EvnPLDispMigrant'])):
                evnClass.EvnClass_SysNick = 'EvnPLDispMigrant';
                evnClass.EvnClass_id = 189;
                break;
            case (this.data && this.data.Code.inlist(['EvnPLDispDriver'])):
                evnClass.EvnClass_SysNick = 'EvnPLDispDriver';
                evnClass.EvnClass_id = 190;
                break;
        }
        return evnClass;
    },
	saveMorbusPrenancySpec:function(name,el_data){
		var MorbusPregnancy_id = el_data.object_id.split('_')[1];
		var params = this.getObjectData('MorbusPregnancy',MorbusPregnancy_id);
		if(typeof params != 'object') {
			return false;
		}
		var evnsysnick = this.defineParentEvnClass().EvnClass_SysNick;
		var evndata = this.getObjectData(evnsysnick,params.MorbusPregnancy_pid);
		if(!evndata) {
			return false;
		}
		if(evndata.accessType == 'view') {
			return false;
		}
		var form = this;
			params['Evn_id'] = params['MorbusPregnancy_pid'];
			params['EvnVizitPL_setDate']= evndata.EvnVizitPL_setDate;
			params['Diag_id']= evndata.Diag_id;
			params['Person_id']= form.Person_id;
			if (params&&params.Diag_id>0&&
				params.AbortType_id>0&&
				params.Evn_id>0&&
				params.MorbusPregnancy_CountPreg&&
				params.MorbusPregnancy_OutcomPeriod&&
				params.MorbusPregnancy_OutcomD&&
				params.MorbusPregnancy_OutcomT
			) {
				form.requestSaveWithShowInfoMsg('/?c=MorbusPregnancy&m=saveMorbusPregnancy', 
					params, 
					function(result) {
						if ( result.success ) {
							params['MorbusPregnancy_id']=result.MorbusPregnancy_id;
							params['Morbus_id']=result.Morbus_id;
							form.loadedSpecifics[params.MorbusPregnancy_pid]['pregnancy'].isChanged = true;
						} 
					}, form);
			} else {
				
			}
	},
	 createMorbusPregnancyHtmlForm: function(name, el_data) {
		var MorbusPregnancy_id = el_data.object_id.split('_')[1];
		var params = this.getObjectData('MorbusPregnancy',MorbusPregnancy_id);
		if(typeof params != 'object') {
			return false;
		}
		var evnsysnick = this.defineParentEvnClass().EvnClass_SysNick;
		var evndata = this.getObjectData(evnsysnick,params.MorbusPregnancy_pid);
		if(!evndata) {
			return false;
		}
		if(evndata.accessType == 'view') {
			return false;
		}
		var form = this;
		var cmp, ct, elinputid, eloutputid, config;
		var empty_value = '<span class="empty">Не указано</span>';

        var setValueTo = function (name, option) {
            if (!name) {
                return false;
            }
            if (!option) {
                option = {};
            }
            var field_name = name +'_id';
            if (option.field_name) {
                field_name = option.field_name;
            }
            if (!option.type) {
                option.type = 'id';
            }
            if (!option.value) {
                option.value = null;
            }
            if (!option.outputValue) {
                option.outputValue = empty_value;
            }
            var record = form.viewFormDataStore.getById('MorbusPregnancy_'+ morbus_id);
            if (record) {
                record.set(field_name, option.value);
                if (option.type == 'id' && record.get(field_name+'_Name')) {
                    record.set(field_name+'_Name', option.outputValue);
                }
                record.commit(true);
                form.viewFormDataStore.commitChanges();
            }
            var elinputid = 'MorbusPregnancy_'+ el_data.object_id +'_input'+ name;
            if (form.input_cmp_list[elinputid]) {
                form.input_cmp_list[elinputid].setValue(option.value);
            } else {
                var el = Ext.get(elinputid);
                if (el) {
                    if (option.type == 'id') {
                        el.set({data_id: (option.value||'')});
                    }
                    el.update(option.outputValue);
                }
            }
            return true;
        };
		
		var onCancel = function(conf){
			conf.elOutput.setDisplayed('inline');
			conf.elInputWrap.setDisplayed('none');
			conf.elInput.destroy();
			form.input_cmp_list[conf.elOutputId] = false;
		};

		var onChange = function(conf) {
			// сохраняем изменения
			
			var field_name = conf.field_name;
			params[field_name] = conf.value || '';
			form.loadMask.hide();
			conf.elOutput.update(conf.outputValue);
			if(typeof conf.type == 'id') conf.elOutput.setAttribute('dataid',conf.value);
			onCancel(conf);
			
		};
		
		form.changed_fields = {};
		
		if(!this.input_cmp_list) this.input_cmp_list = {};
		
		var getBaseConfig = function(options){
			return {
				hideLabel: true
				,renderTo: options.elInputId
				,listeners:
				{
					blur: function(f) {
						options.elInput = f;
						onCancel(options);
					},
					render: function(f) {
						if(options.type == 'id') {
							//if(!f.getStore() || f.getStore().getCount()==0) log('not store: ' + options.field_name);
							var dataid = options.elOutput.getAttribute('dataid');
							if(!Ext.isEmpty(dataid)) {
								f.setValue(parseInt(dataid));
							}
						} else {
							f.setValue(params[options.field_name]);
						}
					},
					change: function(f,n,o) {
						if(options.type == 'date') {
							options.outputValue = (n)?n.format('d.m.Y'):empty_value;
							options.value = (n)?n.format('d.m.Y'):null;
						}
						if(options.type.inlist(['string','int'])) {
							options.outputValue = (n)?n:empty_value;
							options.value = n || null;
						}
						if(options.type == 'id') {
							var rec = (n)?f.getStore().getById(n):false;
							if(rec) {
								options.value = n;
								if(options.codeField) {
									options.outputValue = rec.get(options.codeField) + '. ' + rec.get(f.displayField);
								} else {
									options.outputValue = rec.get(f.displayField);
								}
							} else {
								options.value = 0;
								options.outputValue = empty_value;
							}
						}
						options.elInput = f;
						onChange(options);
					}
				}
			};
		};
		
		eloutputid = 'MorbusPregnancy_'+ el_data.object_id +'_input'+name;
		elinputid = 'MorbusPregnancy_'+ el_data.object_id +'_inputarea'+name;
		eloutput = Ext.get(eloutputid);
		ct = Ext.get(elinputid);
		
		switch(name){
            case 'OutcomD'://дата смерти
                if(ct && !this.input_cmp_list[eloutputid]) {
                    var field_name = name;
                    
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'date'
						,field_name: 'MorbusPregnancy_'+field_name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: null
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 90;
					cmp = new sw.Promed.SwDateField(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'OutcomT'://дата смерти
                if(ct && !this.input_cmp_list[eloutputid]) {
                    var field_name = name;
                    
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'string'
						,field_name: 'MorbusPregnancy_'+field_name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: null
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 90;
					cmp = new sw.Promed.TimeField(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'BloodLoss':
			case 'OutcomPeriod':
			case 'CountPreg'://номер гистологического исследования
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						 name: name
						,type: 'string'
						,field_name: 'MorbusPregnancy_'+ name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 100;
					config.maxLength = 20;
					//config.maskRe = new RegExp("^[0-9]*$");
					//config.allowDecimals = false;
					//config.allowNegative = false;
					cmp = new Ext.form.NumberField(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'IsHIV':
			case 'IsMedicalAbort':
			case 'IsHIVtest':
			case 'TrueStream':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: 'MorbusPregnancy_'+ name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 70;
					config.comboSubject = 'YesNo';
					cmp = new sw.Promed.SwCommonSprLikeCombo(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'AbortType_id':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 70;
					config.comboSubject = 'AbortType';
					cmp = new sw.Promed.SwCommonSprLikeCombo(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;	
		}
	},
    checkDiagAttribPanel: function(name, el_data) {
		var vals = [];
		var n = '';
		for(var i=1;i<8;i++){
			if(i>1){
				n = i;
			}
			var el = document.getElementById('MorbusOnko_'+el_data.object_id+'_inputOnkoDiagConfType'+n);
			if(el){
				var val = el.getAttribute('dataid');
				if(val) vals.push(val);
			}
		}
		var diagAttribPanel = Ext.get('MorbusOnko_'+el_data.object_id+'_diagAttribPanel');
		if ((1).inlist(vals) || ((2).inlist(vals) && getRegionNick() == 'perm')) {
			diagAttribPanel.setDisplayed('block');
		} else {
			diagAttribPanel.setDisplayed('none');
		}
	},
    createMorbusOnkoHtmlForm: function(name, el_data) {
		var morbus_id = el_data.object_id.split('_')[1];
		var params = this.getObjectData('MorbusOnko',morbus_id);

		if(typeof params != 'object') {
			return false;
		}
		var evnsysnick = this.defineParentEvnClass().EvnClass_SysNick;
		var evndata = this.getObjectData(evnsysnick,params.MorbusOnko_pid);
		if(!evndata) {
			return false;
		}
		if(evndata.accessType == 'view') {
			return false;
		}
		var form = this;
		var cmp, ct, elinputid, eloutputid, config;
		var empty_value = '<span class="empty">Не указано</span>';
		
		var checkDate = Date.parseDate(!Ext.isEmpty(params.Evn_disDate) ? params.Evn_disDate : getGlobalOptions().date, 'd.m.Y');

		var checkDate = Date.parseDate(!Ext.isEmpty(params.Evn_disDate) ? params.Evn_disDate : getGlobalOptions().date, 'd.m.Y');
		var person_age_on_evn_date = swGetPersonAge(form.PersonInfoFrame.getFieldValue('Person_Birthday'), evndata[evnsysnick + '_setDate']);

        var setValueTo = function (name, option) {
            if (!name) {
                return false;
            }
            if (!option) {
                option = {};
            }
            var field_name = name +'_id';
            if (option.field_name) {
                field_name = option.field_name;
            }
            if (!option.type) {
                option.type = 'id';
            }
            if (!option.value) {
                option.value = null;
            }
            if (!option.outputValue) {
                option.outputValue = empty_value;
            }
            var record = form.viewFormDataStore.getById('MorbusOnko_'+ morbus_id);
            if (record) {
                record.set(field_name, option.value);
                if (option.type == 'id' && record.get(field_name+'_Name')) {
                    record.set(field_name+'_Name', option.outputValue);
                }
                record.commit(true);
                form.viewFormDataStore.commitChanges();
            }
            var elinputid = 'MorbusOnko_'+ el_data.object_id +'_input'+ name;
            if (form.input_cmp_list[elinputid]) {
                form.input_cmp_list[elinputid].setValue(option.value);
            } else {
                var el = Ext.get(elinputid);
                if (el) {
                    if (option.type == 'id') {
                        el.set({data_id: (option.value||'')});
                        el.set({dataid: (option.value||'')});
                    }
                    el.update(option.outputValue);
                }
            }
            return true;
        };
		
		var onCancel = function(conf){
			conf.elOutput.setDisplayed('inline');
			conf.elInputWrap.setDisplayed('none');
			conf.elInput.destroy();
			form.input_cmp_list[conf.elOutputId] = false;
		};

		var onChange = function(conf) {
			var record = form.viewFormDataStore.getById('MorbusOnko_'+ morbus_id);
			// сохраняем изменения
			var field_name = conf.field_name;
			if(field_name === undefined && name == 'DiagDead'){
				var field_name = 'Diag_did';
			}
			if(field_name === undefined && name == 'EndDiag'){
				var field_name = 'Diag_id';
			}
			params[field_name] = conf.value || '';
			if ('MorbusOnkoBase_deadDT' == field_name && !params[field_name]) {
				params['Diag_did'] = '';
				params['AutopsyPerformType_id'] = '';
				params['TumorAutopsyResultType_id'] = '';
			}
            if ('DiagResult_id' == field_name) {
				if ( !params[field_name] ) {
					params['DiagAttribDict_id'] = '';
				}
				else {
					if (getRegionNick() == 'perm') {
						form.diagResultStore.tableName = record.get('DiagAttribType_id') != 3 ? 'fed_DiagResult' : 'DiagResult';
						form.diagResultStore.reader.meta.baseParams.object = form.diagResultStore.tableName;
						form.diagResultStore.removeAll();
						form.diagResultStore.load({
							callback: function() {
								var index = form.diagResultStore.findBy(function(rec) {
									return (rec.get('DiagResult_id') == params[field_name]);
								});
								if (index >= 0) {
									params['DiagAttribDict_id'] = form.diagResultStore.getAt(index).get('DiagAttribDict_id');
									conf.outputValue = form.diagResultStore.getAt(index).get('DiagResult_Code') + '. ' + conf.outputValue;
								}
							}.createDelegate(this)
						});
					} else {
						var index = form.diagResultStore.findBy(function(rec) {
							return (rec.get('DiagResult_id') == params[field_name]);
						});
						if (index >= 0) {
							params['DiagAttribDict_id'] = form.diagResultStore.getAt(index).get('DiagAttribDict_id');
							conf.outputValue = form.diagResultStore.getAt(index).get('DiagResult_Code') + '. ' + conf.outputValue;
						}
					}
				}
            }
			if ('HistologicReasonType_id' == field_name) {
				if ( !params[field_name] ) {
					params['MorbusOnko_histDT'] = '';
					setValueTo('MorbusOnkoHistDT', {value: null, outputValue: empty_value});
					Ext.get('MorbusOnko_' + params['MorbusOnko_pid'] + '_contMorbusOnkoHistDT').setDisplayed('none');
				}
				else {
					Ext.get('MorbusOnko_' + params['MorbusOnko_pid'] + '_contMorbusOnkoHistDT').setDisplayed('block');
				}
			}
			if ('AutopsyPerformType_id' == field_name) {
				if (params[field_name] == 3) {
					params['TumorAutopsyResultType_id'] = 8;
				} else {
					params['TumorAutopsyResultType_id'] = '';
				}
			}
			params['Evn_pid'] = params['MorbusOnko_pid'];
			params['Mode'] = (params['EvnClass_SysNick'] == 'EvnSection')?'evnsection_viewform':'evnvizitpl_viewform';
            if(field_name == 'DiagAttribType_id'){
				// очищаем значения полей DiagResult, DiagAttribDict
				setValueTo('DiagResult');
				setValueTo('DiagAttribDict', {value: null, outputValue: empty_value});

				params['DiagResult_id'] = '';
				params['DiagAttribDict_id'] = '';
			}
            if(field_name == 'MorbusOnko_setDiagDT'){
				setValueTo('OnkoDiag', {value: null, outputValue: empty_value, field_name: 'OnkoDiag_mid'});
			}


			if ( getRegionNick() != 'kz' ) {
				Ext.get('MorbusOnko_' + params['MorbusOnko_pid'] + '_histDT_allowBlank').setDisplayed(getRegionNick() != 'kz' && !Ext.isEmpty(params['HistologicReasonType_id']) ? 'inline' : 'none');
			}

			var docheckEvnNotify = false;
			if (getRegionNick().inlist(['perm', 'msk']) && field_name == 'OnkoStatusYearEndType_id') {
				var OnkoStatusYearEndType_idOld = conf.elOutput.getAttribute('dataid');
				var OnkoStatusYearEndType_id = conf.value;
				if (
                    !!OnkoStatusYearEndType_idOld && OnkoStatusYearEndType_idOld.inlist([1,6,7]) &&
                    !!OnkoStatusYearEndType_id && OnkoStatusYearEndType_id.inlist([2,3,4,5])
				) {
					docheckEvnNotify = true;
				}
			}

			if (
				getRegionNick() == 'msk' &&
				field_name == 'TumorStage_id' &&
				conf.value &&
				conf.value.inlist([13, 14, 15, 16])
			) {
				setValueTo('OnkoStatusYearEndType', {value: 5, outputValue: 'клиническая группа IV'});
				params['OnkoStatusYearEndType'] = 5;
				checkPalliatRegistry({
					Person_id: form.Person_id,
					Diag_id: record.get('Diag_id')
				});
			}

			form.requestSaveWithShowInfoMsg('/?c=MorbusOnkoSpecifics&m=saveMorbusSpecific',
				params, 
				function(result) {
					if (result.success) {
						form.loadedSpecifics[params.MorbusOnko_pid]['onko'].isChanged = true;
						if(!conf.remove){
							conf.elOutput.update(conf.outputValue);
							if (typeof conf.type == 'id' || conf.type == 'id'){
								conf.elOutput.setAttribute('dataid',conf.value);
							}
							if(conf.name == 'DiagDead' || conf.name == 'EndDiag'){
								conf.elOutput.setAttribute('dataid',conf.value);
							}
							//form.checkDiagAttribPanel(name, el_data);
							// TypeError: this.keyNav is null http://redmine.swan.perm.ru/issues/95888
							if (
								(conf.name == 'MorbusOnkoBaseDeadDT' || conf.name == 'MorbusOnko_setDiagDT')
								&& conf.elInput
								&& conf.elInput.menu
								&& conf.elInput.menu.picker
							){
								conf.elInput.menu.picker.beforeDestroy = function() {
							        if(this.rendered){
							        	if(this.keyNav){
							        		this.keyNav.disable();
							        	}
							            this.keyNav = null;
							            Ext.destroy(
							                this.leftClickRpt,
							                this.rightClickRpt,
							                this.monthPicker,
							                this.eventEl,
							                this.mbtn,
							                this.todayBtn
							            );
							        }
							    }
							}
							onCancel(conf);
							if (conf.name == 'MorbusOnkoBaseDeadDT' && !conf.value) {
								//в зависимых полях автоматически должно очистится значение
								setValueTo('DiagDead', {field_name: 'Diag_did'});
								setValueTo('AutopsyPerformType');
								setValueTo('TumorAutopsyResultType');
							}
							if (conf.name == 'AutopsyPerformType') {
								if (conf.value == 3) {
									//в поле  «Результат аутопсии применительно к данной опухоли» автоматически должно заполняться значение «неизвестно»,
									setValueTo('TumorAutopsyResultType', {value: 8, outputValue: langs('(неизвестно)')});
								} else {
									//в поле «Результат аутопсии применительно к данной опухоли» автоматически должно очистится значение
									setValueTo('TumorAutopsyResultType');
								}
							}
							if (getRegionNick() == 'perm' && conf.name == 'TumorStage' && !(conf.value && conf.value >= 9 && conf.value <= 16)) {
								//в зависимых полях автоматически должно очистится значение
								setValueTo('OnkoLateDiagCause');
							}
						}
						if (docheckEvnNotify) {
							Ext.Ajax.request({
								url: '/?c=MorbusOnkoSpecifics&m=checkRegister',
								params: {
									Person_id: form.Person_id,
									Diag_id: params.Diag_id
								},
								success: function(response) {
									var data = JSON.parse(response.responseText);
									if (data.canInclude != 2) {
										return false;
									}

									checkEvnNotify({
										Evn_id: params.MorbusOnko_pid
										,EvnDiagPLSop_id: params.EvnDiagPLSop_id || null
										,MorbusType_SysNick: 'onko'
										,callback: function(success) {
											var node = form.Tree.getNodeById(form.data.Code +'_'+ form.data.id);
											form.requireCheckChange = false;
											form.loadTreeNode({
												node: node.parentNode,
												selectById: node.id,
												callback: function(tl,n){
													form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
												}
											});
										}
									});
								}
							});
						}
					}
				}, form);
		};
		
		form.changed_fields = {};
		
		if(!this.input_cmp_list) this.input_cmp_list = {};
		
		var getBaseConfig = function(options){
			var selectFn = function () {return true;};

			if ( options.type == 'id' ) {
				selectFn = function(f, r, i) {
					var n = null;

					if ( typeof r == 'object' && !Ext.isEmpty(r.get(f.valueField)) ) {
						n = r.get(f.valueField);
					}

					f.fireEvent('change', f, n);
				}
			}

			return {
				hideLabel: true
				,renderTo: options.elInputId
				,listeners:
				{
					blur: function(f) {
                        if (f.disableBlurAction) {
                            return false;
                        }
						options.elInput = f;
						onCancel(options);
                        return true;
					},
					render: function(f) {
                        //log('listeners render');
						if(options.type == 'id') {
							//if(!f.getStore() || f.getStore().getCount()==0) log('not store: ' + options.field_name);
							var dataid = options.elOutput.getAttribute('dataid');
							if(!Ext.isEmpty(dataid)) {
								f.setValue(parseInt(dataid));
							}
						} else {
							f.setValue(params[options.field_name]);
						}
					},
					change: function(f,n,o) {
                        if (f.disableBlurAction) {
                            return false;
                        }
						if(options.type == 'date') {
							options.outputValue = (n)?n.format('d.m.Y'):empty_value;
							options.value = (n)?n.format('d.m.Y'):null;
						}
						if(options.type.inlist(['string','int'])) {
							options.outputValue = (n)?n:empty_value;
							options.value = n || null;
						}

						if ( options.field_name.inlist(['OnkoT_fid', 'OnkoN_fid', 'OnkoM_fid', 'TumorStage_fid']) ) {
							var val, code, name;
							var outputValue;
							if ( !Ext.isEmpty(n) ) {
								val = cmp.getFieldValue(fname + '_did');
								code = cmp.getFieldValue(fname + 'Link_CodeStage');
								name = cmp.getFieldValue(fname + '_Name');
							}
							var index = form[fname + 'Store'].findBy(function(rec) {
								return (rec.get(fname + '_id') == val);
							});
							outputValue = (val && form[fname + 'Store'].getAt(index)) ? form[fname + 'Store'].getAt(index).get(fname + '_Name') : empty_value;
							setValueTo(fname, {value: val, outputValue: outputValue});
						}

						if(options.type == 'id') {
							var rec = (n)?f.getStore().getById(n):false;
							if(rec) {
								options.value = n;
								if (options.field_name.inlist(['OnkoT_fid', 'OnkoN_fid', 'OnkoM_fid', 'TumorStage_fid'])) {
									options.outputValue = '<span style="color: #c00;">' + rec.get(options.codeField) + '.</span> ' + rec.get(f.displayField);
								} else if(options.codeField) {
									options.outputValue = rec.get(options.codeField) + '. ' + rec.get(f.displayField);
								} else {
									options.outputValue = rec.get(f.displayField);
								}
							} else {
								options.value = 0;
								options.outputValue = empty_value;
							}
						}
						options.elInput = f;
						onChange(options);
                        return true;
					},
					select: selectFn
				}
			};
		};
		
		eloutputid = 'MorbusOnko_'+ el_data.object_id +'_input'+name;
		elinputid = 'MorbusOnko_'+ el_data.object_id +'_inputarea'+name;
		eloutput = Ext.get(eloutputid);
		ct = Ext.get(elinputid);
		
		var
			field,
			fieldsList = new Array(),
			linkStore,
			record = form.viewFormDataStore.getById('MorbusOnko_'+ morbus_id),
			withDiagAndSpr = {
				'OnkoM': new Array(),
				'OnkoN': new Array(),
				'OnkoT': new Array(),
				'TumorStage': new Array()
			},
			withoutDiag = {
				'OnkoM': new Array(),
				'OnkoN': new Array(),
				'OnkoT': new Array(),
				'TumorStage': new Array()
			},
			withoutSpr = {
				'OnkoM': new Array(),
				'OnkoN': new Array(),
				'OnkoT': new Array(),
				'TumorStage': new Array()
			};

		if ( name.inlist([ 'OnkoMF', 'OnkoNF', 'OnkoTF', 'TumorStageF' ]) ) {
			fieldsList.push(name.slice(0, -1));
		}
		else if ( name == 'OnkoTreatment' ) {
			fieldsList = [ 'OnkoM', 'OnkoN', 'OnkoT' ];
		}
		
		if ( fieldsList.length > 0 && !Ext.isEmpty(params['Diag_id']) ) {
			var filterDate = Date.parseDate(!Ext.isEmpty(params['Evn_disDate']) ? params['Evn_disDate'] : getGlobalOptions().date, 'd.m.Y');

			for ( var i in fieldsList ) {
				field = fieldsList[i];

				if ( typeof field != 'string' ) {
					continue;
				}

				linkStore = form[field + 'LinkStore'];

				if ( !linkStore ) {
					continue;
				}

				linkStore.each(function(rec) {
					// добавить фильтр по params['Evn_disDate']
					if (
						(Ext.isEmpty(rec.get(field + 'Link_begDate')) || rec.get(field + 'Link_begDate') <= filterDate)
						&& (Ext.isEmpty(rec.get(field + 'Link_endDate')) || rec.get(field + 'Link_endDate') >= filterDate)
					) {
						if ( !Ext.isEmpty(rec.get('Diag_id')) && rec.get('Diag_id') == params['Diag_id'] ) {
							if ( !Ext.isEmpty(rec.get(field + '_fid')) ) {
								withDiagAndSpr[field].push(rec.get(field + 'Link_id'));
							}
							else {
								withoutSpr[field].push(rec.get('Diag_id'));
							}
						}
						else if ( Ext.isEmpty(rec.get('Diag_id')) && !Ext.isEmpty(rec.get(field + '_fid')) ) {
							withoutDiag[field].push(rec.get(field + 'Link_id'));
						}
					}
				});
			}
		}

		switch(name){
			case 'firstSignDT'://дата появления первых признаков заболевания
			case 'firstVizitDT'://дата первого обращения
			case 'setDiagDT'://Дата установления диагноза
            case 'MorbusBaseSetDT'://дата взятия на учет в ОД
            case 'MorbusBaseDisDT'://дата снятия с учета в ОД
            case 'MorbusOnkoBaseDeadDT'://дата смерти
            case 'MorbusOnkoTakeDT'://дата взятия материала
            case 'MorbusOnkoHistDT'://дата регистрации отказа / противопоказания
                if(ct && !this.input_cmp_list[eloutputid]) {
                    var field_name;
                    switch (name) {
                        case 'MorbusBaseSetDT'://дата
                            field_name = 'MorbusBase_setDT';
                            break;
                        case 'MorbusBaseDisDT'://дата
                            field_name = 'MorbusBase_disDT';
                            break;
                        case 'MorbusOnkoBaseDeadDT'://дата
                            field_name = 'MorbusOnkoBase_deadDT';
                            break;
                        case 'MorbusOnkoTakeDT'://дата
                            field_name = 'MorbusOnko_takeDT';
                            break;
                        case 'MorbusOnkoHistDT'://дата
                            field_name = 'MorbusOnko_histDT';
                            break;
                        default:field_name = 'MorbusOnko_'+ name;
                            break;
                    }
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'date'
						,field_name: field_name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: null
						,elInputWrap: ct
						,elInput: null
					});
					config.maxValue = getGlobalOptions().date;
					config.width = 90;
					cmp = new sw.Promed.SwDateField(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'NumHisto'://номер гистологического исследования
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						 name: name
						,type: 'string'
						,field_name: 'MorbusOnko_'+ name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 100;
					config.maxLength = 20;
					//config.maskRe = new RegExp("^[0-9]*$");
					//config.allowDecimals = false;
					//config.allowNegative = false;
					cmp = new Ext.form.TextField(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'IsMainTumor':
			case 'IsTumorDepoUnknown':
			case 'IsTumorDepoLympha':
			case 'IsTumorDepoBones':
			case 'IsTumorDepoLiver':
			case 'IsTumorDepoLungs':
			case 'IsTumorDepoBrain':
			case 'IsTumorDepoSkin':
			case 'IsTumorDepoKidney':
			case 'IsTumorDepoOvary':
			case 'IsTumorDepoPerito':
			case 'IsTumorDepoMarrow':
			case 'IsTumorDepoOther':
			case 'IsTumorDepoMulti':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: 'MorbusOnko_'+ name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 70;
                    config.hideEmptyRow = ('IsMainTumor' == name);
					config.comboSubject = 'YesNo';
					cmp = new sw.Promed.SwCommonSprLikeCombo(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'OnkoTreatment':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name + '_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 200;
					config.comboSubject = name;
					config.allowBlank = (getRegionNick() == 'kz');
					config.lastQuery = '';
					config.moreFields = [
						{name: 'OnkoTreatment_begDate', type: 'date', dateFormat: 'd.m.Y' },
						{name: 'OnkoTreatment_endDate', type: 'date', dateFormat: 'd.m.Y' }
					];
					config.onLoadStore = function() {
						cmp.getStore().clearFilter();

						// Фильтация на дату окончания случая
						cmp.getStore().filterBy(function(rec) {
							return (
								(Ext.isEmpty(rec.get('OnkoTreatment_begDate')) || rec.get('OnkoTreatment_begDate') <= checkDate)
								&& (Ext.isEmpty(rec.get('OnkoTreatment_endDate')) || rec.get('OnkoTreatment_endDate') >= checkDate)
							);
						});
						cmp.baseFilterFn = function(rec) {
							return (
								(Ext.isEmpty(rec.get('OnkoTreatment_begDate')) || rec.get('OnkoTreatment_begDate') <= checkDate)
								&& (Ext.isEmpty(rec.get('OnkoTreatment_endDate')) || rec.get('OnkoTreatment_endDate') >= checkDate)
							);
						};
					};
					cmp = new sw.Promed.SwCommonSprLikeCombo(config);
					cmp.focus(true, 500);

					cmp.on('change', function(f,n,o) {
						var morbusRecord = form.viewFormDataStore.getById('MorbusOnko_'+ morbus_id);

						if ( morbusRecord ) {
							var index = f.getStore().findBy(function(rec) {
								return (rec.get('OnkoTreatment_id') == n);
							}), OnkoTreatment_Code;

							if ( index >= 0 ) {
								OnkoTreatment_Code = f.getStore().getAt(index).get('OnkoTreatment_Code');
								morbusRecord.set('OnkoTreatment_Code', f.getStore().getAt(index).get('OnkoTreatment_Code'));
							}
							else {
								morbusRecord.set('OnkoTreatment_Code', null);
							}

							if ( getRegionNick() != 'kz' ) {
								// Добавляем или убираем *
								if ( (withDiagAndSpr.OnkoT.length > 0 || (withoutDiag.OnkoT.length > 0 && withoutSpr.OnkoT.length == 0)) && OnkoTreatment_Code === 0 && person_age_on_evn_date >= 18 ) {
									Ext.get('MorbusOnko_OnkoT_allowBlank').setDisplayed('inline');
								}
								else {
									Ext.get('MorbusOnko_OnkoT_allowBlank').setDisplayed('none');
								}

								if ( (withDiagAndSpr.OnkoN.length > 0 || (withoutDiag.OnkoN.length > 0 && withoutSpr.OnkoN.length == 0)) && OnkoTreatment_Code === 0 && person_age_on_evn_date >= 18 ) {
									Ext.get('MorbusOnko_OnkoN_allowBlank').setDisplayed('inline');
								}
								else {
									Ext.get('MorbusOnko_OnkoN_allowBlank').setDisplayed('none');
								}

								if ( (withDiagAndSpr.OnkoM.length > 0 || (withoutDiag.OnkoM.length > 0 && withoutSpr.OnkoM.length == 0)) && OnkoTreatment_Code === 0 && person_age_on_evn_date >= 18 ) {
									Ext.get('MorbusOnko_OnkoM_allowBlank').setDisplayed('inline');
								}
								else {
									Ext.get('MorbusOnko_OnkoM_allowBlank').setDisplayed('none');
								}

								if ( !Ext.isEmpty(n) && OnkoTreatment_Code != 5 && OnkoTreatment_Code != 6 ) {
									Ext.get('MorbusOnko_TumorStage_allowBlank').setDisplayed('inline');
								}
								else {
									Ext.get('MorbusOnko_TumorStage_allowBlank').setDisplayed('none');
								}
							}

							morbusRecord.commit();
							form.viewFormDataStore.commitChanges();
						}
					});

					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'TumorStage':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name + '_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.allowBlank = (getRegionNick() == 'kz');
					config.width = 200;
					config.enableKeyEvents = true;
					config.loadParams = getRegionNumber().inlist([101]) ? {mode: 1} : {mode: 2}; // только region_id=null, kz - свои
					config.lastQuery = '';
					config.onLoadStore = function() {
						cmp.getStore().clearFilter();
					};
					cmp = new sw.Promed.SwTumorStageNewCombo(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'TumorStageF':
				if(ct && !this.input_cmp_list[eloutputid]) {
					var fname = name.substr(0, 10);
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: fname
						,type: 'id'
						,field_name: fname + '_fid'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,codeField: fname+'Link_CodeStage'
						,elInputWrap: ct
						,elInput: null
					});
					config.allowBlank = !(getRegionNick() != 'kz' && !Ext.isEmpty(params.OnkoTreatment_id) && params.OnkoTreatment_Code != 5 && params.OnkoTreatment_Code != 6);
					config.width = 200;
					config.loadParams = getRegionNumber().inlist([101]) ? {mode: 1} : {mode: 2}; // только region_id=null, kz - свои
					config.lastQuery = '';
					config.valueField = fname+'_id';
					config.displayField = fname+'_Name';
					config.tpl = new Ext.XTemplate(
						'<tpl for="."><div class="x-combo-list-item">',
						'<table style="border: 0;">',
						'<td style="width: 35px;"><font color="red">{'+fname+'Link_CodeStage}&nbsp;</font></td>',
						'<td><span style="font-weight: bold;">{'+fname+'_Name}</span></td>',
						'</tr></table>',
						'</div></tpl>'
					);
					config.store = new Ext.db.AdapterStore({
						dbFile: 'Promed.db',
						tableName: 'fed_' + fname,
						key: fname + 'Link_id',
						autoLoad: true,
						listeners: {
							'load': function(store) {
								cmp.setValue(cmp.getValue());
								config.onLoadStore(store);
							}
						},
						fields: [
							{ name: fname+'_id', mapping: fname+'_id' },
							{ name: fname+'_Name', mapping: fname+'_Name' },
							{ name: fname+'_did', mapping: fname+'_did' },
							{ name: fname+'Link_id', mapping: fname+'Link_id' },
							{ name: fname+'Link_CodeStage', mapping: fname+'Link_CodeStage' }
						],
						sortInfo: {
							field: fname+'_id'
						},
						getById: function(id) { 
							var index = cmp.getStore().findBy(function(rec) {
								if (rec.get(fname+'_id') == id) {
									return true;
								} else {
									return false;
								}
							});
							if (index >= 0) {
								return cmp.getStore().getAt(index);
							}
							return false;
						}
					});
					config.onLoadStore = function() {
						cmp.getStore().clearFilter();

						if ( getRegionNick() != 'kz' ) {
							cmp.getStore().filterBy(function(rec) {
								if ( withDiagAndSpr[fname].length > 0 ) {
									return rec.get(fname + 'Link_id').inlist(withDiagAndSpr[fname]);
								}
								else if ( withoutSpr[fname].length > 0 || withoutDiag[fname].length > 0 ) {
									return rec.get(fname + 'Link_id').inlist(withoutDiag[fname]);
								}
								else {
									return false;
								}
							});
							cmp.baseFilterFn = function(rec) {
								if ( withDiagAndSpr[fname].length > 0 ) {
									return rec.get(fname + 'Link_id').inlist(withDiagAndSpr[fname]);
								}
								else if ( withoutSpr[fname].length > 0 || withoutDiag[fname].length > 0 ) {
									return rec.get(fname + 'Link_id').inlist(withoutDiag[fname]);
								}
								else {
									return false;
								}
							};
						}
					};
					cmp = new sw.Promed.SwBaseLocalCombo(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'DiagAttribType':
				if(ct && !this.input_cmp_list[eloutputid]) {
					var
						arrDiagAttribType = new Array(),
						arrDiagResult = new Array();
					
					var filterDate = Date.parseDate(!Ext.isEmpty(params['Evn_disDate']) ? params['Evn_disDate'] : getGlobalOptions().date, 'd.m.Y');
					form.DiagnosisResultDiagLinkStore.clearFilter();
					form.DiagnosisResultDiagLinkStore.filterBy(function(rec) {
						return (
							(Ext.isEmpty(rec.get('DiagnosisResultDiagLink_endDate')) || rec.get('DiagnosisResultDiagLink_endDate') >= filterDate) &&
							(Ext.isEmpty(rec.get('DiagnosisResultDiagLink_begDate')) || rec.get('DiagnosisResultDiagLink_begDate') <= filterDate)
						);
					});

					if ( !Ext.isEmpty(params['Diag_id']) ) {
						form.DiagnosisResultDiagLinkStore.each(function(rec) {
							if ( rec.get('Diag_id') == params['Diag_id'] && !Ext.isEmpty(rec.get('DiagAttribType_id')) && !rec.get('DiagAttribType_id').inlist(arrDiagAttribType) ) {
								arrDiagAttribType.push(rec.get('DiagAttribType_id'));
							}
							if ( rec.get('Diag_id') == params['Diag_id'] && !Ext.isEmpty(rec.get('DiagResult_id')) && !rec.get('DiagResult_id').inlist(arrDiagResult) ) {
								arrDiagResult.push(rec.get('DiagResult_id'));
							}
						});
					}
					if (arrDiagResult.length == 0) {
						form.DiagnosisResultDiagLinkStore.each(function(rec) {
							if ( !Ext.isEmpty(rec.get('Diag_id')) && !Ext.isEmpty(rec.get('DiagAttribType_id')) && !rec.get('DiagAttribType_id').inlist(arrDiagAttribType) ) {
								arrDiagAttribType.push(rec.get('DiagAttribType_id'));
							}
							if ( !Ext.isEmpty(rec.get('Diag_id')) && !Ext.isEmpty(rec.get('DiagResult_id')) && !rec.get('DiagResult_id').inlist(arrDiagResult) ) {
								arrDiagResult.push(rec.get('DiagResult_id'));
							}
						});
					}

					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name + '_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 200;
					config.comboSubject = name;
					config.onLoadStore = function() {
						cmp.getStore().clearFilter();

						if (getRegionNick() != 'perm') {
							if ( arrDiagAttribType.length > 0 ) {
								cmp.getStore().filterBy(function(rec) {
									return rec.get(name + '_id').inlist(arrDiagAttribType);
								});
								cmp.baseFilterFn = function(rec) {
									return rec.get(name + '_id').inlist(arrDiagAttribType);
								};
							}
						}
					};
					cmp = new sw.Promed.SwCommonSprLikeCombo(config);

					cmp.on('change', function(f,n,o) {
						var eloutputidDiagResult = 'MorbusOnko_'+ el_data.object_id +'_inputDiagResult';

						if ( typeof form.input_cmp_list[eloutputidDiagResult] == 'object' ) {
							form.input_cmp_list[eloutputidDiagResult].getStore().clearFilter();

							if ( !Ext.isEmpty(n) ) {
								form.input_cmp_list[eloutputidDiagResult].getStore().filterBy(function(rec) {
									return (rec.get(name + '_id') == n && rec.get('DiagResult_id').inlist(arrDiagResult));
								});
							}
						}
					});

					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'DiagResult':
				if(ct && !this.input_cmp_list[eloutputid]) {
					var arrDiagResult = new Array();
					
					var filterDate = Date.parseDate(!Ext.isEmpty(params['Evn_disDate']) ? params['Evn_disDate'] : getGlobalOptions().date, 'd.m.Y');
					form.DiagnosisResultDiagLinkStore.clearFilter();
					form.DiagnosisResultDiagLinkStore.filterBy(function(rec) {
						return (
							(Ext.isEmpty(rec.get('DiagnosisResultDiagLink_endDate')) || rec.get('DiagnosisResultDiagLink_endDate') >= filterDate) &&
							(Ext.isEmpty(rec.get('DiagnosisResultDiagLink_begDate')) || rec.get('DiagnosisResultDiagLink_begDate') <= filterDate)
						);
					});

					if ( !Ext.isEmpty(params['Diag_id']) ) {
						form.DiagnosisResultDiagLinkStore.each(function(rec) {
							if ( rec.get('Diag_id') == params['Diag_id'] && !Ext.isEmpty(rec.get('DiagResult_id')) && !rec.get('DiagResult_id').inlist(arrDiagResult) ) {
								arrDiagResult.push(rec.get('DiagResult_id'));
							}
						});
					}
					if (arrDiagResult.length == 0) {
						form.DiagnosisResultDiagLinkStore.each(function(rec) {
							if ( !Ext.isEmpty(rec.get('Diag_id')) && !Ext.isEmpty(rec.get('DiagResult_id')) && !rec.get('DiagResult_id').inlist(arrDiagResult) ) {
								arrDiagResult.push(rec.get('DiagResult_id'));
							}
						});
					}

					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name + '_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.autoLoad = false;
					config.lastQuery = '';
					config.width = 200;
					config.prefix = 
						!getRegionNick().inlist(['ekb', 'perm']) 
						? 'fed_' 
						: (getRegionNick() != 'perm' || record.get('DiagAttribType_id') != 3 ? 'fed_' : '');
					config.comboSubject = name;
					config.moreFields = [
						{name: 'DiagAttribType_id', mapping: 'DiagAttribType_id'},
						{name: 'DiagAttribDict_id', mapping: 'DiagAttribDict_id'}
					];
					cmp = new sw.Promed.SwCommonSprLikeCombo(config);

					cmp.on('change', function(f,n,o) {
						var DiagAttribDict_id;

						if ( !Ext.isEmpty(n) ) {
							DiagAttribDict_id = cmp.getFieldValue('DiagAttribDict_id');
						}
						
						if (getRegionNick() == 'perm') {
							form.diagAttribDictStore.tableName = record.get('DiagAttribType_id') != 3 ? 'fed_DiagAttribDict' : 'DiagAttribDict';
							form.diagAttribDictStore.reader.meta.baseParams.object = form.diagAttribDictStore.tableName;
							form.diagAttribDictStore.removeAll();
							form.diagAttribDictStore.load({
								callback: function() {
									var index = form.diagAttribDictStore.findBy(function(rec) {
										return (rec.get('DiagAttribDict_id') == DiagAttribDict_id);
									});

									setValueTo('DiagAttribDict', {value: DiagAttribDict_id, outputValue: form.diagAttribDictStore.getAt(index).get('DiagAttribDict_Name') || empty_value});
									setValueTo('DiagAttribDict', {value: DiagAttribDict_id, outputValue: form.diagAttribDictStore.getAt(index).get('DiagAttribDict_Code') + '. ' + form.diagAttribDictStore.getAt(index).get('DiagAttribDict_Name') || empty_value});
								}.createDelegate(this)
							});
						} else {
							var index = form.diagAttribDictStore.findBy(function(rec) {
								return (rec.get('DiagAttribDict_id') == DiagAttribDict_id);
							});

							setValueTo('DiagAttribDict', {value: DiagAttribDict_id, outputValue: form.diagAttribDictStore.getAt(index).get('DiagAttribDict_Name') || empty_value});
							setValueTo('DiagAttribDict', {value: DiagAttribDict_id, outputValue: form.diagAttribDictStore.getAt(index).get('DiagAttribDict_Code') + '. ' + form.diagAttribDictStore.getAt(index).get('DiagAttribDict_Name') || empty_value});
						}
					});

					cmp.getStore().load({
						callback: function() {
							if (getRegionNick() != 'perm' || record.get('DiagAttribType_id') != 3) {
								var
									eloutputidDiagAttribType = 'MorbusOnko_'+ el_data.object_id +'_inputDiagAttribType',
									DiagAttribType_id = params['DiagAttribType_id'];

								if ( typeof form.input_cmp_list[eloutputidDiagAttribType] == 'object' ) {
									DiagAttribType_id = form.input_cmp_list[eloutputidDiagAttribType].getValue();
								}

								if ( !Ext.isEmpty(DiagAttribType_id) ) {
									cmp.getStore().filterBy(function(rec) {
										return (rec.get('DiagAttribType_id') == DiagAttribType_id && rec.get('DiagResult_id').inlist(arrDiagResult));
									});
									cmp.baseFilterFn = function(rec) {
										return (rec.get('DiagAttribType_id') == DiagAttribType_id && rec.get('DiagResult_id').inlist(arrDiagResult));
									};
								}	
							}
						}
					});

					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
            case 'HistologicReasonType':
				if(ct && !this.input_cmp_list[eloutputid]) {
					var filterDate = Date.parseDate(!Ext.isEmpty(params['Evn_disDate']) ? params['Evn_disDate'] : getGlobalOptions().date, 'd.m.Y');

					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name + '_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.lastQuery = '';
					config.width = 200;
					config.comboSubject = name;
					config.moreFields = [
						{name: 'HistologicReasonType_begDT', type: 'date', dateFormat: 'd.m.Y' },
						{name: 'HistologicReasonType_endDT', type: 'date', dateFormat: 'd.m.Y' }
					];
					config.onLoadStore = function() {
						cmp.getStore().clearFilter();

						cmp.getStore().filterBy(function(rec) {
							return (
								(!rec.get('HistologicReasonType_begDT')  || rec.get('HistologicReasonType_begDT') <= filterDate)
								&& (!rec.get('DeseaseType_endDT') || rec.get('DeseaseType_endDT') >= filterDate)
							);
						});
						cmp.baseFilterFn = function(rec) {
							return (
								(!rec.get('HistologicReasonType_begDT')  || rec.get('HistologicReasonType_begDT') <= filterDate)
								&& (!rec.get('HistologicReasonType_endDT') || rec.get('HistologicReasonType_endDT') >= filterDate)
							);
						};
					};
					cmp = new sw.Promed.SwCommonSprLikeCombo(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'TumorPrimaryMultipleType':
			case 'OnkoLesionSide':
			case 'OnkoRegType':
			case 'OnkoRegOutType':
			case 'TumorCircumIdentType':
			case 'OnkoLateDiagCause':
            case 'AutopsyPerformType':
            case 'TumorAutopsyResultType':
            case 'OnkoPostType':
            case 'OnkoStatusYearEndType':
            case 'OnkoVariance':
            case 'OnkoRiskGroup':
            case 'OnkoResistance':
            case 'OnkoStatusBegType':
				if(ct && !this.input_cmp_list[eloutputid]) {
                    if ( name.inlist(['AutopsyPerformType','TumorAutopsyResultType'])
                        && (Ext.isEmpty(this.changed_fields['MorbusOnkoBase_deadDT'])
                        || Ext.isEmpty(this.changed_fields['MorbusOnkoBase_deadDT'].value))
                        && Ext.isEmpty(params['MorbusOnkoBase_deadDT'])
                        && getRegionNick() != 'kz'
                        ) {
                        break;
                    }

                    if ( name == 'TumorAutopsyResultType'
                        && (Ext.isEmpty(this.changed_fields['AutopsyPerformType_id'])
                        || !this.changed_fields['AutopsyPerformType_id'].value.toString().inlist(['2','3']))
                        && !(params['AutopsyPerformType_id'] && params['AutopsyPerformType_id'].toString().inlist(['2','3']))
                        ) {
                        break;
                    }

                    if ( name == 'OnkoLateDiagCause'
                    	&& getRegionNick() == 'perm'
                        && (
                        	Ext.isEmpty(this.changed_fields['TumorStage_id'])
                        	|| 
                        	!(this.changed_fields['TumorStage_id'] >= 9 && this.changed_fields['TumorStage_id'] <= 16)
                        	)
                        && !(params['TumorStage_id'] && params['TumorStage_id'] >= 9 && params['TumorStage_id'] <= 16)
                        ) {
                        break;
                    }
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name + '_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 200;
					config.comboSubject = name;
					cmp = new sw.Promed.SwCommonSprLikeCombo(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'OnkoInvalidType':
				ct.setDisplayed('block');
				eloutput.setDisplayed('none');
				config = getBaseConfig({
					name: name
					,type: 'id'
					,field_name: name +'_id'
					,elOutputId: eloutputid
					,elInputId: elinputid
					,elOutput: eloutput
					,outputValue: empty_value
					,elInputWrap: ct
					,elInput: null

				});
				config.width = 200;
				config.comboSubject = name;
				cmp = new sw.Promed.SwCommonSprLikeCombo(config);
				cmp.focus(true, 500);
				this.input_cmp_list[eloutputid] = cmp;
				break;
			case 'OnkoT':
			case 'OnkoN':
			case 'OnkoM':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name + '_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.allowBlank = !(getRegionNick() != 'kz');
					config.width = 65;
					config.comboSubject = name;
					config.lastQuery = '';
					config.onLoadStore = function() {
						cmp.getStore().clearFilter();
					};
					cmp = new sw.Promed.SwCommonSprLikeCombo(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'OnkoTF':
			case 'OnkoNF':
			case 'OnkoMF':
				if(ct && !this.input_cmp_list[eloutputid]) {
					var fname = name.substr(0, 5);
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: fname
						,type: 'id'
						,field_name: fname + '_fid'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,codeField: fname+'Link_CodeStage'
						,elInputWrap: ct
						,elInput: null
					});
					config.allowBlank = !(getRegionNick() != 'kz' && (withDiagAndSpr[fname].length > 0 || (withoutDiag[fname].length > 0 && withoutSpr[fname].length == 0)) && params.OnkoTreatment_Code === 0 && person_age_on_evn_date >= 18);
					config.width = 100;
					config.lastQuery = '';
					config.valueField = fname+'_id';
					config.displayField = fname+'_Name';
					config.tpl = new Ext.XTemplate(
						'<tpl for="."><div class="x-combo-list-item">',
						'<table style="border: 0;">',
						'<td style="width: 35px;"><font color="red">{'+fname+'Link_CodeStage}&nbsp;</font></td>',
						'<td><span style="font-weight: bold;">{'+fname+'_Name}</span></td>',
						'</tr></table>',
						'</div></tpl>'
					);
					config.store = new Ext.db.AdapterStore({
						dbFile: 'Promed.db',
						tableName: 'fed_' + fname,
						key: fname + 'Link_id',
						autoLoad: true,
						listeners: {
							'load': function(store) {
								cmp.setValue(cmp.getValue());
								config.onLoadStore(store);
							}
						},
						fields: [
							{ name: fname+'_id', mapping: fname+'_id' },
							{ name: fname+'_Name', mapping: fname+'_Name' },
							{ name: fname+'_did', mapping: fname+'_did' },
							{ name: fname+'Link_id', mapping: fname+'Link_id' },
							{ name: fname+'Link_CodeStage', mapping: fname+'Link_CodeStage' }
						],
						sortInfo: {
							field: fname+'_id'
						},
						getById: function(id) { 
							var index = cmp.getStore().findBy(function(rec) {
								if (rec.get(fname+'_id') == id) {
									return true;
								} else {
									return false;
								}
							});
							if (index >= 0) {
								return cmp.getStore().getAt(index);
							}
							return false;
						}
					});
					config.onLoadStore = function() {
						cmp.getStore().clearFilter();

						if ( getRegionNick() != 'kz' ) {
							cmp.getStore().filterBy(function(rec) {
								if ( withDiagAndSpr[fname].length > 0 ) {
									return rec.get(fname + 'Link_id').inlist(withDiagAndSpr[fname]);
								}
								else if ( withoutSpr[fname].length > 0 || withoutDiag[fname].length > 0 ) {
									return rec.get(fname + 'Link_id').inlist(withoutDiag[fname]);
								}
								else {
									return false;
								}
							});
							cmp.baseFilterFn = function(rec) {
								if ( withDiagAndSpr[fname].length > 0 ) {
									return rec.get(fname + 'Link_id').inlist(withDiagAndSpr[fname]);
								}
								else if ( withoutSpr[fname].length > 0 || withoutDiag[fname].length > 0 ) {
									return rec.get(fname + 'Link_id').inlist(withoutDiag[fname]);
								}
								else {
									return false;
								}
							};
						}
					};
					cmp = new sw.Promed.SwBaseLocalCombo(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'OnkoDiag'://морфологический тип опухоли. (Гистология опухоли)
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: 'OnkoDiag_mid'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,codeField: 'OnkoDiag_Code'
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 350;
					config.listWidth = 500;
					config.hiddenName = 'OnkoDiag_mid';
					cmp = new sw.Promed.SwOnkoDiagCombo(config);
					var dataid = eloutput.getAttribute('dataid');
					var MorbusOnko_setDiagDT = getValidDT(params.MorbusOnko_setDiagDT, '');
					cmp.getStore().load({
						params: {
							where: 'where '+(dataid ? ('OnkoDiag_id = '+ dataid +' or '):'')+'OnkoDiag_Code like \'%/%\''
							,clause: {where: (dataid ? ('record["OnkoDiag_id"] == "'+ dataid +'" || '):'')+'record["OnkoDiag_pid"] > "0"'}
						},
						callback: function(){
							if ( typeof MorbusOnko_setDiagDT == 'object' ) {
								cmp.getStore().filterBy(function(rec) {
									return (
										(Ext.isEmpty(rec.get('OnkoDiag_begDate')) || rec.get('OnkoDiag_begDate') <= MorbusOnko_setDiagDT)
										&& (Ext.isEmpty(rec.get('OnkoDiag_endDate')) || rec.get('OnkoDiag_endDate') >= MorbusOnko_setDiagDT)
									);
								});

								cmp.baseFilterFn = function(rec) {
									return (
										(Ext.isEmpty(rec.get('OnkoDiag_begDate')) || rec.get('OnkoDiag_begDate') <= MorbusOnko_setDiagDT)
										&& (Ext.isEmpty(rec.get('OnkoDiag_endDate')) || rec.get('OnkoDiag_endDate') >= MorbusOnko_setDiagDT)
									);
								}
							}
							if(cmp.getStore().getCount() > 0 && dataid && dataid > 0) {
								cmp.setValue(dataid);
							}
						},
						scope: cmp
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'Lpu'://в какое медицинское учреждение
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: 'Lpu_foid'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: null
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 200;
					cmp = new sw.Promed.SwLpuLocalCombo(config);
					var dataid = eloutput.getAttribute('dataid');
					cmp.getStore().load({
						callback: function(){
							if(this.getStore().getCount() > 0) {
								this.setValue(dataid);
							}
						},
						scope: cmp
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
            case 'DiagDead'://
                if(ct && !this.input_cmp_list[eloutputid]) {
                    /*if ( (Ext.isEmpty(this.changed_fields['MorbusOnkoBase_deadDT'])
                        || Ext.isEmpty(this.changed_fields['MorbusOnkoBase_deadDT'].value))
                        && Ext.isEmpty(params['MorbusOnkoBase_deadDT'])
                        ) {
                        break;
                    }*/
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');

                    /*var config_data = {
                        name: name
                        ,type: 'id'
                        ,field_name: 'Diag_did'
                        ,elOutputId: eloutputid
                        ,elInputId: elinputid
                        ,elOutput: eloutput
                        ,outputValue: empty_value
                        ,codeField: 'Diag_Code'
                        ,elInputWrap: ct
                        ,elInput: null
                    };
                    config = getBaseConfig(config_data);
                    config.width = 350;
                    config.listWidth = 600;
                    config.hiddenName = name;*/
                    //var change = Ext.apply(config.listeners.change);
                    //delete config.listeners.change;
                    //cmp = new sw.Promed.SwDiagCombo(config);
                    var filterDate = null;
					cmp = new sw.Promed.SwDiagCombo({
						checkAccessRights: true
						,renderTo: elinputid
						,width: 360
						,filterDate: filterDate
					});
					cmp.on('blur', function(f) {
						var options = {
							name: name
							,type: 'id'
							,field_name: field_name
							,elOutputId: eloutputid
							,elInputId: elinputid
							,elOutput: eloutput
							,outputValue: empty_value
							,elInputWrap: ct
							,elInput: null
						};
						options.elInput = f;
						if(!Ext.get('DiagSearchTreeWindow') || !Ext.get('DiagSearchTreeWindow').isVisible()){
							onCancel(options);
						}
					});
					cmp.on('render', function(f) {
						var dataid = options.elOutput.getAttribute('dataid');
						if(options.type == 'id') {
							//if(!f.getStore() || f.getStore().getCount()==0) log('not store: ' + options.field_name);
							if(!Ext.isEmpty(dataid) && parseInt(dataid) != 0) {
								f.setValue(parseInt(dataid));
							} else {
								f.setValue(null);
							}
						} else {
							f.setValue(dataid);
						}
					});
					cmp.on('change', function(f,n,o) {
						if(!n){
							return false;
						}
						var options = {
							name: name
							,type: 'id'
							,field_name: field_name
							,elOutputId: eloutputid
							,elInputId: elinputid
							,elOutput: eloutput
							,outputValue: empty_value
							,elInputWrap: ct
							,elInput: null
						};
						var rec = (n)?f.getStore().getById(n):false;
						if(rec) {
							options.value = n;
							options.outputValue = rec.get('Diag_Code') + '. ' + rec.get(f.displayField);
						} else {
							options.value = 0;
							options.outputValue = empty_value;
						}

						options.elInput = f;
						if(!Ext.get('DiagSearchTreeWindow') || !Ext.get('DiagSearchTreeWindow').isVisible()){
							onChange(options);
						}
					});
                    var dataid = eloutput.getAttribute('dataid');
                    if (dataid && dataid > 0) {
                        cmp.getStore().load({
                            params: {where: 'where Diag_id = '+dataid},
                            callback: function(){
                                if(this.getStore().getCount() > 0 && dataid && dataid > 0) {
                                    this.setValue(dataid);
                                    this.getStore().each(function(record) {
                                        if (record.get('Diag_id') == dataid) {
                                            cmp.fireEvent('select', cmp, record, 0);
                                        }
                                    });
                                }
                                this.focus(true, 100);
                            },
                            scope: cmp
                        });
                    } else {
                        cmp.focus(true, 100);
                    }
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'EndDiag'://
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');

                    var filterDate = null;
					cmp = new sw.Promed.SwDiagCombo({
						checkAccessRights: true
						,renderTo: elinputid
						,width: 360
						,filterDate: filterDate
					});
					cmp.on('blur', function(f) {
						var options = {
							name: name
							,type: 'id'
							,field_name: field_name
							,elOutputId: eloutputid
							,elInputId: elinputid
							,elOutput: eloutput
							,outputValue: empty_value
							,elInputWrap: ct
							,elInput: null
						};
						options.elInput = f;
						if(!Ext.get('DiagSearchTreeWindow') || !Ext.get('DiagSearchTreeWindow').isVisible()){
							onCancel(options);
						}
					});
					cmp.on('render', function(f) {
						var dataid = options.elOutput.getAttribute('dataid');
						if(options.type == 'id') {
							//if(!f.getStore() || f.getStore().getCount()==0) log('not store: ' + options.field_name);
							if(!Ext.isEmpty(dataid) && parseInt(dataid) != 0) {
								f.setValue(parseInt(dataid));
							} else {
								f.setValue(null);
							}
						} else {
							f.setValue(dataid);
						}
					});
					cmp.on('change', function(f,n,o) {
						if(!n){
							return false;
						}
						var options = {
							name: name
							,type: 'id'
							,field_name: field_name
							,elOutputId: eloutputid
							,elInputId: elinputid
							,elOutput: eloutput
							,outputValue: empty_value
							,elInputWrap: ct
							,elInput: null
						};
						var rec = (n)?f.getStore().getById(n):false;
						if(rec) {
							options.value = n;
							options.outputValue = rec.get(f.displayField);
						} else {
							options.value = 0;
							options.outputValue = empty_value;
						}

						options.elInput = f;
						if(!Ext.get('DiagSearchTreeWindow') || !Ext.get('DiagSearchTreeWindow').isVisible()){
							onChange(options);
						}
					});
                    var dataid = eloutput.getAttribute('dataid');
                    if (dataid && dataid > 0) {
                        cmp.getStore().load({
                            params: {where: 'where Diag_id = '+dataid},
                            callback: function(){
                                if(this.getStore().getCount() > 0 && dataid && dataid > 0) {
                                    this.setValue(dataid);
                                    this.getStore().each(function(record) {
                                        if (record.get('Diag_id') == dataid) {
                                        	var diag_code = record.get('Diag_Code').substr(0, 3);
                                        	cmp.baseFilterFn = function(rec){
                                        		if(typeof rec.get == 'function'){
                                        			return (rec.get('Diag_Code').substr(0, 3) == diag_code);
                                        		} else {
                                        			return (rec.attributes.Diag_Code.substr(0, 3) == diag_code);
                                        		}
                                        	};
                                            cmp.fireEvent('select', cmp, record, 0);
                                        }
                                    });
                                }
                                this.focus(true, 100);
                            },
                            scope: cmp
                        });
                    } else {
                        cmp.focus(true, 100);
                    }
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'NumCard'://
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    config = getBaseConfig({
                        name: name
                        ,type: 'string'
                        ,field_name: 'MorbusOnkoBase_NumCard'
                        ,elOutputId: eloutputid
                        ,elInputId: elinputid
                        ,elOutput: eloutput
                        ,outputValue: empty_value
                        ,elInputWrap: ct
                        ,elInput: null
                    });
					config.maskRe = new RegExp(".*");
					config.maxLength = 10; // В БД поле varchar(10)
                    config.width = 70;
                    cmp = new Ext.form.TextField(config);
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
		}
	},
	openMorbusOnkoSpecificForm: function(options) {
		if(!options.action || !options.object || !options.eldata) {
			return false;
		}
		
		var win_name,
			object_id,
			data,
			mhdata,
			evndata,
			evnsysnick = this.defineParentEvnClass().EvnClass_SysNick,
			params = {formParams: {}};
			
		/*
		log('openMorbusOnkoSpecificForm');
		log(options);
		*/

		if(options.action == 'add') {
			object_id = (options.eldata.object_id.split('_').length > 1)?options.eldata.object_id.split('_')[1]:options.eldata.object_id;
			mhdata = options.mhdata || this.getObjectData('MorbusOnko',object_id);
			if(!mhdata) {
				return false;
			}
		} else {
			object_id = (options.eldata.object_id.split('_').length > 1)?options.eldata.object_id.split('_')[1]:options.eldata.object_id;
			data = this.getObjectData(options.object,object_id);
			if(!data) {
				return false;
			}
			mhdata = options.mhdata || this.getObjectData('MorbusOnko',data.Morbus_id);
			if(!mhdata) {
				return false;
			}
		}
		if(mhdata.Morbus_id < 0) {
			sw.swMsg.alert(langs('Сообщение'), langs('Заболевание на человека не заведено'));
			return false;
		}
		if(mhdata.EvnClass_SysNick) {
			evnsysnick = mhdata.EvnClass_SysNick;
		}
		evndata = this.getObjectData(evnsysnick,mhdata.MorbusOnko_pid);
		if(!evndata) {
			return false;
		}
		if(evndata.accessType == 'view' && !options.action.inlist(['view', 'print'])) {
			return false;
		}
        //log(evndata);
		params.callback = function() {
			this.loadedSpecifics[mhdata.MorbusOnko_pid]['onko'].isChanged = true;
			var reload_params = {
				section_code: options.object,
				object_key: options.object +'_id',
				object_value: object_id,
				parent_object_key: 'Morbus_id',
				parent_object_value: mhdata.Morbus_id,
				param_name: 'MorbusOnko_pid',
				param_value: mhdata.MorbusOnko_pid,
				MorbusOnkoVizitPLDop_id: mhdata.MorbusOnkoVizitPLDop_id,
				MorbusOnkoLeave_id: mhdata.MorbusOnkoLeave_id,
				section_id: options.object +'List_'+ mhdata.MorbusOnko_pid +'_'+ mhdata.Morbus_id
			};
			this.reloadViewForm(reload_params);

			if (options.object.inlist(['MorbusOnkoChemTer','MorbusOnkoGormTer'])) {
				this.reloadViewForm({
					MorbusOnkoLeave_id: mhdata.MorbusOnkoLeave_id,
					MorbusOnkoVizitPLDop_id: mhdata.MorbusOnkoVizitPLDop_id,
					object_key: "MorbusOnkoDrug_id",
					object_value: object_id,
					param_name: "MorbusOnko_pid",
					param_value: mhdata.MorbusOnko_pid,
					parent_object_key: "Morbus_id",
					parent_object_value: mhdata.Morbus_id,
					section_code: "MorbusOnkoDrug",
					section_id: 'MorbusOnkoDrugList_'+mhdata.MorbusOnko_pid+'_'+mhdata.Morbus_id
				});
			}

			// список общих услуг тоже обновить
			this.reloadViewForm({
				section_code: ( evnsysnick == 'EvnSection' ? 'EvnUslugaStac' : 'EvnUsluga'),
				object_key: 'EvnUsluga_id',
				object_value: 0,
				parent_object_key: evnsysnick+'_id',
				parent_object_value: mhdata.MorbusOnko_pid,
				section_id: ( evnsysnick == 'EvnSection' ? 'EvnUslugaStacList_' : 'EvnUslugaList_') + mhdata.MorbusOnko_pid
			});

			//обновление схемы лекарственной терапии
			this.reloadViewForm({
				object_key: "DrugTherapyScheme_id",
				object_value: object_id,
				param_name: "MorbusOnko_pid",
				param_value: mhdata.MorbusOnko_pid,
				parent_object_key: "Morbus_id",
				parent_object_value: mhdata.Morbus_id,
				section_code: "DrugTherapyScheme",
				section_id: 'DrugTherapySchemeList_'+mhdata.MorbusOnko_pid+'_'+mhdata.Morbus_id
			});

		}.createDelegate(this);

        params.formParams = {
            Morbus_id: mhdata.Morbus_id,
            MorbusOnko_id: mhdata.MorbusOnko_id,
            MorbusOnkoBase_id: mhdata.MorbusOnkoBase_id,
            Person_id: this.Person_id,
            PersonEvn_id: this.PersonEvn_id,
            Server_id: this.Server_id,
            Lpu_id: getGlobalOptions().lpu_id,
            Lpu_uid: getGlobalOptions().lpu_id
        };
        params.action = options.action;
		params.MorbusOnkoVizitPLDop_id = mhdata.MorbusOnkoVizitPLDop_id;
		params.MorbusOnkoLeave_id = mhdata.MorbusOnkoLeave_id;
        switch(options.object) {
            case 'MorbusOnkoBasePersonState':
                win_name = 'swMorbusOnkoBasePersonStateWindow';
                params.formParams.Evn_id = mhdata.MorbusOnko_pid;
                if(options.action == 'add') {
                    params.formParams.MorbusOnkoBasePersonState_id = null;
                } else {
                    params.formParams.MorbusOnkoBasePersonState_id = object_id;
                }
                break;
            case 'MorbusOnkoBasePS':
                win_name = 'swMorbusOnkoBasePSWindow';
                params.formParams.Evn_id = mhdata.MorbusOnko_pid;
                if(options.action == 'add') {
                    params.formParams.MorbusOnkoBasePS_id = null;
                } else {
                    params.formParams.MorbusOnkoBasePS_id = object_id;
                }
                break;
            case 'MorbusOnkoSopDiag':
				win_name = 'swMorbusOnkoSopDiagWindow';
				params.formParams.Evn_id = null;
				if (options.action == 'add') {
					params.formParams.MorbusOnkoBaseDiagLink_id = null;
				} else {
					params.formParams.MorbusOnkoBaseDiagLink_id = object_id;
				}
				break;
			case 'OnkoConsult':
				win_name = 'swOnkoConsultEditWindow';
				params.MorbusOnko_id = mhdata.MorbusOnko_id;
				params.MorbusOnkoVizitPLDop_id = mhdata.MorbusOnkoVizitPLDop_id;
				params.MorbusOnkoLeave_id = mhdata.MorbusOnkoLeave_id;
				params.EvnVizitPL_id = mhdata.MorbusOnko_pid;
				if (options.action == 'add') {
					params.OnkoConsult_id = null;
				} else {
					params.OnkoConsult_id = object_id;
				}
				break;
			case 'MorbusOnkoDrug':
				win_name = 'swMorbusOnkoDrugWindow';
				if (options.action == 'add') {
					params.formParams.Evn_id = mhdata.MorbusOnko_pid;
					params.formParams.MorbusOnkoDrug_id = null;
					params.formParams.MorbusOnkoVizitPLDop_id = mhdata.MorbusOnkoVizitPLDop_id;
					params.formParams.MorbusOnkoDiagPLStom_id = mhdata.MorbusOnkoDiagPLStom_id;
					params.formParams.MorbusOnkoLeave_id = mhdata.MorbusOnkoLeave_id;
				} else {
					params.formParams.MorbusOnkoDrug_id = object_id;
				}
				break;
			case 'MorbusOnkoSpecTreat':
				win_name = 'swMorbusOnkoSpecTreatWindow';
				params.formParams.Evn_id = null;
				params.formParams.MorbusOnkoVizitPLDop_id = mhdata.MorbusOnkoVizitPLDop_id;
				params.formParams.MorbusOnkoLeave_id = mhdata.MorbusOnkoLeave_id;
				if (options.action == 'add') {
					params.formParams.MorbusOnkoSpecTreat_id = null;
				} else {
					params.formParams.MorbusOnkoSpecTreat_id = object_id;
				}
				break;
			case 'MorbusOnkoLink':
				win_name = 'swMorbusOnkoLinkDiagnosticsWindow';
				var el = document.getElementById('MorbusOnko_'+mhdata.MorbusOnko_pid+'_'+mhdata.Morbus_id+'_DiagValue');
				if(el){
					var diagVal = el.getAttribute("dataid");
					if(!Ext.isEmpty(diagVal)){
						params.formParams.Diag_id = diagVal;
					}
				}
				params.formParams.MorbusOnkoVizitPLDop_id = mhdata.MorbusOnkoVizitPLDop_id;
				params.formParams.MorbusOnkoLeave_id = mhdata.MorbusOnkoLeave_id;
				params.formParams.MorbusOnkoDiagPLStom_id = mhdata.MorbusOnkoDiagPLStom_id;
				params.formParams.Evn_disDate = mhdata.Evn_disDate ? mhdata.Evn_disDate : getGlobalOptions().date;
				params.formParams.HistologicReasonType_id = mhdata.HistologicReasonType_id;
				if (options.action == 'add') {
					params.formParams.MorbusOnkoLink_id = null;
				} else {
					params.formParams.MorbusOnkoLink_id = object_id;
				}
				break;
			case 'MorbusOnkoRefusal':
				win_name = 'swMorbusOnkoRefusalWindow';
				params.formParams.Evn_id = null;
				params.formParams.MorbusOnkoVizitPLDop_id = mhdata.MorbusOnkoVizitPLDop_id;
				params.formParams.MorbusOnkoLeave_id = mhdata.MorbusOnkoLeave_id;
				if (options.action == 'add') {
					params.isRefusal = options.isRefusal;
					params.formParams.MorbusOnkoRefusal_id = null;
				} else {
					params.formParams.MorbusOnkoRefusal_id = object_id;
				}
				break;
            case 'MorbusOnkoChemTer':
                win_name = 'swEvnUslugaOnkoChemEditWindow';
                params.formParams.EvnUslugaOnkoChem_pid = mhdata.MorbusOnko_pid;
                if(options.action == 'add') {
                    params.EvnUslugaOnkoChem_id = null;
                    params.formParams.EvnUslugaOnkoChem_id = null;
                } else {
                    params.EvnUslugaOnkoChem_id = object_id;
                    params.formParams.EvnUslugaOnkoChem_id = object_id;
                }
                break;
            case 'MorbusOnkoGormTer':
                win_name = 'swEvnUslugaOnkoGormunEditWindow';
                params.formParams.EvnUslugaOnkoGormun_pid = mhdata.MorbusOnko_pid;
                if(options.action == 'add') {
                    params.EvnUslugaOnkoGormun_id = null;
                    params.formParams.EvnUslugaOnkoGormun_id = null;
                } else {
                    params.EvnUslugaOnkoGormun_id = object_id;
                    params.formParams.EvnUslugaOnkoGormun_id = object_id;
                }
                break;
            case 'MorbusOnkoNonSpecTer':
                win_name = 'swEvnUslugaOnkoNonSpecEditWindow';
                params.formParams.EvnUslugaOnkoNonSpec_pid = mhdata.MorbusOnko_pid;
                if(options.action == 'add') {
                    params.EvnUslugaOnkoNonSpec_id = null;
                    params.formParams.EvnUslugaOnkoNonSpec_id = null;
                } else {
                    params.EvnUslugaOnkoNonSpec_id = object_id;
                    params.formParams.EvnUslugaOnkoNonSpec_id = object_id;
                }
                break;
            case 'MorbusOnkoRadTer':
                win_name = 'swEvnUslugaOnkoBeamEditWindow';
				params.formParams.EvnUslugaOnkoBeam_pid = mhdata.MorbusOnko_pid;
                if(options.action == 'add') {
                    params.EvnUslugaOnkoBeam_id = null;
                    params.formParams.EvnUslugaOnkoBeam_id = null;
                } else {
                    params.EvnUslugaOnkoBeam_id = object_id;
                    params.formParams.EvnUslugaOnkoBeam_id = object_id;
                }
                break;
            case 'MorbusOnkoHirTer':
                win_name = 'swEvnUslugaOnkoSurgEditWindow';
				params['ParentEvnClass_SysNick'] = evnsysnick;
				params[evnsysnick + '_id'] = mhdata.MorbusOnko_pid;
				params.formParams.EvnUslugaOnkoSurg_pid = mhdata.MorbusOnko_pid;
                if(options.action == 'add') {
                    params.EvnUslugaOnkoSurg_id = null;
                    params.formParams.EvnUslugaOnkoSurg_id = null;
                } else {
                    params.EvnUslugaOnkoSurg_id = object_id;
                    params.formParams.EvnUslugaOnkoSurg_id = object_id;
                }
                break;
            default:
                return false;
        }
		getWnd(win_name).show(params);
	},
	createMorbusHepatitisInputCmp: function(name, el_data) {
		if(this.allowSpecificEdit == false) {
			return false;
		}
		var evnsysnick = this.defineParentEvnClass().EvnClass_SysNick;
		var object_id = el_data.object_id.split('_')[1];
		var obj, params, s;
		if(name == 'LabConfirmResult' || name == 'FuncConfirmResult') {
			s = (name == 'LabConfirmResult')?'Lab':'Func';
			obj = 'MorbusHepatitis'+s+'Confirm';
			params = this.getObjectData(obj,object_id);
			if(typeof params != 'object' || !params.MorbusHepatitis_id) {
				return false;
			}
			params = this.getObjectData('MorbusHepatitis',params.MorbusHepatitis_id);
			if(typeof params != 'object') {
				return false;
			}
			params['MorbusHepatitis'+s+'Confirm_id'] = object_id;
		} else { 
			obj = 'MorbusHepatitis';
			params = this.getObjectData(obj,object_id);
			if(typeof params != 'object') {
				return false;
			}
		}
		var form = this;
		var cmp, ct, elinputid, eloutputid, config;
		var empty_value = form.getEmptyValueText();
		var onChange = function(conf){
			if(conf.elOutput) {
				conf.elOutput.setDisplayed('inline');
				conf.elOutput.update(conf.outputValue);
				if(conf.type == 'id') conf.elOutput.setAttribute('dataid',conf.value);
				conf.elInputWrap.setDisplayed('none');
				conf.elInput.destroy();
				this.input_cmp_list[conf.elOutputId] = false;
				var requestParams = {
					Mode: (evnsysnick == 'EvnVizitPL')?'evnvizitpl_viewform':'evnsection_viewform'
					,Morbus_id: params.Morbus_id
					,MorbusBase_id: params.MorbusBase_id
					,MorbusHepatitis_id: params.MorbusHepatitis_id
					,Person_id: params.Person_id
					,Evn_pid: params.MorbusHepatitis_pid
				};
				requestParams[conf.field_name] = conf.value;
				if(conf.child_obj) {
					requestParams[conf.child_obj] = params[conf.child_obj +'_id'];
				}
				
				this.requestSaveWithShowInfoMsg('/?c=MorbusHepatitis&m=set'+ conf.field_name, 
					requestParams, 
					function(response_obj) {
						if ( response_obj.success == true ) {
							form.loadedSpecifics[params.MorbusHepatitis_pid]['hepa'].isChanged = true;
						} 
						if (typeof conf.requestCallback == 'function') {
							conf.requestCallback(response_obj);
						}
					}, this);
			}
		}.createDelegate(this);
		
		var onCancel = function(conf){
			conf.elOutput.setDisplayed('inline');
			conf.elInputWrap.setDisplayed('none');
			conf.elInput.destroy();
			this.input_cmp_list[conf.elOutputId] = false;
		}.createDelegate(this);
		
		if(!this.input_cmp_list) this.input_cmp_list = {};
		
		var getBaseConfig = function(options){
			return {
				hideLabel: true
				,renderTo: options.elInputId
				,listeners:
				{
					blur: function(f) {
						options.elInput = f;
						onCancel(options);
					},
					render: function(f) {
						if(options.type == 'id') {
							//if(!f.getStore() || f.getStore().getCount()==0) log('not store: ' + options.field_name);
							var dataid = options.elOutput.getAttribute('dataid');
							if(!Ext.isEmpty(dataid)) {
								f.setValue(parseInt(dataid));
							}
						} else {
							f.setValue(params[options.field_name]);
						}
					},
					change: function(f,n,o) {
						if(options.type == 'date') {
							options.outputValue = (n)?n.format('d.m.Y'):empty_value;
							options.value = (n)?n.format('d.m.Y'):null;
						}
						if(options.type.inlist(['string','int'])) {
							options.outputValue = (n)?n:empty_value;
							options.value = n || null;
						}
						if(options.type == 'id') {
							options.outputValue = (n)?f.getStore().getById(n).get(f.displayField):empty_value;
							options.value = n || null;
						}
						options.elInput = f;
						onChange(options);
					}
				}
			};
		};
		
		eloutputid = obj+ '_'+ el_data.object_id +'_input'+name;
		elinputid = obj+ '_'+ el_data.object_id +'_inputarea'+name;
		eloutput = Ext.get(eloutputid);
		ct = Ext.get(elinputid);
		
		switch(name){
			case 'EpidAns':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: 'HepatitisEpidemicMedHistoryType_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: null
						,elInputWrap: ct
						,elInput: null
					});
					config.autoLoad = false;
					config.comboSubject = 'HepatitisEpidemicMedHistoryType';
					config.typeCode = 'int';
					config.width = 340;
					config.listWidth = 400;
					cmp = new sw.Promed.SwCommonSprCombo(config);
					var dataid = eloutput.getAttribute('dataid');
					cmp.getStore().load({
						callback: function(){
							if(this.getStore().getCount() > 0) {
								this.setValue(dataid);
							}
						},
						scope: cmp
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'EpidNum':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'int'
						,field_name: 'MorbusHepatitis_EpidNum'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: null
						,elInputWrap: ct
						,elInput: null
					});
					config.hideLabel = true;
					config.allowDecimals = false;
					config.allowNegative = false;
					config.maskRe =  new RegExp("^[0-9]*$");
					config.width = 60;
					cmp = new Ext.form.NumberField(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'LabConfirmResult':
			case 'FuncConfirmResult':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'string'
						,field_name: 'MorbusHepatitis'+s+'Confirm_Result'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: null
						,elInputWrap: ct
						,elInput: null
						,child_obj: obj
					});
					config.hideLabel = true;
					config.width = 120;
					cmp = new Ext.form.TextField(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
		}
	},
	createEvnVKHtmlForm: function(name, el_data) {
		var EvnVK_id = el_data.object_id;
		var evnsysnick = 'EvnVK';
		var params = this.getObjectData(evnsysnick,EvnVK_id);
		if(typeof params != 'object') {
			return false;
		}
		if(params.accessType == 'view') {
			return false;
		}
		var form = this;
		var cmp, ct, elinputid, eloutputid, eloutput, config;
		var empty_value = '<span style="color: #666">Не указано</span>';

		var setValueTo = function (name, option) {
			if (!name) {
				return false;
			}
			if (!option) {
				option = {};
			}
			var field_name = name +'_id';
			if (option.field_name) {
				field_name = option.field_name;
			}
			if (!option.type) {
				option.type = 'id';
			}
			if (!option.value) {
				option.value = null;
			}
			if (!option.outputValue) {
				option.outputValue = empty_value;
			}
			var record = form.viewFormDataStore.getById('EvnVK_'+ EvnVK_id);
			if (record) {
				record.set(field_name, option.value);
				if (option.type == 'id' && record.get(field_name+'_Name')) {
					record.set(field_name+'_Name', option.outputValue);
				}
				record.commit(true);
				form.viewFormDataStore.commitChanges();
			}
			var elinputid = 'EvnVK_data_'+ el_data.object_id +'_input'+ name;
			if (form.input_cmp_list[elinputid]) {
				form.input_cmp_list[elinputid].setValue(option.value);
			} else {
				var el = Ext.get(elinputid);
				if (el) {
					if (option.type == 'id') {
						el.set({data_id: (option.value||'')});
					}
					el.update(option.outputValue);
				}
			}
			return true;
		};

		var onCancel = function(conf){
			conf.elOutput.setDisplayed('inline');
			conf.elInputWrap.setDisplayed('none');
			conf.elInput.destroy();
			form.input_cmp_list[conf.elOutputId] = false;
		};

		var onChange = function(conf) {
			// сохраняем изменения
			form.isFirstAdminCheck = false;
			form.requireCheckChange = true;
			var field_name = conf.field_name;
			params[field_name] = conf.value || '';
			form.loadMask.hide();
			conf.elOutput.update(conf.outputValue);
			conf.elOutput.setAttribute('dataid',conf.value);
			onCancel(conf);

		};

		form.changed_fields = {};

		if(!this.input_cmp_list) this.input_cmp_list = {};

		var getBaseConfig = function(options){
			return {
				hideLabel: true
				,autoLoad: true
				,renderTo: options.elInputId
				,allowBlank: form.getEvnVKAllowBlank(options.field_name)
				,listeners:
				{
					blur: function(f) {
						options.elInput = f;
						onCancel(options);
					},
					render: function(f) {
						var dataid = options.elOutput.getAttribute('dataid');
						if(options.type == 'id') {
							//if(!f.getStore() || f.getStore().getCount()==0) log('not store: ' + options.field_name);
							if(!Ext.isEmpty(dataid) && parseInt(dataid) != 0) {
								f.setValue(parseInt(dataid));
							} else {
								f.setValue(null);
							}
						} else {
							f.setValue(dataid);
						}
					},
					change: function(f,n,o) {
						if(options.type == 'date') {
							options.outputValue = (n)?n.format('d.m.Y'):empty_value;
							options.value = (n)?n.format('d.m.Y'):null;
						}
						if(options.type.inlist(['string','int'])) {
							options.outputValue = (n)?n:empty_value;
							options.value = n || '';
						}
						if(options.type == 'id') {
							var rec = (n)?f.getStore().getById(n):false;
							if(rec) {
								options.value = n;
								if(options.codeField) {
									options.outputValue = rec.get(options.codeField) + '. ' + rec.get(f.displayField);
								} else {
									options.outputValue = rec.get(f.displayField);
								}
							} else {
								options.value = 0;
								options.outputValue = empty_value;
							}
						}
						options.elInput = f;
						onChange(options);
					}
				}
			};
		};

		eloutputid = 'EvnVK_'+ el_data.object_id +'_input'+name;
		elinputid = 'EvnVK_'+ el_data.object_id +'_inputarea'+name;
		eloutput = Ext.get(eloutputid);
		ct = Ext.get(elinputid);

		switch(name){
			case 'NumProtocol'://Номер протокола
				if(ct && !this.input_cmp_list[eloutputid]) {
					var field_name = name;

					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'int'
						,field_name: 'EvnVK_'+field_name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: null
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 90;
					cmp = new Ext.form.NumberField(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'SetDate'://Дата экспертизы
			case 'DirectionDate'://Дата направления в бюро МСЭ
			case 'ConclusionDate'://Дата получения заключения МСЭ
			case 'ConclusionPeriodDate'://Cрок действия заключения
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					field_name = 'EvnVK_' + name;
					if (name == 'SetDate') {
						field_name = 'EvnVK_setDate';
					}
					config = getBaseConfig({
						name: name
						,type: 'date'
						,field_name: field_name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: null
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 90;
					if (field_name == 'EvnVK_ConclusionDate') {
						onChange = function(conf) {
							// сохраняем изменения

		                	form.isFirstAdminCheck = false;
							form.requireCheckChange = true;
							var field_name = conf.field_name;
							params[field_name] = conf.value || '';
							form.loadMask.hide();
							conf.elOutput.update(conf.outputValue);
							conf.elOutput.setAttribute('dataid',conf.value);

							form.setEvnVKAllowBlank('EvnVK_ConclusionDescr',Ext.isEmpty(conf.value));

							onCancel(conf);
						};
					}
					cmp = new sw.Promed.SwDateField(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'IsReserve'://Зарезервировано
			case 'IsUseStandard'://Использовались стандарты
			case 'IsAberration'://Нарушения
			case 'IsErrors'://Ошибки
			case 'IsResult'://Достижение результата
				if(ct && !this.input_cmp_list[eloutputid]) {
					field_name = 'EvnVK_' + name.charAt(0).toLowerCase() + name.slice(1);
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: field_name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 70;
					config.comboSubject = 'YesNo';
					if (field_name == 'EvnVK_isReserve') {
						onChange = function(conf) {
							// сохраняем изменения
		                	form.isFirstAdminCheck = false;
							form.requireCheckChange = true;
							var field_name = conf.field_name;
							params[field_name] = conf.value || '';
							form.loadMask.hide();
							conf.elOutput.update(conf.outputValue);
							conf.elOutput.setAttribute('dataid',conf.value);

							if (conf.value == 2) {
								form.setEvnVKAllowBlank('PatientStatusType_id',true);
								form.setEvnVKAllowBlank('CauseTreatmentType_id',true);
								form.setEvnVKAllowBlank('Diag_id',true);
								form.setEvnVKAllowBlank('ExpertiseNameType_id',true);
								form.setEvnVKAllowBlank('ExpertiseEventTypeLink_id',true);
								form.setEvnVKAllowBlank('ExpertiseNameSubjectType_id',true);
								form.setEvnVKAllowBlank('EvnVK_isAberration',true);
								form.setEvnVKAllowBlank('EvnVK_isErrors',true);
								form.setEvnVKAllowBlank('EvnVK_isResult',true);
								//form.setEvnVKAllowBlank('EvnVK_StickPeriod',true);
							} else {
								form.setEvnVKAllowBlank('PatientStatusType_id',false);
								form.setEvnVKAllowBlank('CauseTreatmentType_id',false);
								form.setEvnVKAllowBlank('Diag_id',false);
								form.setEvnVKAllowBlank('ExpertiseNameType_id',false);
								form.setEvnVKAllowBlank('ExpertiseEventTypeLink_id',false);
								form.setEvnVKAllowBlank('ExpertiseNameSubjectType_id',false);
								form.setEvnVKAllowBlank('EvnVK_isAberration',false);
								form.setEvnVKAllowBlank('EvnVK_isErrors',false);
								form.setEvnVKAllowBlank('EvnVK_isResult',false);
								//form.setEvnVKAllowBlank('EvnVK_StickPeriod',false);
							}

							onCancel(conf);
						};
					}
					cmp = new sw.Promed.SwCommonSprLikeCombo(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'MedPersonal'://Направивший врач
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: 'MedPersonal_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.allowBlank = true;
					config.width = 280;
					config.editable = true;
					cmp = new sw.Promed.SwMedPersonalCombo(config);
					cmp.getStore().load({callback: function() {
						cmp.setValue(params['MedPersonal_id']);
					}});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'NumCard'://Номер ТАП/КВС
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'string'
						,field_name: 'EvnVK_NumCard'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config = Ext.apply(config,{
						editable: false,
						readOnly: true,
						width: 400,
						mode: 'local',
						triggerClass: 'x-form-search-trigger',
						onTriggerClick: function() {
							if( params.Person_id == null ) {
								sw.swMsg.alert(langs('Сообщение'), langs('Не выбран пациент!'));
								return false;
							}
							getWnd('swEvnPLEvnPSSearchWindow').show({
								Person_id: form.Person_id,
								onHide: function() {
									cmp.focus(false);
								},
								onSelect: function(persData) {
									eloutput.update(persData.Evn_NumCard);
									eloutput.setAttribute('dataid',persData.Evn_NumCard);
									params['EvnVK_NumCard'] = persData.Evn_NumCard;
									getWnd('swEvnPLEvnPSSearchWindow').hide();
									cmp.focus(true, 100);
									params['Evn_id'] = persData.Evn_id;

									var stick_all_el = Ext.get('EvnVK_'+ el_data.object_id +'_inputEvnStickAll');
									stick_all_el.update(empty_value);
									stick_all_el.setAttribute('dataid','');
									params['EvnStick_all'] = '';

									params['EvnStickBase_id'] = null;
								}.createDelegate(this)
							});
						}
					});
					cmp = new Ext.form.TriggerField(config);
					cmp.setValue(eloutput.getAttribute('dataid'));
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'PatientStatusType'://Статус пацинета
				/*if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: 'PatientStatusType_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 400;
					config.maskRe = /[а-яА-Я]/;
					config.forceSelection = true;
					cmp = new sw.Promed.SwPatientStatusTypeCombo(config);
					if (cmp.getStore().getCount() == 0) {
						cmp.getStore().load({callback: function() {
							cmp.setValue(params['PatientStatusType_id']);
						}});
					}
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}*/
				if(ct && !this.input_cmp_list[eloutputid])
				{
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'multudata'
						,field_name: 'PatientStatusType_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.clearBaseFilter = function() {
						this.baseFilterFn = null;
						this.baseFilterScope = null;
					}.createDelegate(this);
					config.setBaseFilter = function(fn, scope) {
						this.baseFilterFn = fn;
						this.baseFilterScope = scope || this;
					}.createDelegate(this);
					config.allowBlank = (getRegionNick()=='kz');
					config.multiSelect = (getRegionNick()!='kz');
					config.mode = 'local';
					config.anchor = '100%';
					config.width = 600;
					
					config.onChange = function(conf) {
						// сохраняем изменения
						params.PatientStatusType_List = conf.value;
					};
					
					config.fieldLabel = 'Статус пациента';
					config.store = new Ext.db.AdapterStore({
						dbFile: 'Promed.db',
						tableName: 'PatientStatusType',
						key: 'PatientStatusType_id',
						autoLoad: false,
						fields: [
							{name: 'PatientStatusType_id',  type:'int'},
							{name: 'PatientStatusType_SysNick',  type:'string'},
							{name: 'PatientStatusType_Name',  type:'string'}
						],
						sortInfo: {
							field: 'PatientStatusType_id'
						}
					});
					config.listeners = {
						'change': function(combo,value)
						{
						}.createDelegate(this)
					};
					config.displayField = 'PatientStatusType_Name';
					config.valueField = 'PatientStatusType_id';
					config.name = 'PatientStatusType_id';
					config.tpl = '<tpl for="."><div class="x-combo-list-item"><table height="20" style="border: 0;"><tr>'+
							'<td>{PatientStatusType_Name}</td>'+
							'</tr></table></div></tpl>';
					cmp = new Ext.ux.Andrie.Select(config);
					if (cmp.getStore().getCount() == 0) {
						cmp.getStore().load({callback: function() {
							var PatientStatusType_Str = params.PatientStatusType_List;
							cmp.setValue(PatientStatusType_Str.replace(/\s/g,''));
						}});
					}
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'Prof'://Профессия пациента
			case 'LVN'://ЛВН (ручной ввод)
			case 'WorkReleasePeriod'://Освобождение от работы (ручной ввод)
			case 'ExpertiseStickNumber'://Экспертиза временной нетрудоспособности №
			case 'StickPeriod'://Срок нетрудоспособности, дней
			case 'StickDuration'://Длительность пребывания в ЛПУ, дней
			case 'ConclusionDescr'://Заключение МСЭ
			case 'AddInfo'://Доп. информация
			case 'UseStandard'://Использовались стандарты подробности
			case 'AberrationDescr'://Нарушения подробности
			case 'ErrorsDescr'://Ошибки подробности
			case 'ResultDescr'://Достижение результата подробности
			case 'ExpertDescr'://Заключ. экспертов
			case 'MainDisease'://Основное заболевание
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'string'
						,field_name: 'EvnVK_'+ name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					if (field_name == 'EvnVK_ConclusionDescr') {
						onChange = function(conf) {
							// сохраняем изменения
		                	form.isFirstAdminCheck = false;
							form.requireCheckChange = true;
							var field_name = conf.field_name;
							params[field_name] = conf.value || '';
							form.loadMask.hide();
							conf.elOutput.update(conf.outputValue);
							conf.elOutput.setAttribute('dataid',conf.value);

							form.setEvnVKAllowBlank('EvnVK_ConclusionDate',Ext.isEmpty(conf.value));

							onCancel(conf);
						};
					}
					config.width = 280;
					cmp = new Ext.form.TextField(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'CauseTreatmentType'://Причина обращения
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: 'CauseTreatmentType_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 400;
					cmp = new sw.Promed.SwCauseTreatmentTypeCombo(config);
					if (cmp.getStore().getCount() == 0) {
						cmp.getStore().load({callback: function() {
							cmp.setValue(params['CauseTreatmentType_id']);
						}});
					}
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'Diag'://Диагноз основной
			case 'DiagS'://Диагноз сопутсвующий
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					if (name == 'Diag') {
						field_name = 'Diag_id';
					} else if (name == 'DiagS') {
						field_name = 'Diag_sid';
					}
					onChange = function(conf) {
						// сохраняем изменения
						form.isFirstAdminCheck = false;
						var field_name = conf.field_name;
						params[field_name] = conf.value || '';
						form.loadMask.hide();
						if (!Ext.isEmpty(cmp.getValue())) {
							conf.elOutput.update(cmp.getFieldValue('Diag_Code')+' '+cmp.getFieldValue('Diag_Name'));
						} else {
							conf.elOutput.update(empty_value);
						}
						conf.elOutput.setAttribute('dataid',conf.value);
					}
					/*config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: field_name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});*/
					var filterDate = null;
					cmp = new sw.Promed.SwDiagCombo({
						checkAccessRights: true
						,renderTo: elinputid
						,width: 360
						,filterDate: filterDate
					});
					cmp.on('blur', function(f) {
						var options = {
							name: name
							,type: 'id'
							,field_name: field_name
							,elOutputId: eloutputid
							,elInputId: elinputid
							,elOutput: eloutput
							,outputValue: empty_value
							,elInputWrap: ct
							,elInput: null
						};
						options.elInput = f;
						if(!Ext.get('DiagSearchTreeWindow') || !Ext.get('DiagSearchTreeWindow').isVisible()){
							onCancel(options);
						}
					});
					cmp.on('render', function(f) {
						var dataid = options.elOutput.getAttribute('dataid');
						if(options.type == 'id') {
							//if(!f.getStore() || f.getStore().getCount()==0) log('not store: ' + options.field_name);
							if(!Ext.isEmpty(dataid) && parseInt(dataid) != 0) {
								f.setValue(parseInt(dataid));
							} else {
								f.setValue(null);
							}
						} else {
							f.setValue(dataid);
						}
					});
					cmp.on('change', function(f,n,o) {
						if(!n){
							return false;
						}
						var options = {
							name: name
							,type: 'id'
							,field_name: field_name
							,elOutputId: eloutputid
							,elInputId: elinputid
							,elOutput: eloutput
							,outputValue: empty_value
							,elInputWrap: ct
							,elInput: null
						};
						var rec = (n)?f.getStore().getById(n):false;
						if(rec) {
							options.value = n;
							if(options.codeField) {
								options.outputValue = rec.get(options.codeField) + '. ' + rec.get(f.displayField);
							} else {
								options.outputValue = rec.get(f.displayField);
							}
						} else {
							options.value = 0;
							options.outputValue = empty_value;
						}

						options.elInput = f;
						onChange(options);
					});
					cmp.getStore().load({
						params: {where: 'where Diag_id = ' + params[field_name]},
						callback: function() {
							cmp.setValue(params[field_name]);
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'ExpertiseNameType'://Вид экспертизы
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: 'ExpertiseNameType_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 400;
					onChange = function(conf) {
						// сохраняем изменения
						form.isFirstAdminCheck = false;
						form.requireCheckChange = true;
						var field_name = conf.field_name;
						params[field_name] = conf.value || '';
						form.loadMask.hide();
						conf.elOutput.update(conf.outputValue);
						conf.elOutput.setAttribute('dataid',conf.value);
						params.ExpertiseNameType_Code = cmp.getFieldValue('ExpertiseNameType_Code');

						var el = Ext.get('EvnVK_'+ el_data.object_id +'_inputExpertiseEventTypeLink');
						el.update(empty_value);
						el.setAttribute('dataid',0);
						params.ExpertiseEventType_id = null;
						params.ExpertiseEventTypeLink_id = null;

						var hasDecisionVKTemplate = params.ExpertiseNameType_Code.inlist([1,2,5]);
						var button_el = Ext.get('EvnVK_'+ el_data.object_id +'_selectDecisionVK');
						if (button_el) {
							button_el.setDisplayed(hasDecisionVKTemplate?'block':'none');
						}

						onCancel(conf);

					};
					cmp = new sw.Promed.SwExpertiseNameTypeCombo(config);
					if (cmp.getStore().getCount() == 0) {
						cmp.getStore().load({callback: function() {
							cmp.setValue(params['ExpertiseNameType_id']);
						}});
					}
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'ExpertiseEventTypeLink'://Хар-ка случая экспертизы
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: 'ExpertiseEventTypeLink_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 400;
					onChange = function(conf) {
						// сохраняем изменения
						form.isFirstAdminCheck = false;
						form.requireCheckChange = true;
						var field_name = conf.field_name;
						params[field_name] = conf.value || '';
						form.loadMask.hide();
						conf.elOutput.update(conf.outputValue);
						conf.elOutput.setAttribute('dataid',conf.value);
						params.ExpertiseEventType_id = cmp.getFieldValue('ExpertiseEventType_id');

						onCancel(conf);
					};
					cmp = new sw.Promed.SwExpertiseEventTypeLinkCombo(config);
					cmp.lastQuery = '';
					cmp.getStore().load({
						callback: function() {
							cmp.getStore().filterBy(function(rec){
								return (rec.get('ExpertiseNameType_id')==params.ExpertiseNameType_id);
							});
							cmp.setAllowBlank(cmp.getStore().getCount()==0);
							form.setEvnVKAllowBlank('ExpertiseEventTypeLink_id',cmp.getStore().getCount()==0);
							cmp.setValue(params['ExpertiseEventTypeLink_id']);
							if ( params['ExpertiseEventTypeLink_id'] > 0 ) {
								cmp.setValue(params['ExpertiseEventTypeLink_id']);
							} else if (cmp.getStore().getCount() == 1) {
								cmp.setValue(cmp.getStore().getAt(0).get('ExpertiseEventTypeLink_id'));
								eloutput.update(cmp.getFieldValue('ExpertiseEventType_Name'));
								eloutput.setAttribute('dataid',cmp.getValue());
								params.ExpertiseEventTypeLink_id = cmp.getValue();
								params.ExpertiseEventType_id = cmp.getFieldValue('ExpertiseEventType_id');
							}
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'ExpertiseNameSubjectType'://Предмет экспертизы
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: 'ExpertiseNameSubjectType_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 400;
					cmp = new sw.Promed.SwExpertiseNameSubjectTypeCombo(config);
					if (cmp.getStore().getCount() == 0) {
						cmp.getStore().load({callback: function() {
							cmp.setValue(params['ExpertiseNameSubjectType_id']);
						}});
					}
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'EvnStickAll'://ЛВН
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'string'
						,field_name: 'EvnStick_all'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config = Ext.apply(config,{
						editable: false,
						readOnly: true,
						width: 400,
						mode: 'local',
						triggerClass: 'x-form-search-trigger',
						onStickSelect: function(data) {
							eloutput.update(data.EvnStick_all);
							eloutput.setAttribute('dataid',data.EvnStick_all);
							params['EvnStickBase_id'] = data.EvnStick_id;
							//if(stick_trigger.disabled) return false;

							Ext.Ajax.request({
								params: { EvnStick_id: data.EvnStick_id },
								url: '/?c=ClinExWork&m=getCountEvnStickToVK',
								callback: function(options, success, response) {
									form.setEvnVKAllowBlank('EvnVK_ExpertiseStickNumber', false);
									form.setEvnVKAllowBlank('EvnVK_StickPeriod', false);
									var el = Ext.get('EvnVK_' + EvnVK_id + '_inputExpertiseStickNumber')
									el.update(response.responseText);
									el.setAttribute(response.responseText);
									params['EvnVK_ExpertiseStickNumber'] = response.responseText;
								}
							});
						},
						onTriggerClick: function() {
							if( params.Person_id == null ) {
								sw.swMsg.alert(langs('Сообщение'), langs('Не выбран пациент!'));
								return false;
							}
							var evn_id = params['Evn_id'];
							getWnd('swEvnStickSearchWindow').show({
								Person_id: params.Person_id,
								Evn_id: evn_id || null,
								onHide: function() {
									cmp.focus(false);
								},
								onSelect: function(data) {
									getWnd('swEvnStickSearchWindow').hide();
									cmp.onStickSelect(data);
									cmp.focus(true, 100);
								}
							});
						}
					});
					cmp = new Ext.form.TriggerField(config);
					cmp.setValue(params['EvnStick_all']);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'EvnStickWorkRelease'://Период экспертизы
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'id'
						,field_name: name + '_id'
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config = Ext.apply(config,{
						editable: false,
						store: new Ext.data.Store({
							autoLoad: false,
							listeners: {
								load: function(s, r, i) {
									var combo = cmp;
									if ( s.getCount()==1 ) {
										combo.setValue(r[0].get('EvnStickWorkRelease_id'));
										eloutput.update(r[0].get('EvnStickWorkRelease_info'));
										eloutput.setAttribute('dataid',r[0].get('EvnStickWorkRelease_id'));
									} else if ( !Ext.isEmpty(combo.getValue()) ) {
										combo.setValue(combo.getValue());
									}
									if ( s.getCount()>1 ) {
										combo.focus(true);
										combo.expand();
									}
								}.createDelegate(this)
							},
							reader: new Ext.data.JsonReader({
								id: 'EvnStickWorkRelease_id'
							}, [
								{ mapping: 'EvnStickWorkRelease_id', name: 'EvnStickWorkRelease_id', type: 'int' },
								{ mapping: 'EvnStickWorkRelease_info', name: 'EvnStickWorkRelease_info', type: 'string' }
							]),
							url: '/?c=ClinExWork&m=getEvnStickWorkRelease'
						}),
						onTriggerClick: function() {
							if(cmp.getStore().getCount()>0) {
								if( cmp.isExpanded() ) {
									cmp.collapse();
								} else {
									cmp.focus(true);
									cmp.expand();
								}
							} else {
								sw.swMsg.alert(langs('Сообщение'), langs('Не выбран ЛВН'));
							}
						},
						hiddenName: 'EvnStickWorkRelease_id',
						valueField: 'EvnStickWorkRelease_id',
						displayField: 'EvnStickWorkRelease_info',
						width: 360
					});
					cmp = new sw.Promed.SwBaseLocalCombo(config);
					var stick_id = params['EvnStickBase_id'];
					cmp.getStore().load({params: {EvnStick_id: stick_id}});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'DecisionVK':
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					config = getBaseConfig({
						name: name
						,type: 'string'
						,field_name: 'EvnVK_' + name
						,elOutputId: eloutputid
						,elInputId: elinputid
						,elOutput: eloutput
						,outputValue: empty_value
						,elInputWrap: ct
						,elInput: null
					});
					config.width = 400;
					config.autoCreate = {tag: "textarea", autocomplete: "off", rows: 5, cols: 60};
					cmp = new Ext.form.TextArea(config);
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
		}
		cmp.validate();
	},
	selectDecisionVK: function(el_data) {
		var params = this.getObjectData('EvnVK',el_data.object_id);
		var expertise_name_type_id = Ext.get(el_data.section_id+'_inputExpertiseNameType').getAttribute('dataid');
		if (Ext.isEmpty(expertise_name_type_id) || expertise_name_type_id == 0) return;
		getWnd('swDecisionVKTemplateSelectWindow').show({
			ExpertiseNameType_id: expertise_name_type_id,
			onSelect: function(template_data) {
				var el = Ext.get(el_data.section_id+'_inputDecisionVK');
				el.update(template_data.DecisionVKTemplate_Name);
				el.setAttribute('dataid',template_data.DecisionVKTemplate_Name);
				params['EvnVK_DecisionVK'] = template_data.DecisionVKTemplate_Name;
			}
		});
	},
	printEvnVK: function(el_data) {
		var data = this.getObjectData('EvnVK', el_data.object_id);
		var params = {object: 'EvnVK', object_id: el_data.object_id};
		var checkResult = {success: true};

		var printFn = function() {
			if ( getRegionNick() == 'kz' ) {
				printBirt({
					'Report_FileName': 'VK_Protokol.rptdesign',
					'Report_Params': '&paramEvnVK_id=' + el_data.object_id,
					'Report_Format': 'pdf'
				});			}
			else {
				printBirt({
					'Report_FileName': 'VK_Protocol.rptdesign',
					'Report_Params': '&paramEvnVK_id=' + el_data.object_id,
					'Report_Format': 'pdf'
				});
			}
		};

		checkResult = this._checkEvnVK(data, params, 'print', printFn);

		if (!checkResult.success) {
			this.showWarningMsg({
				msg: checkResult.msg || null,
				links: checkResult.links || {}
			}, (checkResult.field || null), (checkResult.link || null), checkResult.params);
			return false;
		}
	},
	openQuarantineEditWindow: function (params) {
		var win = this;
		var showParams = {
			MedStaffFact_id: win.userMedStaffFact.MedStaffFact_id,
			Person_id: win.Person_id,
			Server_id: win.Server_id,
			action: 'add',
			callback: function() {
				win.reloadViewForm({
					section_code: 'SignalInformationAll',
					object_key: 'Person_id',
					object_value: win.Person_id,
					parent_object_key: 'Person_id',
					parent_object_value: win.Person_id,
					section_id: 'SignalInformationAll_' + win.Person_id
				});
			}
		};
		showParams = Ext.applyIf(params,showParams);
		getWnd('swPersonQuarantineEditWindow').show(showParams);
	},
	openEvnVKExpertEditWindow: function(action, el_data) {
		var form = this;

		var openWindow = function() {
			var sysnick = (action=='add')?'EvnVK':'EvnVKExpert';
			var data = form.getObjectData(sysnick,el_data.object_id);
			var params = {EvnVK_id: data.EvnVK_id};
			params.fromEvnVK = true;
			if (action=='add') {
				params.MedService_id = form.userMedStaffFact.MedService_id;
			} else {
				params.MedService_id = data.MedService_id;
				params.EvnVKExpert_id = data.EvnVKExpert_id;
				params.EvnVKExpert_IsChairman = data.EvnVKExpert_IsChairman;
				params.MedServiceMedPersonal_id = data.MedServiceMedPersonal_id;
				params.MedStaffFact_id = data.MedStaffFact_id;
				params.ExpertMedStaffType_id = data.ExpertMedStaffType_id;
				params.EvnVKExpert_isApproved = data.EvnVKExpert_isApproved;
				params.EvnVKExpert_Descr = data.EvnVKExpert_Descr;
			}
			var onHide = function() {
				var reload_params = {
					section_code: 'EvnVK',
					object_key: 'EvnVK_id',
					object_value: params.EvnVK_id,
					section_id: 'EvnVK_'+ params.EvnVK_id
				};
				form.reloadViewForm(reload_params);
			};

			getWnd('swClinExWorkSelectExpertWindow').show({action:action,params:params,onHide:onHide});
		}

		var sysnick = (action=='add')?'EvnVK':'EvnVKExpert';
		var data = this.getObjectData(sysnick, el_data.object_id);
		if (el_data.object == 'EvnVKExpert') {
			data = this.getObjectData('EvnVK', data.EvnVK_id);
		}

		var params = {object: 'EvnVK', object_id: data.EvnVK_id};
		var checkResult = {success: true};

		checkResult = this._checkEvnVK(data, params, 'openEvnVKExpertWindow', openWindow);

		if (!checkResult.success) {
			this.showWarningMsg({
				msg: checkResult.msg || null,
				links: checkResult.links || {}
			}, (checkResult.field || null), (checkResult.link || null), checkResult.params);
			return false;
		}
	},
	addEvnVKDiag: function(type, el_data) {
		var form = this;
		getWnd('swDiagSearchTreeWindow').show({
			onSelect: function(diagData) {
				var params = {
					Diag_id: diagData.Diag_id,
					DiagType: type,
					EvnVK_id: el_data.object_id
				}; 
					
				Ext.Ajax.request({
					url: '/?c=ClinExWork&m=saveEvnVKDiagOne',
					params: params,
					success: function(response, options) {
						var reload_params = {
							section_code: 'EvnVK',
							object_key: 'EvnVK_id',
							object_value: params.EvnVK_id,
							section_id: 'EvnVK_'+ params.EvnVK_id
						};
						form.reloadViewForm(reload_params);
					}
				});

				getWnd('swDiagSearchTreeWindow').hide();
				return true;
			}
		});
		
	},
	deleteEvnVKDiag: function(evnvk_id, evnvkdiaglink_id) {
		var form = this;
		var params = {
			EvnVKDiagLink_id: evnvkdiaglink_id
		};
			
		sw.swMsg.show({
			title: langs('Вопрос'),
			msg: 'Удалить диагноз?',
			icon: Ext.MessageBox.QUESTION,
			buttons: Ext.Msg.YESNO,
			fn: function ( buttonId ) {
				if ( buttonId == 'yes' ) {
					Ext.Ajax.request({
						url: '/?c=ClinExWork&m=deleteEvnVKDiagOne',
						params: params,
						success: function(response, options) {
							var reload_params = {
								section_code: 'EvnVK',
								object_key: 'EvnVK_id',
								object_value: evnvk_id,
								section_id: 'EvnVK_'+ evnvk_id
							};
							form.reloadViewForm(reload_params);
						}
					});
				}
			}.createDelegate(this)
		});
	},
	setEvnVKAllowBlank: function(field_name, allow) {
		this.EvnVKParams.fields[field_name].allowBlank = allow;
	},
	getEvnVKAllowBlank: function(field_name) {
		var allow = this.EvnVKParams.fields[field_name].allowBlank;
		return (allow==undefined)?true:allow;
	},
	_onEvnVKLoad: function(data) {
		var me = this;
		me.EvnVKParams = {};
		me.EvnVKParams.loadedData = Ext.apply({},data);
		var fields = {
			EvnVK_NumProtocol: {nick: 'NumProtocol', label: langs('Протокол заседания ВК номер')}
			,EvnVK_isReserve: {nick: 'IsReserve', label: langs('Зарезервировано')}
			,EvnVK_setDate: {nick: 'SetDate', label: langs('Дата экспертизы')}
			,MedPersonal_id: {nick: 'MedPersonal', label: langs('Врач, направивший на ВК')}
			,EvnVK_NumCard: {nick: 'NumCard', label: langs('Номер КВС(ТАП)')}
			,PatientStatusType_id: {nick: 'PatientStatusType', label: langs('Статус пациента')}
			,PatientStatusType_List: {nick: 'PatientStatusType_List', label: langs('Статус пациента')}
			,EvnVK_Prof: {nick: 'Prof', label: langs('Профессия пациента')}
			,CauseTreatmentType_id: {nick: 'CauseTreatmentType', label: langs('Причина обращения')}
			,Diag_id: {nick: 'Diag', label: langs('Диагноз основной')}
			,Diag_sid: {nick: 'DiagS', label: langs('Диагноз сопутствующий')}
			,EvnVK_MainDisease: {nick: 'MainDisease', label: 'Основное заболевание'}
			,ExpertiseNameType_id: {nick: 'ExpertiseNameType', label: langs('Вид экспертизы')}
			,ExpertiseEventTypeLink_id: {nick: 'ExpertiseEventTypeLink', label: langs('Хар-ка случая экспертизы')}
			,ExpertiseNameSubjectType_id: {nick: 'ExpertiseNameSubjectType', label: langs('Предмет экспертизы')}
			,EvnStick_all: {nick: 'EvnStickAll', label: langs('ЛВН')}
			,EvnStickBase_id: {nick: 'EvnStickAll', label: langs('ЛВН')}
			,EvnVK_LVN: {nick: 'LVN', label: langs('ЛВН (ручной ввод)')}
			,EvnStickWorkRelease_id: {nick: 'EvnStickWorkRelease', label: langs('Период освобождения от работы')}
			,EvnVK_WorkReleasePeriod: {nick: 'WorkReleasePeriod', label: langs('Период освобождения от работы (ручной ввод)')}
			,EvnVK_ExpertiseStickNumber: {nick: 'ExpertiseStickNumber', label: langs('Эксперитза временной нетрудоспособности №')}
			,EvnVK_StickPeriod: {nick: 'StickPeriod', label: langs('Срок нетрудоспособности, дней')}
			,EvnVK_StickDuration: {nick: 'StickDuration', label: langs('Длительность пребывания в ЛПУ, дней')}
			,EvnVK_DirectionDate: {nick: 'DirectionDate', label: langs('Дата направления в бюро МСЭ (или др. спец. учреждения)')}
			,EvnVK_ConclusionDate: {nick: 'ConclusionDate', label: langs('Дата получения заключения МСЭ (или др. спец. учреждений)')}
			,EvnVK_ConclusionPeriodDate: {nick: 'ConclusionPeriodDate', label: langs('Cрок действия заключения')}
			,EvnVK_ConclusionDescr: {nick: 'ConclusionDescr', label: langs('Заключение МСЭ')}
			,EvnVK_AddInfo: {nick: 'AddInfo', label: langs('Доп. информация')}
			,EvnVK_isUseStandard: {nick: 'IsUseStandard', label: 'Использовались стандарты'}
			,EvnVK_UseStandard: {nick: 'UseStandard', label: langs('Подробности')}
			,EvnVK_isAberration: {nick: 'IsAberration', label: langs('Отклонение от стандартов')}
			,EvnVK_AberrationDescr: {nick: 'AberrationDescr', label: langs('Подробности')}
			,EvnVK_isErrors: {nick: 'IsErrors', label: langs('Дефекты, нарушения и ошибки')}
			,EvnVK_ErrorsDescr: {nick: 'ErrorsDescr', label: langs('Подробности')}
			,EvnVK_isResult: {nick: 'IsResult', label: langs('Достижение результата или исхода')}
			,EvnVK_ResultDescr: {nick: 'ResultDescr', label: langs('Подробности')}
			,EvnVK_ExpertDescr: {nick: 'ExpertDescr', label: langs('Заключ. экспертов, рекомендации')}
			,EvnVK_DecisionVK: {nick: 'DecisionVK', label: langs('Решение ВК')}
		};
		fields.EvnVK_NumProtocol.allowBlank = false;
		fields.EvnVK_isReserve.allowBlank = false;
		fields.EvnVK_MainDisease.allowBlank = getRegionNick() != 'perm';
		fields.EvnVK_DecisionVK.allowBlank = getRegionNick() != 'vologda';

		if (data.EvnVK_isReserve == 2) {
			fields.PatientStatusType_id.allowBlank = true;
			fields.CauseTreatmentType_id.allowBlank = true;
			fields.Diag_id.allowBlank = true;
			fields.ExpertiseNameType_id.allowBlank = true;
			fields.ExpertiseEventTypeLink_id.allowBlank = true;
			fields.ExpertiseNameSubjectType_id.allowBlank = true;
			fields.EvnVK_isUseStandard.allowBlank = true;
			fields.EvnVK_isAberration.allowBlank = true;
			fields.EvnVK_isErrors.allowBlank = true;
			fields.EvnVK_isResult.allowBlank = true;
			//fields.EvnVK_StickPeriod.allowBlank = true;
		} else {
			fields.PatientStatusType_id.allowBlank = false;
			fields.CauseTreatmentType_id.allowBlank = false;
			fields.Diag_id.allowBlank = false;
			fields.ExpertiseNameType_id.allowBlank = false;
			fields.ExpertiseEventTypeLink_id.allowBlank = false;
			fields.ExpertiseNameSubjectType_id.allowBlank = false;
			fields.EvnVK_isUseStandard.allowBlank = (getRegionNick() == 'kz');
			fields.EvnVK_isAberration.allowBlank = false;
			fields.EvnVK_isErrors.allowBlank = false;
			fields.EvnVK_isResult.allowBlank = false;
			//fields.EvnVK_StickPeriod.allowBlank = false;
		}

		me.EvnVKParams.fields = fields;

		var isReadOnly = (me.isReadOnly || data.accessType == 'view');

		if (!isReadOnly) {
			var hasDecisionVKTemplate = data.ExpertiseNameType_id?data.ExpertiseNameType_id.inlist([1,2,5]):false;
			var button_el = Ext.get('EvnVK_'+ data.EvnVK_id +'_selectDecisionVK');
			if (button_el) {
				button_el.setDisplayed(hasDecisionVKTemplate?'block':'none');
			}
		}
	},
	_isEvnVKChairmanSaved: function(data) {
		if (!data.EvnVK_id) {
			return false;
		}
		var objectChildren = this.getObjectChildren('EvnVK',data.EvnVK_id);
		if (!objectChildren || !objectChildren.EvnVKExpert || !objectChildren.EvnVKExpert.item) {
			return false;
		}
		var experts = objectChildren.EvnVKExpert.item;
		for (i=0; i<experts.length; i++) {
			if (experts[i].data.ExpertMedStaffType_id == 2) {
				return true;
			}
		}
		return false;
	},
	_saveEvnVK: function(data, options) {
		var form = this;

		var params = data;

		params.checkNumProtocol = 1;
		if (options && options.checkNumProtocol != 'undefined') {
			params.checkNumProtocol = options.checkNumProtocol;
		}
		params.EvnVK_isReserve = (params.EvnVK_isReserve==2)?1:0;
		params.EvnVK_setDT = params.EvnVK_setDate;
		params.isEmk = 1;
		params.action = 'upd';

		form.requestSaveWithShowInfoMsg('/?c=ClinExWork&m=saveEvnVK', data, function(response_obj) {
			if (!Ext.isEmpty(response_obj.Alert_Msg)) {
				sw.swMsg.show({
					buttons: {
						ok: {text: langs('Сохранить')},
						cancel: true
					},
					fn: function ( buttonId ) {
						if ( buttonId == 'ok' ) {
							if(!getRegionNick().inlist(['perm','ekb','astra','ufa'])){
								options.checkNumProtocol = 0;
							}
							form._saveEvnVK(data, options);
							return;
						}
					}.createDelegate(this),
					msg: response_obj.Alert_Msg,
					title: langs('Предупреждение')
				});
			} else {
				form.EvnVKParams.loadedData = Ext.apply({}, data);
				if (options && typeof options.callback == 'function') {
					options.callback();
				} else if (typeof form.onSaveEvnDocument == 'function') {
					form.onSaveEvnDocument(true, data, 'EvnVK');
				}
			}
		});
	},
	addEvnVK: function() {
		var form = this;
		var params = {
			Person_id:this.Person_id,
			PersonEvn_id:this.PersonEvn_id,
			Server_id:this.Server_id,
			MedService_id: this.userMedStaffFact.MedService_id,
			EvnVK_setDT: new Date().format('d.m.Y'),
			EvnPrescrVK_id: this.EvnPrescr_id,
			action: 'ins'
		};
		var error = langs('Ошибка при сохранения протокола ВК');
		Ext.Ajax.request({
			url: '/?c=ClinExWork&m=saveEvnVK',
			params: params,
			success: function(response, options) {
				//loadMask.hide();
				var response_obj = Ext.util.JSON.decode(response.responseText);
				if ( response_obj.success == false || !response_obj.EvnVK_id ) {
					sw.swMsg.alert(langs('Ошибка'), response_obj.Error_Msg ? response_obj.Error_Msg : error);
					return;
				}
				form.EvnPrescr_id = null;
				var EvnVK_id = response_obj.EvnVK_id;

				form.onCreateObject({node_lvl: 1, parent_node_id: 'root', node_id: 'EvnVK' + '_'+ EvnVK_id});
			}
		});
	},
	addNewslatter: function() {
		var form = this;
		Ext.Ajax.request({
			url: '/?c=NewslatterAccept&m=check',
			params: {Person_id: this.Person_id},
			success: function(response, options) {
				var response_obj = Ext.util.JSON.decode(response.responseText);
				if (!response_obj.length || !response_obj[0].NewslatterAccept_id) { // Если согласия нет - открываем форму для добавления
					form.openNewslatterAcceptEditWindow(null, function (result) {
						form.openNewslatterEditWindow('add', result);
					});					
				} else { // Если есть - открываем сразу рассылку
					form.openNewslatterEditWindow('add', response_obj[0]);
				}
			}
		});
	},
	openNewslatterAcceptEditWindow: function(NewslatterAccept_id, callback) {
		
		var win = this;
		var params = {};
		params.NewslatterAccept_id = NewslatterAccept_id;
		params.action = Ext.isEmpty(NewslatterAccept_id) ? 'add' : 'edit';
		params.Person_id = this.Person_id;
		params.callback = function(options, success, response) {
			if (success == true && response) {
				win.askPrintNewslatterAccept(response, callback);
			}
		}

        getWnd('swNewslatterAcceptEditForm').show(params);
    },
    askPrintNewslatterAccept: function(params, callback) {
	
		if (!params || !params.NewslatterAccept_id) {
			return false;
		}
		
		var win = this;
		
		if (Ext.isEmpty(params.NewslatterAccept_endDate)) {	
			
			sw.swMsg.show({
				title: langs('Вопрос'),
				msg: langs('Распечатать документ?'),
				icon: Ext.MessageBox.QUESTION,
				buttons: Ext.Msg.YESNO,
				fn: function ( buttonId ) {
					if ( buttonId == 'yes' ) {
						win.printNewslatterAccept('printAccept', params.NewslatterAccept_id);
					}
					if (typeof callback == 'function') {
						callback(params);
					}
				}
			});	
		} else {
			
			sw.swMsg.show({
				title: langs('Вопрос'),
				msg: langs('Распечатать документ?'),
				icon: Ext.MessageBox.QUESTION,
				buttons: {
					yes: langs('Печать Согласия'),
					no: langs('Печать отказа'),
					cancel: langs('Отмена')
				},
				fn: function( buttonId ) {
					if ( buttonId == 'yes') {
						win.printNewslatterAccept('printAccept', params.NewslatterAccept_id);
					} else if ( buttonId == 'no') {
						win.printNewslatterAccept('printDenial', params.NewslatterAccept_id);
					}
					if (typeof callback == 'function') {
						callback(params);
					}
				}
			});
		}		
    },
    printNewslatterAccept: function(method, NewslatterAccept_id) { 
		
		if (!method || !NewslatterAccept_id) {
			return false;
		}
	
		window.open('/?c=NewslatterAccept&m=' + method + '&NewslatterAccept_id=' + NewslatterAccept_id, '_blank');
	},
	openNewslatterEditWindow: function(action, formParams) {

		var params = new Object();
		params.action = action;
		params.formParams = formParams;

		getWnd('swNewslatterEditWindow').show(params);
	},
	onChangeCreateInputArea: function(inputData){

		var form = this,
			components = form.input_cmp_list;

		form.isFirstAdminCheck = false;

		inputData.options = Ext.applyIf(inputData.options || {}, {isEmk: true});
		inputData.requestYesNo = inputData.requestYesNo || Ext.emptyFn;
		inputData.requestNo = inputData.requestNo || Ext.emptyFn;

		var input = Ext.get(inputData.inputId);

		if (input) {

			var respFn = function(response_obj) {

				if (response_obj.success) {

					var record = form.viewFormDataStore.getById(inputData.EvnClass_SysNick +'_'+ inputData.object_id);

					if (record) { //обновить в сторэ данных посещения
						record.set(inputData.requestParams.param_name, inputData.requestParams.param_value);
						record.commit(true);
						form.viewFormDataStore.commitChanges();
					}

					form.isFirstAdminCheck = false;
					form.requireCheckChange = true;

					if (!inputData.disableDestroy) {

						input.setDisplayed('inline');
						input.update(inputData.value);

						if (typeof inputData.idValue != 'undefined')
							input.setAttribute('dataid', inputData.idValue);

						inputData.inputArea.setDisplayed('none');

						if (inputData.elem) {
							if (inputData.elem.menu && inputData.elem.menu.picker){

								inputData.elem.menu.picker.beforeDestroy = function() {
									if (this.rendered){
										if(this.keyNav) this.keyNav.disable();
										this.keyNav = null;

										Ext.destroy(
											this.leftClickRpt,
											this.rightClickRpt,
											this.monthPicker,
											this.eventEl,
											this.mbtn,
											this.todayBtn
										);
									}
								}
							}

							inputData.elem.destroy();
						}
						components[inputData.inputId] = false;
					}
				}

				if (typeof inputData.requestCallback == 'function') inputData.requestCallback(response_obj);
			}

			inputData.requestParams.options = Ext.util.JSON.encode(inputData.options);

			form.requestSaveWithShowInfoMsg(
				inputData.requestUrl,
				inputData.requestParams,
				respFn,
				form,
				inputData.requestYesNo,
				inputData.requestNo
			);
		}
	},
	onCancelCreateInputArea: function(inputData){

		var form = this,
			components = form.input_cmp_list;

		var input = Ext.get(inputData.inputId);

		if (input) {

			input.setDisplayed('inline');
			input.update(inputData.value);

			inputData.inputArea.setDisplayed('none');
			inputData.el.destroy();
			components[inputData.inputId] = false;
		}
	},
	createInputArea: function(name, EvnClass_SysNick, el_data) {
		var form = this;
		if(!this.input_cmp_list) this.input_cmp_list = {};
		if (EvnClass_SysNick == 'EvnVK') {
			form.createEvnVKHtmlForm(name, el_data);
			return;
		}

		var onChange = function(conf){
			form.isFirstAdminCheck = false;
			conf.requestYesNo = conf.requestYesNo || Ext.emptyFn;
			conf.requestNo = conf.requestNo || Ext.emptyFn;
			conf.options = Ext.applyIf(conf.options || {}, {isEmk: true});
			var tct = Ext.get(conf.elOutputId);
			if (tct) {
				conf.requestParams.options = Ext.util.JSON.encode(conf.options);

				// сначала ставим
				var oldValue = tct.dom.innerHTML;
				var oldValueId = tct.getAttribute('dataid');
				tct.update(conf.outputValue);
				if (typeof conf.outputValueId != 'undefined') tct.setAttribute('dataid', conf.outputValueId);

				form.requestSaveWithShowInfoMsg(conf.requestUrl,
                    conf.requestParams,
                    function(response_obj) {
                        if ( response_obj.success ) {
                            var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                            if (record) {
                                //обновить в сторэ данных посещения
                                record.set(conf.requestParams.param_name, conf.requestParams.param_value);
                                record.commit(true);
                                form.viewFormDataStore.commitChanges();
                            }
		                	form.isFirstAdminCheck = false;
                            form.requireCheckChange = true;
                            if (!conf.disableDestroy) {
                                tct.setDisplayed('inline');
                                tct.update(conf.outputValue);
                                if (typeof conf.outputValueId != 'undefined') tct.setAttribute('dataid',conf.outputValueId);
                                conf.elInputWrap.setDisplayed('none');
                                if ( conf.elInput ) {
									if (conf.elInput && conf.elInput.menu && conf.elInput.menu.picker){
										conf.elInput.menu.picker.beforeDestroy = function() {
											if(this.rendered){
												if(this.keyNav){
													this.keyNav.disable();
												}
												this.keyNav = null;
												Ext.destroy(
													this.leftClickRpt,
													this.rightClickRpt,
													this.monthPicker,
													this.eventEl,
													this.mbtn,
													this.todayBtn
												);
											}
										}
									}
                                    conf.elInput.destroy();
                                }
                                if(conf.elOutputId) form.input_cmp_list[conf.elOutputId] = false;
                            }
                        } else {
							tct.update(oldValue);
							if (typeof conf.outputValueId != 'undefined') tct.setAttribute('dataid', oldValueId);
						}
                        if (typeof conf.requestCallback == 'function')
                            conf.requestCallback(response_obj);

                    }, form, conf.requestYesNo, conf.requestNo);
			}
		};
		
		var onCancel = function(conf){
			var tct = Ext.get(conf.elOutputId);
			tct.setDisplayed('inline');
			if(tct) {
				tct.update(conf.outputValue);
				conf.elInputWrap.setDisplayed('none');
				conf.elInput.destroy();
				this.input_cmp_list[conf.elOutputId] = false;
			}
		}.createDelegate(this);

		var cmp, ct, eloutputid, eloutput;
		if (name.includes('UslugaMedType')) {
		    console.log('name', name);
        }
		switch(name){
			case 'PersonDisp':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaPersonDisp');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputPersonDisp';
				eloutput = Ext.get(eloutputid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					cmp = new sw.Promed.SwBaseRemoteCombo({
						renderTo: EvnClass_SysNick + '_data_' + el_data.object_id + '_inputareaPersonDisp',
						allowBlank: true,
						displayField: 'PersonDisp_Name',
						enableKeyEvents: true,
						hiddenName: 'PersonDisp_id',
						listWidth: 600,
						store: new Ext.data.JsonStore({
							fields: [
								{name: 'PersonDisp_id', type: 'int'},
								{name: 'PersonDisp_setDate', type: 'date', dateFormat: 'd.m.Y'},
								{name: 'PersonDisp_Name', type: 'string'}
							],
							key: 'PersonDisp_id',
							sortInfo: {
								field: 'PersonDisp_setDate'
							},
							url: '/?c=PersonDisp&m=loadPersonDispList'
						}),
						tpl:
							'<tpl for="."><div class="x-combo-list-item">'+
							'{PersonDisp_Name}&nbsp;'+
							'</div></tpl>',
						triggerAction: 'all',
						valueField: 'PersonDisp_id',
						width: 450,
						listeners: {
							blur: function (f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid,
									outputValue: outputValue,
									outputValueId: outputValueId,
									elInputWrap: ct,
									elInput: f
								});

								return false;
							},
							render: function (combo) {
								if (!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							keydown: function (combo, e) {
								if (e.getKey() == e.TAB) {
									//form.createInputArea('Diag', EvnClass_SysNick, el_data);
								}
							},
							change: function (f, n, o) {
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId = null;
								if (rec) {
									outputValue = rec.get('PersonDisp_Name');
									outputValueId = rec.get('PersonDisp_id');
								}
								if (!outputValueId && !f.allowBlank) {
									sw.swMsg.alert(langs('Сообщение'), langs('Поле "Карта димп. учета" является обязательным для заполнения.'));
									return false;
								}
								form.isFirstAdminCheck = false;
								onChange({
									elOutputId: eloutputid,
									outputValue: outputValue,
									outputValueId: outputValueId,
									elInputWrap: ct,
									elInput: f,
									requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter',
									requestParams: {
										object: 'EvnVizitPL',
										id: el_data.object_id,
										param_name: 'PersonDisp_id',
										param_value: outputValueId
									}
								});
							}
						}
					});

					cmp.getStore().baseParams.Person_id = form.Person_id;

					var vizit_data = form.getObjectData(EvnClass_SysNick, el_data.object_id);

					if (vizit_data) {
						cmp.getStore().baseParams.onDate = (!Ext.isEmpty(vizit_data.EvnVizitPL_setDate) ? vizit_data.EvnVizitPL_setDate : getGlobalOptions().date);
					}

					cmp.getStore().removeAll();
					cmp.getStore().load({
						callback: function () {
							cmp.setValue(cmp.getValue());
							cmp.focus(true, 500);
						}
					});
					//}
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
            case 'PrehospTrauma':
                ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaPrehospTrauma');
                eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputPrehospTrauma';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    //sw.Promed.SwPrehospTraumaCombo
                    cmp = new sw.Promed.SwCommonSprCombo({
                        autoLoad: true
                        ,typeCode: 'int'
                        ,comboSubject: 'PrehospTrauma'
                        ,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaPrehospTrauma'
                        ,width: 340
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    if (combo.getValue()) {
                                        form.createInputArea('IsUnlaw', EvnClass_SysNick, el_data);
                                    } else {
                                        form.createInputArea('IsUnport', EvnClass_SysNick, el_data);
                                    }
                                }
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId, PrehospTrauma_name;
                                if(rec) {
                                    outputValue = PrehospTrauma_name = rec.get('PrehospTrauma_Name');
                                    outputValueId = rec.get('PrehospTrauma_id');
                                }
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnPL'
                                        ,id: el_data.object_id
                                        ,param_name: 'PrehospTrauma_id'
                                        ,param_value: outputValueId
                                    }
                                    ,requestCallback: function(response_obj) {
                                        if (response_obj.success) {
                                        	form.isFirstAdminCheck = false;
                                            var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                                            if (record)
                                            {
                                                var wrapIsUnlaw = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapIsUnlaw');
                                                if (wrapIsUnlaw) {
                                                    if (!outputValueId) {
                                                        wrapIsUnlaw.setDisplayed('none');
                                                        record.set(EvnClass_SysNick +'_IsUnlaw', null);
                                                        record.set('IsUnlaw_Name', '');
                                                    } else {
                                                        wrapIsUnlaw.setDisplayed('block');
                                                    }
                                                }
                                                //обновить данные ТАП
                                                record.set('PrehospTrauma_id', outputValueId);
                                                record.set('PrehospTrauma_Name', PrehospTrauma_name);
                                                record.commit(true);
                                                form.viewFormDataStore.commitChanges();
                                            }
                                        }
                                    }
                                });
                            }
                        }
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'IsUnlaw':
                ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaIsUnlaw');
                eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputIsUnlaw';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwCommonSprCombo({
                        autoLoad: true
                        ,typeCode: 'int'
                        ,comboSubject: 'YesNo'
                        ,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaIsUnlaw'
                        ,width: 60
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    form.createInputArea('IsUnport', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId, IsUnlaw_name;
                                if(rec) {
                                    outputValue = IsUnlaw_name = rec.get('YesNo_Name');
                                    outputValueId = rec.get('YesNo_id');
                                }
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnPL'
                                        ,id: el_data.object_id
                                        ,param_name: 'EvnPL_IsUnlaw'
                                        ,param_value: outputValueId
                                    }
                                    ,requestCallback: function(response_obj) {
                                        if ( response_obj.success == true ) {
                                        	form.isFirstAdminCheck = false;
                                            var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                                            if (record)
                                            {
                                                //обновить данные ТАП
                                                record.set(EvnClass_SysNick +'_IsUnlaw', outputValueId);
                                                record.set('IsUnlaw_Name', IsUnlaw_name);
                                                record.commit(true);
                                                form.viewFormDataStore.commitChanges();
                                            }
                                        }
                                    }
                                });
                            }
                        }
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'IsSurveyRefuse':
                ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaIsSurveyRefuse');
                eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputIsSurveyRefuse';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwCommonSprCombo({
                        autoLoad: true
                        ,typeCode: 'int'
                        ,comboSubject: 'YesNo'
                        ,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaIsSurveyRefuse'
                        ,width: 60
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    form.createInputArea('IsUnport', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId, IsSurveyRefuse_name;
                                if(rec) {
                                    outputValue = IsSurveyRefuse_name = rec.get('YesNo_Name');
                                    outputValueId = rec.get('YesNo_id');
                                }
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnPL'
                                        ,id: el_data.object_id
                                        ,param_name: 'EvnPL_IsSurveyRefuse'
                                        ,param_value: outputValueId
                                    }
                                    ,requestCallback: function(response_obj) {
                                        if ( response_obj.success == true ) {
                                        	form.isFirstAdminCheck = false;
                                            var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                                            if (record)
                                            {
                                                //обновить данные ТАП
                                                record.set(EvnClass_SysNick +'_IsSurveyRefuse', outputValueId);
                                                record.set('IsSurveyRefuse_Name', IsSurveyRefuse_name);
                                                record.commit(true);
                                                form.viewFormDataStore.commitChanges();
                                            }
                                        }
                                    }
                                });
                            }
                        }
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'IsUnport':
                ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaIsUnport');
                eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputIsUnport';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwCommonSprCombo({
                        autoLoad: true
                        ,typeCode: 'int'
                        ,comboSubject: 'YesNo'
                        ,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaIsUnport'
                        ,width: 60
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    form.createInputArea('IsFinish', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId, IsUnport_name;
                                if(rec) {
                                    outputValue = IsUnport_name = rec.get('YesNo_Name');
                                    outputValueId = rec.get('YesNo_id');
                                }
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnPL'
                                        ,id: el_data.object_id
                                        ,param_name: 'EvnPL_IsUnport'
                                        ,param_value: outputValueId
                                    }
                                    ,requestCallback: function(response_obj) {
                                        if ( response_obj.success == true ) {
                                        	form.isFirstAdminCheck = false;
                                            var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                                            if (record)
                                            {
                                                //обновить данные ТАП
                                                record.set(EvnClass_SysNick +'_IsUnport', outputValueId);
                                                record.set('IsUnport_Name', IsUnport_name);
                                                record.commit(true);
                                                form.viewFormDataStore.commitChanges();
                                            }
                                        }
                                    }
                                });
                            }
                        }
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
			case 'IsMseDirected':
				ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaIsMseDirected');
				eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputIsMseDirected';
				eloutput = Ext.get(eloutputid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					cmp = new sw.Promed.SwCommonSprCombo({
						autoLoad: true
						,typeCode: 'int'
						,comboSubject: 'YesNo'
						,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaIsMseDirected'
						,width: 60
						,listeners:
							{
								blur: function(f) {
									var outputValue = eloutput.dom.innerHTML;

									onCancel({
										elOutputId: eloutputid
										,outputValue: outputValue
										,elInputWrap: ct
										,elInput: f
									});

									return false;
								},
								render: function(combo) {
									if(!Ext.isEmpty(dataid)) {
										combo.setValue(dataid);
									}
								},
								change: function(f,n,o) {
									var rec = f.getStore().getById(n);
									var outputValue = form.getEmptyValueText();
									var outputValueId, IsMseDirected_name;
									if(rec) {
										outputValue = IsMseDirected_name = rec.get('YesNo_Name');
										outputValueId = rec.get('YesNo_id');
									}
									onChange({
										elOutputId: eloutputid
										,outputValue: outputValue
										,outputValueId: outputValueId
										,elInputWrap: ct
										,elInput: f
										,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
										,requestParams: {
											object: 'EvnPL'
											,id: el_data.object_id
											,param_name: 'EvnPL_isMseDirected'
											,param_value: outputValueId
										}
										,requestCallback: function(response_obj) {
											if ( response_obj.success == true ) {
												form.isFirstAdminCheck = false;
												var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
												if (record)
												{
													//обновить данные ТАП
													record.set(EvnClass_SysNick +'_IsMseDirected', outputValueId);
													record.set('IsMseDirected_Name', IsMseDirected_name);
													record.commit(true);
													form.viewFormDataStore.commitChanges();
												}
											}
										}
									});
								}
							}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
            case 'IsFinish':
                ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaIsFinish');
                eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputIsFinish';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwCommonSprCombo({
                        autoLoad: true
                        ,typeCode: 'int'
                        ,comboSubject: 'YesNo'
                        ,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaIsFinish'
                        ,width: 60
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    if (combo.getValue() == 2) form.createInputArea('UKL', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId, isfinish_name;
                                if(rec) {
                                    outputValue = isfinish_name = rec.get('YesNo_Name');
                                    outputValueId = rec.get('YesNo_id');
                                }
                                var rootRec = form.viewFormDataStore.getById(form.data.Code + '_'+ form.data.id),
                                    traumaAllowBlank = true;
								if (rootRec && !rootRec.get("PrehospTrauma_id") && outputValueId==2) {
									form.viewFormDataStore.each(function(rec){
                                        if (rec.object_code.inlist(['EvnVizitPL','EvnVizitPLStom'])){
                                            if (!Ext.isEmpty(rec.get('Diag_Code')) && rec.get('Diag_Code')[0].inlist(['T','S'])){
                                                traumaAllowBlank = false;
                                                return false;
                                            }
                                        }
                                        return true;
                                    });
								}
								if (!traumaAllowBlank){
									sw.swMsg.alert(langs('Предупреждение'), langs('При диагнозе групп "S" и "T" поле "Вид травмы (внешнего воздействия)" обязательна для заполнения!'));
									return false;
								}
								if (
									getRegionNick() != 'kz'
									&& !(
										getRegionNick() == 'krym'
										
									)
									&& outputValueId == 2 
									&& EvnClass_SysNick == 'EvnPL'
								) {
									var MorbusOnkoError = false;
									var lastVizit = true;
									form.viewFormDataStore.each(function(rec){
										if(rec.object_code.inlist(['EvnVizitPL'])) {
											if(getRegionNick() == 'ufa' &&
												lastVizit && 
												(
													rec.get('TreatmentClass_id') == 4
													|| rec.get('EvnVizitPL_IsZNO') == 2
													|| !(rec.get('PayType_SysNick') == 'oms')
												) 
											) {
												return false; //отменяем проверку
											}

											lastVizit = false;
										}

                                        if (
											rec.object_code.inlist(['EvnVizitPL']) &&
                                            !Ext.isEmpty(rec.get('Diag_Code')) && 
											((rec.get('Diag_Code') >= 'C00' && rec.get('Diag_Code') <= 'C97') || (rec.get('Diag_Code') >= 'D00' && rec.get('Diag_Code') <= 'D09')) &&
											rec.data.listMorbus['onko'] && 
											rec.data.listMorbus['onko'][0] && 
											!rec.data.listMorbus['onko'][0]['MorbusOnkoVizitPLDop_id']
										) {
											MorbusOnkoError = true;
											var s_id = 'EvnVizitPL_'+ rec.get('EvnVizitPL_id') +'_specificsOnko';
											if (Ext.fly(s_id)){
												document.getElementById(s_id).scrollIntoView();
											}
										}
									});
									if (MorbusOnkoError) {
										sw.swMsg.alert('Ошибка', 'В случае лечения установлен диагноз из диапазона С00-C97 или D00-D09. Заполните раздел "Специфика (онкология)" или проверьте корректность заполнения обязательных полей данного раздела: «Повод обращения», «Стадия опухолевого процесса», «Т», «N», «M» (Стадия опухолевого процесса по системе TNM) в блоках ФОМС и Канцер регистр, «Дата взятия материала», «Тип диагностического показателя», «Результат диагностики», «Диагностический показатель». Обязательные поля раздела отмечены символом *.');
										return false;
									}
								}
								var wrapDiagConc = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapDiagConc');
								var wrapInterruptLeaveType = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapInterruptLeaveType');
                                var wrapUKL = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapUKL');
								var inputUKL = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputUKL');
                                var wrapResultClass = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapResultClass');
								var wrapResultDeseaseType = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapResultDeseaseType');
                                var wrapIsSan, wrapSanationStatus;
                                if ('EvnPLStom' == EvnClass_SysNick) {
                                    wrapIsSan = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapIsSan');
                                    wrapSanationStatus = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapSanationStatus');
                                }
								if (outputValueId==2) {
									if (
										rootRec && rootRec.object_code == 'EvnPLStom' && !Ext.isEmpty(rootRec.get(rootRec.object_code + '_setDate')) && getValidDT(rootRec.get(rootRec.object_code + '_setDate'), '') >= sw.Promed.EvnPL.getEvnPLStomNewBegDate()
									) {
										var
											hasMorbus = false,
											hasOpenedMorbus = false;

										form.viewFormDataStore.each(function(rec){
											if ('EvnPLStom' == EvnClass_SysNick
												&& 'EvnDiagPLStom' == rec.object_code
												&& rec.get('EvnDiagPLStom_rid') == el_data.object_id 
											) {
												hasMorbus = true;

												if ( Ext.isEmpty(rec.get('EvnDiagPLStom_IsClosed')) || rec.get('EvnDiagPLStom_IsClosed') != 2 ) {
													hasOpenedMorbus = true;
												}

												return false;
											}
											return true;
										});

										if ( hasMorbus == false ) {
											sw.swMsg.alert(langs('Ошибка'), langs('Случай не может быть закончен, т.к. не заведено ни одного заболевания'));
											return false;
										}
										else if ( hasOpenedMorbus == true ) {
											sw.swMsg.alert(langs('Ошибка'), langs('Случай не может быть закончен, пока есть незакрытые заболевания'));
											return false;
										}
									}
									else {
										var hasDiag = false;
										var uslugaComplex = true; // ekb
										var uslugaCommon = false; // ekb
										var mesCode = false;
										form.viewFormDataStore.each(function(rec){
											if( rec.object_code == 'EvnVizitPL' && getRegionNick() == 'ekb' && !rec.get('UslugaComplex_Code') && rec.get('Mes_Code') && rec.get('PayType_SysNick') == 'dms')
											{
												if(!rec.get('Mes_Code').inlist([901, 902, 664]) ) uslugaComplex = false;
												if(!rec.get('Mes_Code').inlist([811, 812]) && rec.get('PayType_SysNick') == 'bud') uslugaComplex = false;
											}else if(rec.get('Mes_Code')){
												mesCode = rec.get('Mes_Code').inlist([811, 812, 901, 902, 664]);
											}

											if(rec.object_code=='EvnUsluga'){
												uslugaCommon = (rec.get('EvnUslugaCommon_id') || rec.get('EvnUsluga_id')) ? true : false;
											}

											if ('EvnPLStom' == EvnClass_SysNick
												&& 'EvnVizitPLStom' == rec.object_code
												&& rec.get('EvnVizitPLStom_pid') == el_data.object_id 
												&& false == Ext.isEmpty(rec.get('Diag_id'))
											) {
												hasDiag = true;
												//return false;
											}
											if ('EvnPL' == EvnClass_SysNick
												&& 'EvnVizitPL' == rec.object_code
												&& rec.get('EvnVizitPL_pid') == el_data.object_id 
												&& false == Ext.isEmpty(rec.get('Diag_id'))
											) {
												hasDiag = true;
												//return false;
											}
											return true;
										});
										
										if (!hasDiag) {
											sw.swMsg.alert(langs('Ошибка'), langs('Случай лечения должен иметь хотя бы один основной диагноз'));
											return false;
										}
										if(getRegionNick() == 'ekb' && !uslugaComplex){
											sw.swMsg.alert(langs('Ошибка'), 'Поле <b>&laquo; Код посещения &raquo;</b> обязательно для ввода');
											return false;
										}
										if(getRegionNick() == 'ekb' && mesCode && !uslugaCommon){
											sw.swMsg.alert(langs('Ошибка'), 'Если в поле <b>&laquo; МЭС &raquo;</b> указано значение 811, 812, 901, 902, 664 то в разделе <b>&laquo; Услуги &raquo;</b> должна быть добавлена услуга');
											return false;
										}
									}
									
									if(form.errorControlCodaVisits()){
										sw.swMsg.alert(langs('Ошибка'), 'Закрытие случая АПЛ невозможно, т.к. в рамках одного ТАП для всех посещений должен быть указан один профиль отделения');
										return false;
									}
								}
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnPLBase'
                                        ,id: el_data.object_id
                                        ,param_name: 'EvnPLBase_IsFinish'
                                        ,param_value: outputValueId
                                    }
									,requestYesNo: function(code, options) {
                                    	if (code == 197641) {
		                                    options.ignoreNoExecPrescr = 1;// чтобы проигнорировать проверку при сохранении
		                                    form.data.ignoreNoExecPrescr = 1; // чтобы проигнорировать проверку при выходе
	                                    }
										if (code == 103) {
											options.ignoreControl59536 = 1;// чтобы проигнорировать проверку при сохранении
											form.data.ignoreControl59536 = 1; // чтобы проигнорировать проверку при выходе
										}
										if (code == 105) {
											options.ignoreControl122430 = 1;// чтобы проигнорировать проверку при сохранении
											form.data.ignoreControl122430 = 1; // чтобы проигнорировать проверку при выходе
										}
										if (code == 106) {
											options.ignoreMorbusOnkoDrugCheck = 1;// чтобы проигнорировать проверку при сохранении
											form.data.ignoreMorbusOnkoDrugCheck = 1; // чтобы проигнорировать проверку при выходе
										}
										if (code == 109) {
											options.ignoreParentEvnDateCheck = 1;// чтобы проигнорировать проверку при сохранении
											form.data.ignoreParentEvnDateCheck = 1; // чтобы проигнорировать проверку при выходе
										}
										if (code == 112) {
											options.vizit_intersection_control_check = 1;// чтобы проигнорировать проверку при сохранении
											form.data.vizit_intersection_control_check = 1; // чтобы проигнорировать проверку при выходе
										}
										if (code == 114) {
											options.ignoreMesUslugaCheck = 1;// чтобы проигнорировать проверку при сохранении
											form.data.ignoreMesUslugaCheck = 1; // чтобы проигнорировать проверку при выходе
										}
										if (code == 119 && 'EvnPLStom' == EvnClass_SysNick) {
											options.ignoreKsgInMorbusCheck = 1;// чтобы проигнорировать проверку при сохранении
											form.data.ignoreKsgInMorbusCheck = 1; // чтобы проигнорировать проверку при выходе
										}
										if (code == 129 && 'EvnPLStom' == EvnClass_SysNick) {
											options.ignoreUetSumInNonMorbusCheck = 1;// чтобы проигнорировать проверку при сохранении
											form.data.ignoreUetSumInNonMorbusCheck = 1; // чтобы проигнорировать проверку при выходе
										}
										if (code == 130) {
											options.ignoreCheckEvnUslugaChange = 1;// чтобы проигнорировать проверку при сохранении
											form.data.ignoreCheckEvnUslugaChange = 1; // чтобы проигнорировать проверку при выходе
										}
										if (code == 131) {
											options.ignoreCheckB04069333 = 1;// чтобы проигнорировать проверку при сохранении
											options.addB04069333 = 1;// и добавить услугу
											form.data.ignoreCheckB04069333 = 1; // чтобы проигнорировать проверку при выходе
											form.data.addB04069333 = 1; // и добавить услугу
										}
										if (code == 181) {
											options.ignoreCheckTNM = 1;// чтобы проигнорировать проверку при сохранении
											form.data.ignoreCheckTNM = 1; // чтобы проигнорировать проверку при выходе
										}
										if (code == 182) {
											options.ignoreDiagDispCheck = 1;// чтобы проигнорировать проверку при сохранении
											form.data.ignoreDiagDispCheck = 1; // чтобы проигнорировать проверку при выходе

											var formParams = new Object();
											var params_disp = new Object();
											var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);

											formParams.Person_id = form.Person_id;
											formParams.Server_id = form.Server_id;
											formParams.PersonDisp_begDate = getGlobalOptions().date;
											formParams.PersonDisp_DiagDate = getGlobalOptions().date;
											formParams.Diag_id = Ext.isEmpty(record.get('Diag_lid')) ? record.get('Diag_id'): record.get('Diag_lid');

											params_disp.action = 'add';
											params_disp.callback = Ext.emptyFn;
											params_disp.formParams = formParams;
											params_disp.onHide = Ext.emptyFn;

											getWnd('swPersonDispEditWindow').show(params_disp);
										}
									}
									,requestNo: function(code, options) {
		                                if (code == 197641) {
			                                options.cancelSetParameter = 1;// чтобы сходу выйти из контроллера сохранения, т.е. отменить сохранение
		                                }
										if (code == 182) {
											options.ignoreDiagDispCheck = 1;// чтобы проигнорировать проверку при сохранении
											form.data.ignoreDiagDispCheck = 1; // чтобы проигнорировать проверку при выходе
										}
									}
                                    ,requestCallback: function(response_obj) {

										if ( response_obj.success == true ) {
											form.isFirstAdminCheck = false;
											var lastEvnVizitPLDate, lastDiagCode;
											form.viewFormDataStore.each(function(record){
												if (rec.object_code=='EvnVizitPL'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(record.get('EvnVizitPL_setDate')) && record.get('EvnVizitPL_setDate') <= lastEvnVizitPLDate))){
													lastDiagCode = record.get('Diag_Code');
													lastEvnVizitPLDate = record.get('EvnVizitPL_setDate');
												} else if (rec.object_code=='EvnVizitPLStom'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPLStom_setDate')) && record.get('EvnVizitPL_setDate') >= lastEvnVizitPLDate))){
													lastEvnVizitPLDate = record.get('EvnVizitPL_setDate');
												}
											});
											if (2 == outputValueId) {
												
												if(wrapInterruptLeaveType)wrapInterruptLeaveType.setDisplayed('block');
												if (wrapUKL) wrapUKL.setDisplayed('block');
                                                if (inputUKL) inputUKL.dom.innerHTML = '1';
												if (wrapResultClass) wrapResultClass.setDisplayed('block');
												if (wrapResultDeseaseType) wrapResultDeseaseType.setDisplayed('block');
                                                if (wrapIsSan) wrapIsSan.setDisplayed('block');
												if ( !Ext.isEmpty(lastDiagCode) && lastDiagCode.toString().substr(0, 1).inlist([ 'S', 'T' ]) ) {
													if(wrapDiagConc)wrapDiagConc.setDisplayed('block');
												}else{
													if(wrapDiagConc)wrapDiagConc.setDisplayed('none');
													var inputDiagConc = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputDiagConc');
													if (inputDiagConc) {
														inputDiagConc.dom.innerHTML = form.getEmptyValueText();
														inputDiagConc.setAttribute('dataid','');
													}
												}
												if (el_data.object_id) {
													/*
													sw.Promed.Direction.loadDirectionDataForLeave({
														loadMask: form.getLoadMask(langs('Подождите, идет получение данных направления')),
														EvnClass_SysNick: 'EvnPL',
														Evn_rid: el_data.object_id,
														callback: function(data) {
															if (data) {
																var dt_el = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputDirectType');
																if (dt_el) {
																	dt_el.setAttribute('dataid', data.DirectType_id);
																}
																var dc_el = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputDirectClass');
																if (dc_el) {
																	dc_el.setAttribute('dataid', data.DirectClass_id);
																}
																var lso_el = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputLpuSectionO');
																if (lso_el) {
																	lso_el.setAttribute('dataid', (data.LpuSection_oid||null));
																}
																var lo_el = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputLpuO');
																if (lo_el) {
																	lo_el.setAttribute('dataid', (data.Lpu_oid||null));
																}
															}
														}
													});
													*/
												}
											} else {
												if(wrapInterruptLeaveType){
													wrapInterruptLeaveType.setDisplayed('none');
												}
												if(wrapDiagConc){
													wrapDiagConc.setDisplayed('none');
												}
												var inputInterruptLeaveType = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputInterruptLeaveType');
												if (inputInterruptLeaveType) {
													inputInterruptLeaveType.dom.innerHTML = form.getEmptyValueText();
													inputInterruptLeaveType.setAttribute('dataid','');
												}
												var inputDiagConc = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputDiagConc');
												if (inputDiagConc) {
													inputDiagConc.dom.innerHTML = form.getEmptyValueText();
													inputDiagConc.setAttribute('dataid','');
												}
                                                if (wrapIsSan) wrapIsSan.setDisplayed('none');
                                                if (wrapSanationStatus) wrapSanationStatus.setDisplayed('none');
												if (wrapUKL) wrapUKL.setDisplayed('none');
                                                if (inputUKL) inputUKL.dom.innerHTML = form.getEmptyValueText();
												var inputResultClass = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputResultClass');
												if (inputResultClass) {
													inputResultClass.dom.innerHTML = form.getEmptyValueText();
													inputResultClass.setAttribute('dataid','');
												}
												var inputDirectType = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputDirectType');
												if (inputDirectType) {
													inputDirectType.dom.innerHTML = form.getEmptyValueText();
													inputDirectType.setAttribute('dataid','');
												}
												var inputDirectClass = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputDirectClass');
												if (inputDirectClass) {
													inputDirectClass.dom.innerHTML = form.getEmptyValueText();
													inputDirectClass.setAttribute('dataid','');
												}
												var inputLpuSectionO = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputLpuSectionO');
												if (inputLpuSectionO) {
													inputLpuSectionO.dom.innerHTML = form.getEmptyValueText();
													inputLpuSectionO.setAttribute('dataid','');
												}
												
												var inputLpuO = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputLpuO');
												if (inputLpuO) {
													inputLpuO.dom.innerHTML = form.getEmptyValueText();
													inputLpuO.setAttribute('dataid','');
												}
												if (wrapResultClass) wrapResultClass.setDisplayed('none');
												if (wrapResultDeseaseType) wrapResultDeseaseType.setDisplayed('none');
												var wrapDt = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapDirectType');
												if (wrapDt) wrapDt.setDisplayed('none');
												var wrapDc = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapDirectClass');
												if (wrapDc) wrapDc.setDisplayed('none');
												var wrapLso = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapLpuSectionO');
												if (wrapLso) wrapLso.setDisplayed('none');
												var wrapLo = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapLpuO');
												if (wrapLo) wrapLo.setDisplayed('none');
											}

											if ( getRegionNick() == 'khak' ) {
												if ( 2 == outputValueId && !Ext.isEmpty(lastEvnVizitPLDate) && lastEvnVizitPLDate >= sw.Promed.EvnPL.getDateX2016() ) {
													Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapFedLeaveType').setDisplayed('block');
													Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapFedResultDeseaseType').setDisplayed('block');
												}
												else {
													Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapFedLeaveType').setDisplayed('none');
													Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapFedResultDeseaseType').setDisplayed('none');
												}
											}

											var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
											if (record) {
												//обновить данные ТАП
												record.set(EvnClass_SysNick +'_IsFinish', outputValueId);
												record.set('IsFinish_Name', isfinish_name);
												if (2 == outputValueId) {
													record.set(EvnClass_SysNick +'_UKL', 1);
                                                } else {
													record.set(EvnClass_SysNick +'_UKL', null);
													record.set('ResultClass_id',null);
													record.set('InterruptLeaveType_id',null);
													record.set('Diag_concid',null);
													record.set('ResultClass_Code', null);
													record.set('ResultClass_Name', null);
													record.set('ResultDeseaseType_id', null);
													record.set('ResultDeseaseType_Name', null);
													record.set('DirectType_id', null);
													record.set('DirectType_Name', null);
													record.set('DirectType_Code', null);
													record.set('DirectClass_id', null);
													record.set('DirectClass_Name', null);
													record.set('LpuSection_oid', null);
													record.set('LpuSectionO_Name', null);
													record.set('Lpu_oid', null);
													record.set('LpuO_Nick', null);
                                                    if ('EvnPLStom' == EvnClass_SysNick) {
                                                        record.set('EvnPLStom_IsSan', null);
                                                        record.set('IsSan_Name', null);
                                                        record.set('SanationStatus_id', null);
                                                        record.set('SanationStatus_Name', null);
                                                    }
												} 
												record.commit(true);
												form.viewFormDataStore.commitChanges();												
												if (false == sw.Promed.EvnPL.isHiddenFedResultFields()) {
													var lastEvnVizitPLDate;
													form.viewFormDataStore.each(function(rec) {
														if (rec.object_code=='EvnVizitPL'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPL_setDate')) && Date.parseDate(rec.get('EvnVizitPL_setDate'), 'd.m.Y') >= lastEvnVizitPLDate))){
															lastEvnVizitPLDate = Date.parseDate(rec.get('EvnVizitPL_setDate'), 'd.m.Y');
														} else if (rec.object_code=='EvnVizitPLStom'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPLStom_setDate')) && Date.parseDate(rec.get('EvnVizitPLStom_setDate'), 'd.m.Y') >= lastEvnVizitPLDate))){
															lastEvnVizitPLDate = Date.parseDate(rec.get('EvnVizitPLStom_setDate'), 'd.m.Y');
														}
													});

													var ResultDeseaseType_id = sw.Promed.EvnPL.calcFedResultDeseaseType({
														is2016: Ext.isEmpty(lastEvnVizitPLDate) || lastEvnVizitPLDate >= sw.Promed.EvnPL.getDateX2016(),
														disableToogleContainer: false,
														isEmk:true,
														InterruptLeaveType_id: record.get('InterruptLeaveType_id'),
														DirectType_Code: record.get('DirectType_Code'),
														ResultClass_Code: record.get('ResultClass_Code'),
														IsFinish: record.get('EvnPL_IsFinish'),
														fieldFedResultDeseaseType: sw.Promed.EvnPL.createFedViewHtmlFormField(EvnClass_SysNick, el_data.object_id, 'ResultDeseaseType',form.ResultDeseaseTypeFedstore)
													});
													var LeaveTypeFed_id = sw.Promed.EvnPL.calcFedLeaveType({
														is2016: Ext.isEmpty(lastEvnVizitPLDate) || lastEvnVizitPLDate >= sw.Promed.EvnPL.getDateX2016(),
														disableToogleContainer: false,
														isEmk:true,
														InterruptLeaveType_id: record.get('InterruptLeaveType_id'),
														LeaveType_fedid: record.get('LeaveType_fedid'),
														ResultClass_Code: record.get('ResultClass_Code'),
														DirectType_Code: record.get('DirectType_Code'),
														DirectClass_Code: record.get('DirectClass_Code'),
														IsFinish: record.get('EvnPL_IsFinish'),
														fieldFedLeaveType: sw.Promed.EvnPL.createFedViewHtmlFormField(EvnClass_SysNick, el_data.object_id, 'LeaveType',form.LeaveTypeFedstore)
													});
													form.saveFedField(ResultDeseaseType_id,LeaveTypeFed_id,record,el_data.object_id);
													/*sw.Promed.EvnPL.filterFedResultDeseaseType({
														fieldFedLeaveType: sw.Promed.EvnPL.createFedViewHtmlFormField(EvnClass_SysNick, el_data.object_id, 'LeaveType'),
														fieldFedResultDeseaseType: sw.Promed.EvnPL.createFedViewHtmlFormField(EvnClass_SysNick, el_data.object_id, 'ResultDeseaseType')
													})*/
												}
											}

											if ( !Ext.isEmpty(response_obj.Alert_Msg) ) {
												sw.swMsg.alert(langs('Уведомление'), response_obj.Alert_Msg);
											}
										} else {
											//По идее нужно возвращать старое значение
											//Показываем ошибку
											if (response_obj.Error_Code && response_obj.Error_Code.toString().inlist([ '109', '119', '129' ])) {
												return;
											} else {
												var msg = !Ext.isEmpty(response_obj.Error_Msg)?response_obj.Error_Msg:langs('Ошибка при сохранении признака законченности случая.');
												if (!Ext.isEmpty(response_obj.Error_Msg) && (response_obj.Error_Msg === 'YesNo' || response_obj.Error_Msg === 'Ok') && !Ext.isEmpty(response_obj.Alert_Msg)){
													msg = response_obj.Alert_Msg;
												}
												// мда, очень жаль, но еще один костыль по обработке ошибки #175532
												if (!Ext.isEmpty(response_obj.Error_Code) && response_obj.Error_Code == '212' && !Ext.isEmpty(response_obj.Alert_Msg)){
													msg = response_obj.Alert_Msg;
												}
												form.showWarningMsg({
													msg: msg,
													links:  {}
												});
												return;
											}
										}

										// надо обновить область просмотра ТАП чтобы вывелась сумма лечения #46819
										var reload_params = {
											section_code: EvnClass_SysNick,
											object_key: EvnClass_SysNick + '_id',
											object_value: el_data.object_id,
											section_id: EvnClass_SysNick + '_'+ el_data.object_id
										};
										form.reloadViewForm(reload_params);
                                    }
                                });
                            }
                        }
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
			case 'RehabScale':

				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaRehabScale');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputRehabScale';
				eloutput = Ext.get(eloutputid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if (!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					cmp = new sw.Promed.SwCommonSprCombo({
						autoLoad: true
						, typeCode: 'int'
						, comboSubject: 'RehabScale'
						, renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaRehabScale'
						, width: 300
						, lastQuery: ''
						, listeners:
							{
								blur: function (f) {
									var outputValue = eloutput.dom.innerHTML;

									onCancel({
										elOutputId: eloutputid
										, outputValue: outputValue
										, elInputWrap: ct
										, elInput: f
									});

									return false;
								},
								render: function (combo) {
									if (!Ext.isEmpty(dataid)) {
										combo.setValue(dataid);
									}
								},
								change: function (f, n, o) {
									var rec = f.getStore().getById(n);
									var outputValue = form.getEmptyValueText();
									var outputValueId, isfinish_name, outputValueCode;
									if (rec) {
										outputValue = isfinish_name = rec.get('RehabScale_Name');
										outputValueId = rec.get('RehabScale_id');
										outputValueCode = rec.get('RehabScale_Code');
									}

									onChange({
										elOutputId: eloutputid
										, outputValue: outputValue
										, outputValueId: outputValueId
										, elInputWrap: ct
										, elInput: f
										, requestUrl: '/?c=EvnSection&m=setEvnSectionParameter'
										, requestParams: {
											object: 'EvnSeciton'
											, id: el_data.object_id
											, param_name: 'RehabScale_id'
											, param_value: outputValueId
										}
										, requestCallback: function (response_obj) {
											if (response_obj.success == true) {
												form.isFirstAdminCheck = false;
												var record = form.viewFormDataStore.getById(EvnClass_SysNick + '_' + el_data.object_id);
												if (record) {
													record.set('RehabScale_id', outputValueId);
													record.set('RehabScale_Name', outputValue);
													record.set('RehabScale_Code', outputValueCode);
													if (typeof response_obj.EvnSection_KSG != "undefined") {
														var KsgEl = Ext.get('EvnSection_data_' + el_data.object_id + '_KSG');
														if (KsgEl) {
															if (!Ext.isEmpty(response_obj.EvnSection_KSG)) {
																KsgEl.update(langs('КСГ') + ': ' + response_obj.EvnSection_KSG);
															} else {
																KsgEl.update(langs('КСГ') + ': ');
															}
														}
														record.set('EvnSection_KSG', response_obj.EvnSection_KSG);
													}
													if (typeof response_obj.EvnSection_KPG != "undefined") {
														var KpgEl = Ext.get('EvnSection_data_' + el_data.object_id + '_KPG');
														if (KpgEl) {
															if (!Ext.isEmpty(response_obj.EvnSection_KPG)) {
																KpgEl.update(langs('КПГ') + ': ' + response_obj.EvnSection_KPG);
															} else {
																KpgEl.update(langs('КПГ') + ': ');
															}
														}
														record.set('EvnSection_KPG', response_obj.EvnSection_KPG);
													}
													record.commit(true);
													form.viewFormDataStore.commitChanges();
												}
											}
										}
									});
								}
							},
						onLoadStore: function (store) {
							var obj_date = form.getObjectData(EvnClass_SysNick, el_data.object_id),
								stacType = obj_date.LpuUnitType_SysNick;

							cmp.lastQuery = '';

							store.filterBy(function(rec) {
								switch (stacType)
								{
									case 'stac':
										return rec.get('RehabScale_id').inlist(['3','4','5','6']);
									case 'dstac':
										return rec.get('RehabScale_id').inlist(['2','3']);
									default:
										return false;
								}
							});
						}
					});

					cmp.focus(true, 500);

					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
				case 'RehabScaleVid':

				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaRehabScaleVid');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputRehabScaleVid';
				eloutput = Ext.get(eloutputid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if (!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					cmp = new sw.Promed.SwCommonSprCombo({
						autoLoad: true
						, typeCode: 'int'
						, comboSubject: 'RehabScale'
						, renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaRehabScaleVid'
						, width: 300
						, lastQuery: ''
						, listeners:
							{
								blur: function (f) {
									var outputValue = eloutput.dom.innerHTML;

									onCancel({
										elOutputId: eloutputid
										, outputValue: outputValue
										, elInputWrap: ct
										, elInput: f
									});

									return false;
								},
								render: function (combo) {
									if (!Ext.isEmpty(dataid)) {
										combo.setValue(dataid);
									}
								},
								change: function (f, n, o) {
									var rec = f.getStore().getById(n);
									var outputValue = form.getEmptyValueText();
									var outputValueId, isfinish_name, outputValueCode;
									if (rec) {
										outputValue = isfinish_name = rec.get('RehabScale_Name');
										outputValueId = rec.get('RehabScale_id');
										outputValueCode = rec.get('RehabScale_Code');
									}

									onChange({
										elOutputId: eloutputid
										, outputValue: outputValue
										, outputValueId: outputValueId
										, elInputWrap: ct
										, elInput: f
										, requestUrl: '/?c=EvnSection&m=setEvnSectionParameter'
										, requestParams: {
											object: 'EvnSeciton'
											, id: el_data.object_id
											, param_name: 'RehabScale_vid'
											, param_value: outputValueId
										}
										, requestCallback: function (response_obj) {
											if (response_obj.success == true) {
												form.isFirstAdminCheck = false;
												var record = form.viewFormDataStore.getById(EvnClass_SysNick + '_' + el_data.object_id);
												if (record) {
													record.set('RehabScale_vid', outputValueId);
													record.set('RehabScaleOut_Name', outputValue);
													record.set('RehabScaleOut_Code', outputValueCode);
													record.commit(true);
													form.viewFormDataStore.commitChanges();
												}
											}
										}
									});
								}
							}
					});

					cmp.focus(true, 500);

					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'FedResultDeseaseType':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaFedResultDeseaseType');
                eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputFedResultDeseaseType';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwResultDeseaseTypeFedCombo({
                        autoLoad: true
                        ,typeCode: 'int'
                        ,allowBlank: false
						,hiddenName: 'ResultDeseaseType_fedid'
                        ,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaFedResultDeseaseType'
                        ,width: 300
						,lastQuery:''
                        ,listWidth: 400
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

									return false;
								},
								render: function (combo) {
									if (!Ext.isEmpty(dataid)) {
										combo.setValue(dataid);
									}
								},
								change: function (f, n, o) {
									var rec = f.getStore().getById(n);
									var outputValue = form.getEmptyValueText();
									var outputValueId, isfinish_name, outputValueCode;
									if (rec) {
										outputValue = isfinish_name = rec.get('ResultDeseaseType_Name');
										outputValueId = rec.get('ResultDeseaseType_id');
										outputValueCode = rec.get('ResultDeseaseType_Code');
									}
									var requestUrl = '/?c=EvnSection&m=setEvnSectionParameter';
									if (EvnClass_SysNick.inlist(['EvnPL', 'EvnPLStom'])) {
										requestUrl = '/?c=EvnVizit&m=setEvnVizitParameter';
									}
									onChange({
										elOutputId: eloutputid
										, outputValue: outputValue
										, outputValueId: outputValueId
										, elInputWrap: ct
										, elInput: f
										, requestUrl: requestUrl
										, requestParams: {
											object: EvnClass_SysNick
											, id: el_data.object_id
											, param_name: 'ResultDeseaseType_fedid'
											, param_value: outputValueId
										}
										, requestCallback: function (response_obj) {
											if (response_obj.success == true) {
												form.isFirstAdminCheck = false;
												var record = form.viewFormDataStore.getById(EvnClass_SysNick + '_' + el_data.object_id);
												if (record) {
													record.set('ResultDeseaseType_id', outputValueId);
													record.set('ResultDeseaseType_Name', outputValue);
													record.set('ResultDeseaseType_Code', outputValueCode);
													if (getRegionNick() == 'khak') record.set('FedResultDeseaseType_Code', outputValueCode);
													record.commit(true);
													form.viewFormDataStore.commitChanges();
												}
											}
										}
									});
								}
							}
					});
					cmp.getStore().load({
                        callback: function(){
							this.getStore().clearFilter();
							this.lastQuery = '';
							sw.Promed.EvnPL.filterFedResultDeseaseType({
								fieldFedLeaveType: sw.Promed.EvnPL.createFedViewHtmlFormField(EvnClass_SysNick, el_data.object_id, 'LeaveType'),
								fieldFedResultDeseaseType: this
							});
							this.setValue(dataid);

							if (getRegionNick() == 'khak') this.clearValue();
						},
						scope: cmp
					});
					cmp.focus(true, 500);
					if (getRegionNick() == 'khak') {
					var record = form.viewFormDataStore.getById(EvnClass_SysNick + '_' + el_data.object_id);
					var FedLeaveType_Code = record.data.FedLeaveType_Code;
					var resultArr = new Array();
						if (FedLeaveType_Code.inlist(['301'])) resultArr.push('301');
						if (FedLeaveType_Code.inlist(['301', '302', '303', '304', '306', '307', '310', '311', '314'])) resultArr.push('302');
						if (FedLeaveType_Code.inlist(['301', '302', '303', '304', '306', '307', '310', '311', '314'])) resultArr.push('303');
						if (FedLeaveType_Code.inlist(['301', '302', '303', '304', '305', '306', '308', '309', '310', '311', '312', '314', '315'])) resultArr.push('304');
						if (FedLeaveType_Code.inlist(['302', '304', '305', '308', '309', '313', '315'])) resultArr.push('305');
						cmp.getStore().filterBy(function (rec) {
							return ((rec.get('ResultDeseaseType_Code')).inlist(resultArr))
						});
					}
                    this.input_cmp_list[eloutputid] = cmp;
                }
			break;
			case 'FedLeaveType':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaFedLeaveType');
                eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputFedLeaveType';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwLeaveTypeFedCombo({
                        autoLoad: true
                        ,typeCode: 'int'
                        ,allowBlank: false
						,lastQuery:''
						,hiddenName: 'LeaveType_fedid'
                        ,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaFedLeaveType'
                        ,width: 300
                        ,listWidth: 400
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId, isfinish_name, outputValueCode;
                                if(rec) {
                                    outputValue = isfinish_name = rec.get('LeaveType_Name');
                                    outputValueId = rec.get('LeaveType_id');
                                    outputValueCode = rec.get('LeaveType_Code');
                                }
								var requestUrl =  '/?c=EvnSection&m=setEvnSectionParameter';
								if(EvnClass_SysNick.inlist(['EvnPL','EvnPLStom'])){
									requestUrl =  '/?c=EvnVizit&m=setEvnVizitParameter';
								}
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: requestUrl
                                    ,requestParams: {
                                        object: EvnClass_SysNick 
                                        ,id: el_data.object_id
                                        ,param_name:'LeaveType_fedid'
                                        ,param_value: outputValueId
                                    }
                                    ,requestCallback: function(response_obj) {
										if ( response_obj.success == true ) {
											form.isFirstAdminCheck = false;
											var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
											if (record) {
												record.set('LeaveType_id', outputValueId);
												record.set('LeaveTypee_Name', outputValue);
												record.set('LeaveType_Code', outputValueCode);
												if (getRegionNick() == 'khak') record.set('FedLeaveType_Code', outputValueCode);
												record.commit(true);
												form.viewFormDataStore.commitChanges();
											}
										}
                                    }
                                });
                            }
                        }
                    });
					cmp.getStore().load({
                        callback: function(){
							this.getStore().clearFilter();
							this.lastQuery = '';
							sw.Promed.EvnPL.filterFedLeaveType({
								fieldFedLeaveType: this,
								fieldFedResultDeseaseType: sw.Promed.EvnPL.createFedViewHtmlFormField(EvnClass_SysNick, el_data.object_id, 'ResultDeseaseType')
							});
							this.setValue(dataid);

							if (getRegionNick() == 'khak') this.clearValue();
						},
                        scope: cmp
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
			break;
			case 'CureResult_id':
                ct = Ext.get('EvnSection_data_'+ el_data.object_id +'_inputareaIsFinish');
                eloutputid = 'EvnSection_data_'+ el_data.object_id +'_inputIsFinish';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwCommonSprCombo({
                        autoLoad: true
                        ,typeCode: 'int'
                        ,allowBlank: false
						,hiddenName: 'CureResult_id'
                        ,comboSubject: 'CureResult'
                        ,renderTo: 'EvnSection_data_'+ el_data.object_id +'_inputareaIsFinish'
                        ,width: 300
                        ,listWidth: 400
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    if (combo.getValue() == 2) form.createInputArea('UKL', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId, isfinish_name, outputValueCode;
                                if(rec) {
                                    outputValue = isfinish_name = rec.get('CureResult_Name');
                                    outputValueId = rec.get('CureResult_id');
                                    outputValueCode = rec.get('CureResult_Code');
                                }

                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnSection&m=setEvnSectionParameter'
                                    ,requestParams: {
                                        object: 'EvnSeciton'
                                        ,id: el_data.object_id
                                        ,param_name:'CureResult_id'
                                        ,param_value: outputValueId
                                    }
                                    ,requestCallback: function(response_obj) {
										if ( response_obj.success == true ) {
											form.isFirstAdminCheck = false;
											var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
											if (record) {
												record.set('CureResult_id', outputValueId);
												record.set('CureResult_Name', outputValue);
												record.set('CureResult_Code', outputValueCode);
												record.commit(true);
												form.viewFormDataStore.commitChanges();
											}
										}
                                    }
                                });
                            }
                        }
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'IsSan':
                ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaIsSan');
                eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputIsSan';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwCommonSprCombo({
                        autoLoad: true
                        ,typeCode: 'int'
                        ,comboSubject: 'YesNo'
                        ,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaIsSan'
                        ,width: 60
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    if (combo.getValue()==2) {
                                        form.createInputArea('SanationStatus', EvnClass_SysNick, el_data);
                                    } else {
                                        form.createInputArea('UKL', EvnClass_SysNick, el_data);
                                    }
                                }
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId, IsSan_name;
                                if(rec) {
                                    outputValue = IsSan_name = rec.get('YesNo_Name');
                                    outputValueId = rec.get('YesNo_id');
                                }
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnPLStom'
                                        ,id: el_data.object_id
                                        ,param_name: 'EvnPLStom_IsSan'
                                        ,param_value: outputValueId
                                    }
                                    ,requestCallback: function(response_obj) {
                                        if ( response_obj.success == true ) {
                                        	form.isFirstAdminCheck = false;
                                            var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                                            if (record)
                                            {
                                                var wrapSanationStatus = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapSanationStatus');

                                                if (2 != outputValueId) {
                                                    if (wrapSanationStatus) wrapSanationStatus.setDisplayed('none');
                                                    record.set('SanationStatus_id', null);
                                                    record.set('SanationStatus_Name', null);
                                                } else {
                                                    if (wrapSanationStatus) wrapSanationStatus.setDisplayed('block');
                                                }
                                                //обновить данные ТАП
                                                record.set(EvnClass_SysNick +'_IsSan', outputValueId);
                                                record.set('IsSan_Name', IsSan_name);
                                                record.commit(true);
                                                form.viewFormDataStore.commitChanges();
                                            }
                                        }
                                    }
                                });
                            }
                        }
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'SanationStatus':
                ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaSanationStatus');
                eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputSanationStatus';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    //sw.Promed.SwSanationStatusCombo
                    cmp = new sw.Promed.SwCommonSprCombo({
                        autoLoad: true
                        ,typeCode: 'int'
                        ,comboSubject: 'SanationStatus'
                        ,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaSanationStatus'
                        ,width: 340
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    form.createInputArea('UKL', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId, SanationStatus_name;
                                if(rec) {
                                    outputValue = SanationStatus_name = rec.get('SanationStatus_Name');
                                    outputValueId = rec.get('SanationStatus_id');
                                }
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnPLStom'
                                        ,id: el_data.object_id
                                        ,param_name: 'SanationStatus_id'
                                        ,param_value: outputValueId
                                    }
                                    ,requestCallback: function(response_obj) {
                                    	form.isFirstAdminCheck = false;
                                        var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                                        if (record && response_obj.success) {
                                            //обновить данные ТАП
                                            record.set('SanationStatus_id', outputValueId);
                                            record.set('SanationStatus_Name', SanationStatus_name);
                                            record.commit(true);
                                            form.viewFormDataStore.commitChanges();
                                        }
                                    }
                                });
                            }
                        }
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'UKL':
                ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaUKL');
                eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputUKL';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    cmp = new Ext.form.NumberField({
                        name: 'EvnPL_UKL'
                        ,allowDecimals: true
                        ,allowNegative: false
                        ,maxValue: 1
                        ,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaUKL'
                        ,width: 60
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    form.createInputArea('ResultClass', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                                if (record) {
                                    value = record.get(EvnClass_SysNick +'_UKL') || null;
                                    combo.setValue(value);
                                }
                            },
                            change: function(f,n,o) {
                                var outputValue = n||form.getEmptyValueText();
                                var outputValueId = n;
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnPL'
                                        ,id: el_data.object_id
                                        ,param_name: 'EvnPL_UKL'
                                        ,param_value: outputValueId
                                    }
                                    ,requestCallback: function(response_obj) {
                                    	form.isFirstAdminCheck = false;
                                        var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                                        if (record && response_obj.success) {
                                            //обновить данные ТАП
                                            record.set(EvnClass_SysNick +'_UKL', outputValueId);
                                            record.commit(true);
                                            form.viewFormDataStore.commitChanges();
                                        }
                                    }
                                });
                            }
                        }
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'IsFirstDisable':
                ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaIsFirstDisable');
                eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputIsFirstDisable';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
					cmp = new sw.Promed.SwCommonSprCombo({
						autoLoad: true
						,allowBlank: true
						,typeCode: 'int'
						,comboSubject: 'YesNo'
						,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaIsFirstDisable'
						,width: 60
						,listeners: {
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							change: function(f,n,o) {
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId, IsSan_name;
								if(rec) {
									outputValue = IsSan_name = rec.get('YesNo_Name');
									outputValueId = rec.get('YesNo_id');
								}
								form.isFirstAdminCheck = false;
								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestYesNo: function(code, options) {
										if (code == 115) {
											options.ignoreFirstDisableCheck = 1;
											form.data.ignoreFirstDisableCheck = 1;
										}
									}
									,requestNo: '---' // без этого он будет циклично задавать вопрос
									,requestParams: {
										object: EvnClass_SysNick
										,id: el_data.object_id
										,param_name: 'IsFirstDisable'
										,param_value: outputValueId
									}
								});
							}
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
                }
                break;
			case 'PrivilegeType':
                ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaPrivilegeType');
                eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputPrivilegeType';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
					cmp = new sw.Promed.SwPrivilegeTypeCombo({
						autoLoad: true
						,allowBlank: true
						,typeCode: 'int'
						,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaPrivilegeType'
						,width: 200
						,listeners: {
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							change: function(f,n,o) {
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId;
								if(rec) {
									outputValue = rec.get('PrivilegeType_Name');
									outputValueId = rec.get('PrivilegeType_id');
								}
								form.isFirstAdminCheck = false;
								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestYesNo: function(code, options) {
										if (code == 115) {
											options.ignoreFirstDisableCheck = 1;
											form.data.ignoreFirstDisableCheck = 1;
										}
									}
									,requestNo: '---' // без этого он будет циклично задавать вопрос
									,requestParams: {
										object: EvnClass_SysNick
										,id: el_data.object_id
										,param_name: 'PrivilegeType_id'
										,param_value: outputValueId
									}
								});
							}
						}
					});
					cmp.getStore().load({
						params: {where: ' where PrivilegeType_Code in (81,82,83,84)'},
						callback: function() {
							cmp.setValue(cmp.getValue());
						},
						scope: cmp
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'ResultClass':
                ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaResultClass');
                eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputResultClass';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwResultClassCombo({
                        autoLoad: false
                        ,typeCode: 'int'
                        ,allowSysNick: true
                        ,lastQuery: ''
                        ,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaResultClass'
                        ,width: 340
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    var rec = combo.getStore().getById(combo.getValue());
                                    if (rec && form.ResultClassCodeDie != rec.get('ResultClass_Code'))
                                        form.createInputArea('DirectType', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId, resultclass_name, resultclass_code;
                                if (rec) {
                                    outputValue = resultclass_name = rec.get('ResultClass_Name');
                                    resultclass_code = rec.get('ResultClass_Code');
                                    outputValueId = rec.get('ResultClass_id');
                                }
								var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
								var pay_type_nick = '';
								var omsPayTypeExists = false;
								form.viewFormDataStore.each(function(rec) {
									if ( rec.get('EvnVizitPL_pid') && el_data.object_id == rec.get('EvnVizitPL_pid') && rec.get('PayType_SysNick') && !pay_type_nick ) {
										pay_type_nick = rec.get('PayType_SysNick');
									}

									if ( rec.get('PayType_SysNick') == 'oms' ) {
										omsPayTypeExists = true;
									}
								});
								function saveResultClass(options) {
									var lastEvnVizitPLDate;
									form.viewFormDataStore.each(function(rec) {
										if (rec.object_code=='EvnVizitPL'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPL_setDate')) && Date.parseDate(rec.get('EvnVizitPL_setDate'), 'd.m.Y') >= lastEvnVizitPLDate))){
											lastEvnVizitPLDate = Date.parseDate(rec.get('EvnVizitPL_setDate'), 'd.m.Y');
										} else if (rec.object_code=='EvnVizitPLStom'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPLStom_setDate')) && Date.parseDate(rec.get('EvnVizitPLStom_setDate'), 'd.m.Y') >= lastEvnVizitPLDate))){
											lastEvnVizitPLDate = Date.parseDate(rec.get('EvnVizitPLStom_setDate'), 'd.m.Y');
										}
									});
									var is2016 = !Ext.isEmpty(lastEvnVizitPLDate) && lastEvnVizitPLDate >= sw.Promed.EvnPL.getDateX2016();
									try {
										if ( 'kareliya' == getRegionNick() && EvnClass_SysNick == 'EvnPL' && 'oms' == pay_type_nick && '313' == resultclass_code ) {
											throw {warningMsg: langs('Посещения с результатом обращения – констатация факта смерти (код - 313) оплате за счет ОМС не подлежат.')};
										}
										// @task https://redmine.swan.perm.ru/issues/76241
										// Для ЭМК 313-й фед. исход проставляется, если указать результат "4. Смерть"
										else if ( 'perm' == getRegionNick() && EvnClass_SysNick == 'EvnPL' && true == omsPayTypeExists && ( '4' == resultclass_code && !is2016 || '5' == resultclass_code && is2016 ) ) {
											throw {msg: langs('Случаи с исходом "313 Констатация факта смерти в поликлинике" не подлежат оплате по ОМС. Для сохранения измените вид оплаты.')};
										}
									} catch(err) {
										if (err.warningMsg) {
											if (false == err.warningMsg.toString().inlist(options.ignoreErrors)) {
												sw.swMsg.show({
													buttons: Ext.Msg.YESNO,
													fn: function(buttonId, text, obj) {
														if ('yes' == buttonId) {
															options.ignoreErrors.push(err.warningMsg);
															saveResultClass(options);
														}
													},
													icon: Ext.Msg.WARNING,
													msg: err.warningMsg + '<br>Продолжить сохранение?',
													title: langs('Предупреждение')
												});
												return false;
											}
										} else {
											sw.swMsg.alert(langs('Ошибка'), err.msg || err.toString());
											return false;
										}
									}
									var wrapDirectType = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapDirectType');
									var wrapDirectClass = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapDirectClass');
									if (form.ResultClassCodeDie != resultclass_code) {
										if (wrapDirectType) wrapDirectType.setDisplayed('block');
										if (wrapDirectClass) wrapDirectClass.setDisplayed('block');
									} else {
										if (wrapDirectType) wrapDirectType.setDisplayed('none');
										if (wrapDirectClass) wrapDirectClass.setDisplayed('none');
									}
									// log(['onChange', wrapDirectType, wrapDirectClass, rec, resultclass_code]);
									onChange({
										elOutputId: eloutputid
										,outputValue: outputValue
										,outputValueId: outputValueId
										,elInputWrap: ct
										,elInput: f
										,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
										,requestParams: {
											object: 'EvnPL'
											,id: el_data.object_id
											,param_name: 'ResultClass_id'
											,param_value: outputValueId
										}
										,requestCallback: function(response_obj) {
											if (record && response_obj.success)
											{
												form.isFirstAdminCheck = false;
												//обновить данные ТАП
												record.set('ResultClass_id', outputValueId);
												record.set('ResultClass_Name', resultclass_name);
												record.set('ResultClass_Code', resultclass_code);
												if (!resultclass_code || 'die' == resultclass_code) {
													record.set('DirectType_id', null);
													record.set('DirectType_Name', null);
													record.set('DirectType_Code', null);
													record.set('DirectClass_id', null);
													record.set('DirectClass_Name', null);
													record.set('Lpu_oid', null);
													record.set('LpuSection_oid', null);
												}
												if (false == sw.Promed.EvnPL.isHiddenFedResultFields()) {
													var lastEvnVizitPLDate;
													form.viewFormDataStore.each(function(rec) {
														if (rec.object_code=='EvnVizitPL'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPL_setDate')) && Date.parseDate(rec.get('EvnVizitPL_setDate'), 'd.m.Y') >= lastEvnVizitPLDate))){
															lastEvnVizitPLDate = Date.parseDate(rec.get('EvnVizitPL_setDate'), 'd.m.Y');
														} else if (rec.object_code=='EvnVizitPLStom'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPLStom_setDate')) && Date.parseDate(rec.get('EvnVizitPLStom_setDate'), 'd.m.Y') >= lastEvnVizitPLDate))){
															lastEvnVizitPLDate = Date.parseDate(rec.get('EvnVizitPLStom_setDate'), 'd.m.Y');
														}
													});
													var ResultDeseaseType_id = sw.Promed.EvnPL.calcFedResultDeseaseType({
														is2016: !Ext.isEmpty(lastEvnVizitPLDate) && lastEvnVizitPLDate >= sw.Promed.EvnPL.getDateX2016(),
														disableToogleContainer: false,
														isEmk:true,
														InterruptLeaveType_id: record.get('InterruptLeaveType_id'),
														DirectType_Code: record.get('DirectType_Code'),
														ResultClass_Code: record.get('ResultClass_Code'),
														IsFinish: record.get('EvnPL_IsFinish'),
														fieldFedResultDeseaseType: sw.Promed.EvnPL.createFedViewHtmlFormField(EvnClass_SysNick, el_data.object_id, 'ResultDeseaseType',form.ResultDeseaseTypeFedstore)
													});
													var LeaveTypeFed_id = sw.Promed.EvnPL.calcFedLeaveType({
														is2016: !Ext.isEmpty(lastEvnVizitPLDate) && lastEvnVizitPLDate >= sw.Promed.EvnPL.getDateX2016(),
														disableToogleContainer: false,
														isEmk:true,
														InterruptLeaveType_id: record.get('InterruptLeaveType_id'),
														LeaveType_fedid: rec.get('LeaveType_fedid'),
														ResultClass_Code: record.get('ResultClass_Code'),
														DirectType_Code: record.get('DirectType_Code'),
														DirectClass_Code: record.get('DirectClass_Code'),
														IsFinish: record.get('EvnPL_IsFinish'),
														fieldFedLeaveType: sw.Promed.EvnPL.createFedViewHtmlFormField(EvnClass_SysNick, el_data.object_id, 'LeaveType',form.LeaveTypeFedstore)
													});
													form.saveFedField(ResultDeseaseType_id,LeaveTypeFed_id,record,el_data.object_id);
													/*sw.Promed.EvnPL.filterFedResultDeseaseType({
														fieldFedLeaveType: sw.Promed.EvnPL.createFedViewHtmlFormField(EvnClass_SysNick, el_data.object_id, 'LeaveType'),
														fieldFedResultDeseaseType: sw.Promed.EvnPL.createFedViewHtmlFormField(EvnClass_SysNick, el_data.object_id, 'ResultDeseaseType')
													})*/
												}
												record.commit(true);
												form.viewFormDataStore.commitChanges();
											}
										}
									});
								}
								saveResultClass({ignoreErrors: []});
                            }
                        }
                    });
					var loadParams = new Object();

					if ( getRegionNick() == 'ekb' ) {
						loadParams = {
							where: "where ResultClass_fedid is null"
						};
					}
					else if ( getRegionNick() == 'kaluga' ) {
						loadParams = {
							where: "where ResultClass_Code in ('301','305','308','314')"
						};
					}

					cmp.getStore().load({
						params: loadParams,
                        callback: function(){
							var lastEvnVizitPLDate;
							form.viewFormDataStore.each(function(rec) {
								if (rec.object_code=='EvnVizitPL'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPL_setDate')) && Date.parseDate(rec.get('EvnVizitPL_setDate'), 'd.m.Y') >= lastEvnVizitPLDate))){
									lastEvnVizitPLDate = Date.parseDate(rec.get('EvnVizitPL_setDate'), 'd.m.Y');
								} else if (rec.object_code=='EvnVizitPLStom'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPLStom_setDate')) && Date.parseDate(rec.get('EvnVizitPLStom_setDate'), 'd.m.Y') >= lastEvnVizitPLDate))){
									lastEvnVizitPLDate = Date.parseDate(rec.get('EvnVizitPLStom_setDate'), 'd.m.Y');
								}
							});
							this.getStore().clearFilter();
							this.lastQuery = '';
							this.getStore().filterBy(function(rec){
								return (
									(Ext.isEmpty(rec.get('ResultClass_begDT')) || rec.get('ResultClass_begDT') <= lastEvnVizitPLDate)
									&& (Ext.isEmpty(rec.get('ResultClass_endDT')) || rec.get('ResultClass_endDT') >= lastEvnVizitPLDate)
									&& (
										!EvnClass_SysNick.inlist(['EvnPL','EvnPLStom'])
										|| rec.get('ResultClass_id') == dataid
										|| !rec.get('ResultClass_Code')
										|| (getRegionNick() == 'penza' && (!EvnClass_SysNick.inlist(['EvnPLStom']) || rec.get('ResultClass_Code').inlist(['301','302','303','305'])))
										|| (getRegionNick() == 'astra' && rec.get('ResultClass_Code').inlist(['1','2','3','4','5']))
										|| (
											getRegionNick() != 'astra'
											&& getRegionNick() != 'penza'
											&& (
												!rec.get('ResultClass_Code').inlist(['6','7'])
												|| getRegionNick() != 'perm'
												|| lastEvnVizitPLDate < xdate
											)
										)
									)
								);
							});
                            if(this.getStore().getCount() > 0) {
                                this.setValue(dataid);
                            }
                        },
                        scope: cmp
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
			case 'MedicalStatus':
                ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaMedicalStatus');
                eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputMedicalStatus';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwCommonSprCombo({
                        autoLoad: true
                        ,typeCode: 'int'
                        ,allowSysNick: true
                        ,lastQuery: ''
                        ,comboSubject: 'MedicalStatus'
                        ,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaMedicalStatus'
                        ,width: 340
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId, MedicalStatus_name;
                                if(rec) {
                                    outputValue = MedicalStatus_name = rec.get('MedicalStatus_Name');
                                    outputValueId = rec.get('MedicalStatus_id');
                                }
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnPL'
                                        ,id: el_data.object_id
                                        ,param_name: 'MedicalStatus_id'
                                        ,param_value: outputValueId
                                    }
                                    ,requestCallback: function(response_obj) {
                                    	form.isFirstAdminCheck = false;
                                        var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                                        if (record && response_obj.success) {
                                            //обновить данные ТАП
                                            record.set('MedicalStatus_Name', MedicalStatus_name);
                                            record.commit(true);
                                            form.viewFormDataStore.commitChanges();
                                        }
                                    }
                                });
                            }
                        }
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
			case 'ResultDeseaseType':
                ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaResultDeseaseType');
                eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputResultDeseaseType';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwCommonSprCombo({
                        autoLoad: true
                        ,typeCode: 'int'
                        ,allowSysNick: true
                        ,lastQuery: ''
                        ,comboSubject: 'ResultDeseaseType'
                        ,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaResultDeseaseType'
                        ,width: 340
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId, ResultDeseaseType_name;
                                if(rec) {
                                    outputValue = ResultDeseaseType_name = rec.get('ResultDeseaseType_Name');
                                    outputValueId = rec.get('ResultDeseaseType_id');
                                }
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnPL'
                                        ,id: el_data.object_id
                                        ,param_name: 'ResultDeseaseType_id'
                                        ,param_value: outputValueId
                                    }
                                    ,requestCallback: function(response_obj) {
                                    	form.isFirstAdminCheck = false;
                                        var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                                        if (record && response_obj.success) {
                                            //обновить данные ТАП
                                            record.set('ResultDeseaseType_Name', ResultDeseaseType_name);
                                            record.commit(true);
                                            form.viewFormDataStore.commitChanges();
                                        }
                                    }
                                });
                            }
                        }
                        ,onLoadStore: function(store) {
							if (getRegionNick() == 'krasnoyarsk') {
								store.filterBy(function(rec) {
									return (!Ext.isEmpty(rec.get('ResultDeseaseType_Code')) && rec.get('ResultDeseaseType_Code').toString().substr(0, 1) == '3');
								});
							}
						}
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
			case 'InterruptLeaveType':
				ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaInterruptLeaveType');
                eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputInterruptLeaveType';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwCommonSprCombo({
                        autoLoad: true
                        ,typeCode: 'int'
                        ,lastQuery: ''
                        ,comboSubject: 'InterruptLeaveType'
                        ,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaInterruptLeaveType'
                        ,width: 340
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId, InterruptLeaveType_name;
                                if(rec) {
                                    outputValue = InterruptLeaveType_name = rec.get('InterruptLeaveType_Name');
                                    outputValueId = rec.get('InterruptLeaveType_id');
                                }
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnPL'
                                        ,id: el_data.object_id
                                        ,param_name: 'InterruptLeaveType_id'
                                        ,param_value: outputValueId
                                    }
                                    ,requestCallback: function(response_obj) {
                                    	form.isFirstAdminCheck = false;
                                        var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                                        if (record && response_obj.success) {
                                            //обновить данные ТАП
                                            record.set('InterruptLeaveType_id', outputValueId);
                                            record.set('InterruptLeaveType_Name', InterruptLeaveType_name);
                                            record.commit(true);
											eloutput.setAttribute('dataid', outputValueId || '');
                                            form.viewFormDataStore.commitChanges();
											if (false == sw.Promed.EvnPL.isHiddenFedResultFields()) {
												var lastEvnVizitPLDate;
												form.viewFormDataStore.each(function(rec) {
													if (rec.object_code=='EvnVizitPL'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPL_setDate')) && Date.parseDate(rec.get('EvnVizitPL_setDate'), 'd.m.Y') >= lastEvnVizitPLDate))){
														lastEvnVizitPLDate = Date.parseDate(rec.get('EvnVizitPL_setDate'), 'd.m.Y');
													} else if (rec.object_code=='EvnVizitPLStom'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPLStom_setDate')) && Date.parseDate(rec.get('EvnVizitPLStom_setDate'), 'd.m.Y') >= lastEvnVizitPLDate))){
														lastEvnVizitPLDate = Date.parseDate(rec.get('EvnVizitPLStom_setDate'), 'd.m.Y');
													}
												});
												var ResultDeseaseType_id = sw.Promed.EvnPL.calcFedResultDeseaseType({
													is2016: !Ext.isEmpty(lastEvnVizitPLDate) && lastEvnVizitPLDate >= sw.Promed.EvnPL.getDateX2016(),
													disableToogleContainer: false,
													isEmk:true,
													InterruptLeaveType_id: record.get('InterruptLeaveType_id'),
													DirectType_Code: record.get('DirectType_Code'),
													ResultClass_Code: record.get('ResultClass_Code'),
													IsFinish: record.get('EvnPL_IsFinish'),
													fieldFedResultDeseaseType: sw.Promed.EvnPL.createFedViewHtmlFormField(EvnClass_SysNick, el_data.object_id, 'ResultDeseaseType',form.ResultDeseaseTypeFedstore)
												});
												var LeaveTypeFed_id = sw.Promed.EvnPL.calcFedLeaveType({
													is2016: !Ext.isEmpty(lastEvnVizitPLDate) && lastEvnVizitPLDate >= sw.Promed.EvnPL.getDateX2016(),
													disableToogleContainer: false,
													isEmk:true,
													InterruptLeaveType_id: record.get('InterruptLeaveType_id'),
													LeaveType_fedid: record.get('LeaveType_fedid'),
													ResultClass_Code: record.get('ResultClass_Code'),
													DirectType_Code: record.get('DirectType_Code'),
													DirectClass_Code: record.get('DirectClass_Code'),
													IsFinish: record.get('EvnPL_IsFinish'),
													fieldFedLeaveType: sw.Promed.EvnPL.createFedViewHtmlFormField(EvnClass_SysNick, el_data.object_id, 'LeaveType',form.LeaveTypeFedstore)
												});
												form.saveFedField(ResultDeseaseType_id,LeaveTypeFed_id,record,el_data.object_id);
											}
                                        }
                                    }
                                });
                            }
                        }
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
				break;
			case 'DiagConc': var cv=1;
			log(ct,cv++);
				ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaDiagConc');
                eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputDiagConc';
                eloutput = Ext.get(eloutputid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					log(ct,cv++);
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}

					cmp = new sw.Promed.SwDiagCombo({
						checkAccessRights: true
						,baseFilterFn: function(rec){
							if(typeof rec.get == 'function') {
								return (rec.get('Diag_Code').substr(0,3) >= 'V01' && rec.get('Diag_Code').substr(0,3) <= 'Y98');
							} else if (rec.attributes && rec.attributes.Diag_Code) {
								return (rec.attributes.Diag_Code.substr(0,3) >= 'V01' && rec.attributes.Diag_Code.substr(0,3) <= 'Y98');
							} else {
								return true;
							}
						}
						,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaDiagConc'
						,width: 400
					});
					cmp.on('blur', function(f) {
						if (f.disableBlurAction) {
							return false;
						}
                        var outputValue = eloutput.dom.innerHTML;
                        var outputValueId = dataid;
						log(ct,cv++);
                        onCancel({
                            elOutputId: eloutputid
                            ,outputValue: outputValue
                            ,outputValueId: outputValueId
                            ,elInputWrap: ct
                            ,elInput: f
                        });
                        return true;
                    });

                    cmp.on('keydown', function(combo, e) {
                        if (e.getKey() == e.TAB) {
                           // form.createInputArea('DeseaseType', EvnClass_SysNick, el_data);
                        }
                    });
				
                    cmp.on('change', function(f,n,o) {
                        if (f.disableBlurAction) {
                            return false;
                        }
                        
						var rec = f.getStore().getById(n);
						var outputValue = form.getEmptyValueText();
						var outputValueId = null;
						var diagCode = '';
						var diagName = '';


						if(rec) {
							outputValue = rec.get('Diag_Code') + ' ' + rec.get('Diag_Name');
							outputValueId = rec.get('Diag_id');
							diagName = rec.get('Diag_Name');
							diagCode = rec.get('Diag_Code');
                            
                        } else if ( n != '') {
							return true;
						}
						log(ct,cv++);
						onChange({
							elOutputId: eloutputid
							,outputValue: outputValue
							,outputValueId: outputValueId
							,elInputWrap: ct
							,elInput: f
							,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
							,requestParams: {
								object: 'EvnPL'
								,id: el_data.object_id
								,param_name: 'Diag_concid'
								,param_value: outputValueId
							}
							,requestCallback: function(response_obj) {
								if ( response_obj.success == true ) {
									form.isFirstAdminCheck = false;
									var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
									record.set('DiagConc_Name',diagName);
									record.commit(true);
									form.viewFormDataStore.commitChanges();
								}
							}
						});
					});

					if(!Ext.isEmpty(dataid)) {
						cmp.getStore().load({
							params: {where: "where Diag_id = " + dataid},
							callback: function(data) {
								cmp.getStore().each(function(record) {
									if (parseInt(record.get('Diag_id')) == dataid)
									{
										cmp.setValue(dataid);
										cmp.fireEvent('select', cmp, record, 0);
									}
								});
							}
						});
					}
					
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
            case 'DirectType':
                ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaDirectType');
                eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputDirectType';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwCommonSprCombo({
                        autoLoad: true
                        ,typeCode: 'int'
                        ,comboSubject: 'DirectType'
                        ,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaDirectType'
                        ,width: 340
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    form.createInputArea('DirectClass', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId, directtype_name, directtype_code;
                                if(rec) {
                                    outputValue = directtype_name = rec.get('DirectType_Name');
									directtype_code = rec.get('DirectType_Code');
                                    outputValueId = rec.get('DirectType_id');
                                }
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnPL'
                                        ,id: el_data.object_id
                                        ,param_name: 'DirectType_id'
                                        ,param_value: outputValueId
                                    }
                                    ,requestCallback: function(response_obj) {
                                    	form.isFirstAdminCheck = false;
                                        var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                                        if (record && response_obj.success) {
                                            //обновить данные ТАП
                                            record.set('DirectType_Code', directtype_code);
                                            record.set('DirectType_Name', directtype_name);
                                            record.commit(true);
                                            form.viewFormDataStore.commitChanges();

                                            onChange({
                                                elOutputId: EvnClass_SysNick +'_'+ el_data.object_id +'_inputLpuSectionO'
                                                ,outputValue: form.getEmptyValueText()
                                                ,outputValueId: null
                                                ,elInputWrap: Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaLpuSectionO')
                                                ,elInput: null
                                                ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                                ,requestParams: {
                                                    object: 'EvnPL'
                                                    ,id: el_data.object_id
                                                    ,param_name: 'LpuSection_oid'
                                                    ,param_value: null
                                                }
                                                ,requestCallback: function(response_obj) {
                                                    if (response_obj.success) {
                                                    	form.isFirstAdminCheck = false;
                                                        //обновить данные ТАП
                                                        record.set('LpuSection_oid', null);
                                                        record.set('LpuSectionO_Name', null);
                                                        record.commit(true);
                                                        form.viewFormDataStore.commitChanges();
														if (false == sw.Promed.EvnPL.isHiddenFedResultFields()) {
															var lastEvnVizitPLDate;
															form.viewFormDataStore.each(function(rec) {
																if (rec.object_code=='EvnVizitPL'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPL_setDate')) && Date.parseDate(rec.get('EvnVizitPL_setDate'), 'd.m.Y') >= lastEvnVizitPLDate))){
																	lastEvnVizitPLDate = Date.parseDate(rec.get('EvnVizitPL_setDate'), 'd.m.Y');
																} else if (rec.object_code=='EvnVizitPLStom'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPLStom_setDate')) && Date.parseDate(rec.get('EvnVizitPLStom_setDate'), 'd.m.Y') >= lastEvnVizitPLDate))){
																	lastEvnVizitPLDate = Date.parseDate(rec.get('EvnVizitPLStom_setDate'), 'd.m.Y');
																}
															});
															var ResultDeseaseType_id = sw.Promed.EvnPL.calcFedResultDeseaseType({
																is2016: !Ext.isEmpty(lastEvnVizitPLDate) && lastEvnVizitPLDate >= sw.Promed.EvnPL.getDateX2016(),
																disableToogleContainer: false,
																isEmk:true,
																InterruptLeaveType_id: record.get('InterruptLeaveType_id'),
																DirectType_Code: record.get('DirectType_Code'),
																ResultClass_Code: record.get('ResultClass_Code'),
																IsFinish: record.get('EvnPL_IsFinish'),
																fieldFedResultDeseaseType: sw.Promed.EvnPL.createFedViewHtmlFormField(EvnClass_SysNick, el_data.object_id, 'ResultDeseaseType',form.ResultDeseaseTypeFedstore)
															});
															var LeaveTypeFed_id = sw.Promed.EvnPL.calcFedLeaveType({
																is2016: !Ext.isEmpty(lastEvnVizitPLDate) && lastEvnVizitPLDate >= sw.Promed.EvnPL.getDateX2016(),
																disableToogleContainer: false,
																isEmk:true,
																InterruptLeaveType_id: record.get('InterruptLeaveType_id'),
																LeaveType_fedid: record.get('LeaveType_fedid'),
																ResultClass_Code: record.get('ResultClass_Code'),
																DirectType_Code: record.get('DirectType_Code'),
																DirectClass_Code: record.get('DirectClass_Code'),
																IsFinish: record.get('EvnPL_IsFinish'),
																fieldFedLeaveType: sw.Promed.EvnPL.createFedViewHtmlFormField(EvnClass_SysNick, el_data.object_id, 'LeaveType',form.LeaveTypeFedstore)
															});
															form.saveFedField(ResultDeseaseType_id,LeaveTypeFed_id,record,el_data.object_id);
															/*sw.Promed.EvnPL.filterFedResultDeseaseType({
																fieldFedLeaveType: sw.Promed.EvnPL.createFedViewHtmlFormField(EvnClass_SysNick, el_data.object_id, 'LeaveType'),
																fieldFedResultDeseaseType: sw.Promed.EvnPL.createFedViewHtmlFormField(EvnClass_SysNick, el_data.object_id, 'ResultDeseaseType')
															})*/
														}
                                                    }
                                                }
                                            });
                                        }
                                    }
                                });
                            }
                        }
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'DirectClass':
                ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaDirectClass');
                eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputDirectClass';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwCommonSprCombo({
                        autoLoad: true
                        ,typeCode: 'int'
                        ,comboSubject: 'DirectClass'
                        ,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaDirectClass'
                        ,width: 340
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    if (combo.getValue() == 1) form.createInputArea('LpuSectionO', EvnClass_SysNick, el_data);
                                    if (combo.getValue() == 2) form.createInputArea('LpuO', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId, directclass_name, directclass_code;
                                if(rec) {
                                    outputValue = directclass_name = rec.get('DirectClass_Name');
                                    directclass_code = rec.get('DirectClass_Code');
                                    outputValueId = rec.get('DirectClass_id');
                                }
                                var wrapLpuSectionO = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapLpuSectionO');
                                var wrapLpuO = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_wrapLpuO');
                                if (1 == outputValueId) {
                                    if (wrapLpuSectionO) wrapLpuSectionO.setDisplayed('block');
                                    if (wrapLpuO) wrapLpuO.setDisplayed('none');
                                } else if (2 == outputValueId) {
                                    if (wrapLpuO) wrapLpuO.setDisplayed('block');
                                    if (wrapLpuSectionO) wrapLpuSectionO.setDisplayed('none');
                                } else {
                                    if (wrapLpuSectionO) wrapLpuSectionO.setDisplayed('none');
                                    if (wrapLpuO) wrapLpuO.setDisplayed('none');
                                }
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnPL'
                                        ,id: el_data.object_id
                                        ,param_name: 'DirectClass_id'
                                        ,param_value: outputValueId
                                    }
                                    ,requestCallback: function(response_obj) {
                                    	form.isFirstAdminCheck = false;
                                        var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                                        if (record && response_obj.success) {
											var inputLpuSectionO = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputLpuSectionO');
										
											var inputLpuO = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputLpuO');
												
                                            //обновить данные ТАП
                                            record.set('DirectClass_Name', directclass_name);
                                            record.set('DirectClass_Code', directclass_code);
                                            if (1 == outputValueId) {
                                                record.set('Lpu_oid', null);
                                                record.set('LpuO_Nick', null);
												if (inputLpuO) {
													inputLpuO.dom.innerHTML = form.getEmptyValueText();
													inputLpuO.setAttribute('dataid','');
												}
                                            } else if (2 == outputValueId) {
												if (inputLpuSectionO) {
													inputLpuSectionO.dom.innerHTML = form.getEmptyValueText();
													inputLpuSectionO.setAttribute('dataid','');
												}
                                                record.set('LpuSection_oid', null);
                                                record.set('LpuSectionO_Name', null);
                                            } else {
												if (inputLpuSectionO) {
													inputLpuSectionO.dom.innerHTML = form.getEmptyValueText();
													inputLpuSectionO.setAttribute('dataid','');
												}
												if (inputLpuO) {
													inputLpuO.dom.innerHTML = form.getEmptyValueText();
													inputLpuO.setAttribute('dataid','');
												}
                                                record.set('LpuSection_oid', null);
                                                record.set('LpuSectionO_Name', null);
                                                record.set('Lpu_oid', null);
                                                record.set('LpuO_Nick', null);
                                            }
                                            record.commit(true);
                                            form.viewFormDataStore.commitChanges();
											if (false == sw.Promed.EvnPL.isHiddenFedResultFields()) {
												var lastEvnVizitPLDate;
												form.viewFormDataStore.each(function(rec) {
													if (rec.object_code=='EvnVizitPL'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPL_setDate')) && Date.parseDate(rec.get('EvnVizitPL_setDate'), 'd.m.Y') >= lastEvnVizitPLDate))){
														lastEvnVizitPLDate = Date.parseDate(rec.get('EvnVizitPL_setDate'), 'd.m.Y');
													} else if (rec.object_code=='EvnVizitPLStom'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPLStom_setDate')) && Date.parseDate(rec.get('EvnVizitPLStom_setDate'), 'd.m.Y') >= lastEvnVizitPLDate))){
														lastEvnVizitPLDate = Date.parseDate(rec.get('EvnVizitPLStom_setDate'), 'd.m.Y');
													}
												});
												var ResultDeseaseType_id = sw.Promed.EvnPL.calcFedResultDeseaseType({
													is2016: !Ext.isEmpty(lastEvnVizitPLDate) && lastEvnVizitPLDate >= sw.Promed.EvnPL.getDateX2016(),
													disableToogleContainer: false,
													isEmk:true,
													InterruptLeaveType_id: record.get('InterruptLeaveType_id'),
													DirectType_Code: record.get('DirectType_Code'),
													ResultClass_Code: record.get('ResultClass_Code'),
													IsFinish: record.get('EvnPL_IsFinish'),
													fieldFedResultDeseaseType: sw.Promed.EvnPL.createFedViewHtmlFormField(EvnClass_SysNick, el_data.object_id, 'ResultDeseaseType',form.ResultDeseaseTypeFedstore)
												});
												var LeaveTypeFed_id = sw.Promed.EvnPL.calcFedLeaveType({
													is2016: !Ext.isEmpty(lastEvnVizitPLDate) && lastEvnVizitPLDate >= sw.Promed.EvnPL.getDateX2016(),
													disableToogleContainer: false,
													isEmk:true,
													InterruptLeaveType_id: record.get('InterruptLeaveType_id'),
													LeaveType_fedid: record.get('LeaveType_fedid'),
													ResultClass_Code: record.get('ResultClass_Code'),
													DirectType_Code: record.get('DirectType_Code'),
													DirectClass_Code: record.get('DirectClass_Code'),
													IsFinish: record.get('EvnPL_IsFinish'),
													fieldFedLeaveType: sw.Promed.EvnPL.createFedViewHtmlFormField(EvnClass_SysNick, el_data.object_id, 'LeaveType',form.LeaveTypeFedstore)
												});
												form.saveFedField(ResultDeseaseType_id,LeaveTypeFed_id,record,el_data.object_id);
												/*sw.Promed.EvnPL.filterFedResultDeseaseType({
													fieldFedLeaveType: sw.Promed.EvnPL.createFedViewHtmlFormField(EvnClass_SysNick, el_data.object_id, 'LeaveType'),
													fieldFedResultDeseaseType: sw.Promed.EvnPL.createFedViewHtmlFormField(EvnClass_SysNick, el_data.object_id, 'ResultDeseaseType')
												})*/
											}
                                        }
                                    }
                                });
                            }
                        }
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'LpuSectionO':
                ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaLpuSectionO');
                eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputLpuSectionO';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
					var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwLpuSectionGlobalCombo({
                        hideLabel: true
                        ,hiddenName: 'LpuSection_oid'
                        ,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaLpuSectionO'
                        ,listWidth: 600
                        ,width: 300
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    form.createInputArea('IsFinish', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId, lpusectiono_name;
                                if(rec) {
                                    outputValue = lpusectiono_name = rec.get('LpuSection_Name');
                                    outputValueId = rec.get('LpuSection_id');
                                }
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnPL'
                                        ,id: el_data.object_id
                                        ,param_name: 'LpuSection_oid'
                                        ,param_value: outputValueId
                                    }
                                    ,requestCallback: function(response_obj) {
                                    	form.isFirstAdminCheck = false;
                                        if (record && response_obj.success) {
                                            //обновить данные ТАП
                                            record.set('LpuSectionO_Name', lpusectiono_name);
                                            record.commit(true);
                                            form.viewFormDataStore.commitChanges();
                                        }
                                    }
                                });
                            }
                        }
                    });
					if ( typeof record == 'object' ) {
						var
							index,
							lpuSectionFilter = new Object();

						switch ( Number(record.get('DirectType_Code')) ) {
							// В круглосуточный стационар
							case 1:
								lpuSectionFilter.arrayLpuUnitType = [ 2 ];
							break;

							// В стационар дневного пребывания
							case 3:
								lpuSectionFilter.arrayLpuUnitType = [ 3 ];
							break;

							// В дневной стационар при поликлинике
							case 4:
								lpuSectionFilter.arrayLpuUnitType = [ 5 ];
							break;

							// В стационар на дому
							case 5:
								lpuSectionFilter.arrayLpuUnitType = [ 4 ];
							break;

							// На консультацию
							case 6:
								lpuSectionFilter.isPolka = true;
							break;
						}
						var WithoutChildLpuSectionAge = false;
						var evn = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
						var person_age = swGetPersonAge(form.PersonInfoFrame.getFieldValue('Person_Birthday'), evn.data.EvnVizitPL_setDate);
						if (person_age >= 18&&getRegionNick()!='ufa') {
							WithoutChildLpuSectionAge = true;
						}
						lpuSectionFilter.WithoutChildLpuSectionAge = WithoutChildLpuSectionAge;
						setLpuSectionGlobalStoreFilter(lpuSectionFilter);
						cmp.getStore().loadData(getStoreRecords(swLpuSectionGlobalStore));

						if ( !Ext.isEmpty(dataid) ) {
							index = cmp.getStore().findBy(function(rec) {
								return (rec.get(cmp.valueField) == dataid);
							});

							if ( index >= 0 ) {
								cmp.setValue(dataid);
							}
							else {
								cmp.clearValue();
							}
						}
					}

					cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'LpuO':
                ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaLpuO');
                eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputLpuO';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwLpuLocalCombo({
                        hideLabel: true
                        ,hiddenName: 'Lpu_oid'
                        ,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaLpuO'
                        ,width: 300
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    form.createInputArea('IsFinish', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId, lpuo_nick;
                                if(rec) {
                                    outputValue = lpuo_nick = rec.get('Lpu_Nick');
                                    outputValueId = rec.get('Lpu_id');
                                }
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnPL'
                                        ,id: el_data.object_id
                                        ,param_name: 'Lpu_oid'
                                        ,param_value: outputValueId
                                    }
                                    ,requestCallback: function(response_obj) {
                                    	form.isFirstAdminCheck = false;
                                        var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                                        if (record && response_obj.success) {
                                            //обновить данные ТАП
                                            record.set('LpuO_Nick', lpuo_nick);
                                            record.commit(true);
                                            form.viewFormDataStore.commitChanges();
                                        }
                                    }
                                });
                            }
                        }
                    });
                    cmp.getStore().load({
                        callback: function(){
                            if(this.getStore().getCount() > 0) {
                                this.setValue(dataid);
                            }
                        },
                        scope: cmp
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
			case 'MedStaffFact':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaMedStaffFact');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputMedStaffFact';
				eloutput = Ext.get(eloutputid);

				if(ct && !this.input_cmp_list[eloutputid]) {
					var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}

					cmp = new sw.Promed.SwMedStaffFactGlobalCombo({
						hiddenName: 'MedStaffFact_id'
						,allowBlank: false
						,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaMedStaffFact'
						,width: 450
						,listeners: {
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							keydown: function(combo, e) {
								if (e.getKey() == e.TAB) {
									form.createInputArea('SMedPersonal', EvnClass_SysNick, el_data);
								}
							},
							change: function(f,n,o) {
								var outputValue = f.getFieldValue('MedPersonal_Fin') || form.getEmptyValueText();
								var outputValueId = f.getFieldValue('MedStaffFact_id');
								var MedPersonal_id = f.getFieldValue('MedPersonal_id');
								var MedPersonal_TabCode = f.getFieldValue('MedPersonal_TabCode');
								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: el_data.object
										,id: el_data.object_id
										,param_name: 'MedStaffFact_id'
										,param_value: outputValueId
									}
									,requestCallback: function(response_obj) {
										form.isFirstAdminCheck = false;
										var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
										if (record && response_obj.success) {
											//обновить данные ТАП
											record.set('MedStaffFact_id', outputValueId);
											record.set('MedPersonal_id', MedPersonal_id);
											record.set('MedPersonal_TabCode', MedPersonal_TabCode);
											record.commit(true);
											form.viewFormDataStore.commitChanges();
										}
									}
								});
							}
						}
					});

					var WithoutChildLpuSectionAge = false;
					var person_age = swGetPersonAge(form.PersonInfoFrame.getFieldValue('Person_Birthday'), record.get('EvnVizitPL_setDate'));
					if (person_age >= 18 && !getRegionNick().inlist(['ufa','astra'])) {
						WithoutChildLpuSectionAge = true;
					}
					var medstafffact_filter_params = {
						allowDuplacateMSF: true,
						allowLowLevel: 'yes',
						EvnClass_SysNyck: 'EvnVizit',
						isPolka: true,
						onDate: record.get('EvnVizitPL_setDate'),
						medPersonalIdList: [this.userMedStaffFact.MedPersonal_id],
						LpuSection_id: record.get('LpuSection_id'),
						regionCode: getGlobalOptions().region.number,
						WithoutChildLpuSectionAge: WithoutChildLpuSectionAge
					};
					/*if ( getGlobalOptions().region && getGlobalOptions().region.nick.inlist([ 'ufa', 'ekb' ]) ) {
						medstafffact_filter_params.LpuUnitSet_id = base_form.findField('LpuUnitSet_id').getValue(); // из одного подразделения ТФОМС
					}*/

					setMedStaffFactGlobalStoreFilter(medstafffact_filter_params);
					cmp.getStore().loadData(getStoreRecords(swMedStaffFactGlobalStore));

					if (!Ext.isEmpty(dataid)) {
						var index = cmp.getStore().findBy(function(rec){
							return (rec.get('MedStaffFact_id') == dataid);
						});
						var rec = cmp.getStore().getAt(index);
						if (rec) {
							cmp.setValue(rec.get('MedStaffFact_id'));
						}
					}

					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'SMedPersonal':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaSMedPersonal');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputSMedPersonal';
				eloutput = Ext.get(eloutputid);

				if(ct && !this.input_cmp_list[eloutputid]) {
					var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}

					cmp = new sw.Promed.SwMedStaffFactGlobalCombo({
						hiddenName: 'MedStaffFact_sid'
						,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaSMedPersonal'
						,width: 450
						,listeners: {
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							keydown: function(combo, e) {
								if (e.getKey() == e.TAB) {
									form.createInputArea('ServiceType', EvnClass_SysNick, el_data);
								}
							},
							change: function(f,n,o) {
								var outputValue = f.getFieldValue('MedPersonal_Fin') || form.getEmptyValueText();
								var outputValueId = f.getFieldValue('MedPersonal_id');
								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: el_data.object
										,id: el_data.object_id
										,param_name: 'MedPersonal_sid'
										,param_value: outputValueId
									}
									,requestCallback: function(response_obj) {
										form.isFirstAdminCheck = false;
										var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
										if (record && response_obj.success) {
											//обновить данные ТАП
											record.set('MedPersonal_sid', outputValueId);
											record.commit(true);
											form.viewFormDataStore.commitChanges();
										}
									}
								});
							}
						}
					});

					var WithoutChildLpuSectionAge = false;
					var person_age = swGetPersonAge(form.PersonInfoFrame.getFieldValue('Person_Birthday'), record.get('EvnVizitPL_setDate'));
					if (person_age >= 18 && !getRegionNick().inlist(['ufa','astra'])) {
						WithoutChildLpuSectionAge = true;
					}
					var medstafffact_filter_params = {
						allowLowLevel: 'yes',
						isPolka: true,
						onDate: record.get('EvnVizitPL_setDate'),
						regionCode: getGlobalOptions().region.number,
						WithoutChildLpuSectionAge: WithoutChildLpuSectionAge,
						isMidMedPersonalOnly: true
					};

					setMedStaffFactGlobalStoreFilter(medstafffact_filter_params);
					cmp.getStore().loadData(getStoreRecords(swMedStaffFactGlobalStore));

					if (!Ext.isEmpty(dataid)) {
						var index = cmp.getStore().findBy(function(rec){
							return (rec.get('MedPersonal_id') == dataid);
						});
						var rec = cmp.getStore().getAt(index);
						if (rec) {
							cmp.setValue(rec.get('MedStaffFact_id'));
						}
					}

					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'VizitType':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaVizitType');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputVizitType';
				eloutput = Ext.get(eloutputid);
				var vizit_data = form.getObjectData(EvnClass_SysNick, el_data.object_id);

				if(ct && !this.input_cmp_list[eloutputid]) {
                    var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                    /*var isFinish = record && form.getObjectData(form.data.Code, record.parent_object_value)[form.data.Code + '_IsFinish'];
                    if (isFinish == 2) {
                        sw.swMsg.alert(langs('Сообщение'), langs('Случай АПЛ закрыт!'));
                        return;
                    }*/
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					cmp = new sw.Promed.SwVizitTypeCombo({
						EvnClass_id: (EvnClass_SysNick == 'EvnVizitPLStom' ? 13 : 11)
						,autoLoad: true
						,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaVizitType'
						,width: 340
						,listeners:
						{
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,elInputWrap: ct
									,elInput: f
								});
								
								return false;
							},
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    form.createInputArea('Diag', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
							change: function(f,n,o) {
								var rec = f.getStore().getById(n);
								if(getRegionNick() == 'kareliya'){
									var evn = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
									
									if(evn&&evn.data&&rec){
										var pay_type_nick = evn.data.PayType_SysNick;
										var vizit_type_code = rec.get('VizitType_Code');
										if(pay_type_nick==form.getPayTypeSysNickOMS()&&vizit_type_code.inlist([51, '2.4', '3.1'])){
											f.setValue(o);
											var o_rec = f.getStore().getById(o);
											record.set('VizitType_id', o_rec.get('VizitType_id'));
											record.set('VizitType_Name', o_rec.get('VizitType_Name'));
											record.set('VizitType_SysNick', o_rec.get('VizitType_SysNick'));
											record.commit(true);
											form.viewFormDataStore.commitChanges();
											return false;
										}
									}
								}
								var outputValue = form.getEmptyValueText();
								var outputValueId = null;
								var outputSysNick = null;
								if(rec) {
									outputValue = rec.get('VizitType_Name');
									outputSysNick = rec.get('VizitType_SysNick');
									outputValueId = rec.get('VizitType_id');
								}

								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: 'EvnVizitPL'
										,id: el_data.object_id
										,param_name: 'VizitType_id'
										,param_value: outputValueId
									}
									,requestCallback: function(response_obj) {
										form.isFirstAdminCheck = false;
										var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
										if (record && response_obj.success) {
											if (getRegionNick() == 'perm') {
												// очистить поле "Код посещения"
												var record = form.viewFormDataStore.getById(EvnClass_SysNick + '_' + el_data.object_id);
												if (record) {
													record.set('UslugaComplex_uid', null);
													record.set('UslugaComplex_Code', null);
													record.commit(true);
													form.viewFormDataStore.commitChanges();
												}
												var tct = Ext.get(EvnClass_SysNick + '_data_' + el_data.object_id + '_inputUslugaComplex');
												tct.update(form.getEmptyValueText());
												tct.setAttribute('dataid', '');
											}
                                            if ('EvnVizitPL' == EvnClass_SysNick) {
												Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_wrapRiskLevel').setDisplayed('none');
												Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_wrapWellnessCenterAgeGroups').setDisplayed('none');

												if ( vizit_data && vizit_data.EvnVizitPL_setDate ) {
													// #113607 доработать условия отображения
													if (
														getRegionNick() == 'astra'
														&& outputSysNick == 'cz'
														&& !(vizit_data.Person_Age_On_Vizit_Date >= 18 && Date.parseDate(vizit_data.EvnVizitPL_setDate,'d.m.Y') >= Date.parseDate('21.07.2017','d.m.Y'))
														&& !(vizit_data.Person_Age_On_Vizit_Date < 18 && Date.parseDate(vizit_data.EvnVizitPL_setDate,'d.m.Y') >= Date.parseDate('24.07.2017','d.m.Y'))
													) {
														Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_wrapRiskLevel').setDisplayed('block');
													}
													else {
														record.set('RiskLevel_id', null);
														record.set('RiskLevel_Name', '');
														var inputRiskLevel = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputRiskLevel');;
														inputRiskLevel.update(form.getEmptyValueText());
														inputRiskLevel.setAttribute('dataid', '');
													}

													if (
														getRegionNick() == 'astra'
														&& outputSysNick == 'cz'
														&& vizit_data.Person_Age_On_Vizit_Date >= 2
														&& vizit_data.Person_Age_On_Vizit_Date < 18
														&& Date.parseDate(vizit_data.EvnVizitPL_setDate,'d.m.Y') >= Date.parseDate('24.07.2017','d.m.Y')
													) {
														Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_wrapWellnessCenterAgeGroups').setDisplayed('block');
													}
													else {
														record.set('WellnessCenterAgeGroups_id', null);
														record.set('WellnessCenterAgeGroups_Name', '');
														var inputWellnessCenterAgeGroups = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputWellnessCenterAgeGroups');;
														inputWellnessCenterAgeGroups.update(form.getEmptyValueText());
														inputWellnessCenterAgeGroups.setAttribute('dataid', '');
													}
												}
                                            }
                                            var wrapProfGoal = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_wrapProfGoal'),
                                            	wrapDispProfGoalType = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_wrapDispProfGoalType');

                                            if(outputSysNick=='prof') {
                                                if (wrapProfGoal) wrapProfGoal.setDisplayed('block');

                                                if (wrapDispProfGoalType) wrapDispProfGoalType.setDisplayed('none');
                                                record.set('DispProfGoalType_id', null);
                                                record.set('DispProfGoalType_Name', '');
                                            } else if (outputSysNick=='disp' && getRegionNick() == 'ufa') {
                                                if (wrapDispProfGoalType) wrapDispProfGoalType.setDisplayed('block');

                                                if (wrapProfGoal) wrapProfGoal.setDisplayed('none');
                                                record.set('ProfGoal_id', null);
                                                record.set('ProfGoal_Name', '');
                                            } else {
                                                if (wrapProfGoal) wrapProfGoal.setDisplayed('none');
                                                record.set('ProfGoal_id', null);
                                                record.set('ProfGoal_Name', '');

                                                if (wrapDispProfGoalType) wrapDispProfGoalType.setDisplayed('none');
                                                record.set('DispProfGoalType_id', null);
                                                record.set('DispProfGoalType_Name', '');
                                            }

											//обновить данные ТАП
											record.set('VizitType_Name', outputValue);
											record.set('VizitType_SysNick', outputSysNick);
											record.commit(true);
											form.viewFormDataStore.commitChanges();
											form.checkDiagSpecific(EvnClass_SysNick, el_data.object_id, record.data, 'onChangeVizitType');
										}
									}
								});
							},
							select: function(f,r,v) {
								var rec = r;
								var outputValue = form.getEmptyValueText();
								var outputValueId = null;
								var outputSysNick = null;
								if(rec) {
									outputValue = rec.get('VizitType_Name');
									outputSysNick = rec.get('VizitType_SysNick');
									outputValueId = rec.get('VizitType_id');
								}
								var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
								if (record)
								{
									record.set('VizitType_id', outputValueId);
									record.set('VizitType_Name', outputValue);
									record.set('VizitType_SysNick', outputSysNick);
									record.commit(true);
									form.viewFormDataStore.commitChanges();
								}
							}
						},
						onLoadStore: function() {
							if(getRegionNick() == 'kz') return false;
							if (vizit_data) {
								if (vizit_data.TreatmentClass_id) {
									cmp.setTreatmentClass(vizit_data.TreatmentClass_id);
								} else {
									cmp.setTreatmentClass(null);
								}

								var date = (vizit_data.EvnClass_id == 11) ? vizit_data.EvnVizitPL_setDate : vizit_data.EvnVizitPLStom_setDate;
								date = Date.parseDate(date, 'd.m.Y');
								if (getRegionNick() == 'kareliya' && vizit_data.PayType_SysNick == 'oms') {
									var denied_visit_type_codes = ['41', '51', '2.4', '3.1'];
									if (Date.parseDate(date, 'd.m.Y') < new Date('2019-05-01')) {
										denied_visit_type_codes.push('1.2');
									}

									cmp.setFilterByDateAndCode(date, denied_visit_type_codes);
								} else {
									cmp.setFilterByDate(date);
								}
							}
						}
					});
					cmp.focus(true, 500);
					// loadParams для loadStores: костыль
					// todo: надо сделать при выполнении load учет loadParams
					cmp.getStore().baseParams = Ext.apply(cmp.getStore().baseParams);
					this.input_cmp_list[eloutputid] = cmp;
				}
                break;
            case 'ProfGoal':
                ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaProfGoal');
                eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputProfGoal';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwCommonSprCombo({
                        autoLoad: true
                        ,typeCode: 'int'
                        ,comboSubject: 'ProfGoal'
                        ,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaProfGoal'
                        ,width: 340
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    form.createInputArea('PayType', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId = null;
                                if(rec) {
                                    outputValue = rec.get('ProfGoal_Name');
                                    outputValueId = rec.get('ProfGoal_id');
                                }
                                form.isFirstAdminCheck = false;
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnVizitPL'
                                        ,id: el_data.object_id
                                        ,param_name: 'ProfGoal_id'
                                        ,param_value: outputValueId
                                    }
                                });
                            }
                        }
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'DispProfGoalType':
                ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaDispProfGoalType');
                eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputDispProfGoalType';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwCommonSprCombo({
                        //autoLoad: true,
                        typeCode: 'int'
                        ,comboSubject: 'DispProfGoalType'
						,moreFields: [
							{name: 'DispProfGoalType_isVisible', mapping: 'DispProfGoalType_isVisible'}
						]
						,onLoadStore: function(store){
							store.filterBy(function(rec){
								return rec.get('DispProfGoalType_isVisible') == 2;
							});
						}
                        ,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaDispProfGoalType'
                        ,width: 340
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    form.createInputArea('PayType', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId = null;
                                if(rec) {
                                    outputValue = rec.get('DispProfGoalType_Name');
                                    outputValueId = rec.get('DispProfGoalType_id');
                                }
                                form.isFirstAdminCheck = false;
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnVizitPL'
                                        ,id: el_data.object_id
                                        ,param_name: 'DispProfGoalType_id'
                                        ,param_value: outputValueId
                                    }
                                });
                            }
                        }
                    });
					cmp.lastQuery ='';
					cmp.getStore().removeAll();
					cmp.getStore().load();
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'RiskLevel':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaRiskLevel');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputRiskLevel';
				eloutput = Ext.get(eloutputid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					cmp = new sw.Promed.SwRiskLevelCombo({
						autoLoad: true,
						renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaRiskLevel'
						,width: 340
						,listeners:
						{
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,elInputWrap: ct
									,elInput: f
								});
								
								return false;
							},
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    form.createInputArea('VizitType', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
							change: function(f,n,o) {
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId = null;
								if(rec) {
									outputValue = rec.get('RiskLevel_Name');
									outputValueId = rec.get('RiskLevel_id');
									
								}
								//EvnVizitPL_data_{EvnVizitPL_id}_wrapRiskLevel
								form.isFirstAdminCheck = false;
								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: 'EvnVizitPL'
										,id: el_data.object_id
										,param_name: 'RiskLevel_id'
										,param_value: outputValueId
									}
								});
							}
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
            case 'WellnessCenterAgeGroups':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaWellnessCenterAgeGroups');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputWellnessCenterAgeGroups';
				eloutput = Ext.get(eloutputid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					cmp = new sw.Promed.SwCommonSprCombo({
						autoLoad: true,
						comboSubject: 'WellnessCenterAgeGroups',
						lastQuery: '',
						moreFields: [
							{ name: 'WellnessCenterAgeGroups_From', mapping: 'WellnessCenterAgeGroups_From' },
							{ name: 'WellnessCenterAgeGroups_To', mapping: 'WellnessCenterAgeGroups_To' }
						],
						onLoadStore: function(store) {
							var vizit_data = form.getObjectData(EvnClass_SysNick, el_data.object_id);
							store.filterBy(function(rec) {
								return (
									rec.get('WellnessCenterAgeGroups_From') <= vizit_data.Person_Age_On_Vizit_Date
									&& rec.get('WellnessCenterAgeGroups_To') > vizit_data.Person_Age_On_Vizit_Date
								);
							});
						},
						renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaWellnessCenterAgeGroups'
						,width: 340
						,listeners:
						{
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,elInputWrap: ct
									,elInput: f
								});
								
								return false;
							},
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    form.createInputArea('VizitType', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
							change: function(f,n,o) {
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId = null;
								if(rec) {
									outputValue = rec.get('WellnessCenterAgeGroups_Name');
									outputValueId = rec.get('WellnessCenterAgeGroups_id');
									
								}
								form.isFirstAdminCheck = false;
								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: 'EvnVizitPL'
										,id: el_data.object_id
										,param_name: 'WellnessCenterAgeGroups_id'
										,param_value: outputValueId
									}
								});
							}
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
            case 'ServiceType':
                ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaServiceType');
                eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputServiceType';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
					var rootRec = form.viewFormDataStore.getById(form.data.Code + '_'+ form.data.id);
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwCommonSprCombo({
                        renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaServiceType'
                       ,comboSubject: 'ServiceType'
                        ,loadParams: {params: {where:' where ServiceType_EndDate is null or ServiceType_EndDate > '+rootRec.get('EvnPL_setDate')}}
						,typeCode: 'string'
                        ,allowSysNick: true
                        //,autoLoad: true
                        ,width: 250
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;
                                var outputValueId = dataid;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    //form.createInputArea('VizitClass', EvnClass_SysNick, el_data);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId = null, code = null, sysNick = null;// забытый, но важный параметр sysNick #142282
                                if (rec) {
                                    code = rec.get('ServiceType_Code');
                                    outputValue = rec.get('ServiceType_Name');
                                    outputValueId = rec.get('ServiceType_id');
									sysNick = rec.get('ServiceType_SysNick');// #142282
                                }

                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
									,sysNick: sysNick
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnVizitPL'
                                        ,id: el_data.object_id
                                        ,param_name: 'ServiceType_id'
                                        ,param_value: outputValueId
                                    }
									,requestCallback: function(response_obj) {
										form.isFirstAdminCheck = false;
										var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
										if ( record && response_obj.success == true ) {
                                            //обновить данные ТАП
											record.set('ServiceType_id', outputValueId);
											record.set('ServiceType_Name', outputValue);
											record.set('ServiceType_Code', code);
											record.set('ServiceType_SysNick', sysNick);// #142282
											record.commit(true);
											form.viewFormDataStore.commitChanges();
										}
									}
									,requestYesNo: function(code, options) {
										if (code == 131) {
											options.ignoreCheckB04069333 = 1;// чтобы проигнорировать проверку при сохранении
											options.addB04069333 = 1;// и добавить услугу
											form.data.ignoreCheckB04069333 = 1; // чтобы проигнорировать проверку при выходе
											form.data.addB04069333 = 1; // и добавить услугу
										}
									}
									,requestNo: function(code, options) {
										if (code == 131) {
											options.ignoreCheckB04069333 = 1;// чтобы проигнорировать проверку при сохранении
											form.data.ignoreCheckB04069333 = 1; // чтобы проигнорировать проверку при выходе
										}
									}
                                });
                            }
                        }
                    });
					var load_params = {};
					var vizit_data = form.getObjectData(EvnClass_SysNick, el_data.object_id);
					if (vizit_data && vizit_data.MedPersonal_id) {
                        load_params.MedPersonal_id = vizit_data.MedPersonal_id;
					}
					if (vizit_data && vizit_data.LpuSection_id) {
                        load_params.LpuSection_id = vizit_data.LpuSection_id;
					}
					if(vizit_data && vizit_data.EvnVizitPL_setDate){
						load_params.where=' where ServiceType_EndDate is null or ServiceType_EndDate > '+vizit_data.EvnVizitPL_setDate;
					}
                    cmp.getStore().removeAll();
                    cmp.getStore().load({
						params: load_params,
						callback: function(){
							if (vizit_data && vizit_data.TreatmentClass_id) {
								var servicetype_id = cmp.getValue();
								cmp.getStore().clearFilter();
								cmp.lastQuery = '';
								if (getRegionNick() != 'kareliya') {							
									cmp.getStore().filterBy(function(rec) {
										var index = swTreatmentClassServiceTypeGlobalStore.findBy(function(r) {
											return (r.get('TreatmentClass_id') == vizit_data.TreatmentClass_id && r.get('ServiceType_id') == rec.get('ServiceType_id'));
										});
										return (index != -1);
									});
								}
								if (cmp.getStore().getCount() == 0) {
									cmp.getStore().clearFilter();
								}
								if (servicetype_id && !cmp.findRecord('ServiceType_id', servicetype_id)) {
									cmp.clearValue();
								}
							}
							cmp.setValue(cmp.getValue());
							cmp.focus(true, 500);
						}
					});
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'TreatmentClass':
                ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaTreatmentClass');
                eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputTreatmentClass';
                eloutput = Ext.get(eloutputid);
				var vizit_data = form.getObjectData(EvnClass_SysNick, el_data.object_id);

				if (
					getRegionNick() == 'pskov'
					&& vizit_data.LpuSectionProfile_Code == '160'
					&& (Ext.isEmpty(vizit_data.Diag_Code) || vizit_data.Diag_Code.substr(0, 1) != 'Z')
				) {
					return false;
				}

                if(ct && !this.input_cmp_list[eloutputid]) {
					var rootRec = form.viewFormDataStore.getById(form.data.Code + '_'+ form.data.id);
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwCommonSprCombo({
                        renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaTreatmentClass'
                       	,comboSubject: 'TreatmentClass'
                        ,loadParams: {params: {where: "where (TreatmentClass_EndDate is null or TreatmentClass_EndDate > " + rootRec.get('EvnPL_setDate') + ") and TreatmentClass_Code != '2'"}}
						,typeCode: 'string'
                        ,allowSysNick: true
                        //,autoLoad: true
                        ,width: 250
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;
                                var outputValueId = dataid;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    //form.createInputArea('VizitClass', EvnClass_SysNick, el_data);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId = null, code = null;
                                if (rec) {
                                    code = rec.get('TreatmentClass_Code');
                                    outputValue = rec.get('TreatmentClass_Name');
                                    outputValueId = rec.get('TreatmentClass_id');
                                }

                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnVizitPL'
                                        ,id: el_data.object_id
                                        ,param_name: 'TreatmentClass_id'
                                        ,param_value: outputValueId
                                    }
									,requestCallback: function(response_obj) {
										form.isFirstAdminCheck = false;
										var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
										if ( record && response_obj.success == true ) {

											// Фильтруем места
											var inputServiceType = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputServiceType');
											var servicetype_id = (inputServiceType.getAttribute('dataid') == 2 && getRegionNick() == 'ufa') ? 12: inputServiceType.getAttribute('dataid');
											form.serviceTypeStore.filterBy(function(rec) {
												var index = swTreatmentClassServiceTypeGlobalStore.findBy(function(r) {
													return (r.get('TreatmentClass_id') == outputValueId && r.get('ServiceType_id') == rec.get('ServiceType_id'));
												});
												return (index != -1);
											});											
											if (form.serviceTypeStore.getCount() == 1) {
												var servicetype_id = form.serviceTypeStore.getAt(0).get('ServiceType_id');
												inputServiceType.update(form.serviceTypeStore.getAt(0).get('ServiceType_Name'));
												inputServiceType.setAttribute('dataid', servicetype_id);
												record.set('ServiceType_id', servicetype_id);
											}
											index = form.serviceTypeStore.findBy(function(rec) {return (rec.get('ServiceType_id') == servicetype_id);});
											if (servicetype_id && index == -1 && form.serviceTypeStore.getCount() > 0) {
												inputServiceType.update(form.getEmptyValueText());
												inputServiceType.setAttribute('dataid', '');
												record.set('ServiceType_id', null);
											}
											
											if (/*servicetype_id && */getRegionNick() == 'kz') {
												var blockVizitActiveType = Ext.get('blockVizitActiveType');
												if (outputValueId == 22 || outputValueId == 30) {
													blockVizitActiveType.setDisplayed('block');
													var inputVizitActiveType = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputVizitActiveType');
													var VizitActiveTypeId = inputVizitActiveType.getAttribute('dataid');
													
													form.VizitActiveTypeStore.filterBy(function(rec){
														return rec.get('TreatmentClass_id') == outputValueId;
													});
													
													var VizitActiveTypeIndex = form.VizitActiveTypeStore.findBy(function(rec) {
														return rec.get('VizitActiveType_id') == VizitActiveTypeId;
													});
													
													if (VizitActiveTypeIndex == -1) {
														var VizitActiveTypeDefaultId = (outputValueId==22)?3:8;
														
														var VizitActiveTypeDefaultIndex = form.VizitActiveTypeStore.findBy(function(rec) {
															return rec.get('VizitActiveType_id') == VizitActiveTypeDefaultId;
														});
														
														var VizitActiveTypeDefaultRecord = form.VizitActiveTypeStore.getAt(VizitActiveTypeDefaultIndex);
														
														inputVizitActiveType.update(VizitActiveTypeDefaultRecord.get('VizitActiveType_Name'));
														inputVizitActiveType.setAttribute('dataid', VizitActiveTypeDefaultRecord.get('VizitActiveType_id'));
														record.set('VizitActiveType_id', VizitActiveTypeDefaultRecord.get('VizitActiveType_id'));
														
														Ext.Ajax.request({
															url: '/?c=EvnVizit&m=setEvnVizitParameter',
															params: {
																object: 'EvnVizitPL'
																,id: el_data.object_id
																,param_name: 'VizitActiveType_id'
																,param_value: VizitActiveTypeDefaultRecord.get('VizitActiveType_id')
															}
														});
													}
												} else {
													blockVizitActiveType.setDisplayed('none');
													Ext.Ajax.request({
														url: '/?c=EvnVizit&m=setEvnVizitParameter',
														params: {
															object: 'EvnVizitPL'
															,id: el_data.object_id
															,param_name: 'VizitActiveType_id'
															,param_value: null
														}
													});
												}
												
												var TreatmentClassServiceTypeIndex = swTreatmentClassServiceTypeGlobalStore.findBy(function(r) {
													return (r.get('TreatmentClass_id') == outputValueId);
												});
												
												if (TreatmentClassServiceTypeIndex) {
													servicetype_id = swTreatmentClassServiceTypeGlobalStore.getAt(TreatmentClassServiceTypeIndex).get('ServiceType_id');
													
													var ServiceTypeIndex = form.serviceTypeStore.findBy(function(rec) {
														return rec.get('ServiceType_id') == servicetype_id;
													});
													
													inputServiceType.update(form.serviceTypeStore.getAt(ServiceTypeIndex).get('ServiceType_Name'));
													inputServiceType.setAttribute('dataid', servicetype_id);
													record.set('ServiceType_id', servicetype_id);
													
													Ext.Ajax.request({
														url: '/?c=EvnVizit&m=setEvnVizitParameter',
														params: {
															object: 'EvnVizitPL'
															,id: el_data.object_id
															,param_name: 'ServiceType_id'
															,param_value: servicetype_id
														}
													});
												}
											}

											if (getRegionNick() != 'kz') {
												// Фильтруем цели посещения
												var inputVizitType = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputVizitType');
												var vizittype_id = inputVizitType.getAttribute('dataid');
												var vizittype_old = vizittype_id;
												form.vizitTypeStore.filterBy(function(rec) {
													var index = swTreatmentClassVizitTypeGlobalStore.findBy(function(r) {
														return (r.get('TreatmentClass_id') == outputValueId && r.get('VizitType_id') == rec.get('VizitType_id'));
													});
													return (index != -1);
												});
												if (form.vizitTypeStore.getCount() == 1) {
													var vizittype_id = form.vizitTypeStore.getAt(0).get('VizitType_id');
													inputVizitType.update(form.vizitTypeStore.getAt(0).get('VizitType_Name'));
													inputVizitType.setAttribute('dataid', vizittype_id);
													record.set('VizitType_id', vizittype_id);
												}
												index = form.vizitTypeStore.findBy(function(rec) {return (rec.get('VizitType_id') == vizittype_id);});
												if (vizittype_id && index == -1 && form.vizitTypeStore.getCount() > 0) {
													var vizittype_id = null;
													inputVizitType.update(form.getEmptyValueText());
													inputVizitType.setAttribute('dataid', '');
													record.set('VizitType_id', null);
												}

												if (getRegionNick().inlist(['perm','pskov'])) {
													// очистить поле "Код посещения"
													var record = form.viewFormDataStore.getById(EvnClass_SysNick + '_' + el_data.object_id);
													if (record) {
														record.set('UslugaComplex_uid', null);
														record.set('UslugaComplex_Code', null);
														record.commit(true);
														form.viewFormDataStore.commitChanges();
													}
													var tct = Ext.get(EvnClass_SysNick + '_data_' + el_data.object_id + '_inputUslugaComplex');
													tct.update(form.getEmptyValueText());
													tct.setAttribute('dataid', '');
												}

												// Манипуляции с Кодом посещения
												if (vizittype_id && vizittype_old != vizittype_id) {
													Ext.Ajax.request({
														url: '/?c=EvnVizit&m=setEvnVizitParameter',
														params: {
															object: EvnClass_SysNick,
															id: el_data.object_id,
															param_name: 'VizitType_id',
															param_value: vizittype_id,
															options: {isEmk: true}
														}
													});
												}
											}

											
											//обновить данные ТАП
											record.set('TreatmentClass_id', outputValueId);
											record.set('TreatmentClass_Name', outputValue);
											record.set('TreatmentClass_Code', code);
											record.commit(true);
											form.viewFormDataStore.commitChanges();

											if (getRegionNick()=='kz') {
												form.getFinanceSource(EvnClass_SysNick,el_data.object_id);//treatment
												
												if (outputValueId == 29) {
													Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputScreenType').parent().parent().setDisplayed('block');
												} else {
													Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputScreenType').parent().parent().setDisplayed('none');
												}
											}
										}


									}
                                });
                            }
                        }
                    });

                    var TreatmentClassArray = [];

					if (getRegionNick() == 'penza' && EvnClass_SysNick == 'EvnVizitPLStom') {
						var EvnPLStomChildren = form.getObjectChildren('EvnPLStom', vizit_data.EvnVizitPLStom_pid);

						if ( EvnPLStomChildren.EvnVizitPLStom && Ext.isArray(EvnPLStomChildren.EvnVizitPLStom.item) && EvnPLStomChildren.EvnVizitPLStom.item.length > 0 ) {
							var countVizit = EvnPLStomChildren.EvnVizitPLStom.item.length;
							var firstVizit = EvnPLStomChildren.EvnVizitPLStom.item[countVizit-1];
							var TreatmentClass_id = firstVizit.data.TreatmentClass_id;

							if ( !Ext.isEmpty(TreatmentClass_id) && countVizit > 1 && getValidDT(firstVizit.data.EvnVizitPLStom_setDate, '') >= getValidDT('01.06.2019', '') ) {
								switch ( parseInt(TreatmentClass_id) ) {
									case 1:
									case 3:
									case 4:
										TreatmentClassArray = [ 1, 3, 4 ];
										break;

									case 2:
										TreatmentClassArray = [ 2 ];
										break;

									case 6:
									case 7:
									case 8:
									case 9:
									case 10:
									case 11:
										TreatmentClassArray = [ 6, 7, 8, 9, 10, 11 ];
										break;
								}
							}
						}
					}

					if ( TreatmentClassArray.length == 0 && vizit_data && vizit_data.Diag_id ) {
						if ( vizit_data.Diag_Code == 'Z51.5' ) {
							TreatmentClassArray = [ 9 ];
						}
						else if ( vizit_data.Diag_Code.substr(0,1) == 'Z' || (getRegionNick() == 'perm' && vizit_data.Diag_Code.substr(0,3) == 'W57') ) {
							TreatmentClassArray = [ 6, 7, 8, 9, 10, 11, 12 ];
						}
						else if ( getRegionNick() == 'penza' ) {
							TreatmentClassArray = [ 1, 2, 3, 4, 11, 13 ];
						}
						else {
							TreatmentClassArray = [ 1, 2, 3, 4, 13 ];
						}
					}

                    cmp.getStore().removeAll();
                    cmp.getStore().load({
						callback: function(){
							cmp.getStore().clearFilter();
							cmp.lastQuery = '';
							if (getRegionNick() == 'kz') return false;
							if ( TreatmentClassArray.length > 0 ) {
								cmp.getStore().filterBy(function(rec) {
									return (rec.get('TreatmentClass_id').inlist(TreatmentClassArray));
								});
								var index = cmp.getStore().findBy(function(rec) {
									return (rec.get('TreatmentClass_id') == cmp.getValue());
								});
								if (index == -1) {
									cmp.clearValue();
								}
							}
							else {
								cmp.getStore().filterBy(function(rec) {
									return !rec.get('TreatmentClass_Code').toString().inlist([ '2' ]);
								});
							}
							cmp.setValue(cmp.getValue());
							cmp.focus(true, 500);
						}
					});
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'ScreenType':
                ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaScreenType');
                eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputScreenType';
                eloutput = Ext.get(eloutputid);
				var vizit_data = form.getObjectData(EvnClass_SysNick, el_data.object_id);
                if(ct && !this.input_cmp_list[eloutputid]) {
					var rootRec = form.viewFormDataStore.getById(form.data.Code + '_'+ form.data.id);
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwCommonSprCombo({
                        renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaScreenType'
                       	,comboSubject: 'ScreenType'
						,typeCode: 'string'
						,prefix: 'r101_'
                        ,width: 350
                        ,listWidth: 600
                        ,listeners: {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;
                                var outputValueId = dataid;
                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });
                                return false;
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId = null, code = null;
                                if (rec) {
                                    code = rec.get('ScreenType_Code');
                                    outputValue = rec.get('ScreenType_Name');
                                    outputValueId = rec.get('ScreenType_id');
                                }
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnVizitPL'
                                        ,id: el_data.object_id
                                        ,param_name: 'ScreenType_id'
                                        ,param_value: outputValueId
                                    }
                                });
                            }
                        }
                    });
					cmp.getStore().removeAll();
					cmp.getStore().load({
						callback: function() {
							cmp.setValue(cmp.getValue());
							cmp.focus(true, 500);
						}
					});
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
			
			case 'VizitActiveType':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaVizitActiveType');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputVizitActiveType';
				eloutput = Ext.get(eloutputid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					cmp = new sw.Promed.SwCommonSprCombo({
						renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaVizitActiveType'
						,comboSubject: 'VizitActiveType'
						,moreFields : [
							{ name: 'TreatmentClass_id', mapping: 'TreatmentClass_id' }
						]
						,width: 250
						,listeners: {
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;
								
								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});
								
								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							keydown: function(combo, e) {
								if (e.getKey() == e.TAB) {
									//form.createInputArea('Diag', EvnClass_SysNick, el_data);
								}
							},
							change: function(f,n,o) {
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId = null;
								
								if (rec) {
									outputValue = rec.get('VizitActiveType_Name');
									outputValueId = rec.get('VizitActiveType_id');
								}
								
								onChange({
									elOutputId: eloutputid,
									outputValue: outputValue,
									outputValueId: outputValueId,
									elInputWrap: ct,
									elInput: f,
									requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter',
									requestParams: {
										object: 'EvnVizitPL',
										id: el_data.object_id,
										param_name: 'VizitActiveType_id',
										param_value: outputValueId
									}
								});
							}
						}
					});

					var vizit_data = form.getObjectData(EvnClass_SysNick, el_data.object_id);
					
					cmp.getStore().removeAll();
					cmp.getStore().load({
						callback: function(){
							if (vizit_data && vizit_data.TreatmentClass_id && vizit_data.TreatmentClass_id.inlist([22,30])) {
								cmp.getStore().clearFilter();
								cmp.lastQuery = '';
								cmp.getStore().filterBy(function(rec) {
									return rec.get('TreatmentClass_id') == vizit_data.TreatmentClass_id;
								});
							}
							cmp.setValue(cmp.getValue());
							cmp.focus(true, 500);
						}
					});
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
                
			case 'BitePersonType':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaBitePersonType');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputBitePersonType';
				eloutput = Ext.get(eloutputid);
				var vizit_data = form.getObjectData(EvnClass_SysNick, el_data.object_id);
				if(ct && !this.input_cmp_list[eloutputid]) {
					var rootRec = form.viewFormDataStore.getById(form.data.Code + '_'+ form.data.id);
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					cmp = new sw.Promed.SwCommonSprCombo({
						renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaBitePersonType'
						,comboSubject: 'BitePersonType'
						//,loadParams: {params: {where: "where (TreatmentClass_EndDate is null or TreatmentClass_EndDate > " + rootRec.get('EvnPL_setDate') + ") and TreatmentClass_Code != '2'"}}
						,typeCode: 'string'
						,allowSysNick: true
						//,autoLoad: true
						,width: 250
						,listeners: {
							change: function(f,n,o) {
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId = null, code = null;
								var node = form.Tree.getSelectionModel().selNode;

								if (!rec) {
									return false;
								}


								if(node.attributes.object == "EvnPLStom"){
									node = node.firstChild;
								}

								if (!node || node.attributes.object != "EvnVizitPLStom") {
									return false;
								}

								Ext.Ajax.request({
									url: '/?c=EvnPLStom&m=saveBitePersonType',
									params: {
										Person_id: form.Person_id,
										EvnVizitPLStom_id: node.attributes.object_value,
										BitePersonData_setDate: new Date().format('d.m.Y'),
										BitePersonType_id: rec.get('BitePersonType_id')
									}
								});
							}
						}
					});
					cmp.getStore().removeAll();
					cmp.getStore().load({
						callback: function(){
							cmp.getStore().clearFilter();
							cmp.lastQuery = '';

							cmp.setValue(cmp.getValue());
							cmp.focus(true, 500);
						}
					});
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'VizitClass':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaVizitClass');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputVizitClass';
				eloutput = Ext.get(eloutputid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					cmp = new sw.Promed.SwVizitClassCombo({
						renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaVizitClass'
						,width: 110
						,listeners:
						{
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});
								
								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    form.createInputArea('VizitType', EvnClass_SysNick, el_data);
                                }
                            },
							change: function(f,n,o) {
								var record = form.viewFormDataStore.getById(EvnClass_SysNick + '_' + el_data.object_id);
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId = null;
								var outputValueOld = form.getEmptyValueText();
								var outputValueIdOld = null;
								if (rec) {
									outputValue = rec.get('VizitClass_Name');
									outputValueId = rec.get('VizitClass_id');
								}
								if (record) {
									outputValueIdOld = record.get('VizitClass_id') || null;
									outputValueOld = record.get('VizitClass_Name') || form.getEmptyValueText();
									// сразу применяем изменения
									record.set('VizitClass_id', outputValueId);
									record.set('VizitClass_Name', outputValue);
									record.commit(true);
									form.viewFormDataStore.commitChanges();
								}
								if (getRegionNick() == 'perm') {
									// очистить поле "Код посещения"
									if (record) {
										record.set('UslugaComplex_uid', null);
										record.set('UslugaComplex_Code', null);
										record.commit(true);
										form.viewFormDataStore.commitChanges();
									}
									var tct = Ext.get(EvnClass_SysNick + '_data_' + el_data.object_id + '_inputUslugaComplex');
									tct.update(form.getEmptyValueText());
									tct.setAttribute('dataid', '');
								}
								
								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: 'EvnVizitPL'
										,id: el_data.object_id
										,param_name: 'VizitClass_id'
										,param_value: outputValueId
									}
									,requestCallback: function(response_obj) {
										form.isFirstAdminCheck = false;
										if (response_obj.success == false) {
											if (record) {
												// откатываем изменения
												record.set('VizitClass_id', outputValueIdOld);
												record.set('VizitClass_Name', outputValueOld);
												record.commit(true);
												form.viewFormDataStore.commitChanges();
											}
										}
									}
								});
							}
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
            case 'IsPrimaryVizit':
                ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaIsPrimaryVizit');
                eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputIsPrimaryVizit';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwCommonSprCombo({
                        autoLoad: true
                        ,typeCode: 'int'
                        ,comboSubject: 'YesNo'
                        ,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaIsPrimaryVizit'
                        ,width: 60
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    form.createInputArea('VizitType', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId, IsPrimaryVizit_name;
                                if(rec) {
                                    outputValue = IsPrimaryVizit_name = rec.get('YesNo_Name');
                                    outputValueId = rec.get('YesNo_id');
                                }
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        id: el_data.object_id
                                        ,param_name: 'IsPrimaryVizit'
                                        ,param_value: outputValueId
                                    }
                                    ,requestCallback: function(response_obj) {
                                    	form.isFirstAdminCheck = false;
                                        if ( response_obj.success == true ) {
                                            var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                                            if (record)
                                            {
												if (getRegionNick() == 'perm') {
													// очистить поле "Код посещения"
													var record = form.viewFormDataStore.getById(EvnClass_SysNick + '_' + el_data.object_id);
													if (record) {
														record.set('UslugaComplex_uid', null);
														record.set('UslugaComplex_Code', null);
														record.commit(true);
														form.viewFormDataStore.commitChanges();
													}
													var tct = Ext.get(EvnClass_SysNick + '_data_' + el_data.object_id + '_inputUslugaComplex');
													tct.update(form.getEmptyValueText());
													tct.setAttribute('dataid', '');
												}
                                                //обновить данные
                                                record.set(EvnClass_SysNick +'_IsPrimaryVizit', outputValueId);
                                                record.set('IsPrimaryVizit_Name', IsPrimaryVizit_name);
                                                record.commit(true);
                                                form.viewFormDataStore.commitChanges();
                                            }
                                        }
                                    }
                                });
                            }
                        }
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'PayType':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaPayType');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputPayType';
				eloutput = Ext.get(eloutputid);
				if(ct && !this.input_cmp_list[eloutputid] && getRegionNick()!='kz') {
					ct.setDisplayed('block');
					//ct.unselectable();
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					cmp = new sw.Promed.SwPayTypeCombo({
						renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaPayType'
						//,disabled: true
						,width: 250
						,allowBlank: false
						,useCommonFilter: true
						,listeners:
						{
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							keydown: function(combo, e) {
								if (e.getKey() == e.TAB) {
									//form.createInputArea('Diag', EvnClass_SysNick, el_data);
								}
							},
							change: function(f,n,o) {
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId = null, sysNick = null;
								if (rec) {
									outputValue = rec.get('PayType_Name');
									outputValueId = rec.get('PayType_id');
									sysNick = rec.get('PayType_SysNick');
								}

								var evn = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
								if(getRegionNick() == 'kareliya'){
									if(evn&&evn.data&&rec){
										var vizit_type_nick = evn.data.VizitType_SysNick;
										var pay_type_nick = rec.get('PayType_SysNick');
										if(pay_type_nick==form.getPayTypeSysNickOMS()&&vizit_type_nick=='palliatpom'){
											f.setValue(o);
											return false;
										}
									}
								}

								// судя по #45647 это было добавлено только для Уфы и Карелии, обернул в if.
								if (getRegionNick().inlist(['ufa', 'kareliya'])) {
									if (rec.get('PayType_SysNick') == form.getPayTypeSysNickOMS() && evn.data.DiagFinance_IsOms == 0) {
										sw.swMsg.alert(langs('Предупреждение'), langs('Выбранный диагноз не оплачивается по ОМС'));
										return false;
									}
								}

								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: 'EvnVizit'
										,id: el_data.object_id
										,param_name: 'PayType_id'
										,param_value: outputValueId
									}
									,requestCallback: function(response_obj) {
										var tct;
										var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);

										if ( record && response_obj.success == true ) {
											record.set('UslugaComplex_uid', null);
											record.set('UslugaComplex_Code', null);
											record.set('Mes_id', null);
											record.set('Mes_Code', null);
											if (response_obj.clearVizitTypeId) {
												record.set('VizitType_id', null);
												record.set('VizitType_Name', null);
												record.set('VizitType_SysNick', null);
												tct = Ext.get(EvnClass_SysNick + '_data_' + el_data.object_id + '_inputVizitType');
												if (tct) {
													tct.update(form.getEmptyValueText());
													tct.setAttribute('dataid', '');
												}
											}
											//обновить данные ТАП
											record.set('PayType_id', outputValueId);
											record.set('PayType_Name', outputValue);
											record.set('PayType_SysNick', sysNick);
											record.commit(true);
											form.viewFormDataStore.commitChanges();
											tct = Ext.get(EvnClass_SysNick + '_data_' + el_data.object_id + '_inputUslugaComplex');
											if (tct) {
												tct.update(form.getEmptyValueText());
												tct.setAttribute('dataid', '');
											}
											tct = Ext.get(EvnClass_SysNick + '_data_' + el_data.object_id + '_inputMesOldVizit');
											if (tct) {
												tct.update(form.getEmptyValueText());
												tct.setAttribute('dataid', '');
											}
										}
									}//*
								});
							}
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
			break;
			// для справочников swCommonSprCombo
			case 'AgeGroupDisp':
            case 'EducationInstitutionClass':
            case 'InstitutionNatureType':
            case 'InstitutionType':
            case 'WeightAbnormType':
            case 'HeightAbnormType':
            case 'NormaDisturbanceType':
            case 'NormaDisturbanceTypeU':
            case 'NormaDisturbanceTypeE':
            case 'HealthKind':
            case 'CardioRiskType':
            case 'RiskType':
            case 'NeedDopCure':
            case 'IsTwoStage':
            case 'IsEndStage':
            case 'IsStenocard':
            case 'IsBrain':
            case 'IsDoubleScan':
            case 'IsTub':
            case 'IsEsophag':
            case 'IsSmoking':
            case 'IsRiskAlco':
            case 'IsAlcoDepend':
            case 'IsLowActiv':
            case 'IsIrrational':
            case 'IsShortCons':
            case 'IsHypoten':
            case 'IsLipid':
            case 'IsHypoglyc':
            case 'IsDisp':
            case 'IsSanator':
            case 'IsSchool':
			case 'IsProphCons':
			case 'PainIntensity':
			case 'UslugaMedType':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputarea' + name);
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_input' + name;
				eloutput = Ext.get(eloutputid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}

					var width = 250;
					var comboSubject = name;
					var param_name = name + '_id';
					switch(name) {
						case 'NormaDisturbanceTypeU':
						case 'NormaDisturbanceTypeE':
							comboSubject = 'NormaDisturbanceType';
							break;
						case 'IsTwoStage':
						case 'IsEndStage':
						case 'IsStenocard':
						case 'IsBrain':
						case 'IsDoubleScan':
						case 'IsTub':
						case 'IsEsophag':
						case 'IsSmoking':
						case 'IsRiskAlco':
						case 'IsAlcoDepend':
						case 'IsLowActiv':
						case 'IsIrrational':
						case 'IsShortCons':
						case 'IsHypoten':
						case 'IsLipid':
						case 'IsHypoglyc':
						case 'IsDisp':
						case 'IsSanator':
						case 'IsSchool':
						case 'IsProphCons':
							comboSubject = 'YesNo';
							param_name = name;
							width = 70;
							break;
					}

					cmp = new sw.Promed.SwCommonSprCombo({
						renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputarea' + name,
						comboSubject: comboSubject,
						width: width,
						listeners: {
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML,
								    outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							keydown: function(combo, e) {
								if (e.getKey() == e.TAB) {
									//form.createInputArea('Diag', EvnClass_SysNick, el_data);
								}
							},
							change: function(f,n,o) {
								var rec = f.getStore().getById(n),
								    outputValue = form.getEmptyValueText(),
								    outputValueId = null,
                                    sysNick = null;

								if (rec) {
									outputValue = rec.get(comboSubject + '_Name');
									outputValueId = rec.get(comboSubject + '_id');
								}

								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: 'EvnVizit'
										,id: el_data.object_id
										,param_name: param_name
										,param_value: outputValueId
									}
									,requestCallback: function(response_obj) {
										var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);

										if ( record && response_obj.success == true ) {
											record.set(name + '_id', outputValueId);
											record.set(name + '_Name', outputValue);
											record.commit(true);
											form.viewFormDataStore.commitChanges();
										}
									}
								});
							}
						}
					});

					var load_params = {};

					if (name == 'AgeGroupDisp') {
						load_params.where = "where DispType_id = 4";
					}

					cmp.getStore().removeAll();
					cmp.getStore().load({
						params: load_params,
						callback: function () {
							cmp.setValue(cmp.getValue());
							cmp.focus(true, 500);
						}
					});

					this.input_cmp_list[eloutputid] = cmp;
				}
			break;
			case 'MedicalCareKind':
                ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaMedicalCareKind');
                eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputMedicalCareKind';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwMedicalCareKindFedCombo({
                        renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaMedicalCareKind'
						,width: 400
						,allowBlank: false
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;
                                var outputValueId = dataid;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    //form.createInputArea('Diag', EvnClass_SysNick, el_data);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId = null;
                                if (rec) {
                                    outputValue = rec.get('MedicalCareKind_Name');
                                    outputValueId = rec.get('MedicalCareKind_id');
                                }

                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnVizit'
                                        ,id: el_data.object_id
                                        ,param_name: 'MedicalCareKind_id'
                                        ,param_value: outputValueId
                                    }
									,requestCallback: function(response_obj) {
										form.isFirstAdminCheck = false;
										var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);

										if ( record && response_obj.success == true ) {
											//обновить данные ТАП
											record.set('MedicalCareKind_id', outputValueId);
											record.set('MedicalCareKind_Name', outputValue);
											record.commit(true);
											form.viewFormDataStore.commitChanges();
										}
									}
                                });
                            }
                        }
                    });

					var load_params = (getRegionNick() == 'ekb' ? {} : {where: "where MedicalCareKind_Code in ('11','12','13','4')"});

					cmp.getStore().removeAll();
					cmp.getStore().load({
						params: load_params,
						callback: function () {
							cmp.setValue(cmp.getValue());
							cmp.focus(true, 500);
						}
					});

                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'UslugaComplex':
				var rootRec ={};
                ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaUslugaComplex');
                eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputUslugaComplex';
				rootRec = form.viewFormDataStore.getById(form.data.Code + '_'+ form.data.id);
				if(rootRec.parent_object_value!=null){
					rootRec = form.viewFormDataStore.getById(rootRec.parent_object_code + '_'+ rootRec.parent_object_value)
				}
				var uslugaComplexIdAlias = (EvnClass_SysNick == 'EvnSection' ? 'UslugaComplex_id' : 'UslugaComplex_uid');
				var eventData = form.getObjectData(EvnClass_SysNick, el_data.object_id);
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    cmp = new sw.Promed.SwUslugaComplexNewCombo({
                        renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaUslugaComplex'
						,to: EvnClass_SysNick
                        ,width: 400
                        ,listWidth: 600
                        ,hiddenName: uslugaComplexIdAlias
                        ,listeners:
                        {
                            blur: function(f) {
                                if (f.disableBlurAction) {
                                    return false;
                                }

                                var outputValue = eloutput.dom.innerHTML;
                                var outputValueId = eventData[uslugaComplexIdAlias];

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            render: function(combo) {
								combo.setValue(eventData[uslugaComplexIdAlias]||null);
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    //form.createInputArea('Diag', EvnClass_SysNick, el_data);
                                }
                            },
                            change: function(f,n,o) {
                                if (f.disableBlurAction) {
                                    return false;
                                }
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId = null;
								var outputCode = '';
                                if(rec) {
                                    outputValue = rec.get('UslugaComplex_Name');
                                    outputValueId = rec.get('UslugaComplex_id');
									outputCode = rec.get('UslugaComplex_Code');
									if (getRegionNick() == 'ekb' && !cmp.DiagFinance_IsOms && outputCode == 'B01.069.998'){
										var textMsg = langs('Услуга В01.069.998 может быть выбрана только при диагнозе, оплачиваемом по ОМС');
										sw.swMsg.alert(langs('Предупреждение'), textMsg);
										return false;
									}
                                } else if ( n != '') {
                                    return true;
                                }

                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: (EvnClass_SysNick == 'EvnSection' ? '/?c=EvnSection&m=setEvnSectionParameter' : '/?c=EvnVizit&m=setEvnVizitParameter')
                                    ,requestParams: {
                                        object: EvnClass_SysNick
                                        ,id: el_data.object_id
                                        ,param_name: 'UslugaComplex_id'
                                        ,param_value: outputValueId
                                    },
									requestYesNo: function(code, options) {
										if (code == 103) {
											options.ignoreControl59536 = 1;
											form.data.ignoreControl59536 = 1;
										} else if (code == 105) {
											options.ignoreControl122430 = 1;
											form.data.ignoreControl122430 = 1;
										}
									},
                                    requestCallback: function(response_obj) {
                                    	form.isFirstAdminCheck = false;
										var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
										if ( record && response_obj.success == true ) {
											//обновить данные ТАП
											record.set(uslugaComplexIdAlias, outputValueId);
											record.set('UslugaComplex_Code', outputCode);
											record.commit(true);
											form.viewFormDataStore.commitChanges();

											if (getRegionNick() == 'ekb' && record.get('UslugaComplex_id')) {
												var ajax_params = {
													Sex_id: form.PersonInfoFrame.getFieldValue('Sex_id'),
													UslugaComplex_id: record.get('UslugaComplex_id'),
													MedSpecOms_id: record.get('VizitMedSpecOms_id'),
													LpuSectionProfile_id: record.get('LpuSectionProfile_id'),
													PayType_id: record.get('PayType_id'),
													IsMes: record.get('Mes_id') ? true : false
												};
												Ext.Ajax.request({
													url: '/?c=Usluga&m=getUslugaComplexPartition',
													params: ajax_params,
													success: function(response, options) {
														var response_obj = Ext.util.JSON.decode(response.responseText);
														if (response_obj && response_obj.length > 0) {
															record.set('UslugaComplexPartition_id', response_obj[0]['UslugaComplexPartition_id']);
															record.set('UslugaComplexPartition_Code', response_obj[0]['UslugaComplexPartition_Code']);
															record.set('UslugaComplexPartition_Name', response_obj[0]['UslugaComplexPartition_Name']);
															record.commit(true);
															form.viewFormDataStore.commitChanges();
														}
													}
												});
											}
											if (getRegionNick() == 'perm' && record.get('UslugaComplex_id') && EvnClass_SysNick == 'EvnVizitPLStom') {
												var ajax_params = {
													LpuSection_id: record.get('LpuSection_id')
													,PayType_id: record.get('PayType_id')
													,Person_id: form.Person_id
													,UslugaComplexTariff_Date: record.get('EvnVizitPLStom_setDate')
													,UslugaComplex_id: record.get('UslugaComplex_uid')
												};
												Ext.Ajax.request({
													url: '/?c=Usluga&m=loadUslugaComplexTariffList',
													params: ajax_params,
													success: function(response, options) {
														var tct = Ext.get(EvnClass_SysNick + '_data_' + el_data.object_id + '_inputUslugaComplexTariff');
														var tci = Ext.get(EvnClass_SysNick + '_data_' + el_data.object_id + '_inputEvnUslugaStom_UED');
														var response_obj = Ext.util.JSON.decode(response.responseText);
														if (response_obj && response_obj.length == 1) {
															record.set('UslugaComplexTariff_id', response_obj[0]['UslugaComplexTariff_id']);
															record.set('UslugaComplexTariff_Name', response_obj[0]['UslugaComplexTariff_Name']);
															record.set('UslugaComplexTariff_UED', response_obj[0]['UslugaComplexTariff_UED']);
															record.commit(true);
															form.viewFormDataStore.commitChanges();
															tct.update(response_obj[0]['UslugaComplexTariff_Name'] ? response_obj[0]['UslugaComplexTariff_Name'] : form.getEmptyValueText());
															tci.update(response_obj[0]['UslugaComplexTariff_UED'] ? response_obj[0]['UslugaComplexTariff_UED'] : form.getEmptyValueText());
															Ext.Ajax.request({
																url: '/?c=EvnVizit&m=setEvnVizitParameter',
																params: {
																	object: 'EvnVizit'
																	,id: el_data.object_id
																	,param_name: 'UslugaComplexTariff_id'
																	,param_value: response_obj[0]['UslugaComplexTariff_id']
																}
															});	
														} else {
															record.set('UslugaComplexTariff_id', '');
															record.set('UslugaComplexTariff_Name', '');
															tct.update(form.getEmptyValueText());
															tci.update(form.getEmptyValueText());
															Ext.Ajax.request({
																url: '/?c=EvnVizit&m=setEvnVizitParameter',
																params: {
																	object: 'EvnVizit'
																	,id: el_data.object_id
																	,param_name: 'UslugaComplexTariff_id'
																	,param_value: null
																}
															});
														}
													}
												});
											}
											if (getRegionNick() == 'ufa' && record.get('UslugaComplex_Code') && EvnClass_SysNick == 'EvnVizitPL') {
												var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
												var inputHealthKind = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputHealthKind');
												if (inputHealthKind && record) {
													if (
														Date.parseDate(eventData.EvnVizitPL_setDate,'d.m.Y') >= Date.parseDate('01.07.2013','d.m.Y')
														&& !Ext.isEmpty(record.get('UslugaComplex_Code'))
														&& !((record.get('UslugaComplex_Code').substr(-5, 5).inlist([
																//'66805', '00805', '31805', '57805', '71805', '67805', '68805', '69805',
																'31890', '57890', '71890', '66890', '00890', '67890', '68890', '69890',
																'69893', '67893', '73893',
																'73805'
															]) ||
															record.get('UslugaComplex_Code').substr(-3, 3).inlist(['805', '893']))
														)
													) {
														Ext.Ajax.request({
															failure: function(response, options) {
																win.loadMask.hide();
																showSysMsg(langs('При загрузке сигнальный информации о диспансерном учете возникли ошибки'));
															},
															params: {
																 object: record.object_code
																,id: el_data.object_id
																,options: {"isEmk":true}
																,param_name: 'HealthKind_id'
																,param_value: null
															},
															success: function(response, options) {
																inputHealthKind.update(form.getEmptyValueText());
																inputHealthKind.setAttribute('dataid', '');
																record.set('HealthKind_id', null);
																record.commit(true);
																form.viewFormDataStore.commitChanges();
															},
															url: '/?c=EvnVizit&m=setEvnVizitParameter'
														});
													}
												}
											}
											if (getRegionNick() == 'ufa' && record.get('UslugaComplex_Code') && EvnClass_SysNick == 'EvnVizitPLStom') {
												var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
												var inputHealthKind = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputHealthKind');
												if (inputHealthKind && record) {
													if (
														Date.parseDate(eventData.EvnVizitPLStom_setDate,'d.m.Y') >= Date.parseDate('01.04.2018','d.m.Y')
														&& (
															Ext.isEmpty(record.get('UslugaComplex_Code'))
															|| !record.get('UslugaComplex_Code').substr(-3, 3).inlist(['805'])
														)
													) {
														Ext.Ajax.request({
															failure: function(response, options) {
																win.loadMask.hide();
																showSysMsg(langs('При загрузке сигнальный информации о диспансерном учете возникли ошибки'));
															},
															params: {
																 object: record.object_code
																,id: el_data.object_id
																,options: {"isEmk":true}
																,param_name: 'HealthKind_id'
																,param_value: null
															},
															success: function(response, options) {
																inputHealthKind.update(form.getEmptyValueText());
																inputHealthKind.setAttribute('dataid', '');
																record.set('HealthKind_id', null);
																record.commit(true);
																form.viewFormDataStore.commitChanges();
															},
															url: '/?c=EvnVizit&m=setEvnVizitParameter'
														});
													}
												}
											}
											if (getRegionNick() == 'kz') {
												var uslugacomplex_attributelist = rec.get('UslugaComplex_AttributeList');
												var inputPayTypeKAZ = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputPayTypeKAZ');
												var PayTypeKAZ_id;

												if (uslugacomplex_attributelist && !!uslugacomplex_attributelist.split(',').find(function(el){return el == 'Kpn'})) {
													PayTypeKAZ_id = 1;
												}
												else if (uslugacomplex_attributelist && uslugacomplex_attributelist.indexOf('IsNotKpn') >= 0) {
													PayTypeKAZ_id = 2;
												}
												else {
													PayTypeKAZ_id = null;
												}

												var index = form.PayTypeKAZStore.findBy(function(rec) {return (rec.get('PayTypeKAZ_id') == PayTypeKAZ_id);});
												if (PayTypeKAZ_id && index >= 0 && form.PayTypeKAZStore.getCount() > 0) {
													inputPayTypeKAZ.update(form.PayTypeKAZStore.getAt(index).get('PayTypeKAZ_Name'));
													inputPayTypeKAZ.setAttribute('dataid', PayTypeKAZ_id);
													record.set('PayTypeKAZ_id', PayTypeKAZ_id);
												} else {
													inputPayTypeKAZ.update(form.getEmptyValueText());
													inputPayTypeKAZ.setAttribute('dataid', '');
													record.set('PayTypeKAZ_id', null);
												}

												Ext.Ajax.request({
													params: {
														object: 'EvnVizit'
														,id: el_data.object_id
														,param_name: 'PayTypeKAZ_id'
														,param_value: PayTypeKAZ_id
													},
													url: '/?c=EvnVizit&m=setEvnVizitParameter'
												});

												record.commit(true);
												form.viewFormDataStore.commitChanges();
												form.getFinanceSource(EvnClass_SysNick,el_data.object_id);
											}
										}
									}
                                });
                            }
                        }
                    });
					var fieldParams = {};
					cmp.clearBaseParams();
					 cmp.lastQuery = '';
					// Устанавливаем фильтры для кодов посещений
					if (EvnClass_SysNick != 'EvnSection' && getRegionNick() == 'buryatiya' ) {
						var terr_code = form.PersonInfoFrame.getFieldValue('OmsSprTerr_Code');
						cmp.getStore().baseParams.isInoter = (Ext.isEmpty(terr_code) || terr_code == 0 || terr_code > 100);
					}
					cmp.setVizitCodeFilters({
						isStac: 'EvnSection' == EvnClass_SysNick,
						isStom: 'EvnVizitPLStom' == EvnClass_SysNick,
						allowNonMorbusVizitOnly: false,
						allowMorbusVizitOnly: false,
						allowMorbusVizitCodesGroup88: false
					});
					// Устанавливаем дополнительные фильтры
					if ( 'EvnSection' != EvnClass_SysNick ) {
						cmp.getStore().baseParams.EvnVizit_id = el_data.object_id;
					}

					// Делаем фильтр по дате для всех
					if ( typeof eventData == 'object' && !Ext.isEmpty(eventData.EvnVizitPL_setDate) ) {
						cmp.setUslugaComplexDate(eventData.EvnVizitPL_setDate);
					}
					else if ( typeof eventData == 'object' && !Ext.isEmpty(eventData.EvnSection_setDate) ) {
						cmp.setUslugaComplexDate(eventData.EvnSection_setDate);
					}
					else {
						cmp.setUslugaComplexDate(getGlobalOptions().date);
					}

					if (getRegionNick().inlist([ 'ekb' ]) && 'EvnVizitPLStom' == EvnClass_SysNick) {
						var xdate = new Date(2015,0,1);
						var uslugaDate = Date.parseDate(cmp.getStore().baseParams.UslugaComplex_Date, 'd.m.Y');
						if (uslugaDate >= xdate) {
							cmp.getStore().baseParams.UslugaComplexPartition_CodeList = Ext.util.JSON.encode([302,303]);
						} else {
							cmp.getStore().baseParams.UslugaComplexPartition_CodeList = Ext.util.JSON.encode([300,301]);
						}
					}
					
					if (getRegionNick() == 'ekb' && 'EvnVizitPLStom' != EvnClass_SysNick) {
						cmp.setPayType(eventData.PayType_id||null);
					}
					if (getRegionNick().inlist([ 'ekb' ]) && 'EvnVizitPLStom' != EvnClass_SysNick && eventData && eventData.PayType_SysNick && ('bud' == eventData.PayType_SysNick || 'fbud' == eventData.PayType_SysNick)) {
						cmp.getStore().baseParams.UslugaComplexPartition_CodeList = Ext.util.JSON.encode([350,351]);
					}

					if ( getGlobalOptions().region.nick == 'ufa' ) {
						cmp.setLpuLevelCode(this.userMedStaffFact.LpuSectionProfile_Code);
						cmp.setPersonId(this.Person_id);
						if (rootRec.get('Children_Count')>1){
							cmp.getStore().baseParams.allowMorbusVizitOnly = 1;
							cmp.getStore().baseParams.allowMorbusVizitCodesGroup88 = isMorbusGroup88VizitCode(eventData.UslugaComplex_Code) ? 1 : 0;
						} else {
							cmp.getStore().baseParams.allowMorbusVizitOnly = 0;
						}
					}
					// Пока сделал для всех регионов #179764
					if (eventData && eventData.LpuSection_id) {
						cmp.getStore().baseParams.LpuSection_id = eventData.LpuSection_id;
					}
					if ( getGlobalOptions().region.nick == 'ekb' ) {
						
						if (eventData && eventData.MedPersonal_id) {
							cmp.getStore().baseParams.MedPersonal_id = eventData.MedPersonal_id;
						}
						if (eventData && eventData.VizitMedSpecOms_id) {
							cmp.getStore().baseParams.MedSpecOms_id = eventData.VizitMedSpecOms_id;
						}
						if (eventData) {
							if(eventData.Mes_id!=null)
							cmp.setMesOldVizit_id(eventData.Mes_id);
							else
							cmp.setMesOldVizit_id(null);
						}
						cmp.setPersonId(this.Person_id);
						if (eventData) {
							if(eventData.DiagFinance_IsOms!=null)
							cmp.DiagFinance_IsOms = eventData.DiagFinance_IsOms;
							else
							cmp.DiagFinance_IsOms = null;
						}
					}
					if ( getGlobalOptions().region.nick == 'kz' ) {
						if (eventData && eventData.LpuSection_id) {
							cmp.getStore().baseParams.LpuSection_id = eventData.LpuSection_id;
						}
					}
					if ( getRegionNick() == 'buryatiya') {
						// log(eventData);
						cmp.setPersonId(this.Person_id);
						cmp.setUslugaCategoryList(['tfoms']);
						if (EvnClass_SysNick == 'EvnSection') {
							if (eventData && eventData.LpuSection_id) {
								cmp.setLpuSectionProfileByLpuSection_id(eventData.LpuSection_id);
							}
						} else {
							if (eventData && eventData.LpuSectionProfile_id) {
								cmp.setLpuSectionProfile_id(eventData.LpuSectionProfile_id);
							}
						}
					}
					if ( getRegionNick() == 'pskov') {
						// log(eventData);
						cmp.setPersonId(this.Person_id);

						if (eventData && eventData.LpuSectionProfile_id) {
							cmp.setLpuSectionProfile_id(eventData.LpuSectionProfile_id);
						}
						if (eventData && eventData.MedSpecOms_id) {
							cmp.getStore().baseParams.MedSpecOms_id = eventData.MedSpecOms_id;
						}
						if (eventData && eventData.TreatmentClass_id) {
							cmp.getStore().baseParams.TreatmentClass_id = eventData.TreatmentClass_id;
						}
						if (eventData && eventData.LpuSectionCode_id) {
							cmp.getStore().baseParams.LpuSectionCode_id = eventData.LpuSectionCode_id;
						}

						if (EvnClass_SysNick.inlist(['EvnVizitPL','EvnVizitPLStom'])) {
							var parentEvnClass_SysNick = (EvnClass_SysNick=='EvnVizitPL')?'EvnPL':'EvnPLStom';
							var EvnPL_Childrend = form.getObjectChildren(parentEvnClass_SysNick, eventData[EvnClass_SysNick+'_pid']);
							var UslugaComplex_Date = null;

							EvnPL_Childrend[EvnClass_SysNick].item.forEach(function(vizit) {
								var date = getValidDT(vizit.data[EvnClass_SysNick+'_setDate'], '00:00');
								if (UslugaComplex_Date < date) UslugaComplex_Date = date;

								var uslugaList = form.searchObjects(function(rec) {
									return rec.object_code == 'EvnUsluga' && rec.parent_object_value == vizit[EvnClass_SysNick+'_id'];
								});
								uslugaList.forEach(function(usluga) {
									var date = getValidDT(usluga.data.EvnUsluga_setDate, '00:00');
									if (UslugaComplex_Date < date) UslugaComplex_Date = date;
								});
							});

							cmp.setUslugaComplexDate(UslugaComplex_Date?UslugaComplex_Date.format('d.m.Y'):eventData.EvnVizitPL_setDate);
						}
					}
					if ( getRegionNick() == 'perm') {
						// log(eventData);
						if (eventData && eventData.LpuSectionProfile_id) {
							cmp.setLpuSectionProfile_id(eventData.LpuSectionProfile_id);
						}
						if (eventData && eventData.FedMedSpec_id) {
							cmp.setFedMedSpec_id(eventData.FedMedSpec_id);
						}
						if (eventData && eventData.VizitType_id) {
							cmp.getStore().baseParams.VizitType_id = eventData.VizitType_id;
						}
						if (eventData && eventData.VizitClass_id) {
							cmp.getStore().baseParams.VizitClass_id = eventData.VizitClass_id;
						}
						if (eventData && eventData.TreatmentClass_id) {
							cmp.getStore().baseParams.TreatmentClass_id = eventData.TreatmentClass_id;
						}
						if (eventData && eventData.EvnVizitPLStom_IsPrimaryVizit) {
							cmp.getStore().baseParams.isPrimaryVizit = eventData.EvnVizitPLStom_IsPrimaryVizit;
						}
						if (eventData && eventData.PayType_id) {
							cmp.getStore().baseParams.PayType_id = eventData.PayType_id;
						}

						if (EvnClass_SysNick.inlist(['EvnVizitPL','EvnVizitPLStom'])) {
							var parentEvnClass_SysNick = (EvnClass_SysNick=='EvnVizitPL')?'EvnPL':'EvnPLStom';
							var EvnPL_Childrend = form.getObjectChildren(parentEvnClass_SysNick, eventData[EvnClass_SysNick+'_pid']);
							var UslugaComplex_Date = null;

							EvnPL_Childrend[EvnClass_SysNick].item.forEach(function(vizit) {
								var date = getValidDT(vizit.data[EvnClass_SysNick+'_setDate'], '00:00');
								if (UslugaComplex_Date < date) UslugaComplex_Date = date;

								var uslugaList = form.searchObjects(function(rec) {
									return rec.object_code == 'EvnUsluga' && rec.parent_object_value == vizit[EvnClass_SysNick+'_id'];
								});
								uslugaList.forEach(function(usluga) {
									var date = getValidDT(usluga.data.EvnUsluga_setDate, '00:00');
									if (UslugaComplex_Date < date) UslugaComplex_Date = date;
								});
							});

							cmp.setUslugaComplexDate(UslugaComplex_Date?UslugaComplex_Date.format('d.m.Y'):eventData.EvnVizitPL_setDate);
						}
					}
					if ( getRegionNick() == 'vologda') {
						if (eventData && eventData.FedMedSpec_id) {
							cmp.setFedMedSpec_id(eventData.FedMedSpec_id);
						}
						if (eventData && eventData.VizitClass_id) {
							cmp.getStore().baseParams.VizitClass_id = eventData.VizitClass_id;
						}
						if (eventData && eventData.TreatmentClass_id) {
							cmp.getStore().baseParams.TreatmentClass_id = eventData.TreatmentClass_id;
						}
					}
					if (eventData[uslugaComplexIdAlias]&&getRegionNick() != 'ekb') {
						fieldParams.UslugaComplex_id = eventData[uslugaComplexIdAlias];
					}
                    cmp.getStore().removeAll();
                    cmp.getStore().load({callback: function(){
                        cmp.setValue(cmp.getValue());
                        cmp.focus(true, 500);
                    }, params: fieldParams});
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
			case 'UslugaComplexTariff':
                ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaUslugaComplexTariff');
                eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputUslugaComplexTariff';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    cmp = new sw.Promed.SwUslugaComplexTariffCombo({
                        renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaUslugaComplexTariff'
						,width: 400
						,isStom: true
						,allowBlank: true
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;
                                var outputValueId = dataid;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId = null;
                                var outputValuePrice = null;
                                if (rec) {
                                    outputValue = rec.get('UslugaComplexTariff_Name');
                                    outputValueId = rec.get('UslugaComplexTariff_id');
                                    outputValuePrice = rec.get('UslugaComplexTariff_UED');
                                }

                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,outputValuePrice: outputValuePrice
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnVizit'
                                        ,id: el_data.object_id
                                        ,param_name: 'UslugaComplexTariff_id'
                                        ,param_value: outputValueId
                                    }
									,requestCallback: function(response_obj) {
										form.isFirstAdminCheck = false;
										var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);

										if ( record && response_obj.success == true ) {
											//обновить данные ТАП
											record.set('UslugaComplexTariff_id', outputValueId);
											record.set('UslugaComplexTariff_Name', outputValue);
											record.commit(true);
											form.viewFormDataStore.commitChanges();
											var tct = Ext.get(EvnClass_SysNick + '_data_' + el_data.object_id + '_inputEvnUslugaStom_UED');
											tct.update(!Ext.isEmpty(outputValuePrice) ? outputValuePrice : form.getEmptyValueText());
										}
									}
                                });
                            }
                        }
                    });
								
					var vizit = form.viewFormDataStore.getById(EvnClass_SysNick+'_'+ el_data.object_id);
					var params = {
						LpuSection_id: vizit.get('LpuSection_id')
						,PayType_id: vizit.get('PayType_id')
						,Person_id: this.Person_id
						,UslugaComplexTariff_Date: vizit.get('EvnVizitPLStom_setDate')
						,UslugaComplex_id: vizit.get('UslugaComplex_uid')
					};
                    cmp.getStore().removeAll();
                    cmp.getStore().load({callback: function(){
						cmp.getStore().clearFilter();
						cmp.lastQuery = '';
						if (cmp.getStore().getCount() > 1) {
							cmp.getStore().filterBy(function(rec) {
								return Ext.isEmpty(rec.get('Lpu_id'));
							});
						}
                        cmp.setValue(cmp.getValue());
                        cmp.focus(true, 500);
                    }, params: params});
					//cmp.loadUslugaComplexTariffList();
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
			case 'LpuSectionProfile':
                ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaLpuSectionProfile');
                eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputLpuSectionProfile';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
					/*if (getRegionNick() == 'ekb') {
						cmp = new sw.Promed.swLpuSectionProfileEkbRemoteCombo({
							renderTo: EvnClass_SysNick + '_data_' + el_data.object_id + '_inputareaLpuSectionProfile',
							allowBlank: (getRegionNick() != 'ekb'),
							width: 400,
							listWidth: 600,
							hiddenName: 'LpuSectionProfile_id',
							listeners: {
								blur: function (f) {
									var outputValue = eloutput.dom.innerHTML;
									var outputValueId = dataid;

									onCancel({
										elOutputId: eloutputid,
										outputValue: outputValue,
										outputValueId: outputValueId,
										elInputWrap: ct,
										elInput: f
									});

									return false;
								},
								render: function (combo) {
									if (!Ext.isEmpty(dataid)) {
										combo.setValue(dataid);
									}
								},
								keydown: function (combo, e) {
									if (e.getKey() == e.TAB) {
										//form.createInputArea('Diag', EvnClass_SysNick, el_data);
									}
								},
								change: function (f, n, o) {
									var rec = f.getStore().getById(n);
									var outputValue = form.getEmptyValueText();
									var outputValueId = null;
									if (rec) {
										outputValue = rec.get('LpuSectionProfile_Name');
										outputValueId = rec.get('LpuSectionProfile_id');
									}
									if (!outputValueId && !f.allowBlank) {
										sw.swMsg.alert(langs('Сообщение'), langs('Поле "Профиль" является обязательным для заполнения.'));
										return false;
									}

									onChange({
										elOutputId: eloutputid,
										outputValue: outputValue,
										outputValueId: outputValueId,
										elInputWrap: ct,
										elInput: f,
										requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter',
										requestParams: {
											object: 'EvnVizitPL',
											id: el_data.object_id,
											param_name: 'LpuSectionProfile_id',
											param_value: outputValueId
										}
									});
								}
							}
						});
						var load_params = {};
						var vizit_data = form.getObjectData(EvnClass_SysNick, el_data.object_id);
						if (vizit_data && vizit_data.MedPersonal_id) {
							load_params.MedPersonal_id = vizit_data.MedPersonal_id;
						}
						if (vizit_data && vizit_data.LpuSection_id) {
							load_params.LpuSection_id = vizit_data.LpuSection_id;
						}
						if (vizit_data && vizit_data.EvnVizitPL_setDate) {
							load_params.onDate = vizit_data.EvnVizitPL_setDate;
						}
						load_params.LpuSectionProfileGRAPP_CodeIsNotNull = (vizit_data.PayType_SysNick == 'oms' ? 1 : null);

						cmp.getStore().removeAll();
						cmp.getStore().load({
							params: load_params,
							callback: function () {
								cmp.setValue(cmp.getValue());
								cmp.focus(true, 500);
							}
						});
					} else {*/
						cmp = new sw.Promed.swLpuSectionProfileDopRemoteCombo({
							renderTo: EvnClass_SysNick + '_data_' + el_data.object_id + '_inputareaLpuSectionProfile',
							allowBlank: false,
							width: 400,
							listWidth: 600,
							hiddenName: 'LpuSectionProfile_id',
							listeners: {
								blur: function (f) {
									var outputValue = eloutput.dom.innerHTML;
									var outputValueId = dataid;

									onCancel({
										elOutputId: eloutputid,
										outputValue: outputValue,
										outputValueId: outputValueId,
										elInputWrap: ct,
										elInput: f
									});

									return false;
								},
								render: function (combo) {
									if (!Ext.isEmpty(dataid)) {
										combo.setValue(dataid);
									}
								},
								keydown: function (combo, e) {
									if (e.getKey() == e.TAB) {
										//form.createInputArea('Diag', EvnClass_SysNick, el_data);
									}
								},
								change: function (f, n, o) {
									if(getRegionNick() == 'vologda' && n != o && Ext.isEmpty(f.cancelControlProfile)) {
										f.suspendEvents(); //останавливаем события
										var errorControlCod = form.errorControlCodaVisits({
											object_id: el_data.object_id,
											newCode: f.findRecord('LpuSectionProfile_id', n).get('LpuSectionProfile_Code')
										});
										if(errorControlCod){
											var rootRec = form.viewFormDataStore.getById(form.data.Code + '_'+ form.data.id);
											if(rootRec.get(form.data.Code+'_IsFinish') == 2){
												sw.swMsg.alert(langs('Ошибка'), 'Случай закончен. Профиль отделения текущего посещения должен соответствовать профилю отделения других посещений');
												f.resumeEvents(); // восстанавливаем события
												f.setValue(o);
												f.fireEvent('blur', f, o);
											}else{
												f.cancelControlProfile = true;
												sw.swMsg.show({
													buttons: Ext.Msg.YESNO,
													fn: function(buttonId, text, obj) {
														var combo = this;
														combo.cancelControlProfile = false;
														combo.resumeEvents(); // восстанавливаем события
														if ( buttonId == 'no' ) {
															combo.setValue(o);
															combo.fireEvent('blur', combo, o);
														}else{
															combo.fireEvent('change', combo, n);
															combo.fireEvent('blur', combo, n);
														}
													}.bind(f),
													icon: Ext.MessageBox.QUESTION,
													msg: langs('Профиль отделения текущего посещения должен соответствовать профилю отделения других посещений в этом ТАП. Продолжить ?'),
													title: langs('Предупреждение')
												});
											}
											return false;
										}else{
											f.resumeEvents();
										}
									}
									
									var rec = f.getStore().getById(n);
									var outputValue = form.getEmptyValueText();
									var outputValueId = null;
									if (rec) {
										outputValue = rec.get('LpuSectionProfile_Name');
										outputValueId = rec.get('LpuSectionProfile_id');
									}
									if (!outputValueId && !f.allowBlank) {
										sw.swMsg.alert(langs('Сообщение'), langs('Поле "Профиль" является обязательным для заполнения.'));
										return false;
									}
									form.isFirstAdminCheck = false;

									var EvnClass_SysNick = form.defineParentEvnClass().EvnClass_SysNick;
									var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
									var params = {
										LpuSectionProfile_Code: f.findRecord('LpuSectionProfile_id', n).get('LpuSectionProfile_Code'),
										LpuSectionProfile_Name: outputValue,
										LpuSectionProfile_id: outputValueId
									}

									onChange({
										elOutputId: eloutputid,
										outputValue: outputValue,
										outputValueId: outputValueId,
										elInputWrap: ct,
										elInput: f,
										requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter',
										requestParams: {
											object: 'EvnVizitPL',
											id: el_data.object_id,
											param_name: 'LpuSectionProfile_id',
											param_value: outputValueId
										}
										,requestCallback: function(response_obj) {
											if(this.record){
												if (
													getRegionNick() == 'pskov' && EvnClass_SysNick == 'EvnVizitPL'
													&& rec.get('LpuSectionProfile_Code') == '160'
													&& (Ext.isEmpty(record.get('Diag_Code')) || record.get('Diag_Code').substr(0, 1) != 'Z')
												) {
													// Установить TreatmentClass_Code = 1.1
													var aindex = form.treatmentClassStore.findBy(function(rec) {
														return (rec.get('TreatmentClass_Code') == '1.1');
													});

													if ( aindex >= 0 ) {
														var inputTreatmentClass = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputTreatmentClass');

														var TreatmentClass_id = form.treatmentClassStore.getAt(aindex).get('TreatmentClass_id');
														var TreatmentClass_Name = form.treatmentClassStore.getAt(aindex).get('TreatmentClass_Name');
														this.record.set('TreatmentClass_id', TreatmentClass_id);
														this.record.set('TreatmentClass_Name', TreatmentClass_Name);
														inputTreatmentClass.update(TreatmentClass_Name);
														inputTreatmentClass.setAttribute('dataid', TreatmentClass_id);
														Ext.Ajax.request({
															url: '/?c=EvnVizit&m=setEvnVizitParameter',
															params: {
																object: EvnClass_SysNick,
																id: el_data.object_id,
																param_name: 'TreatmentClass_id',
																param_value: TreatmentClass_id,
																options: {isEmk: true}
															}
														});
													}
												}

												this.record.set('LpuSectionProfile_Name', this.params.LpuSectionProfile_Name);
												this.record.set('LpuSectionProfile_id', this.params.LpuSectionProfile_id);
												this.record.set('LpuSectionProfile_Code', this.params.LpuSectionProfile_Code);
												this.record.commit(true);
												this.form.viewFormDataStore.commitChanges();
											}
										}.bind({record: record, params: params, form: form})
									});
								}
							}
						});
						var load_params = {};
						var vizit_data = form.getObjectData(EvnClass_SysNick, el_data.object_id);
						if (vizit_data) {
							if ( vizit_data.LpuSection_id ) {
								load_params.LpuSection_id = vizit_data.LpuSection_id;
							}

							load_params.onDate = (!Ext.isEmpty(vizit_data.EvnVizitPL_setDate) ? vizit_data.EvnVizitPL_setDate : getGlobalOptions().date);
						}

						cmp.getStore().removeAll();
						cmp.getStore().load({
							params: load_params,
							callback: function () {
								cmp.setValue(cmp.getValue());
								cmp.focus(true, 500);
							}
						});
					//}
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
			case 'CostSetDate':
				ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaSetDate');
				eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputSetDate';
				eloutput = Ext.get(eloutputid);
				var th = this;
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					var vizit = form.viewFormDataStore.getById(EvnClass_SysNick+'_'+ el_data.object_id);

					cmp = new sw.Promed.SwDateField({
						renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaSetDate'
						,allowBlank: false
						,width: 100
						,hiddenName: EvnClass_SysNick + '_setDate'
						,listeners:
						{
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							keydown: function(combo, e) {
								if (e.getKey() == e.TAB) {
									//form.createInputArea('Diag', EvnClass_SysNick, el_data);
								}
							},
							change: function(f,n,o) {
								var outputValue = f.getValue().format('d.m.Y');
								var outputValueId = f.getValue().format('d.m.Y');
								form.isFirstAdminCheck = false;
								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=CostPrint&m=setCostParameter'
									,requestParams: {
										object: EvnClass_SysNick
										,id: el_data.object_id
										,param_name: EvnClass_SysNick + '_setDT'
										,param_value: outputValueId
									}
								});
							}
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'SetDate':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaSetDate');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputSetDate';
				eloutput = Ext.get(eloutputid);
				var th = this;
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					var vizit = form.viewFormDataStore.getById(EvnClass_SysNick+'_'+ el_data.object_id);

					cmp = new sw.Promed.SwDateField({
						renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaSetDate'
						,allowBlank: false
						,width: 100
						,hiddenName: EvnClass_SysNick + '_setDate'
						,listeners:
						{
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							keydown: function(combo, e) {
								if (e.getKey() == e.TAB) {
									//form.createInputArea('Diag', EvnClass_SysNick, el_data);
								}
							},
							change: function(f,n,o) {
								var outputValue = f.getValue().format('d.m.Y');
								var outputValueId = f.getValue().format('d.m.Y');

								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: EvnClass_SysNick
										,id: el_data.object_id
										,param_name: 'setDT'
										,param_value: outputValueId
									}
								});
							}
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'ConsDate':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaConsDate');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputConsDate';
				eloutput = Ext.get(eloutputid);
				var th = this;
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					var vizit = form.viewFormDataStore.getById(EvnClass_SysNick+'_'+ el_data.object_id);

					cmp = new sw.Promed.SwDateField({
						renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaConsDate'
						,allowBlank: false
						,width: 100
						,hiddenName: EvnClass_SysNick + '_consDate'
						,listeners:
						{
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							keydown: function(combo, e) {
								if (e.getKey() == e.TAB) {
									//form.createInputArea('Diag', EvnClass_SysNick, el_data);
								}
							},
							change: function(f,n,o) {
								var outputValue = form.getEmptyValueText();
								var outputValueId = '';
								if (!Ext.isEmpty(f.getValue())) {
									outputValue = f.getValue().format('d.m.Y');
									outputValueId = f.getValue().format('d.m.Y');
								}

								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: EvnClass_SysNick
										,id: el_data.object_id
										,param_name: 'consDT'
										,param_value: outputValueId
									}
									,requestCallback: function(response_obj) {
										form.isFirstAdminCheck = false;
										var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
										if ( record && response_obj.success == true ) {
											record.set(EvnClass_SysNick+'_consDate', outputValueId);
											record.commit(true);
											form.viewFormDataStore.commitChanges();
										}
									}
								});
							}
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'RFDateRange':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaRFDateRange');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputRFDateRange';
				eloutput = Ext.get(eloutputid);
				var th = this;
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					var vizit = form.viewFormDataStore.getById(EvnClass_SysNick+'_'+ el_data.object_id);

					cmp = new Ext.form.DateRangeField({
						renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaRFDateRange'
						,allowBlank: false
						,width: 170
						,hiddenName: EvnClass_SysNick + '_RFDateRange'
						,plugins: [new Ext.ux.InputTextMask('99.99.9999 - 99.99.9999', false)]
						,listeners: {
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							keydown: function(combo, e) {
								if (e.getKey() == e.TAB) {
									//form.createInputArea('Diag', EvnClass_SysNick, el_data);
								}
							},
							select: function(f,n,o) {
								var outputValue = n;
								var outputValueId = n;

								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: EvnClass_SysNick
										,id: el_data.object_id
										,param_name: 'RFDateRange'
										,param_value: outputValueId
									}
								});
							}
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'SertHIVNumber':
			case 'SertInfectNumber':
			case 'SertNarcoNumber':
			case 'MedSer':
			case 'MedNum':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputarea' + name);
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_input' + name;
				eloutput = Ext.get(eloutputid);
				var th = this;
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					var vizit = form.viewFormDataStore.getById(EvnClass_SysNick+'_'+ el_data.object_id);

					cmp = new Ext.form.TextField({
						renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputarea' + name
						,allowBlank: false
						,width: 100
						,hiddenName: EvnClass_SysNick + '_' + name
						,listeners: {
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							keydown: function(combo, e) {
								if (e.getKey() == e.TAB) {
									//form.createInputArea('Diag', EvnClass_SysNick, el_data);
								}
							},
							change: function(f,n,o) {
								var outputValue = form.getEmptyValueText();
								var outputValueId = '';
								if (!Ext.isEmpty(f.getValue())) {
									outputValue = f.getValue();
									outputValueId = f.getValue();
								}

								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: EvnClass_SysNick
										,id: el_data.object_id
										,param_name: name
										,param_value: outputValueId
									}
									,requestCallback: function(response_obj) {
										form.isFirstAdminCheck = false;
										var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
										if ( record && response_obj.success == true ) {
											record.set(EvnClass_SysNick+'_'+name, outputValueId);
											record.commit(true);
											form.viewFormDataStore.commitChanges();
										}
									}
								});
							}
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'SertHIVDate':
			case 'SertInfectDate':
			case 'SertNarcoDate':
			case 'MedDate':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputarea' + name);
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_input' + name;
				eloutput = Ext.get(eloutputid);
				var th = this;
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					var vizit = form.viewFormDataStore.getById(EvnClass_SysNick+'_'+ el_data.object_id);

					cmp = new sw.Promed.SwDateField({
						renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputarea' + name
						,allowBlank: false
						,width: 100
						,hiddenName: EvnClass_SysNick + '_' + name
						,listeners: {
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							keydown: function(combo, e) {
								if (e.getKey() == e.TAB) {
									//form.createInputArea('Diag', EvnClass_SysNick, el_data);
								}
							},
							change: function(f,n,o) {
								var outputValue = form.getEmptyValueText();
								var outputValueId = '';
								if (!Ext.isEmpty(f.getValue())) {
									outputValue = f.getValue().format('d.m.Y');
									outputValueId = f.getValue().format('d.m.Y');
								}

								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: EvnClass_SysNick
										,id: el_data.object_id
										,param_name: name
										,param_value: outputValueId
									}
									,requestCallback: function(response_obj) {
										form.isFirstAdminCheck = false;
										var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
										if ( record && response_obj.success == true ) {
											record.set(EvnClass_SysNick+'_'+name, outputValueId);
											record.commit(true);
											form.viewFormDataStore.commitChanges();
										}
									}
								});
							}
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'ResultDispMigrant':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaResultDispMigrant');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputResultDispMigrant';
				eloutput = Ext.get(eloutputid);
				var th = this;
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					var vizit = form.viewFormDataStore.getById(EvnClass_SysNick+'_'+ el_data.object_id);

					cmp = new sw.Promed.SwCommonSprCombo({
						autoLoad: true
						,allowBlank: false
						,typeCode: 'int'
						,comboSubject: 'ResultDispMigrant'
						,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaResultDispMigrant'
						,width: 300
						,listeners: {
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							keydown: function(combo, e) {
								if (e.getKey() == e.TAB) {
									//form.createInputArea('Diag', EvnClass_SysNick, el_data);
								}
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							change: function(f,n,o) {
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId, IsSan_name;
								if(rec) {
									outputValue = IsSan_name = rec.get('ResultDispMigrant_Name');
									outputValueId = rec.get('ResultDispMigrant_id');
								}
								form.isFirstAdminCheck = false;
								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: EvnClass_SysNick
										,id: el_data.object_id
										,param_name: 'ResultDispMigrant_id'
										,param_value: outputValueId
									}
								});
							}
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'ResultDispDriver':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaResultDispDriver');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputResultDispDriver';
				eloutput = Ext.get(eloutputid);
				var th = this;
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					var vizit = form.viewFormDataStore.getById(EvnClass_SysNick+'_'+ el_data.object_id);

					cmp = new sw.Promed.SwCommonSprCombo({
						autoLoad: true
						,allowBlank: false
						,typeCode: 'int'
						,comboSubject: 'ResultDispDriver'
						,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaResultDispDriver'
						,width: 300
						,listeners: {
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							keydown: function(combo, e) {
								if (e.getKey() == e.TAB) {
									//form.createInputArea('Diag', EvnClass_SysNick, el_data);
								}
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							change: function(f,n,o) {
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId, IsSan_name;
								if(rec) {
									outputValue = IsSan_name = rec.get('ResultDispDriver_Name');
									outputValueId = rec.get('ResultDispDriver_id');
								}
								form.isFirstAdminCheck = false;
								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: EvnClass_SysNick
										,id: el_data.object_id
										,param_name: 'ResultDispDriver_id'
										,param_value: outputValueId
									}
									,requestCallback: function(response_obj) {
										form.isFirstAdminCheck = false;
										var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
										if ( record && response_obj.success == true ) {
											record.set('ResultDispDriver_id', outputValueId);
											record.set('ResultDispDriver_Name', outputValue);
											record.commit(true);
											form.viewFormDataStore.commitChanges();
											var reload_params = {
												section_code: 'EvnPLDispDriver',
												object_key: 'EvnPLDispDriver_id',
												object_value: el_data.object_id,
												section_id: 'EvnPLDispDriver_'+ el_data.object_id
											};
											form.reloadViewForm(reload_params);
										}
									}
								});
							}
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'IsFinishM':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaIsFinish');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputIsFinish';
				eloutput = Ext.get(eloutputid);
				var th = this;
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					var vizit = form.viewFormDataStore.getById(EvnClass_SysNick+'_'+ el_data.object_id);

					cmp = new sw.Promed.SwCommonSprCombo({
						autoLoad: true
						,allowBlank: false
						,typeCode: 'int'
						,comboSubject: 'YesNo'
						,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaIsFinish'
						,width: 60
						,listeners:
						{
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							keydown: function(combo, e) {
								if (e.getKey() == e.TAB) {
									//form.createInputArea('Diag', EvnClass_SysNick, el_data);
								}
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							change: function(f,n,o) {
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId, IsSan_name;
								if(rec) {
									outputValue = IsSan_name = rec.get('YesNo_Name');
									outputValueId = rec.get('YesNo_id');
								}
								form.isFirstAdminCheck = false;
								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: EvnClass_SysNick
										,id: el_data.object_id
										,param_name: EvnClass_SysNick + '_IsFinish'
										,param_value: outputValueId
									}
									,requestCallback: function(response_obj) {
										if (EvnClass_SysNick == 'EvnPLDispDriver' && response_obj.success == true) {
											var reload_params = {
												section_code: 'EvnPLDispDriver',
												object_key: 'EvnPLDispDriver_id',
												object_value: el_data.object_id,
												section_id: 'EvnPLDispDriver_'+ el_data.object_id
											};
											form.reloadViewForm(reload_params);
										}
									}
								});
							}
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'EduDate':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaEduDate');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputEduDate';
				eloutput = Ext.get(eloutputid);
				var th = this;
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					var vizit = form.viewFormDataStore.getById(EvnClass_SysNick+'_'+ el_data.object_id);

					cmp = new sw.Promed.SwDateField({
						renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaEduDate'
						,allowBlank: false
						,width: 100
						,hiddenName: EvnClass_SysNick + '_eduDate'
						,listeners:
						{
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							keydown: function(combo, e) {
								if (e.getKey() == e.TAB) {
									//form.createInputArea('Diag', EvnClass_SysNick, el_data);
								}
							},
							change: function(f,n,o) {
								var outputValue = f.getValue().format('d.m.Y');
								var outputValueId = f.getValue().format('d.m.Y');

								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: EvnClass_SysNick
										,id: el_data.object_id
										,param_name: 'eduDT'
										,param_value: outputValueId
									}
								});
							}
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'IsNoPrint':
				ct = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaIsNoPrint');
				eloutputid = EvnClass_SysNick +'_'+ el_data.object_id +'_inputIsNoPrint';
				eloutput = Ext.get(eloutputid);
				var th = this;
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					var vizit = form.viewFormDataStore.getById(EvnClass_SysNick+'_'+ el_data.object_id);

					cmp = new sw.Promed.SwCommonSprCombo({
						autoLoad: true
						,allowBlank: false
						,typeCode: 'int'
						,comboSubject: 'YesNo'
						,renderTo: EvnClass_SysNick +'_'+ el_data.object_id +'_inputareaIsNoPrint'
						,width: 60
						,listeners:
						{
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							keydown: function(combo, e) {
								if (e.getKey() == e.TAB) {
									//form.createInputArea('Diag', EvnClass_SysNick, el_data);
								}
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							change: function(f,n,o) {
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId, IsSan_name;
								if(rec) {
									outputValue = IsSan_name = rec.get('YesNo_Name');
									outputValueId = rec.get('YesNo_id');
								}
								form.isFirstAdminCheck = false;
								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=CostPrint&m=setCostParameter'
									,requestParams: {
										object: EvnClass_SysNick
										,id: el_data.object_id
										,param_name: EvnClass_SysNick + '_IsNoPrint'
										,param_value: outputValueId
									}
								});
							}
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'MesOldVizit':
                ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaMesOldVizit');
                eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputMesOldVizit';
                eloutput = Ext.get(eloutputid);
				var th = this;
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
					var vizit = form.viewFormDataStore.getById(EvnClass_SysNick+'_'+ el_data.object_id);

                    cmp = new sw.Promed.SwMesOldVizitCombo({
                        renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaMesOldVizit'
						,allowBlank: true
                        ,width: 400
                        ,listWidth: 600
                        ,hiddenName: 'Mes_id'
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;
                                var outputValueId = dataid;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    //form.createInputArea('Diag', EvnClass_SysNick, el_data);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId = null;
                                var outputCode = null;
                                if(rec) {
                                    outputValue = rec.get('MesOldVizit_Code') + '. ' + rec.get('MesOldVizit_Name');
                                    outputValueId = rec.get('MesOldVizit_id');
                                    outputCode =  rec.get('MesOldVizit_Code');
                                }
								if (!outputValueId && !f.allowBlank) {
									sw.swMsg.alert(langs('Сообщение'), langs('Поле "МЭС" является обязательным для заполнения.'));
									return false;
								}

                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnVizit'
                                        ,id: el_data.object_id
                                        ,param_name: 'MesOldVizit_id'
                                        ,param_value: outputValueId
                                    }
									,requestCallback: function(response_obj) {
										form.isFirstAdminCheck = false;
										if ( response_obj.success == true ) {
											var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
											if (false == Ext.isEmpty(outputValueId)) {
													if (record) {
														record.set('Mes_id', outputValueId);
														record.set('Mes_Code', outputCode);
														// очистить поле "Код посещения"
														record.set('UslugaComplex_uid', null);
														record.set('UslugaComplex_Code', null);
														record.commit(true);
														form.viewFormDataStore.commitChanges();
													}
													var tct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputUslugaComplex');
													tct.update(form.getEmptyValueText());
													tct.setAttribute('dataid', '');

													// обновить список услуг
													form.loadTreeNode({
														id: form.data.Code +'_'+ form.data.id,
														callback: function(tl,n){
															form.reloadViewForm({
																section_code: 'EvnUsluga',
																object_key: 'EvnUsluga_id',
																object_value: 0,
																parent_object_key: EvnClass_SysNick+'_id',
																parent_object_value: el_data.object_id,
																section_id: 'EvnUslugaList_' + el_data.object_id
															});
														}
													});
											} else {
												if (record) {
													record.set('Mes_id', outputValueId);
													record.commit(true);
													form.viewFormDataStore.commitChanges();
												}
											}
										}
									}
                                });
                            }
                        }
                    });
					
					cmp.getStore().removeAll();
					cmp.clearBaseParams();
					if (getRegionNick() == 'ekb' && EvnClass_SysNick == 'EvnVizitPLStom') {
						/*var date = getGlobalOptions().date;
						var mes_codes = [];
						if (date < new Date(2015,0,1)) {
							mes_codes = ['1115', '1135', '1145'];
						} else {
							mes_codes = ['5511', '5512', '5513', '5521', '5522', '5531', '5532', '5541', '5542', '5551', '5552']
						}
						cmp.setMesCodeList(mes_codes);*/
						cmp.setMesType_id(12);
					}
					if(vizit.get('UslugaComplex_uid')!=null){
						cmp.setUslugaComplex_id(vizit.get('UslugaComplex_uid'));
					}else{
						cmp.setUslugaComplex_id(null);
					}
					if (getRegionNick().inlist([ 'ekb' ]) && EvnClass_SysNick != 'EvnVizitPLStom' && vizit.get('PayType_SysNick')) {
						if ('bud' == vizit.get('PayType_SysNick') || 'fbud' == vizit.get('PayType_SysNick')) {
							cmp.setMesType_id(8);//МЭС СЗЗ
							cmp.setUslugaComplexPartitionCodeList([350,351]);
						} else if ('oms' == vizit.get('PayType_SysNick')) {
							cmp.setMesType_id(0);
						}
					}
                    cmp.getStore().load({
						callback: function(){
							cmp.setValue(cmp.getValue());
							cmp.focus(true, 500);
						}
					});
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
			case 'MesRid':
				ct = Ext.get('EvnSection_data_'+ el_data.object_id +'_inputareaMesRid');
				eloutputid = 'EvnSection_data_'+ el_data.object_id +'_inputMesRid';
				eloutput = Ext.get(eloutputid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					cmp = new sw.Promed.SwMesKsgCombo({
						renderTo: 'EvnSection_data_'+ el_data.object_id +'_inputareaMesRid'
						,hiddenName: 'Mes_rid'
						,listeners:
						{
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							keydown: function(combo, e) {
								if (e.getKey() == e.TAB) {
									//form.createInputArea('Diag', 'EvnSection', el_data);
								}
							},
							change: function(f,n,o) {
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId = null;
								if(rec) {
									outputValue = rec.get('Mes_Code');
									outputValueId = rec.get('Mes_id');
								}

								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnSection&m=setEvnSectionParameter'
									,requestParams: {
										object: 'EvnSection'
										,id: el_data.object_id
										,param_name: 'MesTariff_id'
										,param_value: rec.get('MesTariff_id')
									}
									,requestCallback: function(response_obj) {
										form.isFirstAdminCheck = false;
										if ( response_obj.success == true ) {
											// обновляем коэфф
											ct = Ext.get('EvnSection_data_'+ el_data.object_id +'_inputMesTariff');
											if (!Ext.isEmpty(rec.get('MesTariff_Value'))) {
												ct.update('<p>Коэффициент КСГ/КПГ: ' + rec.get('MesTariff_Value') + '</p>')
											} else {
												ct.update('')
											}
										}
									}
								});
							}
						}
					});
					var params = {};
					var es_data = form.getObjectData('EvnSection', el_data.object_id);
					if (es_data && es_data.EvnSection_setDate) {
						params.EvnSection_setDate = es_data.EvnSection_setDate;
					}
					if (es_data && es_data.EvnSection_disDate) {
						params.EvnSection_disDate = es_data.EvnSection_disDate;
					}
					if (es_data && es_data.Person_id) {
						params.Person_id = es_data.Person_id;
					}
					if (es_data && es_data.Diag_id) {
						params.Diag_id = es_data.Diag_id;
					}
					if (es_data && es_data.LpuSection_id) {
						params.LpuSection_id = es_data.LpuSection_id;
					}
					if (es_data && es_data.LpuSectionProfile_id) {
						params.LpuSectionProfile_id = es_data.LpuSectionProfile_id;
					}
					params.EvnSection_id = el_data.object_id;
					cmp.getStore().removeAll();
					cmp.getStore().load({
						params: params,
						callback: function(){
							if (cmp.getStore().getCount() > 0) {
								cmp.setAllowBlank(false);
							} else {
								cmp.setAllowBlank(true);
							}
							cmp.setValue(cmp.getValue());
							cmp.focus(true, 500);
						}
					});
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'PregnancyEvnPS_Period':
				ct = Ext.get('EvnSection_data_'+ el_data.object_id +'_inputareaPregnancyEvnPSPeriod');
				eloutputid = 'EvnSection_data_'+ el_data.object_id +'_inputPregnancyEvnPSPeriod';
				eloutput = Ext.get(eloutputid);
				var data = this.getObjectData('EvnSection', el_data.object_id);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					cmp = new Ext.form.NumberField({
						renderTo: ct,
						name: 'PregnancyEvnPS_Period',
						minValue: 1,
						maxValue: 45,
						width: 80,
						listeners: {
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							render: function(field) {
								if(!Ext.isEmpty(dataid)) {
									field.setValue(dataid);
								}
							},
							change: function(field, newValue, oldValue) {
								var outputValue = form.getEmptyValueText();
								var outputValueId = null;
								if(!Ext.isEmpty(newValue)) {
									outputValueId = outputValue = newValue;
								}
								if (!Ext.isEmpty(outputValueId) && outputValueId < 1 || outputValueId > 45) {
									form.showWarningMsg({msg: "Срок беременности должен быть от 1 до 45 недель"});
									return false;
								}

								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: field
									,requestUrl: '/?c=EvnSection&m=setEvnSectionParameter'
									,requestParams: {
										object: 'EvnSection'
										,id: data.EvnSection_id
										,param_name: 'PregnancyEvnPS_Period'
										,param_value: newValue
									}
									,requestCallback: function(response_obj) {

									}
								});
							}
						}
					});
					cmp.focus(true, 100);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'LpuSectionProfile_EvnSection':
                ct = Ext.get('EvnSection_data_'+ el_data.object_id +'_inputareaLpuSectionProfile');
                eloutputid = 'EvnSection_data_'+ el_data.object_id +'_inputLpuSectionProfile';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
					if (getRegionNick() == 'ekb') {
						cmp = new sw.Promed.swLpuSectionProfileEkbRemoteCombo({
							renderTo: 'EvnSection_data_' + el_data.object_id + '_inputareaLpuSectionProfile',
							width: 400,
							listWidth: 600,
							hiddenName: 'LpuSectionProfile_id',
							listeners: {
								blur: function (f) {
									var outputValue = eloutput.dom.innerHTML;
									var outputValueId = dataid;

									onCancel({
										elOutputId: eloutputid,
										outputValue: outputValue,
										outputValueId: outputValueId,
										elInputWrap: ct,
										elInput: f
									});

									return false;
								},
								render: function (combo) {
									if (!Ext.isEmpty(dataid)) {
										combo.setValue(dataid);
									}
								},
								keydown: function (combo, e) {
									if (e.getKey() == e.TAB) {
										//form.createInputArea('Diag', 'EvnSection', el_data);
									}
								},
								change: function (f, n, o) {
									var rec = f.getStore().getById(n);
									var outputValue = form.getEmptyValueText();
									var outputValueId = null;
									if (rec) {
										outputValue = rec.get('LpuSectionProfile_Name');
										outputValueId = rec.get('LpuSectionProfile_id');
									}
									form.isFirstAdminCheck = false;
									onChange({
										elOutputId: eloutputid,
										outputValue: outputValue,
										outputValueId: outputValueId,
										elInputWrap: ct,
										elInput: f,
										requestUrl: '/?c=EvnSection&m=setEvnSectionParameter',
										requestParams: {
											object: 'EvnSection',
											id: el_data.object_id,
											param_name: 'LpuSectionProfile_id',
											param_value: outputValueId
										}
									});
								}
							}
						});
						var params = {};
						var es_data = form.getObjectData('EvnSection', el_data.object_id);
						if (es_data && es_data.MedPersonal_id) {
							params.MedPersonal_id = es_data.MedPersonal_id;
						}
						if (es_data && es_data.LpuSection_id) {
							params.LpuSection_id = es_data.LpuSection_id;
						}
						if (es_data && es_data.LpuUnitType_Code && (es_data.LpuUnitType_Code == 3 || es_data.LpuUnitType_Code == 5)) {
							params.LpuSectionProfileGRSZP_CodeIsNotNull = (es_data.PayType_SysNick == 'oms' ? 1 : null);
						} else {
							params.LpuSectionProfileGRKSS_CodeIsNotNull = (es_data.PayType_SysNick == 'oms' ? 1 : null);
						}
						params.AddLpusectionProfiles = 1;
						params.onDate = (!Ext.isEmpty(es_data.EvnSection_setDate) ? es_data.EvnSection_setDate : getGlobalOptions().date);
						cmp.getStore().removeAll();
						cmp.getStore().load({
							params: params,
							callback: function () {
								cmp.setValue(cmp.getValue());
								cmp.focus(true, 500);
							}
						});
					} else {
						cmp = new sw.Promed.swLpuSectionProfileDopRemoteCombo({
							renderTo: 'EvnSection_data_' + el_data.object_id + '_inputareaLpuSectionProfile',
							allowBlank: (!getRegionNick().inlist([ 'astra', 'kz' ])),
							width: 400,
							listWidth: 600,
							hiddenName: 'LpuSectionProfile_id',
							listeners: {
								blur: function (f) {
									var outputValue = eloutput.dom.innerHTML;
									var outputValueId = dataid;

									onCancel({
										elOutputId: eloutputid,
										outputValue: outputValue,
										outputValueId: outputValueId,
										elInputWrap: ct,
										elInput: f
									});

									return false;
								},
								render: function (combo) {
									if (!Ext.isEmpty(dataid)) {
										combo.setValue(dataid);
									}
								},
								keydown: function (combo, e) {
									if (e.getKey() == e.TAB) {
										//form.createInputArea('Diag', 'EvnSection', el_data);
									}
								},
								change: function (f, n, o) {
									var rec = f.getStore().getById(n);
									var outputValue = form.getEmptyValueText();
									var outputValueId = null;
									if (rec) {
										outputValue = rec.get('LpuSectionProfile_Name');
										outputValueId = rec.get('LpuSectionProfile_id');
									}

									onChange({
										elOutputId: eloutputid,
										outputValue: outputValue,
										outputValueId: outputValueId,
										elInputWrap: ct,
										elInput: f,
										requestUrl: '/?c=EvnSection&m=setEvnSectionParameter',
										requestParams: {
											object: 'EvnSection',
											id: el_data.object_id,
											param_name: 'LpuSectionProfile_id',
											param_value: outputValueId
										},
										requestCallback: function(response_obj) {
											form.isFirstAdminCheck = false;
											var record = form.viewFormDataStore.getById('EvnSection_'+ el_data.object_id);
											if (record && response_obj.success) {
												//обновить данные движения
												record.set('LpuSectionProfile_id', outputValueId);
												record.set('LpuSectionProfile_Name', outputValue);
												if (typeof response_obj.EvnSection_KPG != "undefined") {
													KpgEl = Ext.get('EvnSection_data_'+ el_data.object_id +'_KPG');
													if (KpgEl) {
														if (!Ext.isEmpty(response_obj.EvnSection_KPG)) {
															KpgEl.update(langs('КПГ') + response_obj.EvnSection_KPG);
														} else {
															KpgEl.update('');
														}
													}
													record.set('EvnSection_KPG', response_obj.EvnSection_KPG);
												}
												if (typeof response_obj.EvnSection_KSGCoeff != "undefined") {
													KpgEl = Ext.get('EvnSection_data_'+ el_data.object_id +'_KSGCoeff');
													if (KpgEl) {
														if (!Ext.isEmpty(response_obj.EvnSection_KSGCoeff)) {
															KpgEl.update(langs('Коэффициент КСГ/КПГ') + response_obj.EvnSection_KSGCoeff);
														} else {
															KpgEl.update('');
														}
													}
													record.set('EvnSection_KSGCoeff', response_obj.EvnSection_KSGCoeff);
												}
												if (typeof response_obj.MesRid_Code != "undefined") {
													KpgEl = Ext.get('EvnSection_data_'+ el_data.object_id +'_inputMesRid');
													if (KpgEl) {
														if (!Ext.isEmpty(response_obj.MesRid_Code)) {
															KpgEl.update(response_obj.MesRid_Code);
														} else {
															KpgEl.update('<span style="color: #666;">Не указано</span>');
														}
													}
													record.set('MesRid_Code', response_obj.MesRid_Code);
												}
												if (typeof response_obj.Mes_rid != "undefined") {
													KpgEl = Ext.get('EvnSection_data_'+ el_data.object_id +'_inputMesRid');
													if (KpgEl) {
														if (!Ext.isEmpty(response_obj.Mes_rid)) {
															KpgEl.setAttribute('dataid', response_obj.Mes_rid);
														} else {
															KpgEl.setAttribute('dataid', null);
														}
													}
													record.set('Mes_rid', response_obj.Mes_rid);
												}
												record.commit(true);
												form.viewFormDataStore.commitChanges();
											}
										}
									});
								}
							}
						});
						var params = {};
						var es_data = form.getObjectData('EvnSection', el_data.object_id);
						if (es_data) {
							if ( es_data.LpuSection_id ) {
								params.LpuSection_id = es_data.LpuSection_id;
							}

							params.onDate = (!Ext.isEmpty(es_data.EvnSection_setDate) ? es_data.EvnSection_setDate : getGlobalOptions().date);
						}
						if (getRegionNick() == 'astra' && es_data.EvnSection_KPG) {
							params.filterByKPG = 1;
						}
						cmp.getStore().removeAll();
						cmp.getStore().load({
							params: params,
							callback: function () {
								cmp.setValue(cmp.getValue());
								cmp.focus(true, 500);
							}
						});
					}
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
			case 'Ksg':
                ct = Ext.get('EvnSection_data_'+ el_data.object_id +'_inputareaKsg');
                eloutputid = 'EvnSection_data_'+ el_data.object_id +'_inputKsg';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
					var es_data = form.getObjectData('EvnSection', el_data.object_id);
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var dataid = eloutput.getAttribute('dataid');
                    if(!Ext.isEmpty(dataid)) {
						if (dataid == "null") {
							dataid = null;
						} else {
							dataid = parseInt(dataid);
						}
                    }
                    cmp = new sw.Promed.SwKsgEkbCombo({
                        renderTo: 'EvnSection_data_'+ el_data.object_id +'_inputareaKsg'
						,checkEnableUslugaComplexFilter: function() {
							// если есть услуги то true, иначе false
							var children = form.getObjectChildren('EvnSection', el_data.object_id);
							if (children && children.EvnUslugaStac && children.EvnUslugaStac.item && children.EvnUslugaStac.item.length > 0) {
								return true;
							}

							return false;
						}
                        ,width: 400
                        ,listWidth: 600
                        ,hiddenName: 'Mes_sid'
                        ,listeners:
                        {
                            blur: function(f) {
								if (f.disableBlurAction) {
									return false;
								}
                                var outputValue = eloutput.dom.innerHTML;
                                var outputValueId = dataid;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    //form.createInputArea('Diag', 'EvnSection', el_data);
                                }
                            },
                            change: function(f,n,o) {
								if (f.disableBlurAction) {
									return false;
								}

                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId = null;
                                if(rec) {
                                    outputValue = rec.get('UslugaComplex_Name');
                                    outputValueId = rec.get('Mes_id');
                                }
                                form.isFirstAdminCheck = false;
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnSection&m=setEvnSectionParameter'
                                    ,requestParams: {
                                        object: 'EvnSection'
                                        ,id: el_data.object_id
                                        ,param_name: 'Mes_sid'
                                        ,param_value: outputValueId
                                    },
									requestYesNo: function(code, options) {
										if (code == 119) {
											options.ignoreEvnUslugaHirurgKSGCheck = 1;
											form.data.ignoreEvnUslugaHirurgKSGCheck = 1;
										}
									}
                                });
                            }
                        }
                    });
					var fieldParams = {};
                    cmp.clearBaseParams();
                    // cmp.setUslugaComplexDate(getGlobalOptions().date); этот фильтр убрал, его нет в формах движения, если нужен, надо добавить и туда.
                    cmp.getStore().baseParams.allowMorbusVizitOnly = 0;
                    cmp.getStore().baseParams.allowNonMorbusVizitOnly = 0;
					if (es_data && es_data.EvnSection_id) {
						cmp.getStore().baseParams.EvnSection_id = es_data.EvnSection_id;
					}
					if (es_data && es_data.Diag_id) {
						cmp.getStore().baseParams.Diag_id = es_data.Diag_id;
					}
					if (es_data && es_data.MedPersonal_id) {
						cmp.getStore().baseParams.MedPersonal_id = es_data.MedPersonal_id;
					}
					if (es_data && es_data.LpuSection_id) {
						cmp.getStore().baseParams.LpuSection_id = es_data.LpuSection_id;
					}
					if (es_data && es_data.EvnSection_setDate) {
						//cmp.getStore().baseParams.onDate = es_data.EvnSection_setDate;
						cmp.getStore().baseParams.EvnSection_setDate = es_data.EvnSection_setDate;
					}
					if (es_data && es_data.EvnSection_disDate) {
						//cmp.getStore().baseParams.onDate = es_data.EvnSection_disDate;
						cmp.getStore().baseParams.EvnSection_disDate = es_data.EvnSection_disDate;
					}
					if (es_data && es_data.EvnSection_pid) {
						cmp.getStore().baseParams.EvnPS_id = es_data.EvnSection_pid;
					}
					// для круглосуточного 101, для дневного 201 (LpuUnitType_Code in ([3,5]))
					if (es_data && es_data.LpuUnitType_Code && (es_data.LpuUnitType_Code == 3 || es_data.LpuUnitType_Code == 5)) {
						cmp.getStore().baseParams.UslugaComplexPartition_CodeList = Ext.util.JSON.encode([201]);
					} else {
						cmp.getStore().baseParams.UslugaComplexPartition_CodeList = Ext.util.JSON.encode([101]);
					}
					cmp.setPersonId(this.Person_id);
					if (!Ext.isEmpty(cmp.getValue())) {
						fieldParams.Mes_id = cmp.getValue();
					}
					cmp.getStore().removeAll();
					cmp.getStore().load({callback: function(){
						cmp.setValue(cmp.getValue());
						cmp.focus(true, 500);
					}, params: fieldParams});
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
			case 'Diag':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaDiag');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputDiag';
				eloutput = Ext.get(eloutputid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					var addEvnInfectNotifyTools = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_addEvnInfectNotifyTools');
					if (addEvnInfectNotifyTools) {addEvnInfectNotifyTools.setDisplayed('none');}

					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}

					var filterDate = null;
					var evn = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
					if (evn && evn.data && (evn.data.EvnVizitPL_setDate || evn.data.EvnVizitPLStom_setDate)) {
						filterDate = evn.data.EvnVizitPL_setDate || evn.data.EvnVizitPLStom_setDate;
					}

					cmp = new sw.Promed.SwDiagCombo({
						checkAccessRights: true
						,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaDiag'
						,width: 400
						,filterDate: filterDate
					});
					form.setMKB(cmp,el_data.object_id);
					cmp.on('blur', function(f) {
						if (f.disableBlurAction) {
							return false;
						}
                        var outputValue = eloutput.dom.innerHTML;
                        var outputValueId = dataid;

                        onCancel({
                            elOutputId: eloutputid
                            ,outputValue: outputValue
                            ,outputValueId: outputValueId
                            ,elInputWrap: ct
                            ,elInput: f
                        });
                        return true;
                    });

                    cmp.on('keydown', function(combo, e) {
                        if (e.getKey() == e.TAB) {
                            form.createInputArea('DeseaseType', EvnClass_SysNick, el_data);
                        }
                    });
				
                    cmp.on('change', function(f,n,o) {
                        if (f.disableBlurAction) {
                            return false;
                        }
                        
						var rec = f.getStore().getById(n);
						var outputValue = form.getEmptyValueText();
						var outputValueId = null;
						var diagCode = '';
						var diagName = '';
						var PersonRegisterType_List = [];
						var rootRec = form.viewFormDataStore.getById(form.data.Code + '_'+ form.data.id);
						var isfinish = rootRec.get(form.data.Code + '_IsFinish');

						if (getRegionNick() == 'ekb') {
							var RankinScaleDiv = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputRankinScaleDiv');
							if(RankinScaleDiv){
								if (rec && rec.get('DiagFinance_IsRankin') && rec.get('DiagFinance_IsRankin') == 2) {
									// показать поле
									RankinScaleDiv.setDisplayed('block');
								} else {
									RankinScaleDiv.setDisplayed('none');
								}
							}
						}

						if (Ext.isEmpty(n) && 'EvnVizitPL' == EvnClass_SysNick && isfinish == 2) {
							var children = form.getObjectChildren('EvnPL', rootRec.get('EvnPL_id'));
							var hasDiag = false;

							for (var i=0; i<children.EvnVizitPL.item.length; i++) {
								var vizit_data = children.EvnVizitPL.item[0].data;
								if (!Ext.isEmpty(vizit_data.Diag_id) && vizit_data.EvnVizitPL_id != el_data.object_id) {
									hasDiag = true;
									break;
								}
							}

							if (!hasDiag) {
								sw.swMsg.alert(langs('Ошибка'), langs('Случай лечения должен иметь хотя бы один основной диагноз'));
								return false;
							}
						}

						if(rec) {
							outputValue = rec.get('Diag_Code') + ' ' + rec.get('Diag_Name');
							outputValueId = rec.get('Diag_id');
							diagName = rec.get('Diag_Name');
							diagCode = rec.get('Diag_Code');
							diagIsOms = rec.get('DiagFinance_IsOms');
							diagIsRankin = rec.get('DiagFinance_IsRankin');
							if (!Ext.isEmpty(rec.get('PersonRegisterType_List'))) {
								PersonRegisterType_List = rec.get('PersonRegisterType_List').split(',');
							}
							if (diagCode[0].inlist(["T","S"]) && !rootRec.get('PrehospTrauma_id') && isfinish==2){
								sw.swMsg.alert(langs('Предупреждение'), langs('При диагнозе групп "S" и "T" поле "Вид травмы (внешнего воздействия)" обязательна для заполнения!'));
								return false;
							}
                            var evn = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                            if (evn && form.getPayTypeSysNickOMS() == evn.data.PayType_SysNick && getRegionNick().inlist(['kareliya', 'ufa'])) {
                                var sex_id = form.PersonInfoFrame.getFieldValue('Sex_id'),
						            terr_code = form.PersonInfoFrame.getFieldValue('OmsSprTerr_Code'),
                                    person_age = swGetPersonAge(form.PersonInfoFrame.getFieldValue('Person_Birthday'), evn.data.EvnVizitPL_setDate);
                                if ( !sex_id || !(sex_id.toString().inlist(['1', '2', '3'])) ) {
                                    sw.swMsg.alert(langs('Предупреждение'), langs('Не указан пол пациента'));
                                    return false;
                                } else if (rec.get('DiagFinance_IsOms') == 0 || (getRegionNick() == 'kareliya' && Ext.isEmpty(rec.get('DiagFinance_IsOms')))) {
									if ( getRegionNick() == 'ufa' ) {
										var textMsg = langs('Диагноз не оплачивается по ОМС');
										sw.swMsg.alert(langs('Предупреждение'), textMsg);
									}
									else if ( getRegionNick() == 'kareliya' ) {
										sw.swMsg.show({
											buttons: Ext.Msg.YESNO,
											fn: function (buttonId, text, obj) {
												if (buttonId == 'yes') {
													form.isDisableSignedEvnVizitPL = true;
													onChange({
														elOutputId: eloutputid
														,outputValue: outputValue
														,outputValueId: outputValueId
														,elInputWrap: ct
														,elInput: f
														,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
														,requestParams: {
															object: 'EvnVizitPL'
															,id: el_data.object_id
															,param_name: 'Diag_id'
															,param_value: outputValueId
														}
														,requestCallback: function(response_obj) {
															form.isFirstAdminCheck = false;
															form.isDisableSignedEvnVizitPL = false;
															if ( response_obj.success == true ) {
																form.onChangeVizitDiag(EvnClass_SysNick, el_data.object_id, {
																	Diag_id: outputValueId,
																	Diag_Code: diagCode,
																	Diag_Name: diagName,
																	DiagFinance_IsOms: diagIsOms,
																	listPersonRegisterTypeDiag: PersonRegisterType_List,
																	listMorbus: response_obj.listMorbus || {},
																	listPersonRegister: response_obj.listPersonRegister || {},
																	VizitType_id: evn.data.VizitType_id,
																	CureStandart_Count: (parseInt(response_obj.CureStandart_Count) || 0),
																	DiagFedMes_FileName: (response_obj.DiagFedMes_FileName || null)
																}, false, 'onChangeDiag');
															}


														}
														,requestYesNo: function(code, options) {
															if (code == 289) {
																options.ignoreCheckMorbusOnko = 1;
																form.data.ignoreCheckMorbusOnko = 1;
															}
														}
														,requestNo: '---' // без этого он будет циклично задавать вопрос
													});
												} else {
													return false;
												}
											}.createDelegate(this),
											icon: Ext.MessageBox.QUESTION,
											msg: langs('Выбранный диагноз не оплачивается по ОМС, продолжить сохранение?'),
											title: langs('Предупреждение')
										});
									}
                                    return false;
                                } else if (!Ext.isEmpty(rec.get('Sex_Code')) && rec.get('Sex_Code') != sex_id ) {
                                    sw.swMsg.alert(langs('Предупреждение'), langs('Выбранный диагноз не соответствует полу пациента'));
                                    return false;
                                } else if ( getRegionNick() == 'ufa' && terr_code != 61 && rec.get('DiagFinance_IsAlien') == '0' ) {
                                    sw.swMsg.alert(langs('Ошибка'), langs('Диагноз не оплачивается для пациентов, застрахованных не в РБ'));
							        return false;
                                } else if ( getRegionNick() == 'ufa' && rec.get('DiagFinance_IsFacult') == '0' ) {
                                    sw.swMsg.alert(langs('Ошибка'), langs('Данный диагноз может быть только сопутствующим. Укажите верный основной диагноз.'));
							        return false;
                                } else if ( person_age == -1 ) {
                                    sw.swMsg.alert(langs('Ошибка'), langs('Ошибка при определении возраста пациента'));
                                    return false;
                                } else if (person_age >= 18 && Number(rec.get('PersonAgeGroup_Code')) == 2) {
                                    sw.swMsg.alert(langs('Ошибка'), langs('Диагноз не оплачивается для взрослых'));
                                    return false;
                                } else if (person_age < 18 && Number(rec.get('PersonAgeGroup_Code')) == 1) {
                                    sw.swMsg.alert(langs('Ошибка'), langs('Диагноз не оплачивается для детей'));
                                    return false;
                                }
                            } else if (getRegionNick().inlist(['ekb']) && evn && form.getPayTypeSysNickOMS() == evn.data.PayType_SysNick) {
								var sex_id = form.PersonInfoFrame.getFieldValue('Sex_id');

								var person_age = swGetPersonAge(form.PersonInfoFrame.getFieldValue('Person_Birthday'), evn.data.EvnVizitPL_setDate);
								var person_age_month = swGetPersonAgeMonth(form.PersonInfoFrame.getFieldValue('Person_Birthday'), evn.data.EvnVizitPL_setDate);
								var person_age_day = swGetPersonAgeDay(form.PersonInfoFrame.getFieldValue('Person_Birthday'), evn.data.EvnVizitPL_setDate);

								if ( !sex_id || !(sex_id.toString().inlist(['1', '2', '3'])) ) {
									sw.swMsg.alert(langs('Предупреждение'), langs('Не указан пол пациента'));
									return false;
								} else if (!Ext.isEmpty(rec.get('Sex_Code')) && rec.get('Sex_Code') != sex_id ) {
									sw.swMsg.alert(langs('Предупреждение'), langs('Выбранный диагноз не соответствует полу пациента'));
									return false;
								} else if (form.getPayTypeSysNickOMS() == evn.data.PayType_SysNick && rec.get('DiagFinance_IsOms') == 0) {
									var textMsg = langs('Диагноз не оплачивается по ОМС');
									if(getRegionNick()=='ekb'){
										textMsg=langs('Данный диагноз не подлежит оплате в системе ОМС. Смените вид оплаты.');
									}
									sw.swMsg.alert(langs('Предупреждение'), textMsg);
									return false;
								} else if (
									(person_age < 18 && Number(rec.get('PersonAgeGroup_Code')) == 1)
									|| ((person_age > 19 || (person_age == 18 && person_age_month >= 6)) && Number(rec.get('PersonAgeGroup_Code')) == 2)
									|| ((person_age > 0 || (person_age == 0 && person_age_month >= 3)) && Number(rec.get('PersonAgeGroup_Code')) == 3)
									|| (person_age_day >= 28 && Number(rec.get('PersonAgeGroup_Code')) == 4)
									|| (person_age >= 4 && Number(rec.get('PersonAgeGroup_Code')) == 5)
								) {
									sw.swMsg.alert(langs('Предупреждение'), langs('Выбранный диагноз не соответствует возрасту пациента'));
									return false;
								}
							} else if (evn && evn.data.PayType_SysNick && evn.data.PayType_SysNick.inlist(['bud']) && getRegionNick().inlist(['ekb'])) {
								if ((rec.get('DiagFinance_IsOms') == 0) && (evn.data.UslugaComplex_Code == 'B01.069.998')) {
									var textMsg = langs('Услуга В01.069.998 может быть выбрана только при диагнозе, оплачиваемом по ОМС');
									sw.swMsg.alert(langs('Предупреждение'), textMsg);
									return false;
								}
							} else if (evn && form.getPayTypeSysNickOMS() == evn.data.PayType_SysNick && getRegionNick().inlist(['buryatiya'])) {
								var sex_id = form.PersonInfoFrame.getFieldValue('Sex_id');
								if ( !sex_id || !(sex_id.toString().inlist(['1', '2', '3'])) ) {
									sw.swMsg.alert(langs('Предупреждение'), langs('Не указан пол пациента'));
									return false;
								} else if (!Ext.isEmpty(rec.get('Sex_Code')) && rec.get('Sex_Code') != sex_id ) {
									sw.swMsg.alert(langs('Предупреждение'), langs('Выбранный диагноз не соответствует полу пациента'));
									return false;
								} else if (rec.get('DiagFinance_IsOms') == 0) {
									sw.swMsg.show({
										buttons: Ext.Msg.YESNO,
										fn: function (buttonId, text, obj) {
											if (buttonId == 'yes') {
												form.isDisableSignedEvnVizitPL = true;
												onChange({
													elOutputId: eloutputid
													,outputValue: outputValue
													,outputValueId: outputValueId
													,elInputWrap: ct
													,elInput: f
													,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
													,requestParams: {
														object: 'EvnVizitPL'
														,id: el_data.object_id
														,param_name: 'Diag_id'
														,param_value: outputValueId
													}
													,requestCallback: function(response_obj) {
														form.isFirstAdminCheck = false;
														form.isDisableSignedEvnVizitPL = false;
														if ( response_obj.success == true ) {
															form.onChangeVizitDiag(EvnClass_SysNick, el_data.object_id, {
																Diag_id: outputValueId,
																Diag_Code: diagCode,
																Diag_Name: diagName,
																DiagFinance_IsOms: diagIsOms,
																listPersonRegisterTypeDiag: PersonRegisterType_List,
																listMorbus: response_obj.listMorbus || {},
																listPersonRegister: response_obj.listPersonRegister || {},
																VizitType_id: evn.data.VizitType_id,
																CureStandart_Count: (parseInt(response_obj.CureStandart_Count) || 0),
																DiagFedMes_FileName: (response_obj.DiagFedMes_FileName || null)
															}, false, 'onChangeDiag');
														}
													}
													,requestYesNo: function(code, options) {
														if (code == 289) {
															options.ignoreCheckMorbusOnko = 1;
															form.data.ignoreCheckMorbusOnko = 1;
														}
													}
													,requestNo: '---' // без этого он будет циклично задавать вопрос
												});
											} else {
												return false;
											}
										}.createDelegate(this),
										icon: Ext.MessageBox.QUESTION,
										msg: langs('Выбранный диагноз не оплачивается по ОМС, продолжить сохранение?'),
										title: langs('Предупреждение')
									});
									return false;
								}
							} else if (evn && form.getPayTypeSysNickOMS() == evn.data.PayType_SysNick && getRegionNick().inlist(['astra'])) {
								if (rec.get('DiagFinance_IsOms') == 0) {
									sw.swMsg.show({
										buttons: Ext.Msg.YESNO,
										fn: function (buttonId, text, obj) {
											if (buttonId == 'yes') {
												form.isDisableSignedEvnVizitPL = true;
												onChange({
													elOutputId: eloutputid
													,outputValue: outputValue
													,outputValueId: outputValueId
													,elInputWrap: ct
													,elInput: f
													,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
													,requestParams: {
														object: 'EvnVizitPL'
														,id: el_data.object_id
														,param_name: 'Diag_id'
														,param_value: outputValueId
													}
													,requestCallback: function(response_obj) {
														form.isFirstAdminCheck = false;
														form.isDisableSignedEvnVizitPL = false;
														if ( response_obj.success == true ) {
															form.onChangeVizitDiag(EvnClass_SysNick, el_data.object_id, {
																Diag_id: outputValueId,
																Diag_Code: diagCode,
																Diag_Name: diagName,
																DiagFinance_IsOms: diagIsOms,
																listPersonRegisterTypeDiag: PersonRegisterType_List,
																listMorbus: response_obj.listMorbus || {},
																listPersonRegister: response_obj.listPersonRegister || {},
																VizitType_id: evn.data.VizitType_id,
																CureStandart_Count: (parseInt(response_obj.CureStandart_Count) || 0),
																DiagFedMes_FileName: (response_obj.DiagFedMes_FileName || null)
															}, false, 'onChangeDiag');
														}
													}
													,requestYesNo: function(code, options) {
														if (code == 289) {
															options.ignoreCheckMorbusOnko = 1;
															form.data.ignoreCheckMorbusOnko = 1;
														}
													}
													,requestNo: '---' // без этого он будет циклично задавать вопрос
												});
											} else {
												return false;
											}
										}.createDelegate(this),
										icon: Ext.MessageBox.QUESTION,
										msg: langs('Выбранный диагноз не оплачивается по ОМС, продолжить сохранение?'),
										title: langs('Предупреждение')
									});
									return false;
								}
							} else if (evn && form.getPayTypeSysNickOMS() == evn.data.PayType_SysNick && getRegionNick().inlist(['kaluga'])) {
								if (rec.get('DiagFinance_IsOms') == 0) {
									sw.swMsg.show({
										buttons: Ext.Msg.YESNO,
										fn: function (buttonId, text, obj) {
											if (buttonId == 'yes') {
												form.isDisableSignedEvnVizitPL = true;
												onChange({
													elOutputId: eloutputid
													,outputValue: outputValue
													,outputValueId: outputValueId
													,elInputWrap: ct
													,elInput: f
													,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
													,requestParams: {
														object: 'EvnVizitPL'
														,id: el_data.object_id
														,param_name: 'Diag_id'
														,param_value: outputValueId
													}
													,requestCallback: function(response_obj) {
														form.isFirstAdminCheck = false;
														form.isDisableSignedEvnVizitPL = false;
														if ( response_obj.success == true ) {
															form.onChangeVizitDiag(EvnClass_SysNick, el_data.object_id, {
																Diag_id: outputValueId,
																Diag_Code: diagCode,
																Diag_Name: diagName,
																DiagFinance_IsOms: diagIsOms,
																listPersonRegisterTypeDiag: PersonRegisterType_List,
																listMorbus: response_obj.listMorbus || {},
																listPersonRegister: response_obj.listPersonRegister || {},
																VizitType_id: evn.data.VizitType_id,
																CureStandart_Count: (parseInt(response_obj.CureStandart_Count) || 0),
																DiagFedMes_FileName: (response_obj.DiagFedMes_FileName || null)
															}, false, 'onChangeDiag');
														}
													}
													,requestYesNo: function(code, options) {
														if (code == 289) {
															options.ignoreCheckMorbusOnko = 1;
															form.data.ignoreCheckMorbusOnko = 1;
														}
													}
													,requestNo: '---' // без этого он будет циклично задавать вопрос
												});
											} else {
												return false;
											}
										}.createDelegate(this),
										icon: Ext.MessageBox.QUESTION,
										msg: langs('Выбранный диагноз не оплачивается по ОМС, поэтому случай не будет включен в реестр. Продолжить сохранение?'),
										title: langs('Предупреждение')
									});
									return false;
								}
							}
                        } else if ( n != '') {
							return true;
						}
						form.isDisableSignedEvnVizitPL = true;
						onChange({
							elOutputId: eloutputid
							,outputValue: outputValue
							,outputValueId: outputValueId
							,elInputWrap: ct
							,elInput: f
							,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
							,requestParams: {
								object: 'EvnVizitPL'
								,id: el_data.object_id
								,param_name: 'Diag_id'
								,param_value: outputValueId
							}
							,requestCallback: function(response_obj) {
								form.isFirstAdminCheck = false;
								form.isDisableSignedEvnVizitPL = false;
								if ( response_obj.success == true ) {
									var evn = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
									form.onChangeVizitDiag(EvnClass_SysNick, el_data.object_id, {
										Diag_id: outputValueId,
										Diag_Code: diagCode,
										Diag_Name: diagName,
										DiagFinance_IsOms: diagIsOms,
										DiagFinance_IsRankin: diagIsRankin,
										listPersonRegisterTypeDiag: PersonRegisterType_List,
                                        listMorbus: response_obj.listMorbus || {},
										listPersonRegister: response_obj.listPersonRegister || {},
										VizitType_id: evn.data.VizitType_id,
										CureStandart_Count: (parseInt(response_obj.CureStandart_Count) || 0),
										DiagFedMes_FileName: (response_obj.DiagFedMes_FileName || null),
										deletedMorbusOnkoVizitPLDop_id: response_obj.deletedMorbusOnkoVizitPLDop_id || null
									}, false, 'onChangeDiag');

									if (getRegionNick() == 'kz') form.getFinanceSource(EvnClass_SysNick,el_data.object_id);
								}
							}
							,requestYesNo: function(code, options) {
								if (code == 289) {
									options.ignoreCheckMorbusOnko = 1;
									form.data.ignoreCheckMorbusOnko = 1;
								}
								log('requestYesNo', code, options);
							}
							,requestNo: '---' // без этого он будет циклично задавать вопрос
						});
					});

					if(!Ext.isEmpty(dataid)) {
						cmp.getStore().load({
							params: {where: "where Diag_id = " + dataid},
							callback: function(data) {
								cmp.getStore().each(function(record) {
									if (parseInt(record.get('Diag_id')) == dataid)
									{
										cmp.setValue(dataid);
										cmp.fireEvent('select', cmp, record, 0);
									}
								});
							}
						});
					}
					
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'Diagnew':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaDiagnew');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputDiagnew';
				eloutput = Ext.get(eloutputid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					var addEvnInfectNotifyTools = Ext.get(EvnClass_SysNick +'_'+ el_data.object_id +'_addEvnInfectNotifyTools');
					if (addEvnInfectNotifyTools) {addEvnInfectNotifyTools.setDisplayed('none');}

					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}

					var evn = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);

					cmp = new sw.Promed.SwDiagDeseaseCombo({
						checkAccessRights: true
						,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaDiagnew'
						,width: 400
					});
					cmp.on('blur', function(f) {
						if (f.disableBlurAction) {
							return false;
						}
                        var outputValue = eloutput.dom.innerHTML;
                        var outputValueId = dataid;

                        onCancel({
                            elOutputId: eloutputid
                            ,outputValue: outputValue
                            ,outputValueId: outputValueId
                            ,elInputWrap: ct
                            ,elInput: f
                        });
                        return true;
                    });

                    cmp.on('keydown', function(combo, e) {
                        if (e.getKey() == e.TAB) {
                            form.createInputArea('DeseaseType', EvnClass_SysNick, el_data);
                        }
                    });

                    cmp.on('change', function(f,n,o) {
                        if (f.disableBlurAction) {
                            return false;
                        }

						var rec = f.getStore().getById(n);
						var outputValue = form.getEmptyValueText();
						var outputValueId = null;
						var diagId = null;
						var diagCode = '';
						var deseaseTypeId = null;
						var deseaseTypeCode = '';

						if(rec) {
							outputValue = rec.get('Diag_Code') + ' ' + rec.get('Diag_Name');
							diagCode = rec.get('Diag_Code');
							deseaseTypeCode = rec.get('DeseaseType_Code');
							diagId = rec.get('Diag_id');
							deseaseTypeId = rec.get('DeseaseType_id');
                        } else if ( n != '') {
							return true;
						}

						outputValueId = diagId + ':' + deseaseTypeId;

						form.isDisableSignedEvnVizitPL = true;
						onChange({
							elOutputId: eloutputid
							,outputValue: outputValue
							,outputValueId: outputValueId
							,elInputWrap: ct
							,elInput: f
							,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
							,requestParams: {
								object: 'EvnVizitPL'
								,id: el_data.object_id
								,param_name: 'Diagnew_id'
								,param_value: outputValueId
							}
							,requestCallback: function(response_obj) {
								form.isFirstAdminCheck = false;
								form.isDisableSignedEvnVizitPL = false;
								var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
								if (record && response_obj.success) {
									//обновить данные
									eloutput.setAttribute('dataid', '');
									record.set('Diag_id', diagId);
									record.set('Diag_Code', diagCode);
									record.set('DeseaseType_id', deseaseTypeId);
									record.set('DeseaseType_Code', deseaseTypeCode);
									record.commit(true);
								}
							}
						});
					});

					cmp.getStore().load({
						params: {
							EvnPLStom_id: evn.parent_object_value
						},
						callback: function(data) {
							if(!Ext.isEmpty(dataid)) {
								cmp.getStore().each(function (record) {
									if (parseInt(record.get('Diag_id')) == dataid) {
										cmp.setValue(dataid);
										cmp.fireEvent('select', cmp, record, 0);
									}
								});
							}
						}
					});

					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'DeseaseType':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaDeseaseType');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputDeseaseType';
				eloutput = Ext.get(eloutputid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if (!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					var isAllowBlank = function()
					{
						var vizit = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id),
							tap = form.viewFormDataStore.getById(form.data.Code + '_'+ form.data.id),
							isFinishAttr = form.data.Code + '_IsFinish';
						if (!tap || !vizit) {
							return false;
						}
						if (vizit.get('Diag_Code') && vizit.get('Diag_Code').substr(0, 1).toUpperCase() != 'Z') {
							return false;
						}
						if (tap.get(isFinishAttr) && 2 == tap.get(isFinishAttr)) {
							return false;
						}
						return true;
					};

					var vizitData = form.getObjectData('EvnVizitPL', el_data.object_id);
					var vizitDate = new Date(vizitData.EvnVizitPL_setDate120);

					cmp = new sw.Promed.SwCommonSprCombo({
						hideLabel: true,
						autoLoad: true,
						comboSubject: 'DeseaseType',
						editable: true,
						lastQuery: '',
						typeCode: 'int'
						,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaDeseaseType'
						,width: 350
						,allowSysNick: true
						,allowBlank: isAllowBlank()
						,moreFields: [
							{name: 'DeseaseType_begDT', type: 'date', dateFormat: 'd.m.Y' },
							{name: 'DeseaseType_endDT', type: 'date', dateFormat: 'd.m.Y' }
						]
						,onLoadStore: function() {
							var vizitData = form.getObjectData('EvnVizitPL', el_data.object_id);
							var vizitDate = new Date(vizitData.EvnVizitPL_setDate120);

							cmp.getStore().clearFilter();
							cmp.getStore().filterBy(function(rec) {
								return (
									(!rec.get('DeseaseType_begDT')  || rec.get('DeseaseType_begDT') <= vizitDate)
									&& (!rec.get('DeseaseType_endDT') || rec.get('DeseaseType_endDT') >= vizitDate)
								);
							});
						}
						,listeners:
						{
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});
								
								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    form.createInputArea('VizitClass', EvnClass_SysNick, el_data);
                                }
                            },
							change: function(f,n,o) {
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId = null;
								if (rec) {
									outputValue = rec.get('DeseaseType_Name')||'';
									outputValueId = rec.get('DeseaseType_id');
								}
                                if (!outputValueId && !f.allowBlank) {
                                    sw.swMsg.alert(langs('Сообщение'), langs('Поле "Характер заболевания" является обязательным для заполнения.'));
                                    return false;
                                }
								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: 'EvnVizitPL'
										,id: el_data.object_id
										,param_name: 'DeseaseType_id'
										,param_value: outputValueId
									}
									,requestCallback: function(response_obj){
										form.isFirstAdminCheck = false;
										if ( response_obj.success == true ) {
											form.onChangeVizitDeseaseType(EvnClass_SysNick, el_data.object_id, {
												DeseaseType_id: outputValueId,
												DeseaseType_Name: outputValue,
												DeseaseType_SysNick: rec.get('DeseaseType_SysNick')
											}, false);
										}
									}
								});
							}
						}
					});
					cmp.baseFilterFn = 	function(rec) {
						var vizitData = form.getObjectData('EvnVizitPL', el_data.object_id);
						var vizitDate = new Date(vizitData.EvnVizitPL_setDate120);
						return (
							(!rec.get('DeseaseType_begDT')  || rec.get('DeseaseType_begDT') <= vizitDate)
							&& (!rec.get('DeseaseType_endDT') || rec.get('DeseaseType_endDT') >= vizitDate)
						);
					}
					
					cmp.getStore().load();
					
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'TumorStage':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaTumorStage');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputTumorStage';
				eloutput = Ext.get(eloutputid);

				var vizit = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
				log('vizit', vizit);

				if(ct && !this.input_cmp_list[eloutputid] && (
					getRegionNick() == 'ekb' ||
					getRegionNick() == 'kareliya' && vizit.get('DeseaseType_SysNick') == 'new'
				)) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if (!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					var isAllowBlank = function() {
						return false;
					};
						cmp = new sw.Promed.SwTumorStageNewCombo({
						hideLabel: true,
						autoLoad: false,
						editable: true,
						typeCode: 'int',
						loadParams: getRegionNumber().inlist([58,66,101]) ? {mode: 1} : {mode:0} // только свой регион / + нулловый рег
						,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaTumorStage'
						,width: 350
						,allowBlank: isAllowBlank()
						,listeners:
						{
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    form.createInputArea('VizitClass', EvnClass_SysNick, el_data);
                                }
                            },
							change: function(f,n,o) {
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId = null;
								if (rec) {
									outputValue = rec.get('TumorStage_Name')||'';
									outputValueId = rec.get('TumorStage_id');
								}
                                if (!outputValueId && !f.allowBlank) {
                                    sw.swMsg.alert(langs('Сообщение'), 'Поле "Стадия выявленного ЗНО" является обязательным для заполнения.');
                                    return false;
                                }
								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: 'EvnVizitPL'
										,id: el_data.object_id
										,param_name: 'TumorStage_id'
										,param_value: outputValueId
									}
								});
							}
						}
					});
					cmp.getStore().load();
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'IsZNO':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaIsZNO');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputIsZNO';
				eloutput = Ext.get(eloutputid);
				var th = this;
				if(ct && !this.input_cmp_list[eloutputid] && getRegionNick() != 'ufa') {
					var vizit = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
					if (!vizit) return false;
					if (
						getRegionNick() != 'krym'
						&& vizit.get('Diag_Code')
						&& vizit.get('Diag_Code').search(new RegExp("^(C|D0)", "i")) >= 0
					) {
						return false;
					}
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					var vizit = form.viewFormDataStore.getById(EvnClass_SysNick+'_'+ el_data.object_id);

					cmp = new sw.Promed.SwCommonSprCombo({
						autoLoad: true
						,typeCode: 'int'
						,comboSubject: 'YesNo'
						,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaIsZNO'
						,width: 60
						,listeners:
						{
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							keydown: function(combo, e) {
								if (e.getKey() == e.TAB) {
									//form.createInputArea('Diag', EvnClass_SysNick, el_data);
								}
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							change: function(f,n,o) {
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId, IsZNO_Name;
								if(rec) {
									outputValue = IsZNO_Name = rec.get('YesNo_Name');
									outputValueId = rec.get('YesNo_id');
								}

								var record = form.viewFormDataStore.getById('EvnVizitPL_'+el_data.object_id);

								var DiagSpidField = Ext.get(EvnClass_SysNick + '_' + el_data.object_id + '_DiagSpidField');
								var inputDiagSpid = Ext.get(EvnClass_SysNick + '_data_' + el_data.object_id + '_inputDiagSpid');
								var DiagSpidCode = Ext.get(EvnClass_SysNick + '_'+ el_data.object_id + '_DiagSpidCode');

								if ( outputValueId != 2 ) {
									inputDiagSpid.setAttribute('dataid', '');
									inputDiagSpid.update(form.getEmptyValueText());
									DiagSpidCode.update('');

									if ( record ) {
										record.set('Diag_spid', null);
										record.set('DiagSpid_Code', '');
										record.set('DiagSpid_Name', '');
										record.commit(true);
										form.viewFormDataStore.commitChanges();
									}
								}

								DiagSpidField.setDisplayed(outputValueId == 2 ? 'block' : 'none');

								var waitchange = false;
								if(getRegionNick()=='ekb') {
									if(record) {
										var diagcode = record.get('Diag_Code');

										if(outputValueId == 1 && record.get('lastIsZNO') == 2 && (Ext.isEmpty(diagcode) || diagcode.search(new RegExp("^(C|D0)", "i"))<0)) {
											waitchange = true;
											sw.swMsg.show({
												buttons: Ext.Msg.YESNO,
												fn: function (buttonId, text, obj) {
													if (buttonId == 'yes') {
														record.set('EvnVizitPL_IsZNORemove', 2);
														record.commit(true);
														form.viewFormDataStore.commitChanges();
														form.checkBiopsyDate({EvnVizitPL_id: el_data.object_id, ZnoIsNull: false});
														
														onChange({
															elOutputId: eloutputid
															,outputValue: outputValue
															,outputValueId: 1
															,elInputWrap: ct
															,elInput: f
															,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
															,requestParams: {
																object: EvnClass_SysNick
																,id: el_data.object_id
																,param_name: EvnClass_SysNick + '_IsZNO'
																,param_value: outputValueId
															}
														});
													} else {
														DiagSpidField.setDisplayed('block');
													}
												}.createDelegate(this),
												icon: Ext.MessageBox.QUESTION,
												msg: 'По пациенту '+
													form.PersonInfoFrame.getFieldValue('Person_Surname')+' '+
													form.PersonInfoFrame.getFieldValue('Person_Firname')+' '+
													form.PersonInfoFrame.getFieldValue('Person_Secname')+' '+
													'ранее установлено подозрение на ЗНО. Снять признак подозрения?',
												title: 'Вопрос'
											});
										}
										if(outputValueId == 2) {
											record.set('EvnVizitPL_IsZNORemove', 1);
											record.commit(true);
											form.viewFormDataStore.commitChanges();
											form.checkBiopsyDate({EvnVizitPL_id: el_data.object_id, ZnoIsNull: false});
										}
									}
								}
								
								if(!waitchange) onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: EvnClass_SysNick
										,id: el_data.object_id
										,param_name: EvnClass_SysNick + '_IsZNO'
										,param_value: outputValueId
									}
								});
							}
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'HealthKind2':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaHealthKind');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputHealthKind';
				eloutput = Ext.get(eloutputid);
				var eventData = form.getObjectData(EvnClass_SysNick, el_data.object_id);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if (!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					var isAllowBlank = function() {
						var vizit = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id),
							tap = form.viewFormDataStore.getById(form.data.Code + '_'+ form.data.id);
						if (!tap || !vizit) {
							return false;
						}
						if (
							vizit.get('UslugaComplex_Code')
							&& (
								(
									EvnClass_SysNick == 'EvnVizitPL'
									&& vizit.get('UslugaComplex_Code').substr(-3, 3).inlist(['805', '893'])
									&& Date.parseDate(eventData.EvnVizitPL_setDate,'d.m.Y') >= Date.parseDate('01.11.2016','d.m.Y')
								)
								|| (
									EvnClass_SysNick == 'EvnVizitPLStom'
									&& vizit.get('UslugaComplex_Code').substr(-3, 3).inlist(['805'])
									&& Date.parseDate(eventData.EvnVizitPLStom_setDate,'d.m.Y') >= Date.parseDate('01.04.2018','d.m.Y')
								)
							)
						) {
							return false;
						}
						return true;
					};
					cmp = new sw.Promed.SwCommonSprCombo({
						hideLabel: true,
						autoLoad: true,
						comboSubject: 'HealthKind',
						editable: true,
						typeCode: 'int'
						,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaHealthKind'
						,width: 350
						,allowBlank: isAllowBlank()
						,listeners:
						{
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});
								
								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
									if ( EvnClass_SysNick == 'EvnVizitPL' ) {
										form.createInputArea('VizitClass', EvnClass_SysNick, el_data);
									}
                                }
                            },
							change: function(f,n,o) {
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId = null;
								if (rec) {
									outputValue = rec.get('HealthKind_Name')||'';
									outputValueId = rec.get('HealthKind_id');
								}
                                if (!outputValueId && !f.allowBlank) {
                                    sw.swMsg.alert(langs('Сообщение'), 'Поле Группа здоровья является обязательным для заполнения');
                                    return false;
                                }
								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										 object: EvnClass_SysNick
										,id: el_data.object_id
										,param_name: 'HealthKind_id'
										,param_value: outputValueId
									}
								});
							}
						}
					});
					cmp.getStore().load();
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'PregnancyEvnVizitPL_Period':
				ct = Ext.get('EvnVizitPL_data_'+ el_data.object_id +'_inputareaPregnancyEvnVizitPLPeriod');
				eloutputid = 'EvnVizitPL_data_'+ el_data.object_id +'_inputPregnancyEvnVizitPLPeriod';
				eloutput = Ext.get(eloutputid);
				var data = this.getObjectData('EvnVizitPL', el_data.object_id);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					cmp = new Ext.form.NumberField({
						renderTo: ct,
						name: 'PregnancyEvnVizitPL_Period',
						minValue: 1,
						maxValue: 45,
						width: 80,
						listeners: {
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							render: function(field) {
								if(!Ext.isEmpty(dataid)) {
									field.setValue(dataid);
								}
							},
							change: function(field, newValue, oldValue) {
								var outputValue = form.getEmptyValueText();
								var outputValueId = null;
								if(!Ext.isEmpty(newValue)) {
									outputValueId = outputValue = newValue;
								}
								if (!Ext.isEmpty(outputValueId) && outputValueId < 1 || outputValueId > 45) {
									form.showWarningMsg({msg: "Срок беременности должен быть от 1 до 45 недель"});
									return false;
								}

								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: field
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: 'EvnVizitPL'
										,id: data.EvnVizitPL_id
										,param_name: 'PregnancyEvnVizitPL_Period'
										,param_value: newValue
									}
									,requestCallback: function(response_obj) {

									}
								});
							}
						}
					});
					cmp.focus(true, 100);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'DiagPreid':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaDiagPreid');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputDiagPreid';
				elcodeid = EvnClass_SysNick + '_' +  el_data.object_id +'_DiagPreidCode';
				eloutput = Ext.get(eloutputid);
				elcode = Ext.get(elcodeid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}

					var evn = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);

					elcode.update('');

					cmp = new sw.Promed.SwDiagCombo({
						checkAccessRights: true
						,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaDiagPreid'
						,width: 400
					});
					cmp.on('blur', function(f) {
						if (f.disableBlurAction) {
							return false;
						}
						var outputValue = eloutput.dom.innerHTML;
						var outputValueId = dataid;

						onCancel({
							elOutputId: eloutputid
							,outputValue: outputValue
							,outputValueId: outputValueId
							,elInputWrap: ct
							,elInput: f
						});
						return true;
					});

					cmp.on('change', function(f,n,o) {
						if (f.disableBlurAction) {
							return false;
						}

						var rec = f.getStore().getById(n);
						var outputValue = form.getEmptyValueText();
						var outputValueId = null;
						var diagId = null;
						var diagCode = '';

						if(rec) {
							outputValue = rec.get('Diag_Name');
							diagCode = rec.get('Diag_Code');
							diagId = rec.get('Diag_id');
						} else if ( n != '') {
							return true;
						}

						outputValueId = diagId;

						onChange({
							elOutputId: eloutputid
							,outputValue: outputValue
							,outputValueId: outputValueId
							,elInputWrap: ct
							,elInput: f
							,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
							,requestParams: {
								object: 'EvnPLBase'
								,id: el_data.object_id
								,param_name: 'Diag_preid'
								,param_value: outputValueId
							}
							,requestCallback: function(response_obj) {
								form.isFirstAdminCheck = false;
								var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
								if (record && response_obj.success) {
									elcode.update(diagCode);
									//обновить данные
									record.set('Diag_preid', diagId);
									record.set('DiagPreid_Code', diagCode);
									record.commit(true);
								}
							}
						});
					});

					if(!Ext.isEmpty(dataid)) {
						cmp.getStore().load({
							params: {where: "where Diag_id = " + dataid},
							callback: function(data) {
								cmp.getStore().each(function(record) {
									if (parseInt(record.get('Diag_id')) == dataid)
									{
										cmp.setValue(dataid);
										cmp.fireEvent('select', cmp, record, 0);
									}
								});
							}
						});
					}

					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'DiagF':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaDiagF');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputDiagF';
				elcodeid = EvnClass_SysNick + '_' +  el_data.object_id +'_DiagFCode';
				eloutput = Ext.get(eloutputid);
				elcode = Ext.get(elcodeid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}

					var evn = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);

					elcode.update('');

					cmp = new sw.Promed.SwDiagCombo({
						checkAccessRights: true
						,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaDiagF'
						,width: 400
					});
					cmp.on('blur', function(f) {
						if (f.disableBlurAction) {
							return false;
						}
						var outputValue = eloutput.dom.innerHTML;
						var outputValueId = dataid;

						onCancel({
							elOutputId: eloutputid
							,outputValue: outputValue
							,outputValueId: outputValueId
							,elInputWrap: ct
							,elInput: f
						});
						return true;
					});

					cmp.on('keydown', function(combo, e) {
						if (e.getKey() == e.TAB) {
							//form.createInputArea('DeseaseType', EvnClass_SysNick, el_data);
						}
					});

					cmp.on('change', function(f,n,o) {
						if (f.disableBlurAction) {
							return false;
						}

						var rec = f.getStore().getById(n);
						var outputValue = form.getEmptyValueText();
						var outputValueId = null;
						var diagId = null;
						var diagCode = '';

						if(rec) {
							outputValue = rec.get('Diag_Name');
							diagCode = rec.get('Diag_Code');
							diagId = rec.get('Diag_id');
						} else if ( n != '') {
							return true;
						}

						outputValueId = diagId;

						onChange({
							elOutputId: eloutputid
							,outputValue: outputValue
							,outputValueId: outputValueId
							,elInputWrap: ct
							,elInput: f
							,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
							,requestParams: {
								object: 'EvnPLBase'
								,id: el_data.object_id
								,param_name: 'Diag_fid'
								,param_value: outputValueId
							}
							,requestCallback: function(response_obj) {
								form.isFirstAdminCheck = false;
								var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
								if (record && response_obj.success) {
									elcode.update(diagCode);
									//обновить данные
									record.set('Diag_fid', diagId);
									record.set('DiagF_Code', diagCode);
									record.commit(true);
								}
							}
						});
					});

					if(!Ext.isEmpty(dataid)) {
						cmp.getStore().load({
							params: {where: "where Diag_id = " + dataid},
							callback: function(data) {
								cmp.getStore().each(function(record) {
									if (parseInt(record.get('Diag_id')) == dataid)
									{
										cmp.setValue(dataid);
										cmp.fireEvent('select', cmp, record, 0);
									}
								});
							}
						});
					}

					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'DiagL':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaDiagL');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputDiagL';
				elcodeid = EvnClass_SysNick + '_' +  el_data.object_id +'_DiagLCode';
				eloutput = Ext.get(eloutputid);
				elcode = Ext.get(elcodeid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}

					var evn = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);

					elcode.update('');

					cmp = new sw.Promed.SwDiagCombo({
						checkAccessRights: true
						,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaDiagL'
						,width: 400
					});
					cmp.on('blur', function(f) {
						if (f.disableBlurAction) {
							return false;
						}
						var outputValue = eloutput.dom.innerHTML;
						var outputValueId = dataid;

						onCancel({
							elOutputId: eloutputid
							,outputValue: outputValue
							,outputValueId: outputValueId
							,elInputWrap: ct
							,elInput: f
						});
						return true;
					});

					cmp.on('keydown', function(combo, e) {
						if (e.getKey() == e.TAB) {
							//form.createInputArea('DeseaseType', EvnClass_SysNick, el_data);
						}
					});

					cmp.on('change', function(f,n,o) {
						if (f.disableBlurAction) {
							return false;
						}

						var rec = f.getStore().getById(n);
						var outputValue = form.getEmptyValueText();
						var outputValueId = null;
						var diagId = null;
						var diagCode = '';

						if(rec) {
							outputValue = rec.get('Diag_Name');
							diagCode = rec.get('Diag_Code');
							diagId = rec.get('Diag_id');
						} else if ( n != '') {
							return true;
						}

						outputValueId = diagId;

						onChange({
							elOutputId: eloutputid
							,outputValue: outputValue
							,outputValueId: outputValueId
							,elInputWrap: ct
							,elInput: f
							,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
							,requestParams: {
								object: 'EvnPLBase'
								,id: el_data.object_id
								,param_name: 'Diag_lid'
								,param_value: outputValueId
							}
							,requestCallback: function(response_obj) {
								form.isFirstAdminCheck = false;
								var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
								if (record && response_obj.success) {
									elcode.update(diagCode);
									//обновить данные
									record.set('Diag_lid', diagId);
									record.set('DiagL_Code', diagCode);
									record.commit(true);
									form.setDiagConcComboVisible(EvnClass_SysNick, el_data.object_id, record.data, 'onDiag_lid');
								}
							}
						});
					});

					if(!Ext.isEmpty(dataid)) {
						cmp.getStore().load({
							params: {where: "where Diag_id = " + dataid},
							callback: function(data) {
								cmp.getStore().each(function(record) {
									if (parseInt(record.get('Diag_id')) == dataid)
									{
										cmp.setValue(dataid);
										cmp.fireEvent('select', cmp, record, 0);
									}
								});
							}
						});
					}

					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'DiagSpid':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaDiagSpid');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputDiagSpid';
				elcodeid = EvnClass_SysNick + '_' +  el_data.object_id +'_DiagSpidCode';
				eloutput = Ext.get(eloutputid);
				elcode = Ext.get(elcodeid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if(!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}

					var evn = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);

					elcode.update('');

					cmp = new sw.Promed.SwDiagCombo({
						checkAccessRights: true
						,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaDiagSpid'
						,additQueryFilter: "(Diag_Code like 'C%' or Diag_Code like 'D0%')"
						,baseFilterFn: function(rec){
							if(typeof rec.get == 'function') {
								return (rec.get('Diag_Code').substr(0,1) == 'C' || rec.get('Diag_Code').substr(0,2) == 'D0');
							} else if (rec.attributes && rec.attributes.Diag_Code) {
								return (rec.attributes.Diag_Code.substr(0,1) == 'C' || rec.attributes.Diag_Code.substr(0,2) == 'D0');
							} else {
								return true;
							}
						}
						,width: 400
					});
					cmp.on('blur', function(f) {
						if (f.disableBlurAction) {
							return false;
						}
						var outputValue = eloutput.dom.innerHTML;
						var outputValueId = dataid;

						onCancel({
							elOutputId: eloutputid
							,outputValue: outputValue
							,outputValueId: outputValueId
							,elInputWrap: ct
							,elInput: f
						});
						return true;
					});

					cmp.on('change', function(f,n,o) {
						if (f.disableBlurAction) {
							return false;
						}

						var rec = f.getStore().getById(n);
						var outputValue = form.getEmptyValueText();
						var outputValueId = null;
						var diagId = null;
						var diagCode = '';

						if(rec) {
							outputValue = rec.get('Diag_Name');
							diagCode = rec.get('Diag_Code');
							diagId = rec.get('Diag_id');
						} else if ( n != '') {
							return true;
						}

						outputValueId = diagId;

						onChange({
							elOutputId: eloutputid
							,outputValue: outputValue
							,outputValueId: outputValueId
							,elInputWrap: ct
							,elInput: f
							,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
							,requestParams: {
								object: 'EvnPLBase'
								,id: el_data.object_id
								,param_name: 'Diag_spid'
								,param_value: outputValueId
							}
							,requestCallback: function(response_obj) {
								form.isFirstAdminCheck = false;
								var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
								if (record && response_obj.success) {
									elcode.update(diagCode);
									//обновить данные
									record.set('Diag_spid', diagId);
									record.set('DiagSpid_Code', diagCode);
									record.commit(true);
								}
							}
						});
					});

					if(!Ext.isEmpty(dataid)) {
						cmp.getStore().load({
							params: {where: "where Diag_id = " + dataid},
							callback: function(data) {
								cmp.getStore().each(function(record) {
									if (parseInt(record.get('Diag_id')) == dataid)
									{
										cmp.setValue(dataid);
										cmp.fireEvent('select', cmp, record, 0);
									}
								});
							}
						});
					}

					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'BiopsyDate':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaBiopsyDate');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputBiopsyDate';
				eloutput = Ext.get(eloutputid);
				var th = this;
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					var vizit = form.viewFormDataStore.getById(EvnClass_SysNick+'_'+ el_data.object_id);

					cmp = new sw.Promed.SwDateField({
						renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputarea' + name
						,allowBlank: false
						,width: 100
						,hiddenName: EvnClass_SysNick + '_' + name
						,listeners: {
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							change: function(f,n,o) {
								var outputValue = form.getEmptyValueText();
								var outputValueId = '';
								if (!Ext.isEmpty(f.getValue())) {
									outputValue = f.getValue().format('d.m.Y');
									outputValueId = f.getValue().format('Y-m-d');
								}

								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: EvnClass_SysNick
										,id: el_data.object_id
										,param_name: EvnClass_SysNick + '_BiopsyDate'
										,param_value: outputValueId
									}
									,requestCallback: function(response_obj) {
										form.isFirstAdminCheck = false;
										var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
										if ( record && response_obj.success == true ) {
											record.set(EvnClass_SysNick+'_'+name, outputValueId);
											record.commit(true);
											form.viewFormDataStore.commitChanges();
										}
									}
								});
							}
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'RankinScale':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaRankinScale');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputRankinScale';
				eloutput = Ext.get(eloutputid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if (!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					cmp = new sw.Promed.SwCommonSprCombo({
						hideLabel: true,
						autoLoad: true,
						comboSubject: 'RankinScale',
						editable: true,
						typeCode: 'int'
						,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaRankinScale'
						,width: 350
						,allowBlank: false
						,listeners:
						{
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							change: function(f,n,o) {
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId = null;
								if (rec) {
									outputValue = rec.get('RankinScale_Name')||'';
									outputValueId = rec.get('RankinScale_id');
								}
                                if (!outputValueId && !f.allowBlank) {
                                    sw.swMsg.alert(langs('Сообщение'), langs('Поле "Значение по шкале Рэнкина" является обязательным для заполнения.'));
                                    return false;
                                }
								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
									,requestParams: {
										object: 'EvnVizitPL'
										,id: el_data.object_id
										,param_name: 'RankinScale_id'
										,param_value: outputValueId
									}
									,requestCallback: function(response_obj){
										if ( response_obj.success == true ) {
											form.isFirstAdminCheck = false;
											// do nothing
										}
									}
								});
							}
						}
					});
					cmp.getStore().load();
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'RankinScaleEs':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaRankinScaleEs');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputRankinScaleEs';
				eloutput = Ext.get(eloutputid);
				var data = form.getObjectData('EvnSection', el_data.object_id)
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if (!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					cmp = new sw.Promed.SwCommonSprCombo({
						hideLabel: true,
						autoLoad: true,
						comboSubject: 'RankinScale',
						editable: true,
						typeCode: 'int'
						,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaRankinScaleEs'
						,width: 350
						,allowBlank: false
						,listeners:
						{
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							change: function(f,n,o) {
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId = null;
								if (rec) {
									outputValue = rec.get('RankinScale_Name')||'';
									outputValueId = rec.get('RankinScale_id');
								}
                                if (!outputValueId && !f.allowBlank) {
                                    sw.swMsg.alert(langs('Сообщение'), langs('Поле "Значение по шкале Рэнкина при поступлении" является обязательным для заполнения.'));
                                    return false;
                                }
								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnSection&m=setEvnSectionParameter'
									,requestParams: {
										object: 'EvnSection'
										,id: el_data.object_id
										,param_name: 'RankinScale_id'
										,param_value: outputValueId
									}
									,requestCallback: function(response_obj){
										if ( response_obj.success == true ) {
											form.isFirstAdminCheck = false;
											// do nothing
										}
									}
								});
							}
						}
					});
					if (getRegionNick() == 'penza') {
						if (data.LpuUnitType_SysNick == 'stac') {
							cmp.setBaseFilter(function(rec){
								return rec.get('RankinScale_Code').inlist([3,4,5])
							});
						} else {
							cmp.setBaseFilter(function(rec){
								return rec.get('RankinScale_Code').inlist([1, 2, 3])
							});
						}
					}
					cmp.getStore().load();
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'RankinScaleEsSid':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaRankinScaleEsSid');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputRankinScaleEsSid';
				eloutput = Ext.get(eloutputid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if (!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					cmp = new sw.Promed.SwCommonSprCombo({
						hideLabel: true,
						autoLoad: true,
						comboSubject: 'RankinScale',
						editable: true,
						typeCode: 'int'
						,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaRankinScaleEsSid'
						,width: 350
						,allowBlank: false
						,listeners:
						{
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
							change: function(f,n,o) {
								var rec = f.getStore().getById(n);
								var outputValue = form.getEmptyValueText();
								var outputValueId = null;
								if (rec) {
									outputValue = rec.get('RankinScale_Name')||'';
									outputValueId = rec.get('RankinScale_id');
								}
                                if (!outputValueId && !f.allowBlank) {
                                    sw.swMsg.alert(langs('Сообщение'), langs('Поле "Значение по шкале Рэнкина при выписке" является обязательным для заполнения.'));
                                    return false;
                                }
								onChange({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
									,requestUrl: '/?c=EvnSection&m=setEvnSectionParameter'
									,requestParams: {
										object: 'EvnSection'
										,id: el_data.object_id
										,param_name: 'RankinScale_sid'
										,param_value: outputValueId
									}
									,requestCallback: function(response_obj){
										if ( response_obj.success == true ) {
											form.isFirstAdminCheck = false;
											// do nothing
										}
									}
								});
							}
						}
					});
					cmp.getStore().load();
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
			case 'EsInsultScale':
				ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaEsInsultScale');
				eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputEsInsultScale';
				eloutput = Ext.get(eloutputid);
				if(ct && !this.input_cmp_list[eloutputid]) {
					ct.setDisplayed('block');
					eloutput.setDisplayed('none');
					var dataid = eloutput.getAttribute('dataid');
					if (!Ext.isEmpty(dataid)) {
						dataid = parseInt(dataid);
					}
					cmp = new Ext.form.NumberField({
						hideLabel: true
                        ,allowDecimals: false
                        ,allowNegative: false
						,minValue: 0
						,maxValue: 39
						,autoCreate: {tag: "input", maxLength: 2, autocomplete: "off"}
						,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaEsInsultScale'
						,width: 80
						,allowBlank: false
						,listeners:
						{
							blur: function(f) {
								var outputValue = eloutput.dom.innerHTML;
								var outputValueId = dataid;

								onCancel({
									elOutputId: eloutputid
									,outputValue: outputValue
									,outputValueId: outputValueId
									,elInputWrap: ct
									,elInput: f
								});

								return false;
							},
							render: function(combo) {
								if(!Ext.isEmpty(dataid)) {
									combo.setValue(dataid);
								}
							},
                            change: function(f,n,o) {
                                var outputValue = !Ext.isEmpty(n) ? n : form.getEmptyValueText();
                                var outputValueId = n;
                                if (outputValueId < 0 || outputValueId > 39) {
                                    sw.swMsg.alert(langs('Сообщение'), langs('Значение шкалы инсульта Национального института здоровья должно быть в диапазон от 0 до 39'));
                                    return false;
                                }
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
									,requestUrl: '/?c=EvnSection&m=setEvnSectionParameter'
                                    ,requestParams: {
                                        object: 'EvnSection'
                                        ,id: el_data.object_id
                                        ,param_name: 'EvnSection_InsultScale'
                                        ,param_value: outputValueId
                                    }, 
									requestCallback: function(response_obj) {
										form.isFirstAdminCheck = false;
										eloutput.setAttribute('dataid', outputValue);
									}
                                });
                            }
						}
					});
					cmp.focus(true, 500);
					this.input_cmp_list[eloutputid] = cmp;
				}
				break;
            case 'Tooth':
                ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaTooth');
                eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputTooth';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    cmp = new sw.Promed.SwToothField({
                        renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaTooth'
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;
                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });
                                return false;
                            },
                            keydown: function(f, e) {
                                if (e.getKey() == e.TAB) {
                                    if (f.getValue()) {
                                        form.createInputArea('ToothSurface', EvnClass_SysNick, el_data);
                                    } else {
                                        if (getGlobalOptions().region && getGlobalOptions().region.nick == 'perm') {
                                            form.createInputArea('Mes', EvnClass_SysNick, el_data);
                                        } else {
                                            form.createInputArea('UetOMS', EvnClass_SysNick, el_data);
                                        }
                                    }
                                }
                            },
                            render: function(f) {
                                var value = eloutput.dom.innerHTML;
                                if (Ext.isEmpty(value)) {
                                    value = null;
                                }
                                f.setValue(value);
                            },
                            change: function(f, n) {
                                var outputValue = form.getEmptyValueText();
                                var outputValueId;
                                if (f.hasCode(n)) {
                                    outputValue = n;
                                    outputValueId = f.getToothId(n);
                                }
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnVizitPLStom'
                                        ,id: el_data.object_id
                                        ,param_name: 'Tooth_id'
                                        ,param_value: outputValueId
                                    }
                                    ,requestCallback: function(response_obj) {
                                    	form.isFirstAdminCheck = false;
                                        var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                                        if (record && response_obj.success) {
                                            //обновить данные ТАП
                                            record.set('Tooth_id', outputValueId);
                                            record.set('Tooth_Code', outputValue);
                                            record.set('ToothSurfaceType_id_list', '');
                                            record.commit(true);
                                            form.viewFormDataStore.commitChanges();
                                            var wrapToothSurface = Ext.get('EvnVizitPLStom_data_'+ el_data.object_id +'_wrapToothSurface'),
                                                cntToothSurface = Ext.get('EvnVizitPLStom_data_'+ el_data.object_id +'_inputareaToothSurface'),
                                                cmpToothSurfaceId = 'EvnVizitPLStom_data_'+ el_data.object_id +'_inputToothSurface';
                                            if (cntToothSurface && form.input_cmp_list[cmpToothSurfaceId]) {
                                                onCancel({
                                                    elOutputId: cmpToothSurfaceId
                                                    ,outputValue: Ext.get(cmpToothSurfaceId).dom.innerHTML
                                                    ,elInputWrap: cntToothSurface
                                                    ,elInput: form.input_cmp_list[cmpToothSurfaceId]
                                                });
                                            }
                                            if (outputValueId) {
                                                if (wrapToothSurface) wrapToothSurface.setDisplayed('block');
                                                form.createInputArea('ToothSurface', EvnClass_SysNick, el_data);
                                            } else {
                                                if (wrapToothSurface) wrapToothSurface.setDisplayed('none');
                                            }
                                        }
                                    }
                                });
                            }
                        }
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'ToothSurface':
                ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaToothSurface');
                eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputToothSurface';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id),
                        ToothSurfaceType_id_list = '';
                    if (record) {
                        ToothSurfaceType_id_list = record.get('ToothSurfaceType_id_list')||'';
                    }
                    cmp = new sw.Promed.swToothSurfaceTypeCheckboxGroup({
                        hideLabel: true
                        ,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaToothSurface'
                        ,width: 300
                        ,listeners:
                        {
                            blur: function(f) {
                                /*
                                var outputValue = eloutput.dom.innerHTML;
                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });
                                */
                                return false;
                            },
                            keydown: function(group, e) {
                                if (e.getKey() == e.TAB) {
                                    if (getGlobalOptions().region && getGlobalOptions().region.nick == 'perm') {
                                        form.createInputArea('Mes', EvnClass_SysNick, el_data);
                                    } else {
                                        form.createInputArea('UetOMS', EvnClass_SysNick, el_data);
                                    }
                                }
                            },
                            render: function(group) {
                                var num, showItems;
                                if ( record && record.get('Tooth_Code') > 0 ) {
                                    num = record.get('Tooth_Code') + '';
                                }
                                showItems = sw.Promed.StomHelper.ToothMap.getVisibleSurfaceList(num);
                                group.items.each(function(item){
                                    item.disable();
                                    item.setValue(false);
                                    if (item.value.toString().inlist(showItems)) {
                                        item.enable();
                                    }
                                });
                                group.setValue(ToothSurfaceType_id_list);
                            },
                            change: function(f,n,o) {
                                ToothSurfaceType_id_list = f.getValue();
                                var outputValue = form.getEmptyValueText();
                                var outputValueId;
                                if (ToothSurfaceType_id_list) {
                                    outputValue = f.getRawValue();
                                    outputValueId = ToothSurfaceType_id_list;
                                }
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnVizitPLStom'
                                        ,id: el_data.object_id
                                        ,param_name: 'ToothSurfaceType_id_list' //'EvnVizitPLStom_ToothSurface'
                                        ,param_value: ToothSurfaceType_id_list //json.encode({ToothSurfaceTypeIdList: ToothSurfaceType_id_list.split(',')})
                                    }
                                    ,requestCallback: function(response_obj) {
                                    	form.isFirstAdminCheck = false;
                                        if (response_obj.success) {
                                            //обновить данные ТАП
                                            record.set('ToothSurfaceType_id_list', ToothSurfaceType_id_list);
                                            record.commit(true);
                                            form.viewFormDataStore.commitChanges();
                                        }
                                    },
                                    disableDestroy: true
                                });
                            }
                        }
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'Mes':
                ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaMes');
                eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputMes';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    var record = form.viewFormDataStore.getById(EvnClass_SysNick +'_'+ el_data.object_id);
                    var dataid = eloutput.getAttribute('dataid');
                    if (!Ext.isEmpty(dataid)) {
                        dataid = parseInt(dataid);
                    }
                    if (!record || !record.get('Diag_id')
                        || !record.get('LpuSection_id') || !record.get(EvnClass_SysNick +'_setDate')
                    ) {
                        return false;
                    }
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    cmp = new sw.Promed.SwMesCombo({
                        renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaMes'
                        ,allowBlank: false
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    form.createInputArea('UetOMS', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                if(!Ext.isEmpty(dataid)) {
                                    combo.setValue(dataid);
                                }
                            },
                            change: function(f,n,o) {
                                var rec = f.getStore().getById(n);
                                var outputValue = form.getEmptyValueText();
                                var outputValueId, valueMesUet;
                                if(rec) {
                                    outputValue = rec.get('Mes_Code');
                                    outputValueId = rec.get('Mes_id');
                                    valueMesUet = rec.get('Mes_KoikoDni');
                                }
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnVizit'
                                        ,id: el_data.object_id
                                        ,param_name: 'Mes_id'
                                        ,param_value: outputValueId
                                    }
                                    ,requestCallback: function(response_obj) {
                                    	form.isFirstAdminCheck = false;
                                        if (record && response_obj.success) {
                                            var wrapMesUet = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_MesUet');
                                            if (!valueMesUet) {
                                                if (wrapMesUet) wrapMesUet.update(form.getEmptyValueText());
                                                record.set('EvnVizitPLStom_MesUet', valueMesUet);
                                            } else {
                                                record.set('EvnVizitPLStom_MesUet', valueMesUet);
                                                if (wrapMesUet) wrapMesUet.update(valueMesUet);
                                            }
                                            //обновить данные ТАП
                                            record.set('Mes_id', outputValueId);
                                            record.set('Mes_Code', outputValue);
                                            record.commit(true);
                                            form.viewFormDataStore.commitChanges();
                                            if ('EvnVizitPLStom' == EvnClass_SysNick) {
                                                form.toogleAddEvnUslugaStomByMes(record.data, form.isReadOnly);
                                            }
                                        }
                                    }
                                });
                            }
                        }
                    });
                    cmp.lastQuery = '';
                    var mesLoadParams = {
                        Diag_id: record.get('Diag_id')
                        ,EvnVizit_id: record.get(EvnClass_SysNick +'_id')
                        ,EvnVizit_setDate: record.get(EvnClass_SysNick +'_setDate')
                        ,LpuSection_id: record.get('LpuSection_id')
                        ,Person_id: form.Person_id
                    };
                    cmp.getStore().baseParams = mesLoadParams;
                    cmp.getStore().baseParams.query = '';
                    cmp.getStore().load({
                        params: {Mes_id: dataid || null},
                        callback: function(data) {
                            if (dataid) {
                                cmp.getStore().each(function(record) {
                                    if (parseInt(record.get('Mes_id')) == dataid)
                                    {
                                        cmp.setValue(dataid);
                                        //cmp.fireEvent('select', cmp, record, 0);
                                    }
                                });
                            } else if (cmp.getStore().getCount() == 1) {
                                var mes = cmp.getStore().getAt(0);
                                if (mes) cmp.setValue(mes.get('Mes_id'));
                            }
                        }
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'UetOMS':
                ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaUetOMS');
                eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputUetOMS';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    cmp = new Ext.form.NumberField({
                        name: 'EvnVizitPLStom_UetOMS'
                        ,allowDecimals: true
                        ,allowNegative: false
                        ,enableKeyEvents: true
                        ,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaUetOMS'
                        ,width: 60
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    form.createInputArea('Uet', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                var value = eloutput.dom.innerHTML;
                                if(Ext.isEmpty(value)) {
                                    value = null;
                                }
                                combo.setValue(value);
                            },
                            change: function(f,n,o) {
                                var outputValue = n||form.getEmptyValueText();
                                var outputValueId = n;
                                form.isFirstAdminCheck = false;
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnVizit'
                                        ,id: el_data.object_id
                                        ,param_name: 'EvnVizit_UetOMS'
                                        ,param_value: outputValueId
                                    }
                                });
                            }
                        }
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;
            case 'Uet':
                ct = Ext.get(EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaUet');
                eloutputid = EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputUet';
                eloutput = Ext.get(eloutputid);
                if(ct && !this.input_cmp_list[eloutputid]) {
                    ct.setDisplayed('block');
                    eloutput.setDisplayed('none');
                    cmp = new Ext.form.NumberField({
                        name: 'EvnVizitPLStom_Uet'
                        ,allowDecimals: true
                        ,allowNegative: false
                        ,enableKeyEvents: true
                        ,renderTo: EvnClass_SysNick +'_data_'+ el_data.object_id +'_inputareaUet'
                        ,width: 60
                        ,listeners:
                        {
                            blur: function(f) {
                                var outputValue = eloutput.dom.innerHTML;

                                onCancel({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,elInputWrap: ct
                                    ,elInput: f
                                });

                                return false;
                            },
                            keydown: function(combo, e) {
                                if (e.getKey() == e.TAB) {
                                    form.createInputArea('UetOMS', EvnClass_SysNick, el_data);
                                }
                            },
                            render: function(combo) {
                                var value = eloutput.dom.innerHTML;
                                if(Ext.isEmpty(value)) {
                                    value = null;
                                }
                                combo.setValue(value);
                            },
                            change: function(f,n,o) {
                                var outputValue = n||form.getEmptyValueText();
                                var outputValueId = n;
                                form.isFirstAdminCheck = false;
                                onChange({
                                    elOutputId: eloutputid
                                    ,outputValue: outputValue
                                    ,outputValueId: outputValueId
                                    ,elInputWrap: ct
                                    ,elInput: f
                                    ,requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter'
                                    ,requestParams: {
                                        object: 'EvnVizit'
                                        ,id: el_data.object_id
                                        ,param_name: 'EvnVizit_Uet'
                                        ,param_value: outputValueId
                                    }
                                });
                            }
                        }
                    });
                    cmp.focus(true, 500);
                    this.input_cmp_list[eloutputid] = cmp;
                }
                break;

			case 'AssessmentHealth_Weight':
			case 'AssessmentHealth_Height':
			case 'AssessmentHealth_Gnostic':
			case 'AssessmentHealth_Motion':
			case 'AssessmentHealth_Social':
			case 'AssessmentHealth_Speech':
			case 'AssessmentHealth_P':
			case 'AssessmentHealth_Ax':
			case 'AssessmentHealth_Fa':
			case 'AssessmentHealth_Ma':
			case 'AssessmentHealth_Me':

				this.universalInputHandler(
				{
					paramName: name,
					EvnClass_SysNick: EvnClass_SysNick
				}, el_data);

				break;
		}
	},
	// универсальный обработчик чтобы не плодить еще больше однотипного кода
	universalInputHandler: function(params, conf) {

		var form = this,
			titles = params.paramName.split("_");

		var EvnClass_SysNick = params.EvnClass_SysNick,
			modelName = titles[0],
			inputName = titles[1],
			paramName = params.paramName;

		var components = this.input_cmp_list;

		inputArea = Ext.get(EvnClass_SysNick +'_data_'+ conf.object_id +'_inputarea'+inputName);
		inputId = EvnClass_SysNick +'_data_'+ conf.object_id +'_input'+inputName;
		component = Ext.get(inputId);

		if (inputArea && !components[inputId]) {

			inputArea.setDisplayed('block');
			component.setDisplayed('none');

			var field = new Ext.form.NumberField({
				allowDecimals: true,
				allowNegative: false,
				enableKeyEvents: true,
				renderTo: EvnClass_SysNick +'_data_'+ conf.object_id +'_inputarea'+inputName,
				width: 60,
				listeners: {
					blur: function(el) {

						var val = component.dom.innerHTML;

						form.onCancelCreateInputArea({
							inputId: inputId,
							value: val,
							inputArea: inputArea,
							el: el
						})

						return false;
					},
					keydown: function(el, e) {
						if (e.getKey() == e.ENTER) {
							el.fireEvent('change', el, el.getValue())
						}
					},
					render: function(el) {

						var val = component.dom.innerHTML;
						if (Ext.isEmpty(val)) val = null;
						el.setValue(val);
					},
					change: function(el, val, oldVal) {

						form.isFirstAdminCheck = false;

						form.onChangeCreateInputArea({
							inputId: inputId,
							value: val || form.getEmptyValueText(),
							idValue: null,
							inputArea: inputArea,
							el: el,
							requestUrl: '/?c=EvnVizit&m=setEvnVizitParameter',
							requestParams: {
								object: 'EvnVizit',
								id: conf.object_id,
								method_name: modelName + 'Param',
								param_name: paramName,
								param_value: val,
							},
							EvnClass_SysNick: EvnClass_SysNick,
							object_id: conf.object_id
						});
					}
				}
			});

			field.focus(true, 500);
			components[inputId] = field;
		}
	},
    printEvnVizitPL: function(el_data) {
        var paramEvnVizitPL = el_data.object_id;
		printBirt({
			'Report_FileName': 'f025_str4.rptdesign',
			'Report_Params': '&paramEvnVizitPL=' + paramEvnVizitPL,
			'Report_Format': 'pdf'
		});
    },
    openCmpCallCardViewWindow: function(action, el_data) {
		var wnd,
			object = 'CmpCallCard',
			params,
			formParams = {};

		switch (getRegionNick()){
			case 'perm':
			case 'ekb':
				wnd = 'swCmpCallCardEditWindow';
				formParams = {CmpCallCard_id : el_data.object_id};
				object = 'CmpCallCard';
				break;
			default:
				wnd = 'swCmpCallCardNewCloseCardWindow';
				formParams = {CmpCloseCard_id : el_data.object_id};
				object = 'CmpCloseCard';
				break;
		}

		if (getWnd(wnd).isVisible()) {
			sw.swMsg.alert(langs('Сообщение'), langs('Окно просмотра карты вызова СМП уже открыто.'));
			return false;
		}

		params = {
			action: action,
			formParams: formParams
		};

		getWnd(wnd).show(params);
    },
	openEvnUslugaDispDopEditWindow: function(action, el_data) {
    	var form = this;
		var usluga_data = form.getObjectData('EvnUslugaDispDop', el_data.object_id),
			evn_data = this.getObjectData(usluga_data.parent_object, usluga_data.parent_object_id);
		if (usluga_data.parent_object) {
			var evnpldisp_data = form.getObjectData(usluga_data.parent_object, usluga_data.parent_object_id);
			var consDate = Date.parseDate(evnpldisp_data[usluga_data.parent_object + '_consDate'], 'd.m.Y');
			if (usluga_data.SurveyType_Code == 2) {
				var params = {
					action: action,
					object: usluga_data.parent_object,
					DopDispQuestion_setDate: usluga_data.EvnUslugaDispDop_didDate,
					EvnPLDisp_consDate: Ext.util.Format.date(consDate, 'd.m.Y'),
					EvnPLDisp_id: usluga_data.parent_object_id,
					onHide: Ext.emptyFn,
					callback: function(qdata) {
						// обновляем список услуг
						var reload_params = {
							section_code: 'EvnUslugaDispDop',
							object_key: 'DopDispInfoConsent_id',
							object_value: el_data.object_id,
							parent_object: usluga_data.parent_object,
							parent_object_key: 'EvnPLDisp_id',
							parent_object_value: usluga_data.parent_object_id,
							section_id: 'EvnUslugaDispDopList_'+ usluga_data.parent_object_id
						};
						form.reloadViewForm(reload_params);
					}
				};

				if (getRegionNick().inlist(['kareliya']) && usluga_data.DispClass_id == 1) {
					params.minDate = '01.01.'+Ext.util.Format.date(consDate, 'Y');
					params.maxDate = '31.12.'+Ext.util.Format.date(consDate, 'Y');
				}

				params.EvnUslugaDispDop_id = usluga_data.EvnUslugaDispDop_id;

				getWnd('swDopDispQuestionEditWindow').show(params);
			} else {
				var personinfo = form.PersonInfoFrame;
				var params = {
					action: action,
					object: usluga_data.parent_object,
					DispClass_id: evnpldisp_data.DispClass_id,
					OmsSprTerr_Code: personinfo.getFieldValue('OmsSprTerr_Code'),
					Person_id: personinfo.getFieldValue('Person_id'),
					Person_Birthday: personinfo.getFieldValue('Person_Birthday'),
					Person_Firname: personinfo.getFieldValue('Person_Firname'),
					Person_Secname: personinfo.getFieldValue('Person_Secname'),
					Person_Surname: personinfo.getFieldValue('Person_Surname'),
					Sex_id: personinfo.getFieldValue('Sex_id'),
					Sex_Code: personinfo.getFieldValue('Sex_Code'),
					Person_Age: personinfo.getFieldValue('Person_Age'),
					UserLpuSection_id: form.userMedStaffFact.LpuSection_id,
					UserMedStaffFact_id: form.userMedStaffFact.MedStaffFact_id,
					UserMedStaffFact: form.userMedStaffFact,
					formParams: {
						DopDispInfoConsent_id: usluga_data.DopDispInfoConsent_id,
						EvnVizitDispDop_pid: usluga_data.parent_object_id,
						PersonEvn_id: evnpldisp_data.PersonEvn_id,
						Server_id: evnpldisp_data.Server_id,
						EvnUslugaDispDop_id: usluga_data.EvnUslugaDispDop_id
					},
					DopDispInfoConsent_id: usluga_data.DopDispInfoConsent_id,
					SurveyTypeLink_id: usluga_data.SurveyTypeLink_id,
					SurveyType_Code: usluga_data.SurveyType_Code,
					SurveyType_Name: usluga_data.SurveyType_Name,
					SurveyType_IsVizit: usluga_data.SurveyType_IsVizit,
					disableDidDate: (!Ext.isEmpty(evnpldisp_data.EvnPLDispDop13Sec_id) && usluga_data.SurveyType_Code == 19)?true:false,
					type: 'DispDop',
					UslugaComplex_Date: Ext.util.Format.date(consDate, 'd.m.Y'),
					ShowDeseaseStageCombo: getRegionNick().inlist(['perm','buryatiya','kareliya'])?true:false,
					onHide: Ext.emptyFn,
					callback: function(data) {
						// обновляем список услуг
						if (evnpldisp_data.DispClass_id == 26) {
							form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
							if (
								!Ext.isEmpty(evn_data.ElectronicTalon_id) && 
								form.userMedStaffFact.ARMType == 'paidservice' && 
								evn_data.ElectronicQueueInfo_IsOff == 1 && 
								evn_data.ElectronicTalonStatus_id == 3 &&
								evn_data.ElectronicService_id == form.userMedStaffFact.ElectronicService_id &&
								evn_data.ElectronicQueueInfo_IsLast != 2
							) {
								Ext.Msg.show({
									title: 'Завершение приема',
									msg: 'Завершить прием пациента?',
									buttons: {
										yes: "Завершить прием",
										no: "Завершить прием и вызвать следующего",
										cancel: "Отмена"
									},
									fn: function (btn) {
										if (btn == 'yes') {
											form.finishElectronicTalon('paid', evn_data.ElectronicTalon_id, false);
										} else if (btn == 'no') {
											form.finishElectronicTalon('paid', evn_data.ElectronicTalon_id, true);
										} else if (btn == 'cancel') {

										}
									}
								});
							}
						} else if (evnpldisp_data.DispClass_id == 19) {
							form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
						} else {
							var reload_params = {
								section_code: 'EvnUslugaDispDop',
								object_key: 'DopDispInfoConsent_id',
								object_value: el_data.object_id,
								parent_object: usluga_data.parent_object,
								parent_object_key: 'EvnPLDisp_id',
								parent_object_value: usluga_data.parent_object_id,
								section_id: 'EvnUslugaDispDopList_'+ usluga_data.parent_object_id
							};
							form.reloadViewForm(reload_params);
						}
					}

				};

				if (getRegionNick().inlist(['ekb','astra']) && (evnpldisp_data.DispClass_id == 2 || params.SurveyType_Code == 19) && usluga_data.DopDispInfoConsent_IsEarlier != 2) {
					params.minDate = '01.01.'+Ext.util.Format.date(consDate, 'Y');
					params.maxDate = '31.12.'+Ext.util.Format.date(consDate, 'Y');
				} else if (getRegionNick().inlist(['kareliya']) && evnpldisp_data.DispClass_id == 1 && params.SurveyType_Code == 19) {
					params.minDate = '01.01.'+Ext.util.Format.date(consDate, 'Y');
					params.maxDate = '31.12.'+Ext.util.Format.date(consDate, 'Y');
				}
				// @task https://redmine.swan.perm.ru/issues/66282
				else if ( getRegionNick().inlist([ 'perm' ]) && !Ext.isEmpty(consDate) && typeof(consDate) == 'object' ) {
					if ( usluga_data.DopDispInfoConsent_IsEarlier == 2 ) {
						params.maxDate = Ext.util.Format.date(consDate.add(Date.DAY, -1), 'd.m.Y');
					}
					else {
						params.minDate = Ext.util.Format.date(consDate, 'd.m.Y');
					}
				}

				getWnd('swEvnUslugaDispDop13EditWindow').show(params);
			}
		}
	},
	openEvnUslugaDispOrpEditWindow: function(action, el_data) {
    	var form = this;
		var usluga_data = form.getObjectData('EvnUslugaDispOrp', el_data.object_id),
			evn_data = this.getObjectData(usluga_data.parent_object, usluga_data.parent_object_id);

		if (usluga_data.parent_object) {
			var evnpldisp_data = form.getObjectData(usluga_data.parent_object, usluga_data.parent_object_id);
			var consDate = Date.parseDate(evnpldisp_data[usluga_data.parent_object + '_consDate'], 'd.m.Y');
			var personinfo = form.PersonInfoFrame;
			var formParams = usluga_data;

			log([ 'evnpldisp_data', evnpldisp_data ]);

			formParams.PersonEvn_id = evnpldisp_data.PersonEvn_id;
			formParams.Server_id = evnpldisp_data.Server_id;

			var params = {
				action: action,
				object: usluga_data.parent_object,
				DispClass_id: evnpldisp_data.DispClass_id,
				OmsSprTerr_Code: personinfo.getFieldValue('OmsSprTerr_Code'),
				Person_id: personinfo.getFieldValue('Person_id'),
				Person_Birthday: personinfo.getFieldValue('Person_Birthday'),
				Person_Firname: personinfo.getFieldValue('Person_Firname'),
				Person_Secname: personinfo.getFieldValue('Person_Secname'),
				Person_Surname: personinfo.getFieldValue('Person_Surname'),
				Sex_id: personinfo.getFieldValue('Sex_id'),
				Sex_Code: personinfo.getFieldValue('Sex_Code'),
				Person_Age: personinfo.getFieldValue('Person_Age'),
				formParams: formParams,
				dopDispInfoConsentData: [],
				ownerWindow: form,
				uslugaComplexAllowed: [ usluga_data.UslugaComplex_Code ],
				UslugaComplex_Date: Ext.util.Format.date(consDate, 'd.m.Y'),
				onHide: Ext.emptyFn,
				callback: function(data) {
					// обновляем список услуг
					var reload_params = {
						section_code: 'EvnUslugaDispOrp',
						object_key: 'DopDispInfoConsent_id',
						object_value: el_data.object_id,
						parent_object: usluga_data.parent_object,
						parent_object_key: 'EvnPLDisp_id',
						parent_object_value: usluga_data.parent_object_id,
						section_id: 'EvnUslugaDispOrpList_'+ usluga_data.parent_object_id
					};
					form.reloadViewForm(reload_params);
				}

			};

			getWnd('swEvnUslugaDispOrp13EditWindow').show(params);
		}
	},
	openEvnVizitDispOrpEditWindow: function(action, el_data) {
    	var form = this;
		var vizit_data = form.getObjectData('EvnVizitDispOrp', el_data.object_id),
			evn_data = this.getObjectData(vizit_data.parent_object, vizit_data.parent_object_id);

		if (vizit_data.parent_object) {
			var evnpldisp_data = form.getObjectData(vizit_data.parent_object, vizit_data.parent_object_id);
			var consDate = Date.parseDate(evnpldisp_data[vizit_data.parent_object + '_consDate'], 'd.m.Y');
			var personinfo = form.PersonInfoFrame;
			var formParams = vizit_data;

			formParams.PersonEvn_id = evnpldisp_data.PersonEvn_id;
			formParams.Server_id = evnpldisp_data.Server_id;

			var params = {
				action: action,
				object: vizit_data.parent_object,
				DispClass_id: evnpldisp_data.DispClass_id,
				OmsSprTerr_Code: personinfo.getFieldValue('OmsSprTerr_Code'),
				Person_id: personinfo.getFieldValue('Person_id'),
				Person_Birthday: personinfo.getFieldValue('Person_Birthday'),
				Person_Firname: personinfo.getFieldValue('Person_Firname'),
				Person_Secname: personinfo.getFieldValue('Person_Secname'),
				Person_Surname: personinfo.getFieldValue('Person_Surname'),
				Sex_id: personinfo.getFieldValue('Sex_id'),
				Sex_Code: personinfo.getFieldValue('Sex_Code'),
				Person_Age: personinfo.getFieldValue('Person_Age'),
				formParams: formParams,
				dopDispInfoConsentData: [],
				orpDispSpecAllowed: [ vizit_data.OrpDispSpec_Code ],
				ownerWindow: form,
				onHide: Ext.emptyFn,
				callback: function(data) {
					// обновляем список услуг
					var reload_params = {
						section_code: 'EvnVizitDispOrp',
						object_key: 'DopDispInfoConsent_id',
						object_value: el_data.object_id,
						parent_object: vizit_data.parent_object,
						parent_object_key: 'EvnPLDisp_id',
						parent_object_value: vizit_data.parent_object_id,
						section_id: 'EvnVizitDispOrpList_'+ vizit_data.parent_object_id
					};
					form.reloadViewForm(reload_params);
				}

			};

			getWnd('swEvnVizitDispOrp13EditWindow').show(params);
		}
	},
	openEvnVizitPLEditWindow: function(action, el_data) {
        if (getWnd('swEmkEvnPLEditWindow').isVisible())
        {
            sw.swMsg.alert(langs('Сообщение'), langs('Форма "ТАП:добавление" в данный момент открыта.'));
            return false;
        }
		var form = this;
		var close= true;
		var clsText =langs('Заполнены не все обязательные поля: ');
		var node_evnpl;
		var vizit_data;
		if (action == 'editEvnVizitPL')
		{
			vizit_data = form.getObjectData('EvnVizitPL',el_data.object_id);
			if(vizit_data == false)
				return false;
			node_evnpl = form.Tree.getNodeById('EvnPL_'+ vizit_data.EvnVizitPL_pid);
		} else {
			node_evnpl = form.Tree.getNodeById('EvnPL_'+ el_data.object_id);
		}
		if (!node_evnpl || 'EvnPL' != node_evnpl.attributes.object)
		{
			sw.swMsg.alert(langs('Сообщение'), langs('Не найдена нода случая АПЛ!'));
			return false;
		}
		if (!node_evnpl.attributes.accessType || ('view' == node_evnpl.attributes.accessType && 'openEvnPL' != action) || form.isReadonly)
		{
			sw.swMsg.alert(langs('Сообщение'), langs('Случай АПЛ доступен только на чтение!'));
			return false;
		}
		//log(node_evnpl);return true;
		var params = {
			formParams: {
				Person_id:this.Person_id,
				PersonEvn_id:this.PersonEvn_id,
				Server_id:this.Server_id
			}
		}; 
		params.callback = function(data) {
			form.requireCheckChange = false;
			form.loadTreeNode({
				node: node_evnpl.parentNode,
				selectById: node_evnpl.id,
				callback: function(tl,n){				
					//обязательно обновить ТАП целиком в панели просмотра
					form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
				}
			});
			if (typeof form.onSaveEvnDocument == 'function') {
				form.onSaveEvnDocument(true, data, 'EvnVizitPL');
			}
		};

		if (getRegionNick().inlist(['perm']) && action.inlist(['editEvnPL','closeEvnPL'])) {
			var yes_handler = function() {
				form.openEvnVizitPLEditWindow(action, el_data);
			};
			var vizitList = form.getObjectChildren('EvnPL', el_data.object_id).EvnVizitPL.item;
			for (var i=0; i < vizitList.length; i++) {
				var vizitParams = {object: 'EvnVizitPL', object_id: vizitList[i].data['EvnVizitPL_id']};
				var vizitData  = this.getObjectData(vizitParams.object, vizitParams.object_id);
				var checkResult = this._checkEvnVizitPL(vizitData, vizitList[i].children, vizitParams, null, yes_handler);
				if (!checkResult.success) {
					form.showWarningMsg({
						msg: checkResult.msg || null,
						links: checkResult.links || {}
					}, (checkResult.field || null), (checkResult.link || null), checkResult.params);
					return false;
				}
			}
		}

		switch ( action ) {
			case 'addEvnVizitPL':
				params.formParams.EvnVizitPL_id = 0;
				params.formParams.EvnPL_id = el_data.object_id;
				params.loadLastData = true;

				params.OtherVizitList = [];
				params.OtherUslugaList = [];
				var EvnPLChildren = form.getObjectChildren('EvnPL',params.formParams.EvnPL_id);
				if (EvnPLChildren.EvnVizitPL && Ext.isArray(EvnPLChildren.EvnVizitPL.item)) {
					EvnPLChildren.EvnVizitPL.item.forEach(function(vizit) {
						if (vizit.EvnVizitPL_id != params.formParams.EvnVizitPL_id) {
							params.OtherVizitList.push(vizit.data);

							var uslugaList = form.searchObjects(function(rec) {
								return rec.object_code == 'EvnUsluga' && rec.parent_object_value == vizit.EvnVizitPL_id;
							});
							uslugaList.forEach(function(usluga) {
								params.OtherUslugaList.push(usluga.data);
							});
						}
					});
				}
			break;

			case 'openEvnPL':
				sw.swMsg.show({
					buttons: Ext.Msg.YESNO,
					fn: function(buttonId) {
						if ( buttonId == 'yes' ) {
							form.requestSaveWithShowInfoMsg('/?c=EvnPL&m=openEvnPL', 
								{EvnPL_id: el_data.object_id, options: Ext.util.JSON.encode({})},
								function(response_obj) {
									if ( response_obj.success == true ) {
										params.callback(response_obj);
									} 
								}, form, function(code, options) {
									switch (code) {
										case 103:
											options.ignoreControl59536 = 1;
											break;
										case 105:
											options.ignoreControl122430 = 1;
											break;
										case 104:
											options.ignoreEvnDirectionProfile = 1;
											break;
										case 106:
											options.ignoreMorbusOnkoDrugCheck = 1;
											break;
										case 111:
											options.vizit_kvs_control_check = 1;
											break;
										case 112:
											options.vizit_intersection_control_check = 1;
											break;
										case 113:
											options.ignoreLpuSectionProfileVolume = 1;
											break;
										case 130:
											options.ignoreCheckEvnUslugaChange = 1;
											break;
										default: 
											options.ignoreDayProfileDuplicateVizit = 1;
											break;
									}
								});
						}
					}.createDelegate(this),
					icon: Ext.MessageBox.QUESTION,
					msg: langs('Продолжить случай лечения пациента?'),
					title: langs('Вопрос')
				});
				return true;
			break;

			case 'closeEvnPL':
				params.formParams.EvnPL_id = el_data.object_id;
				var record = form.viewFormDataStore.getById('EvnPL_'+ el_data.object_id);

				if(record.get('Diag_id')==null){
					close = false;
					clsText += langs('Диагноз')
				}
				var diag_reg = new RegExp("^Z");
				if(record.get('DeseaseType_Name')==null && (Ext.isEmpty(record.get('Diag_Code')) || !diag_reg.test(record.get('Diag_Code')))){
					close = false;
					clsText += langs('Характер заболевания')
				}

				if(form.errorControlCodaVisits()){
					close = false;
					clsText = langs('Закрытие случая АПЛ невозможно, т.к. в рамках одного ТАП для всех посещений должен быть указан один профиль отделения');
				}

 			break;

			case 'editEvnPL':
				params.formParams.EvnPL_id = el_data.object_id;
			break;

			case 'editEvnVizitPL':
				var childrens = form.getObjectChildren('EvnPL',node_evnpl.attributes.object_value);
				childrens = (childrens && childrens.EvnVizitPL && childrens.EvnVizitPL.item) || null;
				params.vizitCount = (Ext.isArray(childrens) ? childrens.length : 0);
				params.formParams.EvnVizitPL_id = el_data.object_id;
				params.formParams.EvnPL_id = node_evnpl.attributes.object_value;
				if (Ext.isEmpty(vizit_data.UslugaComplex_uid)) {
					params.clearUslugaComplexUid = true;
				}
				params.OtherVizitList = [];
				params.OtherUslugaList = [];
				var EvnPLChildren = form.getObjectChildren('EvnPL',params.formParams.EvnPL_id);
				if (EvnPLChildren.EvnVizitPL && Ext.isArray(EvnPLChildren.EvnVizitPL.item)) {
					EvnPLChildren.EvnVizitPL.item.forEach(function(vizit) {
						if (vizit.EvnVizitPL_id != params.formParams.EvnVizitPL_id) {
							params.OtherVizitList.push(vizit.data);

							var uslugaList = form.searchObjects(function(rec) {
								return rec.object_code == 'EvnUsluga' && rec.parent_object_value == vizit.EvnVizitPL_id;
							});
							uslugaList.forEach(function(usluga) {
								params.OtherUslugaList.push(usluga.data);
							});
						}
					});
				}
				params.callback = function() {
					form.requireCheckChange = false;
					form.loadTreeNode({
						node: node_evnpl.parentNode,
						selectById: node_evnpl.id,
						callback: function(tl,n){
							//обязательно обновить ТАП целиком в панели просмотра
							form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
						}
					});
				};
			break;

			default:
				return false;
			break;
		}
		if (!close) {
			sw.swMsg.alert(langs('Сообщение'), clsText);
            return false;
		}		
		var lastEvnVizitPLDate;
		form.viewFormDataStore.each(function(rec) {
			if (rec.object_code=='EvnVizitPL'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPL_setDate')) && rec.get('EvnVizitPL_setDate') >= lastEvnVizitPLDate))){
				lastEvnVizitPLDate = rec.get('EvnVizitPL_setDate');
			}
		});
		params.lastEvnVizitPLDate = lastEvnVizitPLDate;
		params.onHide = Ext.emptyFn;
		this.isFirstAdminCheck = false;
		this.openForm('swEmkEvnPLEditWindow','XXX_id',params,action,langs('Редактирование посещения'));
	},
	openEvnUslugaParEditWindow: function(action, el_data) {
		var form = this,
			form_title,
			params = {EvnUslugaPar_id: el_data.object_id}, 
			formParams = form.getObjectData('EvnUslugaPar',el_data.object_id),
			callback = function(data)
			{
				form.loadTreeNode({
					id: form.data.Code +'_'+ form.data.id,
					callback: function(tl,n){
						form.reloadViewForm({
							section_code: 'EvnUslugaPar',
							object_key: 'EvnUslugaPar_id',
							object_value: el_data.object_id,
							section_id: 'EvnUslugaPar_'+ el_data.object_id
						});
					}
				});
			};
		if (formParams == false)
		{
			return false;
		}
		switch ( action ) {
			case 'editProtocol':
				if (this.ARMType != 'par')
				{
					sw.swMsg.alert(langs('Сообщение'), langs('Редактировать протокол услуги может только врач параклиники!'));
					return false;
				}
				form_title = langs('Параклиническая услуга: Редактирование протокола');
				if (!formParams.accessType || formParams.accessType != 'edit')
				{
					sw.swMsg.alert(langs('Сообщение'), langs('Вы не имеете доступа к редактированию протокола услуги!'));
					return false;
				}
				params.onSaveProtocol = callback;
			break;

			case 'edit':
				form_title = langs('Параклиническая услуга: Редактирование');
				params.onSaveUsluga = callback;
				if (this.ARMType != 'par')
				{
					action = 'view';
					params.action = 'view';
					params.accessType = 'view';
				}
			break;

			default:
				return false;
		}
		params.onHide = Ext.emptyFn;
		form.openForm('swEvnUslugaParEditWindow', 'XXX_id', params ,action, form_title);
    },
	openEvnUslugaParSimpleEditWindow: function(action, el_data) {
		var form = this;
		var params = {
			action: (form.readOnly)?'view':'edit',//'edit',
			callback: function() {
				// обонвить дерево, т.к. услуга могла привязаться к другому движению/посещению
				form.reloadTree({
					callback: function() {
						// обновить правую часть
						if (form.Tree.getSelectionModel().selNode) {
							form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
						}
					}
				});
			},
			formParams: {
				EvnUslugaPar_id: el_data.object_id
			}
		};

		getWnd('swEvnUslugaParSimpleEditWindow').show(params);
    },
    openEvnCourseEditWindow: function(d) {
        var form = this;
        var data = form.getObjectData(d.object, d.object_id);
        if ( data == false ) { return false; }
        var evnsysnick = this.defineParentEvnClass().EvnClass_SysNick;
        var ev_data = form.getObjectData(evnsysnick,data.EvnPrescr_pid);
        if ( ev_data == false ) { return false; }
        sw.Promed.EvnPrescr.openEvnCourseEditWindow({
            action: 'edit'
            ,PrescriptionType_id: data.PrescriptionType_id
            ,PrescriptionType_Code: data.PrescriptionType_Code
            ,parentEvnClass_SysNick: evnsysnick
            ,UserLpuSection_id: !Ext.isEmpty(form.userMedStaffFact.LpuSection_id) ? form.userMedStaffFact.LpuSection_id : null
            ,UserLpuUnitType_id: !Ext.isEmpty(form.userMedStaffFact.LpuUnitType_id) ? form.userMedStaffFact.LpuUnitType_id : null
            ,userMedStaffFact: form.userMedStaffFact
            ,data: {
                Diag_id: ev_data.Diag_id || null,
                Evn_pid: data.EvnPrescr_pid
                ,EvnCourse_id: data.EvnCourse_id
                ,Person_id: form.Person_id
                ,PersonEvn_id: form.PersonEvn_id
                ,Server_id: form.Server_id
                ,Person_Firname: form.PersonInfoFrame.getFieldValue('Person_Firname')
                ,Person_Surname: form.PersonInfoFrame.getFieldValue('Person_Surname')
                ,Person_Secname: form.PersonInfoFrame.getFieldValue('Person_Secname')
                ,Person_Birthday: form.PersonInfoFrame.getFieldValue('Person_Birthday')
            }
            ,callbackEditWindow: function(fdata){
				form.reloadEvnPrescrList(d.object, data.PrescriptionType_id, data.EvnPrescr_pid);
            }
        });
        return true;
    },
    createPrescriptionTypeMenu: function(d,callback) {
        var form = this;
        var evnsysnick = this.defineParentEvnClass().EvnClass_SysNick;
        var data = form.getObjectData(evnsysnick, d.object_id);
        if ( data == false ) { return false; }
        var prescription_section_code = null;
        switch (evnsysnick) {
            case 'EvnSection': prescription_section_code = 'EvnPrescrPlan'; break;
            case 'EvnVizitPL': prescription_section_code = 'EvnPrescrPolka'; break;
            case 'EvnVizitPLStom': prescription_section_code = 'EvnPrescrStom'; break;
            case 'EvnPLDispDriver': prescription_section_code = 'EvnUslugaDispDop'; break;
        }
        if ( !prescription_section_code ) { return false; }
        var exceptionTypes = [];

        sw.Promed.EvnPrescr.createPrescriptionTypeMenu({
            //ownerWindow: form,
            id: 'ListMenuPrescriptionType'+evnsysnick,
            exceptionTypes: exceptionTypes,
            parentEvnClass_SysNick: evnsysnick,
            UserLpuSection_id: !Ext.isEmpty(form.userMedStaffFact.LpuSection_id) ? form.userMedStaffFact.LpuSection_id : null,
            UserLpuUnitType_id: !Ext.isEmpty(form.userMedStaffFact.LpuUnitType_id) ? form.userMedStaffFact.LpuUnitType_id : null,
            userMedStaffFact: form.userMedStaffFact,
            getParams: function(){
				if (d.EvnPLDisp_id) {
					return {
						Person_id: form.Person_id,
						PersonEvn_id: form.PersonEvn_id,
						Server_id: form.Server_id,
						Person_Firname: form.PersonInfoFrame.getFieldValue('Person_Firname'),
						Person_Surname: form.PersonInfoFrame.getFieldValue('Person_Surname'),
						Person_Secname: form.PersonInfoFrame.getFieldValue('Person_Secname'),
						Person_Age: form.PersonInfoFrame.getFieldValue('Person_Age'),
						Evn_pid: d.parent_object_id,
						DopDispInfoConsent_id: d.DopDispInfoConsent_id,
						begDate: d.setDate,
						parentEvnClass_SysNick: d.parent_object,
						userMedStaffFact: form.userMedStaffFact,
						SurveyTypeLink_lid: (d.DispClass_Code.inlist([19,26])) ? null : d.SurveyTypeLink_id,
						EvnPLDisp_id: d.parent_object_id
					};
				}
                return {
                    Person_id: form.Person_id,
                    PersonEvn_id: form.PersonEvn_id,
                    Server_id: form.Server_id,
                    Person_Firname: form.PersonInfoFrame.getFieldValue('Person_Firname'),
                    Person_Surname: form.PersonInfoFrame.getFieldValue('Person_Surname'),
                    Person_Secname: form.PersonInfoFrame.getFieldValue('Person_Secname'),
                    Person_Age: form.PersonInfoFrame.getFieldValue('Person_Age'),
                    Diag_Code: data.Diag_Code,
                    Diag_Name: data.Diag_Name,
                    Diag_id: data.Diag_id,
                    Evn_pid: d.object_id,
                    begDate: Date.parseDate(data[evnsysnick+'_setDate'], 'd.m.Y')
                };
            },
            onHideEditWindow: Ext.emptyFn,
            callbackEditWindow: function(){
                var reload_params = {
                    section_code: prescription_section_code
                    ,callback: function() {
                        var evnPrescrButton = Ext.get(prescription_section_code+'List_'+ d.object_id +'_addwithtemplate');
                        if (evnPrescrButton) {
                            if (data.CureStandart_Count && data.CureStandart_Count > 0) {
                                evnPrescrButton.setDisplayed('block');
                            } else {
                                evnPrescrButton.setDisplayed('none');
                            }
                        }
                    }
                };
                reload_params.object_key = prescription_section_code+'_id';
                reload_params.object_value = 0;
                reload_params.parent_object_key = evnsysnick+'_id';
                reload_params.parent_object_value = d.object_id;
                reload_params.section_id = prescription_section_code+'List_'+d.object_id;
                form.reloadViewForm(reload_params);
            },
            onCreate: function(menu){
				if (typeof callback == 'function') {
					callback(menu)
				} else {
					menu.show(Ext.get(prescription_section_code+'List_'+d.object_id+'_add'),'tr');
				}
            }
        });
        return true;
    },
	openDopDispInfoConsentPrintMenu: function(e, d) {
		var me = this;
		var section = 'DopDispInfoConsentList_' + d.object_id;
		var parent_object = Ext.get(section).getAttribute('parent_object');
		
		if (me.printMenu) {
			me.printMenu.destroy();
			me.printMenu = null;
		}
		
		me.d = d;
		me.printMenu = new Ext.menu.Menu();	
		
		if (parent_object == 'EvnPLDispDriver') {
			var formParams = me.getObjectData('EvnPLDispDriver', d.object_id);
			me.printMenu.add({
				text: 'Все документы',
				value: 'Все документы',
				hidden: getRegionNick() != 'perm',
				handler: function() {
					if (getPrintOptions().is_driving_commission_twosidedprint) {
						printBirt({
							'Report_FileName': 'EvnPLDispDriver_forms_dbl_pnt.rptdesign',
							'Report_Params': '&paramEvnPLDispDriver_id=' + d.object_id,
							'Report_Format': 'pdf'
						});
					} else {
						printBirt({
							'Report_FileName': 'EvnPLDispDriver_forms.rptdesign',
							'Report_Params': '&paramEvnPLDispDriver_id=' + d.object_id,
							'Report_Format': 'pdf'
						});
					}
				}
			});
			me.printMenu.add({
				text: 'Согласие на обработку перс. данных',
				value: 'Согласие на обработку перс. данных',
				hidden: getRegionNick() != 'perm',
				handler: function() {
					printBirt({
						'Report_FileName': 'EvnPLDispDriver_ConsentPersData.rptdesign',
						'Report_Params': '&paramEvnPLDispDriver_id=' + d.object_id,
						'Report_Format': 'pdf'
					});
				}
			});
			me.printMenu.add({
				text: 'Информированное добровольное согласие',
				value: 'Информированное добровольное согласие',
				hidden: getRegionNick() != 'perm',
				handler: function() {
					printBirt({
						'Report_FileName': 'EvnPLDispDriver_ConsentMedExam.rptdesign',
						'Report_Params': '&paramEvnPLDispDriver_id=' + d.object_id,
						'Report_Format': 'pdf'
					});
				}
			});
			me.printMenu.add({
				text: 'Договор на оказание платных мед. услуг',
				value: 'Договор на оказание платных мед. услуг',
				hidden: getRegionNick() != 'perm',
				handler: function() {
					printBirt({
						'Report_FileName': 'ContractForPaidMedService.rptdesign',
						'Report_Params': '&paramPerson_id=' + me.Person_id + '&paramLpu_id=' + getGlobalOptions().lpu_id,
						'Report_Format': 'pdf'
					});
				}
			});
			me.printMenu.add({
				text: 'Амбулаторная карта',
				value: 'Амбулаторная карта',
				hidden: getRegionNick() != 'perm',
				handler: function() {
					printBirt({
						'Report_FileName': 'EvnPLDispDriver_f025u.rptdesign',
						'Report_Params': '&paramPerson=' + me.Person_id + '&paramLpu=' + getGlobalOptions().lpu_id,
						'Report_Format': 'pdf'
					});
				}
			});
		} else {
			var formParams = me.getObjectData('EvnPLDispMigrant', d.object_id);
			me.printMenu.add({
				text: 'Согласие на обработку перс. данных (для мигрантов)',
				value: 'Согласие на обработку перс. данных (для мигрантов)',
				handler: function() {
					Ext.Ajax.request({
						url: '/?c=Person&m=savePersonLpuInfo',
						success: function(response){
							var response_obj = Ext.util.JSON.decode(response.responseText);
							if (response_obj && response_obj.Error_Msg ) {
								sw.swMsg.alert('Ошибка', 'Ошибка при сохранении согласия на обработку перс. данных');
								return false;
							} else if ( response_obj && !Ext.isEmpty(response_obj.PersonLpuInfo_id) ) {
								printBirt({
									'Report_FileName': 'Acceptance_PersData.rptdesign',
									'Report_Params': '&paramEvnPLDispMigrant_id=' + d.object_id,
									'Report_Format': 'pdf'
								});
							}
						}.createDelegate(this),
						params: {
							Person_id: me.Person_id,
							PersonLpuInfo_IsAgree: 2
						}
					});
				}
			});
			me.printMenu.add({
				text: 'Добровольное информированное согласие',
				value: 'Добровольное информированное согласие',
				handler: function() {
					printBirt({
						'Report_FileName': 'Acceptance_migrants.rptdesign',
						'Report_Params': '&paramEvnPLDispMigrant_id=' + d.object_id,
						'Report_Format': 'pdf'
					});
				}
			});
			me.printMenu.add({
				text: 'Информированное согласие на обследование ВИЧ',
				value: 'Информированное согласие на обследование ВИЧ',
				disabled: (formParams.IsHivAgree == 0),
				handler: function() {
					printBirt({
						'Report_FileName': 'Acceptance_HIV.rptdesign',
						'Report_Params': '&paramEvnPLDispMigrant_id=' + d.object_id,
						'Report_Format': 'pdf'
					});
				}
			});
		}
		
		var btnEl = Ext.get(d.object +'_'+d.object_id+'_printmigr');
		me.printMenu.show(btnEl);
	},
	deleteEvent: function(event, data, options) {
		options = options || {};

		if(this.groupPrint && Ext.get('printPanel')!=null){
			this.printPanel.getEl().remove();
			Ext.select('.vPrint').addClass('vPrint-none');
		}

		if ( !event.inlist(['EvnPL','EvnPLStom','EvnPS','EvnSection','EvnVizitPL',
            'EvnSectionNarrowBed','EvnDrug','EvnVizitPLStom',
            'EvnUslugaStac', 'EvnUslugaStom','BleedingCard','RepositoryObserv',
            'EvnDiagPS','EvnDiagPL','EvnDiagPLStom','EvnDiagPLStomSop',
            'EvnDirection','EvnDirectionStac','EvnDirectionStom',
            'EvnRecept','EvnReceptGeneral','EvnUsluga','AllergHistory', 'FeedingType', 'EvnMediaData',
            'BloodData','PalliatInfoConsentData',

// Сигнальная информация / Антропометрические данные:
			'PersonRace', 'PersonHeight', 'PersonWeight', 'HeadCircumference', 'ChestCircumference',

			'FreeDocument','EvnXmlData',
            'MorbusHepatitisPlan','MorbusHepatitisQueue','MorbusHepatitisVaccination','MorbusHepatitisCure',
            'MorbusHepatitisFuncConfirm','MorbusHepatitisLabConfirm','MorbusHepatitisDiag',
            'MorbusOnkoBasePersonState','MorbusOnkoBasePS','OnkoConsult','MorbusOnkoDrug','MorbusOnkoSpecTreat','MorbusOnkoLink','MorbusOnkoRefusal','MorbusOnkoSopDiag',
            'MorbusOnkoRadTer','MorbusOnkoHirTer','MorbusOnkoChemTer','MorbusOnkoGormTer','MorbusOnkoNonSpecTer',
            'MorbusCrazyBasePS','MorbusCrazyForceTreat','MorbusCrazyPersonStick','MorbusCrazyPersonSuicidalAttempt',
            'MorbusCrazyPersonSocDangerAct','MorbusCrazyBaseDrugStart','MorbusCrazyDrug',
            'MorbusCrazyDynamicsState','MorbusCrazyVizitCheck','MorbusCrazyDynamicsObserv',
            'MorbusCrazyDiag','MorbusCrazyPersonSurveyHIV', 'MorbusCrazyNdOsvid', 'MorbusCrazyDrugVolume', 'MorbusCrazyBBK',
            'MorbusVenerContact','MorbusVenerTreatSyph','MorbusVenerAccurTreat','MorbusVenerEndTreat',
            'MorbusTubDiagSop','MorbusTubDiagGeneralForm','MorbusTubConditChem','MorbusTubPrescr','EvnDirectionTub',
			'MorbusTubMDRPrescr','EvnVKExpert','MorbusTubMDRStudyResult',
			'EvnDiagNephro','MorbusNephroLab','MorbusNephroDisp','MorbusNephroDialysis','NeedConsult','ProphConsult','HeredityDiag','EvnDiagDopDispFirst',
			'EvnDiagDopDispBefore','EvnDiagDopDispAndRecomendation','EvnVKSopDiag','EvnVKOslDiag', 'EvnXmlDirectionLink','EvnReanimatPeriod']) )
		{
			return false;
		}
        var evnsysnick = this.defineParentEvnClass().EvnClass_SysNick;

		var form = this;
		if ( event.inlist(['MorbusHepatitisPlan','MorbusHepatitisQueue','MorbusHepatitisVaccination','MorbusHepatitisCure',
            'MorbusHepatitisFuncConfirm','MorbusHepatitisLabConfirm','MorbusHepatitisDiag',
            'MorbusOnkoBasePersonState','MorbusOnkoBasePS','MorbusOnkoRadTer','MorbusOnkoHirTer',
            'MorbusOnkoChemTer','MorbusOnkoGormTer','MorbusOnkoNonSpecTer', 'MorbusOnkoSopDiag', 'MorbusCrazyBasePS','MorbusCrazyForceTreat',
            'MorbusCrazyPersonStick','MorbusCrazyPersonSuicidalAttempt','MorbusCrazyPersonSocDangerAct',
            'MorbusCrazyBaseDrugStart','MorbusCrazyDrug','MorbusCrazyDynamicsState','MorbusCrazyVizitCheck',
            'MorbusCrazyDynamicsObserv','MorbusCrazyDiag','MorbusCrazyPersonSurveyHIV', 'MorbusCrazyNdOsvid',
            'MorbusCrazyDrugVolume', 'MorbusCrazyBBK', 'MorbusVenerContact','MorbusVenerTreatSyph','MorbusVenerAccurTreat',
            'MorbusVenerEndTreat','MorbusOnkoSpecTreat','MorbusOnkoLink','MorbusOnkoRefusal','MorbusOnkoDrug',
			'EvnDiagNephro','MorbusNephroLab','MorbusNephroDisp','MorbusNephroDialysis']) )
		{
			var evndata = this.getObjectData(evnsysnick, data.object_id.split('_')[0]);
			if(!evndata) {
				return false;
			}
			if(evndata.accessType == 'view') {
				return false;
			}
			data.object_id = data.object_id.split('_')[1];
		}
		
		if (event.inlist(['MorbusTubDiagSop','MorbusTubDiagGeneralForm','MorbusTubConditChem','MorbusTubPrescr','EvnDirectionTub',
		'MorbusTubMDRPrescr','MorbusTubMDRStudyResult','EvnDiagPLStom','OnkoConsult'])) {
			data.object_id = data.object_id.split('_')[1];
		}

		var formParams = form.getObjectData(data.object,data.object_id);
		//log([formParams,data,event]);
		var error = '';
		var question = '';
		var params = new Object();
		var url = '';
		var onSuccess = function() {
			form.loadNodeViewForm(form.Tree.getNodeById(form.node.id));
		};
		var callback_data = new Object();
		var evpl_child_callback = function(cdata)
		{
			form.requireCheckChange = false;
			var ev_data = form.getObjectData('EvnVizitPL', cdata.parent_id);

			var reload_params = {
				section_code: data.object,
				object_key: data.object + '_id',
				object_value: data.object_id,
				parent_object_key: 'EvnVizitPL_id',
				parent_object_value: cdata.parent_id,
				section_id: cdata.section_name + cdata.parent_id,
				callback: function() {
					if ('EvnUsluga' == event) {
						// изменение услуг может влиять на видимость специфик
						form.checkDiagSpecific('EvnVizitPL', cdata.parent_id, ev_data, 'onChangeEvnUsluga');
						form.openEmkEditWindow(false, form.Tree.getSelectionModel().selNode);// при удалении услуги перезагружаем страницу, чтобы обновить map #142282
					}
				}
			};
			//log(reload_params);			
			form.loadTreeNode({
				id: form.data.Code +'_'+ form.data.id,
				callback: function(tl,n){
					form.reloadViewForm(reload_params);
					form.isFirstAdminCheck = false;
					form.requireCheckChange = true;
				}
			});
		};
		var sa_child_callback = function(cdata)
		{
			var reload_params = {
				section_code: data.object,
				object_key: 'Person_id',
				object_value: form.Person_id,
				parent_object_key: 'Person_id',
				parent_object_value: form.Person_id,
				section_id: data.object+ '_' +form.Person_id
			};
			form.reloadViewForm(reload_params);
		};
		var anthrop_callback = function(cdata)
		{
			var reload_params = {
				section_code: 'Anthropometry',
				object_key: 'Person_id',
				object_value: form.Person_id,
				parent_object_key: 'Person_id',
				parent_object_value: form.Person_id,
				section_id: 'Anthropometry_' +form.Person_id
			};
			form.reloadViewForm(reload_params);
		};

		switch ( event ) {
			case 'EvnSectionNarrowBed':
				error = langs('При удалении профилей коек возникли ошибки');
				question = langs('Удалить профиль коек?');
				url = '/?c=EvnSectionNarrowBed&m=deleteEvnSectionNarrowBed';
				params['EvnSectionNarrowBed_id'] = data.object_id;
			break;

			case 'EvnUslugaStac':
				error = langs('При удалении услуги возникли ошибки');
				question = langs('Удалить услугу?');
				url = '/?c=EvnUsluga&m=deleteEvnUsluga';
				params['class'] = formParams.EvnClass_SysNick;
				params['id'] = data.object_id;
			break;

			case 'EvnDrug':
				error = langs('При удалении случая использования медикаментов возникли ошибки');
				question = langs('Удалить случай использования медикаментов?');
				url = '/?c=EvnDrug&m=deleteEvnDrug';
				params['EvnDrug_id'] = data.object_id;
			break;

			case 'BleedingCard':
				error = langs('При удалении карты наблюдений для оценки кровотечения возникли ошибки');
				question = langs('Удалить карту наблюдений для оценки кровотечения?');
				url = '/?c=BleedingCard&m=deleteBleedingCard';
				params['BleedingCard_id'] = data.object_id;
			break;

			case 'RepositoryObserv':
				error = langs('При удалении наблюдения за пациентом с пневмонией, подозрением на COVID-19 и COVID-19 возникли ошибки');
				question = langs('Удалить запись наблюдения за пациентом с пневмонией, подозрением на COVID-19 и COVID-19?');
				url = '/?c=RepositoryObserv&m=delete';
				params['RepositoryObserv_id'] = data.object_id;
			break;

			case 'EvnDiagPS':
				error = langs('При удалении сопутствующего диагноза возникли ошибки');
				question = langs('Удалить сопутствующий диагноз?');
				url = '/?c=EvnDiag&m=deleteEvnDiag';
				params['id'] = data.object_id;//formParams.EvnDiagPS_id
				params['class'] = 'EvnDiagPS';
			break;

			case 'EvnDiagPL':
				error = langs('При удалении сопутствующего диагноза возникли ошибки');
				question = langs('Удалить сопутствующий диагноз?');
				url = '/?c=EvnPL&m=deleteEvnDiagPL';
				callback_data.section_name = 'EvnDiagPLList_';

				params['EvnDiagPL_id'] = data.object_id;
				callback_data.parent_id = formParams.EvnVizitPL_id;
				onSuccess = evpl_child_callback;
			break;

            case 'EvnDiagPLStom':
                error = langs('При удалении заболевания возникли ошибки');
                question = langs('Удалить заболевание?');
                url = '/?c=Evn&m=deleteEvn';
                callback_data.section_name = 'EvnDiagPLStomList_';
                
                params['Evn_id'] = data.object_id;
                callback_data.parent_id = formParams.EvnDiagPLStom_pid;
                onSuccess = function(cdata) {
                    /*var reload_params = {
                        section_code: 'EvnVizitPLStom',
                        object_key: 'EvnVizitPLStom_id',
                        object_value: cdata.parent_id,
                        parent_object_key: form.data.key,
                        parent_object_value: form.data.id,
                        section_id: 'EvnVizitPLStom_head_'+ cdata.parent_id
                    };
                    form.reloadViewForm(reload_params);*/
					form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
                };
                break;

            case 'EvnDiagPLStomSop':
                error = langs('При удалении сопутствующего диагноза возникли ошибки');
                question = langs('Удалить сопутствующий диагноз?');
                url = '/?c=EvnDiag&m=deleteEvnDiag';
                callback_data.section_name = 'EvnDiagPLStomSopList_';
                params['class'] = 'EvnDiagPLStomSop';
                params['id'] = data.object_id;
                callback_data.parent_id = formParams.EvnDiagPLStomSop_pid;
                onSuccess = evpl_child_callback;
                break;

            case 'EvnUslugaStom':
                error = langs('При удалении услуги возникли ошибки');
                question = langs('Удалить услугу?');
                url = '/?c=EvnUsluga&m=deleteEvnUsluga';
                callback_data.section_name = 'EvnUslugaStomList_';
                params['class'] = 'EvnUslugaStom';
                params['id'] = data.object_id;
                callback_data.parent_id = formParams.EvnUsluga_pid;
                onSuccess = function(cdata) {
                    var reload_params = {
                        section_code: 'EvnVizitPLStom',
                        object_key: 'EvnVizitPLStom_id',
                        object_value: cdata.parent_id,
                        parent_object_key: form.data.key,
                        parent_object_value: form.data.id,
                        section_id: 'EvnVizitPLStom_head_'+ cdata.parent_id
                    };
                    form.reloadViewForm(reload_params);
                    /*
                    evpl_child_callback(cdata);
                    var toothMapPanelId,
                        toothMapPanel;
                    toothMapPanelId = 'EvnVizitPLStom_' + formParams.EvnUsluga_pid + '_ToothMapPanel';
                    if (form.input_cmp_list[toothMapPanelId]) {
                        toothMapPanel = form.input_cmp_list[toothMapPanelId];
                    }
                    if (toothMapPanel && toothMapPanel.isLoaded) {
                        toothMapPanel.doReloadViewData();
                    }*/
                };
                break;

            case 'EvnDirection':
            case 'EvnDirectionStac':
            case 'EvnDirectionStom':
				var dirdata, dirrec, key_parts, reload_params = {};
				var parent_node_id;
				if (data.object.inlist(['EvnPrescrPlan', 'EvnPrescrPolka', 'EvnPrescrStom'])) {
					dirdata = form.getObjectDataWithFindBy(function(record,id){
						if(record.object_code == data.object && record.get(data.object +'_id') == data.object_id) {
							dirrec = record;
							return true;
						}
						return false;
					});
					if (!dirdata) return false;
					params['TimetableGraf_ident'] = dirdata.timetable +'_'+ dirdata.timetable_id;
					key_parts = params['TimetableGraf_ident'].split('_');
					parent_node_id = (dirrec.parent_object_code || evnsysnick)+'_'+dirdata.EvnPrescr_pid;//dirrec.get('timetable_pid')
					onSuccess = function(){
						form.reloadEvnPrescrList(data.object, dirdata.PrescriptionType_id, dirdata.EvnPrescr_pid);
						form.loadTreeNode({id: parent_node_id});
					};
				} else {
					params['TimetableGraf_ident'] = data.object_id;
					key_parts = data.object_id.split('_');
					dirdata = form.getObjectDataWithFindBy(function(record,id){
						if (typeof record.object_code == "string" && record.object_code.inlist(['EvnDirection', 'EvnDirectionStac', 'EvnDirectionStom']) && record.get('timetable') == key_parts[0] && record.get('timetable_id') == key_parts[1]) {
							dirrec = record;
							return true;
						}
						return false;
					});
					if (!dirrec) {
						log(['dirrec undefined', event, data]);
						return false;
					}
					reload_params.object_value = dirrec.object_value;
					reload_params.section_code = event;
					reload_params.object_key = dirrec.object_key;
					reload_params.parent_object_key = dirrec.parent_object_key || evnsysnick +'_id';
					reload_params.parent_object_value = dirrec.get('timetable_pid');
					reload_params.section_id = event + 'List' + '_'+reload_params.parent_object_value;
					parent_node_id = (dirrec.parent_object_code || reload_params.parent_object_key.split('_')[0])+'_'+reload_params.parent_object_value;
					onSuccess = function(){
						form.reloadViewForm(reload_params);
						form.loadTreeNode({id: parent_node_id});

						if (dirdata.EvnPrescrMse_id) {
							var node = form.Tree.getNodeById('EvnPrescrMse' +'_'+ dirdata.EvnPrescrMse_id);
							if (node) {
								node.parentNode.removeChild(node);
							}
						}
					};
				}
				if (
					form.EvnDirectionData &&
					form.EvnDirectionData.EvnDirection_id &&
					form.EvnDirectionData.EvnDirection_id == dirdata.EvnDirection_id
				) {
					sw.swMsg.alert(langs('Ошибка'), 'Данное направление невозможно отменить, т.к. оно уже используется');
					return false;
				}
				return sw.Promed.Direction.cancel({
					cancelType: 'cancel',
					ownerWindow: form,
					EvnDirection_id: dirdata.EvnDirection_id,
					DirType_Code: dirdata.DirType_Code,
					TimetableGraf_id: ('TimetableGraf' == key_parts[0]) ? key_parts[1] : null,// === ('TimetableGraf' == dirdata.timetable) ? dirdata.timetable_id : null,
					TimetableMedService_id: ('TimetableMedService' == key_parts[0]) ? key_parts[1] : null,// === ('TimetableMedService' == dirdata.timetable) ? dirdata.timetable_id : null,
					TimetableStac_id: ('TimetableStac' == key_parts[0]) ? key_parts[1] : null,// === ('TimetableStac' == dirdata.timetable) ? dirdata.timetable_id : null,
					EvnQueue_id: ('EvnQueue' == key_parts[0]) ? key_parts[1] : null,// === ('EvnQueue' == dirdata.timetable) ? dirdata.timetable_id : null,
					allowRedirect: !data.object.inlist(['EvnPrescrPlan', 'EvnPrescrPolka', 'EvnPrescrStom']),
					userMedStaffFact: form.userMedStaffFact,
					personData: {
						Person_id: form.Person_id,
						Server_id: form.Server_id,
						PersonEvn_id: form.PersonEvn_id,
						Person_IsDead: form.PersonInfoFrame.getFieldValue('Person_IsDead'),
						Person_Firname: form.PersonInfoFrame.getFieldValue('Person_Firname'),
						Person_Secname: form.PersonInfoFrame.getFieldValue('Person_Secname'),
						Person_Surname: form.PersonInfoFrame.getFieldValue('Person_Surname'),
						Person_Birthday: form.PersonInfoFrame.getFieldValue('Person_Birthday')
					},
					callback: onSuccess
				});
			break;

			case 'EvnRecept':

				var recept_data = form.getObjectDataWithFindBy(function(record,id){
					if(record.object_code == data.object && record.get(data.object +'_id') == data.object_id) {
						return true;
					}
					return false;
				});
				var ReceptType_Code = recept_data.ReceptType_Code;
				var EvnRecept_IsSigned = recept_data.EvnRecept_IsSigned;
				var EvnRecept_IsPrinted = recept_data.EvnRecept_IsPrinted;
				var DeleteType = 0; //Пометка к удалению
				if (isSuperAdmin() || isLpuAdmin() || isUserGroup('ChiefLLO')) {
					DeleteType = 1;
				}
				else
				{
					if (ReceptType_Code == 2 && EvnRecept_IsSigned != 2 && EvnRecept_IsPrinted != 2) { //Если тип рецепта - "На листе" и рецепт не подписан
						DeleteType = 1; //Удаление
					}
				}
				sw.swMsg.show({
					buttons: Ext.Msg.YESNO,
					fn: function(buttonId, text, obj) {
						if ( buttonId == 'yes' ) {
							getWnd('swEvnReceptDeleteWindow').show({
								callback: onSuccess,
								EvnRecept_id: data.object_id,
								DeleteType: DeleteType,
								onHide: function() {}
							});
						}
					},
					icon: Ext.MessageBox.QUESTION,
					msg: langs('Удалить рецепт?'),
					title: langs('Вопрос')
				});
				return true;
			break;

			case 'EvnUsluga':
				error = langs('При удалении услуги возникли ошибки');
				question = langs('Удалить услугу?');
				url = '/?c=EvnUsluga&m=deleteEvnUsluga';
				callback_data.section_name = 'EvnUslugaList_';
				
				params['class'] = formParams.EvnClass_SysNick;
				params['id'] = data.object_id;
	   			callback_data.parent_id = formParams.EvnUsluga_pid;
				onSuccess = evpl_child_callback;
			break;

			case 'AllergHistory':
				if (form.checkAccessEdit(formParams,langs('Вы можете удалить только свою запись!')) == false || !formParams.PersonAllergicReaction_id)
				{
					return false;
				}
				error = langs('При удалении записи о случае аллергической реакции возникли ошибки');
				question = langs('Удалить запись о случае аллергической реакции?');
				url = '/?c=PersonAllergicReaction&m=deletePersonAllergicReaction';
				params['PersonAllergicReaction_id'] = formParams.PersonAllergicReaction_id;
				onSuccess = sa_child_callback;
			break;

			case 'FeedingType':
				if (form.checkAccessEdit(formParams, langs('Вы можете удалить только свою запись!')) == false ||
					!formParams.FeedingTypeAge_id) {
					return false;
				}
				error = langs('При удалении записи о способе вскармливания возникли ошибки');
				question = langs('Удалить запись о способе вскармливания?');
				url = '/?c=PersonFeedingType&m=deletePersonFeedingType';
				params['FeedingTypeAge_id'] = formParams.FeedingTypeAge_id;
				onSuccess = sa_child_callback;
				break;

			case 'BloodData':
				if (form.checkAccessEdit(formParams,langs('Вы можете удалить только свою запись!')) == false || !formParams.PersonBloodGroup_id)
				{
					return false;
				}
				error = langs('При удалении записи об определении группы крови');
				question = langs('Удалить запись об определении группы крови?');
				url = '/?c=PersonBloodGroup&m=deletePersonBloodGroup';
				params['PersonBloodGroup_id'] = formParams.PersonBloodGroup_id;
				onSuccess = sa_child_callback;
			break;

			case 'PalliatInfoConsentData':
				if (form.checkAccessEdit(formParams,langs('Вы можете удалить только свою запись!')) == false || !formParams.PalliatInfoConsent_id)
				{
					return false;
				}
				error = langs('При удалении записи');
				question = langs('Удалить запись?');
				url = '/?c=PalliatInfoConsent&m=deletePalliatInfoConsent';
				params['PalliatInfoConsent_id'] = formParams.PalliatInfoConsent_id;
				onSuccess = sa_child_callback;
			break;

			case 'PersonWeight':
				if (form.checkAccessEdit(formParams,langs('Вы можете удалить только свою запись!')) == false || !formParams.PersonWeight_id)
				{
					return false;
				}
				error = langs('При удалении записи об измерении массы тела');
				question = langs('Удалить запись об измерении массы тела?');
				url = '/?c=PersonWeight&m=deletePersonWeight';
				params['PersonWeight_id'] = formParams.PersonWeight_id;
				onSuccess = anthrop_callback;
			break;

			case 'PersonHeight':
				if (form.checkAccessEdit(formParams,langs('Вы можете удалить только свою запись!')) == false || !formParams.PersonHeight_id)
				{
					return false;
				}
				error = langs('При удалении записи об измерении роста');
				question = langs('Удалить запись об измерении роста?');
				url = '/?c=PersonHeight&m=deletePersonHeight';
				params['PersonHeight_id'] = formParams.PersonHeight_id;
				onSuccess = anthrop_callback;
			break;

			case 'PersonRace':
				if (form.checkAccessEdit(formParams,langs('Вы можете удалить только свою запись!')) == false || !formParams.PersonRace_id)
				{
					return false;
				}
				error = langs('Ошибка при удалении записи');
				question = langs('Удалить запись?');
				url = '/?c=PersonRace&m=delete';
				params['PersonRace_id'] = formParams.PersonRace_id;
				onSuccess = anthrop_callback;
				break;

			// #182939 Окружность головы:
			case 'HeadCircumference':
				if (form.checkAccessEdit(
						formParams,
						langs('vyi_mojete_udalit_tolko_svoyu_zapis')) == false ||
						!formParams.HeadCircumference_id)
					return false;

				error = langs('При удалении записи об измерении окружности головы');
				question = langs('Удалить запись об измерении окружности головы?');
				url = '/?c=HeadCircumference&m=deleteHeadCircumference';
				params['HeadCircumference_id'] = formParams.HeadCircumference_id;
				onSuccess = anthrop_callback;
				break;

			// #182939 Окружность груди:
			case 'ChestCircumference':
				if (form.checkAccessEdit(
						formParams,
						langs('vyi_mojete_udalit_tolko_svoyu_zapis')) == false ||
						!formParams.ChestCircumference_id)
					return false;

				error = langs('При удалении записи об измерении окружности груди');
				question = langs('Удалить запись об измерении окружности груди?');
				url = '/?c=ChestCircumference&m=deleteChestCircumference';
				params['ChestCircumference_id'] = formParams.ChestCircumference_id;
				onSuccess = anthrop_callback;
				break;

			case 'EvnVKExpert':
				error = langs('При удалении врача-эксперта');
				question = langs('Удалить запись о враче-эксперте?');
				url = '/?c=ClinExWork&m=deleteEvnVKExpert';
				params['EvnVKExpert_id'] = formParams.EvnVKExpert_id;
				onSuccess = function(){
					var reload_params = {
						section_code: 'EvnVK',
						object_key: 'EvnVK_id',
						object_value: formParams.EvnVK_id,
						section_id: 'EvnVK_'+ formParams.EvnVK_id
					};
					form.reloadViewForm(reload_params);
				};
			break;

			case 'EvnMediaData':
				error = langs('При удалении файла возникли ошибки');
				question = langs('Удалить файл?');
				url = '/?c=EvnMediaFiles&m=deleteFile';
				params['id'] = data.object_id;
				onSuccess = function(){
					var reload_params = {
						section_code: 'EvnMediaData',
						object_key: 'EvnMediaData_id',
						object_value: 111222333,
						parent_object_key: 'Evn_id',
						parent_object_value: formParams.EvnMediaData_pid,
						section_id: 'EvnMediaDataList_'+ formParams.EvnMediaData_pid
					};
					form.reloadViewForm(reload_params);
				};
			break;
			
            case 'FreeDocument':
				error = langs('При удалении документа возникли ошибки');
				question = langs('Удалить документ?');
				url = '/?c=EvnXml&m=destroy';
				params['EvnXml_id'] = data.object_id;
                /*
                это не работает, так и не понял почему
                onSuccess = function(){
                    var reload_params = {
                        section_code: 'FreeDocumentList',
                        object_key: 'FreeDocument_pid',
                        object_value: formParams.FreeDocument_pid,
                        parent_object_key: 'FreeDocument_pid',
                        parent_object_value: formParams.FreeDocument_pid,
                        section_id: 'FreeDocumentList_'+ formParams.FreeDocument_pid
                    };
                    form.reloadViewForm(reload_params);
                };*/
                onSuccess = function() {
                    form.loadNodeViewForm(form.Tree.getNodeById(form.node.id), function() {
                        var s_id = data.object +'List_'+ formParams.FreeDocument_pid;
                        if (Ext.fly(s_id)){
                            document.getElementById(s_id).scrollIntoView();
                            document.getElementById('main-center-panel').scrollIntoView();
                        }
                    });
                };
                break;

			case 'EvnXmlData':
				error = langs('При удалении протокола осмотра возникли ошибки');
				question = langs('Удалить протокол осмотра?');
				url = '/?c=EvnXml&m=destroy';
				params['Evn_id'] = data.object_id;
				var xmldata = form.getObjectDataWithFindBy(function(record,id){//record.XmlType_id && record.XmlType_id == 3 && 
					if(record.object_code == 'EvnXml' && record.parent_object_value && record.object_value && record.parent_object_value==data.object_id) {
						params['EvnXml_id'] = record.object_value;
						return true;
					}
					return false;
				});

			break;
			
			case 'EvnVizitPL':
				error = langs('При удалении посещения пациентом поликлиники возникли ошибки');
				question = langs('Удалить посещение пациентом поликлиники?');
				var evnPlNodeId = 'EvnPL_'+data.parent_object_id,
					node_evnpl = form.Tree.getNodeById(evnPlNodeId);
				var count = node_evnpl.childNodes.length;
                params['Evn_id'] = data.object_id;
				if (count == 1) {
					params['Evn_id'] = data.parent_object_id;
					question += langs(' Будет удален весь случай АПЛ.');
				}
                url = '/?c=Evn&m=deleteFromArm';
                params['MedStaffFact_id'] = form.userMedStaffFact.MedStaffFact_id;
				onSuccess = function() {
					form.clearNodeViewForm();
					form.requireCheckChange = false;
					form.loadTreeNode({
						node: node_evnpl.parentNode,
						selectById: evnPlNodeId,
						callback: function(tl,n){				
							//обязательно обновить ТАП целиком в панели просмотра
							if (form.Tree.getSelectionModel().selNode.id == evnPlNodeId) {
								form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
							}
						}
					});
				};
			break;

			case 'EvnVizitPLStom':
				error = langs('При удалении посещения стоматологии пациентом поликлиники возникли ошибки');
				question = langs('Удалить посещение стоматологии пациентом поликлиники?');
				var evnPlNodeId = 'EvnPLStom_'+data.parent_object_id,
					node_evnpl = form.Tree.getNodeById(evnPlNodeId);
				var count = node_evnpl.childNodes.length;
				params['Evn_id'] = data.object_id;
				if (count == 1) {
					params['Evn_id'] = data.parent_object_id;
					question += langs(' Будет удален весь случай АПЛ.');
				}
				url = '/?c=Evn&m=deleteFromArm';
				params['MedStaffFact_id'] = form.userMedStaffFact.MedStaffFact_id;
				onSuccess = function(){
					form.clearNodeViewForm();
					form.requireCheckChange = false;
					form.loadTreeNode({
						node: node_evnpl.parentNode,
						selectById: evnPlNodeId,
						callback: function(tl,n){				
							//обязательно обновить ТАП целиком в панели просмотра
							if (form.Tree.getSelectionModel().selNode.id == evnPlNodeId) {
								form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
							}
						}
					});
				};
			break;

            case 'EvnPL':
                error = langs('При удалении талона амбулаторного пациента возникли ошибки');
                question = langs('Удалить талон амбулаторного пациента?');
                url = '/?c=Evn&m=deleteFromArm';
                params['Evn_id'] = data.object_id;
                params['MedStaffFact_id'] = form.userMedStaffFact.MedStaffFact_id;
				var node_evnpl = form.Tree.getNodeById('EvnPL_'+data.object_id);
                onSuccess = function(){

                    // Принудительно ставим при удалении случая
                    form.processLoad = false;

					if (typeof form.onDeleteEvnPL == 'function') {
						form.onDeleteEvnPL();
					}
                    if (form.data && form.data.Code == data.object && form.data.id == data.object_id)
                        form.clearNodeViewForm();

					if (node_evnpl.parentNode && node_evnpl.parentNode.id == 'root') {
						form.reloadTree();
					}
					else {
						form.loadTreeNode({
							node: node_evnpl.parentNode
						});
					}
                };
                break;

            case 'EvnPLStom':
                error = langs('При удалении случая стоматологического лечения возникли ошибки');
                question = langs('Удалить случай стоматологического лечения?');
                url = '/?c=Evn&m=deleteFromArm';
                params['Evn_id'] = data.object_id;
                params['MedStaffFact_id'] = form.userMedStaffFact.MedStaffFact_id;
				var node_evnpl = form.Tree.getNodeById('EvnPLStom_'+data.object_id);
                onSuccess = function(){
                    if (form.data && form.data.Code == data.object && form.data.id == data.object_id)
                        form.clearNodeViewForm();
					form.loadTreeNode({
						node: node_evnpl.parentNode
					});
                };
                break;



            case 'EvnPS':
				error = langs('При удалении талона КВС возникли ошибки');
				question = langs('Удалить КВС?');
				url = '/?c=Evn&m=deleteFromArm';
				params['Evn_id'] = data.object_id;
                params['MedStaffFact_id'] = form.userMedStaffFact.MedStaffFact_id;
				var node_evnps = form.Tree.getNodeById('EvnPS_'+data.object_id);
				onSuccess = function(){
					if (form.data && form.data.Code == data.object && form.data.id == data.object_id)
						form.clearNodeViewForm();
					form.loadTreeNode({
						node: node_evnps.parentNode
					});
				};
			break;

			case 'NeedConsult':
			case 'ProphConsult':
			case 'HeredityDiag':
				error = langs('При удалении возникли ошибки');
				question = 'Удалить?';
				onSuccess = function(){
					var reload_params = {
						section_code: data.object,
						object_key: data.object +'_id',
						object_value: data.object_id,
						parent_object_key: 'EvnPLDisp_id',
						parent_object_value: formParams.EvnPLDisp_id,
						section_id: data.object +'List_'+ formParams.EvnPLDisp_id
					};
					form.reloadViewForm(reload_params);
				};
				url = '/?c=Utils&m=ObjectRecordDelete';
				params['object'] = data.object;
				params['obj_isEvn'] = 'true';
				params['id'] = data.object_id;
				break;

			case 'EvnDiagDopDispFirst':
			case 'EvnDiagDopDispBefore':
			case 'EvnDiagDopDispAndRecomendation':
				error = langs('При удалении возникли ошибки');
				question = 'Удалить?';
				onSuccess = function(){
					var reload_params = {
						section_code: data.object,
						object_key: 'EvnDiagDopDisp_id',
						object_value: data.object_id,
						parent_object_key: 'EvnDiagDopDisp_pid',
						parent_object_value: formParams.EvnDiagDopDisp_pid,
						section_id: data.object +'List_'+ formParams.EvnDiagDopDisp_pid
					};
					form.reloadViewForm(reload_params);
				};
				url = '/?c=Utils&m=ObjectRecordDelete';
				params['object'] = 'EvnDiagDopDisp';
				params['obj_isEvn'] = 'true';
				params['id'] = data.object_id;
				break;

			case 'EvnDiagNephro':
			case 'MorbusNephroLab':
			case 'MorbusNephroDisp':
			case 'MorbusNephroDialysis':
				if (formParams.accessType == 'view') {
					return false;
				}
				error = langs('При удалении возникли ошибки');
				question = langs('Удалить');
				onSuccess = function(){
					var reload_params = {
						section_code: data.object,
						object_key: data.object +'_id',
						object_value: data.object_id,
						parent_object_key: 'MorbusNephro_id',
						parent_object_value: formParams.MorbusNephro_id,
						param_name: 'MorbusNephro_pid',
						param_value: formParams.MorbusNephro_pid || null,
						section_id: data.object +'List_'+ formParams.MorbusNephro_pid +'_'+ formParams.MorbusNephro_id
					};
					form.reloadViewForm(reload_params);
				};
				url = '/?c=Utils&m=ObjectRecordDelete';
				if (data.object == 'EvnDiagNephro') {
					params['object'] = 'EvnDiag';
				} else {
					params['object'] = 'MorbusNephroRate';
				}
				params['obj_isEvn'] = (data.object == 'EvnDiagNephro') ? 'true' : 'false';
				params['id'] = data.object_id;
				break;
			
			case 'MorbusHepatitisPlan':
			case 'MorbusHepatitisQueue':
			case 'MorbusHepatitisVaccination':
			case 'MorbusHepatitisCure':
			case 'MorbusHepatitisFuncConfirm':
			case 'MorbusHepatitisLabConfirm':
			case 'MorbusHepatitisDiag':
				error = langs('При удалении возникли ошибки');
				question = langs('Удалить');
				onSuccess = function(){
					var reload_params = {
						section_code: data.object,
						object_key: data.object +'_id',
						object_value: data.object_id,
						parent_object_key: 'MorbusHepatitis_id',
						parent_object_value: formParams.MorbusHepatitis_id,
						param_name: 'MorbusHepatitis_pid',
						param_value: formParams.MorbusHepatitis_pid || null,
						section_id: data.object +'List_'+ formParams.MorbusHepatitis_pid +'_'+ formParams.MorbusHepatitis_id
					};
					form.reloadViewForm(reload_params);
				};
				url = '/?c=Utils&m=ObjectRecordDelete';
				params['object'] = data.object;
				params['obj_isEvn'] = 'false';
				params['id'] = data.object_id;
			break;

			case 'MorbusOnkoBasePersonState':
			case 'MorbusOnkoBasePS':
			case 'MorbusOnkoSpecTreat':
			case 'MorbusOnkoLink':
			case 'MorbusOnkoRefusal':
			case 'MorbusOnkoDrug':
			case 'MorbusOnkoSopDiag':
			case 'MorbusOnkoRadTer':
			case 'MorbusOnkoHirTer':
			case 'MorbusOnkoChemTer':
			case 'MorbusOnkoGormTer':
			case 'MorbusOnkoNonSpecTer':
			case 'OnkoConsult':
				error = langs('При удалении возникли ошибки');
				question = langs('Удалить?');
				onSuccess = function(){
					var reload_params = {
						section_code: data.object,
						object_key: data.object +'_id',
						object_value: data.object_id,
						parent_object_key: 'Morbus_id',
						parent_object_value: formParams.Morbus_id,
						param_name: 'MorbusOnko_pid',
						param_value: formParams.MorbusOnko_pid || null,
						MorbusOnkoVizitPLDop_id: formParams.MorbusOnkoVizitPLDop_id || null,
						MorbusOnkoLeave_id: formParams.MorbusOnkoLeave_id || null,
						section_id: data.object +'List_'+ formParams.MorbusOnko_pid +'_'+ formParams.Morbus_id
					};
					
					form.reloadViewForm(reload_params);
				};
				url = '/?c=Utils&m=ObjectRecordDelete';
				params['obj_isEvn'] = 'false';
				switch(data.object) {
                    case 'MorbusOnkoBasePersonState':
                        params['MorbusOnkoBasePersonState_id'] = data.object_id;
                        url = '/?c=MorbusOnkoBasePersonState&m=destroy';
                        break;
                    case 'MorbusOnkoBasePS':params['object'] = 'MorbusOnkoBasePS';break;
                    case 'MorbusOnkoLink':params['object'] = 'MorbusOnkoLink';break;
					case 'MorbusOnkoSpecTreat':
						url = '/?c=MorbusOnkoSpecifics&m=deleteMorbusOnkoSpecTreat';
						params['object'] = 'MorbusOnkoSpecTreat'; 
						break;
					case 'MorbusOnkoRefusal':
						url = '/?c=MorbusOnkoSpecifics&m=deleteMorbusOnkoRefusal';
						params['object'] = 'MorbusOnkoRefusal'; 
						break;
					case 'MorbusOnkoDrug':
						params['MorbusOnkoDrug_id'] = data.object_id;
						url = '/?c=MorbusOnkoDrug&m=destroy';
						break;
					case 'MorbusOnkoSopDiag':
						url = '/?c=MorbusOnkoSpecifics&m=deleteMorbusOnkoSopDiag';
						params['object'] = 'MorbusOnkoSopDiag'; 
						break;
					case 'MorbusOnkoRadTer':params['object'] = 'EvnUslugaOnkoBeam';params['obj_isEvn'] = 'true';break;
					case 'MorbusOnkoHirTer':params['object'] = 'EvnUslugaOnkoSurg';params['obj_isEvn'] = 'true';break;
					case 'MorbusOnkoChemTer':params['object'] = 'EvnUslugaOnkoChem';params['obj_isEvn'] = 'true';break;
					case 'MorbusOnkoGormTer':params['object'] = 'EvnUslugaOnkoGormun';params['obj_isEvn'] = 'true';break;
					case 'MorbusOnkoNonSpecTer':params['object'] = 'EvnUslugaOnkoNonSpec';params['obj_isEvn'] = 'true';break;
					case 'OnkoConsult':params['object'] = 'OnkoConsult';break;
				}
				params['id'] = data.object_id;
			break;
			
			case 'MorbusCrazyForceTreat':
			case 'MorbusCrazyPersonStick':
			case 'MorbusCrazyPersonSuicidalAttempt':
			case 'MorbusCrazyPersonSocDangerAct':
			case 'MorbusCrazyBaseDrugStart':
			case 'MorbusCrazyDrug':
			case 'MorbusCrazyDrugVolume':
			case 'MorbusCrazyBBK':
			case 'MorbusCrazyBasePS':
			case 'MorbusCrazyDynamicsState':
			case 'MorbusCrazyVizitCheck':
			case 'MorbusCrazyDynamicsObserv':
			case 'MorbusCrazyDiag':
			case 'MorbusCrazyPersonSurveyHIV':
			case 'MorbusCrazyNdOsvid':
			case 'MorbusCrazyPersonInvalid':
				error = langs('При удалении возникли ошибки');
				question = langs('Удалить');
                // должно быть также как в swMorbusCrazyWindow
				if (false && event.inlist(['MorbusCrazyForceTreat', 'MorbusCrazyBasePS', 'MorbusCrazyDrugVolume', 'MorbusCrazyBBK', 'MorbusCrazyPersonSurveyHIV'])) {
					onSuccess = function(){
						var reload_params = {
							section_code: 'MorbusCrazy',
							object_key: 'MorbusCrazy_id',
							object_value: 0,
							parent_object_key: 'MorbusCrazy_pid',
							parent_object_value: formParams.MorbusCrazy_pid || null,
							accessType: (evndata.accessType == 'edit')?1:0,
							section_id: 'MorbusCrazy_'+ formParams.MorbusCrazy_pid +'_'+ formParams.MorbusCrazy_id
						};
						this.reloadViewForm(reload_params);
					}.createDelegate(this);
				} else {
					onSuccess = function(){
						var reload_params = {
							section_code: data.object,
							object_key: data.object +'_id',
							object_value: formParams.MorbusCrazy_id,
							parent_object_key: 'MorbusCrazy_id',
							parent_object_value: formParams.MorbusCrazy_id,
							accessType: (evndata.accessType == 'edit')?1:0,
							param_name: 'MorbusCrazy_pid',
							param_value: formParams.MorbusCrazy_pid || null,
							section_id: data.object +'List_'+ formParams.MorbusCrazy_pid +'_'+ formParams.MorbusCrazy_id
						};
						this.reloadViewForm(reload_params);
					}.createDelegate(this);
				}
				url = '/?c=Utils&m=ObjectRecordDelete';
				params['object'] = data.object;
				params['obj_isEvn'] = 'false';
				params['id'] = data.object_id;
			break;
			case 'MorbusVenerContact':
			case 'MorbusVenerTreatSyph':
			case 'MorbusVenerAccurTreat':
			case 'MorbusVenerEndTreat':
				error = langs('При удалении возникли ошибки');
				question = langs('Удалить');
				onSuccess = function(){
					var reload_params = {
						section_code: data.object,
						object_key: data.object +'_id',
						object_value: formParams.MorbusVener_id,
						parent_object_key: 'MorbusVener_id',
						parent_object_value: formParams.MorbusVener_id,
						accessType: (evndata.accessType == 'edit')?1:0,
						param_name: 'MorbusVener_pid',
						param_value: formParams.MorbusVener_pid || null,
						section_id: data.object +'List_'+ formParams.MorbusVener_pid +'_'+ formParams.MorbusVener_id
					};
					this.reloadViewForm(reload_params);
				}.createDelegate(this);
				url = '/?c=Utils&m=ObjectRecordDelete';
				params['object'] = data.object;
				params['obj_isEvn'] = 'false';
				params['id'] = data.object_id;
				break;

			case 'MorbusTubDiagSop':
			case 'MorbusTubDiagGeneralForm':
			case 'MorbusTubConditChem':
			case 'MorbusTubPrescr':
			case 'EvnDirectionTub':
			case 'MorbusTubMDRPrescr':
			case 'MorbusTubMDRStudyResult':
				error = langs('При удалении возникли ошибки');
				question = langs('Удалить');
				onSuccess = function(){
					var reload_params = {
						section_code: event,
						object_key: event +'_id',
						object_value: data.object_id,
						parent_object_key: 'MorbusTub_id',
						parent_object_value: formParams.MorbusTub_id,
						accessType: 1,
						param_name: 'MorbusTub_pid',
						param_value: formParams.MorbusTub_pid || null,
						section_id: event +'List_'+ formParams.MorbusTub_pid +'_'+ formParams.MorbusTub_id
					};
					this.reloadViewForm(reload_params);
				}.createDelegate(this);
				if ('MorbusTubMDRStudyResult' == data.object) {
					url = '/?c=MorbusTub&m=deleteMorbusTubMDRStudyResult';
					params['MorbusTubMDRStudyResult_id'] = data.object_id;
				} else {
					url = '/?c=Utils&m=ObjectRecordDelete';
					params['obj_isEvn'] = (event == 'EvnDirectionTub')?'true':'false';
					params['id'] = data.object_id;
					params['object'] = data.object;
					if ('MorbusTubMDRPrescr' == data.object) {
						params['object'] = 'MorbusTubPrescr';
					} else if ('MorbusTubDiagGeneralForm' == data.object) {
						params['object'] = 'TubDiagGeneralForm';
					}
				}
				break;
			case 'EvnXmlDirectionLink':
				url = '/?c=EvnXml&m=deleteEvnXmlDirectionLink';
				error = langs('При удалении документа возникли ошибки');
				question = langs('Удалить документ?');


				var EvnXmlDirectionLinkData = form.getObjectDataWithFindBy(function(record,id){
					if (typeof record.object_code == "string" && record.object_code.inlist(['EvnXmlDirectionLink']) && record.get('EvnXmlDirectionLink_id') == data.object_id) {
						return true;
					}
					return false;
				});

				params['EvnXmlDirectionLink_id'] = data.object_id;

				onSuccess = function() {
					form.loadNodeViewForm(form.Tree.getNodeById(form.node.id), function() {
						var s_id = 'EvnXmlDirectionLinkList_'+ EvnXmlDirectionLinkData.EvnDirection_id;
						if (Ext.fly(s_id)){
							document.getElementById(s_id).scrollIntoView();
							document.getElementById('main-center-panel').scrollIntoView();
						}
					});
				};
				break;
				
			case 'EvnReanimatPeriod':
				error = langs('При удалении Реанимационного Периода возникли ошибки!');
				question = langs('Вы действительно хотите удалить реанимационный период?');
				url = '/?c=EvnReanimatPeriod&m=deleteEvnReanimatPeriod';
				params['EvnReanimatPeriod_id'] = data.object_id;
			break;
				
		}

		var alert_codes = {
			'701': {
				buttons: Ext.Msg.YESNO,
				fn: function(buttonId, scope, params) {
					if (buttonId == 'yes') {
						options.ignoreDoc = true;
						scope.deleteEvent(event, data, options);
					}
				}
			},
			'702': {
				buttons: Ext.Msg.YESNO,
				fn: function(buttonId, scope, params) {
					if (buttonId == 'yes') {
						options.ignoreEvnDrug = true;
						scope.deleteEvent(event, data, options);
					}
				}
			},
			'703': {
				buttons: Ext.Msg.YESNO,
				fn: function(buttonId, scope, params) {
					if (buttonId == 'yes') {
						options.ignoreCheckEvnUslugaChange = true;
						scope.deleteEvent(event, data, options);
					}
				}
			},
			'808': {
				buttons: Ext.Msg.YESNO,
				fn: function(buttonId, scope, params) {
					if (buttonId == 'yes') {
						Ext.Ajax.request({
							params: params,
							url: '/?c=HomeVisit&m=RevertHomeVizitStatus',
							success: function(response) {
								var resp = Ext.util.JSON.decode(response.responseText);
								if (Ext.isEmpty(resp.Error_Msg)) {
									options.ignoreHomeVizit = true;
									scope.deleteEvent(event, data, options);
								} else {
									sw.swMsg.alert(langs('Ошибка'), resp.Error_Msg);
								}
							}
						});
					}
				}
			},
			'809': {
				buttons: Ext.Msg.YESNO,
				fn: function(buttonId, scope, params) {
					if (buttonId == 'yes') {
						Ext.Ajax.request({
							params: params,
							url: '/?c=HomeVisit&m=RevertHomeVizitStatusesTAP',
							callback: function(opts, success, response) {
								if (success) {
									var resp = Ext.util.JSON.decode(response.responseText);
									if (Ext.isEmpty(resp.Error_Msg)) {
										options.ignoreHomeVizit = true;
										scope.deleteEvent(event, data, options);
									} else {
										sw.swMsg.alert(langs('Ошибка'), resp.Error_Msg);
									}
								} else {
									sw.swMsg.alert(langs('Ошибка'), 'При измененении статусов вызовов на дом возникли ошибки');
								}
							}
						});
					}
				}
			}
		};

		if (options.ignoreDoc) {
			params.ignoreDoc = options.ignoreDoc;
		}

		if (options.ignoreEvnDrug) {
			params.ignoreEvnDrug = options.ignoreEvnDrug;
		}

		if (options.ignoreCheckEvnUslugaChange) {
			params.ignoreCheckEvnUslugaChange = options.ignoreCheckEvnUslugaChange;
		}

		if (options.ignoreHomeVizit) {
			params.ignoreHomeVizit = options.ignoreHomeVizit;
		}
		var doDelete = function() {
			var loadMask = new Ext.LoadMask(this.getEl(), {msg: "Удаление записи..."});
			loadMask.show();

			Ext.Ajax.request({
				failure: function(response, options) {
					loadMask.hide();
					sw.swMsg.alert(langs('Ошибка'), error);
				},
				params: params,
				success: function(response, options) {
					loadMask.hide();
					var response_obj = Ext.util.JSON.decode(response.responseText);
					if ( response_obj.success == false ) {
						if (response_obj.Alert_Msg) {
							var a_params = alert_codes[response_obj.Alert_Code];
							sw.swMsg.show({
								buttons: a_params.buttons,
								fn: function(buttonId) {
									a_params.fn(buttonId, this, params);
								}.createDelegate(this),
								msg: response_obj.Alert_Msg,
								icon: Ext.MessageBox.QUESTION,
								title: langs('Вопрос')
							});
						} else {
							sw.swMsg.alert(langs('Ошибка'), response_obj.Error_Msg ? response_obj.Error_Msg : error);
						}
					} else {
						onSuccess(callback_data);
						form.onDeleteEvent(true, callback_data);
					}
				}.createDelegate(this),
				url: url
			});
		}.createDelegate(this);

		if (options.ignoreQuestion) {
			doDelete();
		} else {
			sw.swMsg.show({
				buttons: Ext.Msg.YESNO,
				fn: function(buttonId, text, obj) {
					if ( buttonId == 'yes' ) {
						options.ignoreQuestion = true;
						doDelete();
					}
				}.createDelegate(this),
				icon: Ext.MessageBox.QUESTION,
				msg: question,
				title: langs('Вопрос')
			});
		}

		return true;
		
	},
	openEvnDrugEditWindow: function(action, el_data) {
		var formParams = new Object();
		
		var evnType = this.defineParentEvnClass().EvnClass_SysNick;
		
		if ( action == 'add' ) {
			formParams.EvnDrug_id = 0;
			formParams.EvnDrug_pid = el_data.object_id;
		}
		else {
			formParams = this.getObjectData(el_data.object,el_data.object_id);
			if (formParams == false)
			{
				return false;
			}
		}
		var es_data = this.getObjectData(evnType,formParams.EvnDrug_pid);
		
		if (es_data == false)
		{
			return false;
		}
		if(!es_data.MedPersonal_Fio&&es_data.MedPersonal_Fin){
			es_data.MedPersonal_Fio = es_data.MedPersonal_Fin
		}
		formParams.PersonEvn_id = es_data.PersonEvn_id;
		formParams.Person_id = es_data.Person_id;
		formParams.Server_id = es_data.Server_id;
		var my_params = new Object({
			callback: function(data) {
				this.Tree.getNodeById(this.data.Code +'_'+ this.data.id).select();
				this.loadNodeViewForm(this.Tree.getNodeById(this.node.id));
			}.createDelegate(this),
			formParams: formParams,
			parentEvnComboData: [{
				Evn_id: es_data[evnType+'_id'],
				Evn_Name: es_data[evnType+'_setDate']+' / '+ es_data.LpuSection_Name +' / '+ es_data.MedPersonal_Fio,
				Evn_setDate: Date.parseDate(es_data[evnType+'_setDate'], 'd.m.Y'),
				Evn_disDate: Date.parseDate(((es_data[evnType+'_id']==es_data[evnType+'_pid'])?es_data[evnType+'_leaveDate']:es_data[evnType+'_disDate']), 'd.m.Y'),
				MedStaffFact_id:  es_data.MedStaffFact_id,
				Lpu_id:  es_data.Lpu_id,
				LpuSection_id:  es_data.LpuSection_id,
				MedPersonal_id:  es_data.MedPersonal_id
			}]
		});
		my_params.onHide = Ext.emptyFn;
		if(evnType.inlist(['EvnVizitPL','EvnVizitPLStom'])){
			my_params.type='PL'
			formParams.PersonEvn_id = this.PersonEvn_id;
		formParams.Person_id = this.Person_id;
		formParams.Server_id = this.Server_id;
		}
		if(action == 'edit'){
			if(!this.openedEvnDrug){
				this.openedEvnDrug = el_data.object_id;
			} else {
				if(this.openedEvnDrug == el_data.object_id){
					this.openedEvnDrug = '';
					return true;						
				}
			}
		}
		this.openForm(getEvnDrugEditWindowName(),'XXX_id',my_params,action,langs('Строка документа'));
	},
	openEvnUslugaStacEditWindow: function(action, el_data) {
		if ( action != 'add' && action != 'edit' && action != 'view' ) {
			return false;
		}

		var formParams = new Object();
		if ( action == 'add' ) {
			formParams.EvnUsluga_id = 0;
            formParams.EvnUsluga_pid = el_data.object_id;
            formParams.EvnPrescr_id = this.EvnPrescr_id;
			formParams.EvnDirection_id = this.EvnDirectionData ? this.EvnDirectionData.EvnDirection_id : null;
            formParams.MedStaffFact_id = this.userMedStaffFact.MedStaffFact_id;
            formParams.LpuSection_uid = this.userMedStaffFact.LpuSection_id;
            formParams.MedPersonal_id = this.userMedStaffFact.MedPersonal_id;
		}
		else {
			formParams = this.getObjectData(el_data.object,el_data.object_id);
			if (formParams == false)
			{
				return false;
			}
		}
		var es_data = this.getObjectData('EvnSection',formParams.EvnUsluga_pid);
		if (es_data == false)
		{
			return false;
		}
		formParams.PersonEvn_id = es_data.PersonEvn_id;
		formParams.Person_id = es_data.Person_id;
		formParams.Server_id = es_data.Server_id;
		
		formParams.VizitType_SysNick = this.EvnDirectionData ? this.EvnDirectionData.VizitType_SysNick : null;
		
		var params = new Object();

		params.action = action;
		params.callback = function(data) {
			this.Tree.getNodeById(this.data.Code +'_'+ this.data.id).select();
			this.loadNodeViewForm(this.Tree.getNodeById(this.node.id));
            if (typeof this.onSaveEvnDocument == 'function') {
                this.onSaveEvnDocument((formParams.EvnUsluga_id == 0), data, 'EvnUsluga');
            }
		}.createDelegate(this);
		params.onHide = Ext.emptyFn;
		params.parentClass = 'EvnPS';//(es_data.EvnSection_id==es_data.EvnSection_pid)?'EvnPS':'EvnSection';
		if (es_data && es_data.LpuUnitType_Code) {
			params.LpuUnitType_Code = es_data.LpuUnitType_Code;
		}

		// Если в КВС в поле “Вид оплаты” выбрано “Местный бюджет”, то при отказе в приемном отделении при добавлении услуг должны быть доступны только услуги связанные с группой 351
		if (getRegionNick() == 'ekb' && es_data.PayType_SysNick == 'bud' && !Ext.isEmpty(es_data.PrehospWaifRefuseCause_id)) {
			params.only351Group = true;
		}

		// данные для ParentEvnCombo
		params.parentEvnComboData = [{
			Evn_id: es_data.EvnSection_id,
			Evn_Name: es_data.EvnSection_setDate+' / '+ es_data.LpuSection_Name +' / '+ es_data.MedPersonal_Fio,
			Evn_setDate: Date.parseDate(es_data.EvnSection_setDate, 'd.m.Y'),
			Evn_setTime: es_data.EvnSection_setTime,
			MedStaffFact_id:  es_data.MedStaffFact_id,
			LpuSection_id:  es_data.LpuSection_id,
			LpuSectionProfile_id: es_data.LpuSectionProfile_id,
			MedPersonal_id:  es_data.MedPersonal_id,
			Diag_id: es_data.Diag_id,
			IsPriem: es_data.EvnSection_IsPriem
		}];
		switch ( action ) {
			case 'add':
				formParams.PayType_id = es_data.PayType_id;
				formParams.Diag_id = es_data.Diag_id;
				params.formParams = formParams;
				params.Person_id = es_data.Person_id;
                sw.Promed.UslugaClass.createMenu({
                    callback: function(menu){
                        menu.show(Ext.get('EvnUslugaStacList_'+es_data.EvnSection_id+'_add'),'tr');
                    },
                    onSelect: function(code){
                        sw.Promed.UslugaClass.onSelectCode(
                            code,
                            params,
                            es_data.EvnSection_pid,
                            function() { }
                        );
                    },
                    Evn_pid: es_data.EvnSection_id,
                    parentEvent: params.parentClass
                });
			    break;

			case 'edit':
			case 'view':
				// Открываем форму редактирования услуги (в зависимости от EvnClass_SysNick)
				switch ( formParams.EvnClass_SysNick ) {
					case 'EvnUslugaCommon':
						params.formParams = {
							EvnUslugaCommon_id: formParams.EvnUsluga_id,
							VizitType_SysNick: formParams.VizitType_SysNick
						};
						this.openForm('swEvnUslugaEditWindow','XXX_id',params,action);
					    break;

					case 'EvnUslugaOper':
						params.formParams = {
							EvnUslugaOper_id: formParams.EvnUsluga_id,
							MedStaffFact_id:es_data.MedStaffFact_id
						};
						this.openForm('swEvnUslugaOperEditWindow','XXX_id',params,action);
					    break;

                    case 'EvnUslugaPar':
                        // должен происходить переход на услугу в дереве ЭМК
                        function loadEvnUslugaParNode(evnRootNode, win) {
                            var params = {
                                parent_node: evnRootNode,
                                last_child: false,
                                node_attr_name: 'id',
                                node_attr_value: 'EvnUslugaPar_'+formParams.EvnUsluga_id
                            };
                            win.searchNodeInTreeAndLoadViewForm(params);
                        }
                        var evnRootNode = this.Tree.getNodeById(this.node.id);
                        if (evnRootNode && 'EvnPS' == this.node.attributes.object) {
                            evnRootNode = evnRootNode.findChild('id','EvnSection_'+formParams.EvnUsluga_pid);
                        }
                        if (evnRootNode) {
                            if (evnRootNode.isExpanded()) {
                                loadEvnUslugaParNode(evnRootNode, this);
                            } else {
                                var scope = this;
                                evnRootNode.expand(false,false,function(){
                                    loadEvnUslugaParNode(evnRootNode, scope);
                                });
                            }
                        }
                        break;
					default:
						return false;
					break;
				}
			    break;
		}
        return true;
	},
	openEvnSectionNarrowBedEditWindow: function(action, el_data) {
		if (action != 'add' && action != 'edit' && action != 'view') {
			return false;
		}

		var formParams = new Object();
		if ( action == 'add' ) {
			formParams.EvnSectionNarrowBed_pid = el_data.object_id;
		}
		else {
			formParams = this.getObjectData(el_data.object,el_data.object_id);
			if (formParams == false)
			{
				return false;
			}
		}
		var es_data = this.getObjectData('EvnSection',formParams.EvnSectionNarrowBed_pid);
		if (es_data == false)
		{
			return false;
		}

		var params = new Object();
		params.action = action;
		params.callback = function(data) {
			if (!data || !data.evnSectionNarrowBedData) {
				return false;
			}
			this.Tree.getNodeById(this.data.Code +'_'+ this.data.id).select();
			this.loadNodeViewForm(this.Tree.getNodeById(this.node.id));
		}.createDelegate(this);
		params.LpuSection_pid = es_data.LpuSection_id;
		params.maxDate = Date.parseDate(es_data.EvnSection_disDate, 'd.m.Y');
		params.minDate = Date.parseDate(es_data.EvnSection_setDate, 'd.m.Y');

		if (action == 'add') {
			formParams.EvnSectionNarrowBed_id = 0;
			formParams.EvnSectionNarrowBed_pid = es_data.EvnSection_id;
			formParams.EvnSectionNarrowBed_setDate = Date.parseDate(es_data.EvnSection_setDate, 'd.m.Y');
			formParams.EvnSectionNarrowBed_setTime = es_data.EvnSection_setTime;
			formParams.PersonEvn_id = es_data.PersonEvn_id;
			formParams.Person_id = es_data.Person_id;
			formParams.Server_id = es_data.Server_id;
		}

		params.formParams = formParams;
		params.onHide = Ext.emptyFn;
		this.openForm('swEvnSectionNarrowBedEditWindow','XXX_id',params,action,langs('Редактирование профилей коек'));
	},
    openEvnDiagPLStomSopEditWindow: function(action, el_data) {
        var form = this;
        var my_params = {
            action: action,
            formParams: {
                Person_id: form.Person_id,
                PersonEvn_id: form.PersonEvn_id,
                Server_id: form.Server_id
            },
            onHide: Ext.emptyFn
        };
        if ( action == 'add' ) {
            my_params.formParams.EvnDiagPLStomSop_id = 0;
            my_params.formParams.EvnDiagPLStomSop_pid = el_data.object_id;
        } else {
            my_params.formParams = form.getObjectData(el_data.object,el_data.object_id);
            if (my_params.formParams == false) {
                return false;
            }
            if ( my_params.formParams.accessType != 'edit' ) {
                my_params.action = 'view';
            }
        }
        var vizitData = form.getObjectData('EvnVizitPLStom',my_params.formParams.EvnDiagPLStomSop_pid);
        if (vizitData == false) {
            // log('Data for EvnVizitPLStom_'+ EvnVizitPLStom_id +' NOT found!');
            return false;
        }

        my_params.callback = function(data) {
            if ( !data || !data.evnDiagPLStomSopData ) {
                return false;
            }
            // log(data.EvnUslugaStomData);
            var reload_params = {
                section_code: 'EvnDiagPLStomSop',
                object_key: 'EvnDiagPLStomSop_id',
                object_value: data.evnDiagPLStomSopData[0].EvnDiagPLStomSop_id,
                parent_object_key: 'EvnVizitPLStom_id',
                parent_object_value: my_params.formParams.EvnDiagPLStomSop_pid,
                section_id: 'EvnDiagPLStomSopList_'+ my_params.formParams.EvnDiagPLStomSop_pid
            };
            form.reloadViewForm(reload_params);
            return true;
        };
        my_params.formParams.EvnDiagPLStomSop_setDate = Date.parseDate(vizitData.EvnVizitPLStom_setDate, 'd.m.Y');

        form.openForm('swEvnDiagPLStomSopEditWindow', 'XXX_id', my_params, my_params.action,langs('Редактирование диагноза'));
        return true;
    },
	openEvnDiagPLStomEditWindow: function(action, el_data) {
		var form = this;

		var object_id = (el_data.object_id.split('_').length > 1) ? el_data.object_id.split('_')[1] : el_data.object_id;

		var my_params = {
			action: action,
			formParams: {
				Person_id: form.Person_id,
				PersonEvn_id: form.PersonEvn_id,
				Server_id: form.Server_id
			},
			onHide: Ext.emptyFn
		};
		if ( action == 'add' ) {
			var nodeData = this.getObjectData('EvnPLStom', form.data.id);

			if (nodeData.EvnPLStom_IsFinish == 2) {
				sw.swMsg.alert(langs('Сообщение'), langs('Случай стоматологического лечения закрыт!'));
				return false;
			}

			my_params.formParams.EvnDiagPLStom_id = 0;
			my_params.formParams.EvnDiagPLStom_pid = object_id;
		} else {
			my_params.formParams = form.getObjectData(el_data.object,object_id);
			if (my_params.formParams == false) {
				return false;
			}
			if ( my_params.formParams.accessType != 'edit' ) {
				my_params.action = 'view';
			}
		}

		// берем посещение то, откуда открывают заболевание.
		var EvnVizitPLStom_id = (el_data.object_id.split('_').length > 1) ? el_data.object_id.split('_')[0] : my_params.formParams.EvnDiagPLStom_pid;
		var currentVizitData = form.getObjectData('EvnVizitPLStom', EvnVizitPLStom_id);
		var parentVizitData = form.getObjectData('EvnVizitPLStom', my_params.formParams.EvnDiagPLStom_pid);

		if (currentVizitData == false || parentVizitData == false) {
			return false;
		}

		if ( getRegionNick() == 'penza' && parentVizitData.PayType_SysNick == form.getPayTypeSysNickOMS() ) {
			// В ЭМК при добавлении заболевания (нажатии на кнопку +), если не заполнено поле «Место обращения», то открывается всплывающее сообщение, блокирующее
			// форму: «Заполните поле «Место обращения», открытие формы «Заболевание» не выполняется
			if ( Ext.isEmpty(currentVizitData.ServiceType_id) ) {
				sw.swMsg.alert(langs('Ошибка'), langs('Заполните поле «Место обращения»'));
				return false;
			}

			// При попытке открыть заболевание, которое добавлено не в текущем посещении, если выполняются условия:
			// - Заболевание содержит услуги, для которых значение атрибута «Вид услуги»=«03» (учитывается правило определения значения атрибута «Вид услуги»,
			//   описанное в ТЗ выполнение стоматологической услуги);
			// - Дата посещения, из которого создано заболевание, отлична от даты текущего посещения,
			// то открывается сообщение: «Выбранное заболевание содержит услуги по неотложной помощи, в этом случае для внесения изменений в заболевание дата
			// посещения должна совпадать с датой начала заболевания». Кнопка ОК. При нажатии на кнопку сообщение закрывается, открытие заболевания не выполняется.
			if (
				action == 'edit'
				&& EvnVizitPLStom_id != my_params.formParams.EvnDiagPLStom_pid
				&& currentVizitData.EvnVizitPLStom_setDate != parentVizitData.EvnVizitPLStom_setDate
				&& (parentVizitData.ServiceType_SysNick == 'neotl' || parentVizitData.ServiceType_SysNick == 'polnmp')
				&& !Ext.isEmpty(my_params.formParams.hasUslugaType03)
				&& Date.parseDate(my_params.formParams.EvnDiagPLStom_setDate, 'd.m.Y') >= new Date(2018, 7, 1)
			) {
				sw.swMsg.alert(langs('Ошибка'), langs('Выбранное заболевание содержит услуги по неотложной помощи, в этом случае для внесения изменений в заболевание дата посещения должна совпадать с датой начала заболевания'));
				return false;
			}
		}

		my_params.evnVizitData = {
			EvnVizitPLStom_id: currentVizitData.EvnVizitPLStom_id,
			EvnVizitPLStom_setDate: currentVizitData.EvnVizitPLStom_setDate,
			LpuSection_id: currentVizitData.LpuSection_id,
			LpuSectionProfile_id: currentVizitData.LpuSectionProfile_id,
			MedStaffFact_id: currentVizitData.MedStaffFact_id,
			MedPersonal_id: currentVizitData.MedPersonal_id,
			PayType_id: currentVizitData.PayType_id,
			MesEkb_id: currentVizitData.Mes_id
		};

		my_params.callback = function(data) {
			if ( !data || !data.evnDiagPLStomData ) {
				return false;
			}
			form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);

			/*var reload_params = {
				section_code: 'EvnDiagPLStom',
				object_key: 'EvnDiagPLStom_id',
				object_value: data.evnDiagPLStomData[0].EvnDiagPLStom_id,
				parent_object_key: 'EvnVizitPLStom_id',
				parent_object_value: my_params.formParams.EvnDiagPLStom_pid,
				section_id: 'EvnDiagPLStomList_'+ my_params.formParams.EvnDiagPLStom_pid
			};
			form.reloadViewForm(reload_params);

			var reload_params = {
				section_code: 'EvnVizitPLStom',
				object_key: 'EvnVizitPLStom_id',
				object_value: my_params.formParams.EvnDiagPLStom_pid,
				parent_object_key: form.data.key,
				parent_object_value: form.data.id,
				section_id: 'EvnVizitPLStom_head_'+ my_params.formParams.EvnDiagPLStom_pid
			};
			form.reloadViewForm(reload_params);*/
			return true;
		};
		my_params.formMode = 'morbus';
		my_params.formParams.EvnDiagPLStom_rid = currentVizitData.EvnVizitPLStom_pid;
		my_params.formParams.EvnDiagPLStom_setDate = Date.parseDate(currentVizitData.EvnVizitPLStom_setDate, 'd.m.Y');

		form.openForm('swEvnDiagPLStomEditWindow', 'XXX_id', my_params, my_params.action,langs('Редактирование заболевания'));
		return true;
	},
    openParodontogramEditWindow: function(el_data) {
        var form = this,
            my_params = {
                action: 'edit',
                formParams: {
                    Person_id: form.Person_id
                },
                callback: Ext.emptyFn,
                onHide: Ext.emptyFn
            },
            toothMapPanelId,
            toothMapPanel;
        var evn_usluga_data = form.getObjectData(el_data.object,el_data.object_id);
        if (evn_usluga_data == false) {
            return false;
        }
        toothMapPanelId = 'EvnVizitPLStom_' + evn_usluga_data.EvnUsluga_pid + '_ToothMapPanel';
        if (form.input_cmp_list[toothMapPanelId]) {
            toothMapPanel = form.input_cmp_list[toothMapPanelId];
        }
        if (toothMapPanel && toothMapPanel.isLoaded) {
            my_params.callback = function() {
                toothMapPanel.doReloadViewData();
            };
        }
        my_params.formParams.EvnUslugaStom_id = evn_usluga_data.EvnUsluga_id;
        my_params.formParams.EvnUslugaStom_setDate = evn_usluga_data.EvnUsluga_setDate;
        /*if ( evn_usluga_data.EvnUslugaStom_hasParodontogram == '0' ) {
            my_params.action = 'add';
        }*/
        if ( evn_usluga_data.accessType == 'view' ) {
            my_params.action = 'view';
        }
        form.openForm('swParodontogramEditWindow','XXX_id', my_params, my_params.action);
    },
    openEvnUslugaStomEditWindow: function(action, el_data) {
        var form = this;
        var my_params = {
            action: action,
            formParams: {
                Person_id: form.Person_id,
                PersonEvn_id: form.PersonEvn_id,
                Server_id: form.Server_id
            },
            onHide: Ext.emptyFn
        },
            toothMapPanelId,
            toothMapPanel,
            EvnVizitPLStom_id;

		var rootRec = form.viewFormDataStore.getById(form.data.Code + '_'+ form.data.id);
		if (rootRec && rootRec.object_code == 'EvnPLStom' && !Ext.isEmpty(rootRec.get(rootRec.object_code + '_setDate')) && getValidDT(rootRec.get(rootRec.object_code + '_setDate'), '') >= sw.Promed.EvnPL.getEvnPLStomNewBegDate()) {
			my_params.formMode = 'morbus';
		}

        if ( action.inlist(['add', 'addByMes', 'addParodontogram'])) {
			var visitData = form.getObjectData('EvnVizitPLStom', el_data.object_id);
            EvnVizitPLStom_id = el_data.object_id;
            my_params.formParams.EvnUslugaStom_id = 0;
            my_params.formParams.EvnUslugaStom_pid = el_data.object_id;
            my_params.formParams.EvnUslugaStom_rid = visitData.EvnVizitPLStom_pid;
            if ('addParodontogram' == action) {
				// клик по кнопке "Новая" в разделе "Пародонтограмма"
				// в форме можно выбрать услугу только с атрибутом "пародонтограмма"
                my_params.action = 'add';
                my_params.isAddParodontogram = true;
            }
        } else {
            var evn_usluga_data = form.getObjectData(el_data.object,el_data.object_id);
            if (evn_usluga_data == false) {
                return false;
            }
            EvnVizitPLStom_id = evn_usluga_data.EvnUsluga_pid;
            if ( evn_usluga_data.accessType != 'edit' ) {
                my_params.action = 'view';
            }
            my_params.formParams = {
                EvnUslugaStom_id: evn_usluga_data.EvnUsluga_id
            };
        }
        var vizitData = form.getObjectData('EvnVizitPLStom',EvnVizitPLStom_id);
        if (vizitData == false) {
            // log('Data for EvnVizitPLStom_'+ EvnVizitPLStom_id +' NOT found!');
            return false;
        }
		// в форме нельзя добавить или выбрать услугу с атрибутом "пародонтограмма"
		my_params.hasParodontogram = (vizitData.EvnUslugaParodontogram_id > 0 
			&& vizitData.EvnVizitPLStom_id == vizitData.EvnUslugaParodontogram_pid);
		
        toothMapPanelId = 'EvnVizitPLStom_' + EvnVizitPLStom_id + '_ToothMapPanel';
        if (form.input_cmp_list[toothMapPanelId]) {
            toothMapPanel = form.input_cmp_list[toothMapPanelId];
        }
        my_params.callback = function(data) {
            if ( !data || !data.evnUslugaData ) {
                return false;
            }
            var reload_params = {
                section_code: 'EvnVizitPLStom',
                object_key: 'EvnVizitPLStom_id',
                object_value: EvnVizitPLStom_id,
                parent_object_key: form.data.key,
                parent_object_value: form.data.id,
                section_id: 'EvnVizitPLStom_head_'+ EvnVizitPLStom_id
            };
            form.reloadViewForm(reload_params);
            if (toothMapPanel && toothMapPanel.isLoaded) {
                toothMapPanel.doReloadViewData();
            }
            return true;
        };
        my_params.Mes_id = vizitData.Mes_id || null;
        my_params.formParams.LpuSection_uid = form.userMedStaffFact.LpuSection_id;
        my_params.formParams.MedStaffFact_id = form.userMedStaffFact.MedStaffFact_id;
        my_params.formParams.PayType_id = vizitData.PayType_id || null;
        my_params.formParams.EvnUslugaStom_setDate = Date.parseDate(vizitData.EvnVizitPLStom_setDate, 'd.m.Y');
        if (my_params.action == 'addByMes') {
            form.openForm('swEvnUslugaStomByMesInputWindow','XXX_id',my_params,my_params.action,langs('Выполнение стоматологических услуг по МЭС'));
        } else {
            form.openForm('swEvnUslugaStomEditWindow','XXX_id',my_params,my_params.action,langs('Редактирование услуги'));
        }
        return true;
    },
    openEvnDiagPSEditWindow: function(action, el_data) {
		var formParams = new Object();
		if ( action == 'add' ) {
			formParams.EvnDiagPS_id = 0;
			formParams.EvnDiagPS_pid = el_data.object_id;
			formParams.DiagSetClass_id = 3;
		}
		else {
			formParams = this.getObjectData(el_data.object,el_data.object_id);
			if (formParams == false)
			{
				return false;
			}
		}
		var es_data = this.getObjectData('EvnSection',formParams.EvnDiagPS_pid);
		if (es_data == false)
		{
			return false;
		}
		formParams.PersonEvn_id = es_data.PersonEvn_id;
		formParams.Person_id = es_data.Person_id;
		formParams.Server_id = es_data.Server_id;
		formParams.EvnDiagPS_setDate = es_data.EvnSection_setDate;
		formParams.EvnDiagPS_setTime = es_data.EvnSection_setTime;
		var my_params = new Object({
			callback: function(data) {
				if ( !data || !data.evnDiagPSData || !data.evnDiagPSData[0] || !data.evnDiagPSData[0].EvnDiagPS_id)
				{
					return false;
				}
				this.Tree.getNodeById(this.data.Code +'_'+ this.data.id).select();
				this.loadNodeViewForm(this.Tree.getNodeById(this.node.id));
				checkSuicideRegistry({
					'Evn_id': es_data.EvnSection_pid,
					'EvnClass_SysNick': 'EvnPS'
				});
			}.createDelegate(this),
			formParams: formParams,
			type: (es_data.EvnSection_id==es_data.EvnSection_pid || es_data.EvnSection_IsPriem == 2)?'recep':'sect'
		});
		my_params.onHide = Ext.emptyFn;
		this.openForm('swEvnDiagPSEditWindow','XXX_id',my_params,action,langs('Редактирование диагноза'));
	},
	openBleedingCardEditWindow: function(action, el_data) {
		var formParams = {};
		if ( action == 'add' ) {
			formParams.BleedingCard_id = 0;
			formParams.EvnSection_id = el_data.object_id;
		}
		else {
			formParams = this.getObjectData(el_data.object, el_data.object_id);
			if (formParams == false) {
				return false;
			}
		}

		var my_params = new Object({
			callback: function(data) {
				if ( !data || !data.bleedingCardData || !data.bleedingCardData.BleedingCard_id) {
					return false;
				}
				this.Tree.getNodeById(this.data.Code +'_'+ this.data.id).select();
				this.loadNodeViewForm(this.Tree.getNodeById(this.node.id));
			}.createDelegate(this),
			formParams: formParams
		});
		my_params.onHide = Ext.emptyFn;
		this.openForm('swBleedingCardEditWindow', 'XXX_id', my_params, action, langs('Редактирование карты наблюдений для оценки кровотечения'));
	},
	openRepositoryObservEditWindow: function(action, el_data) {
		var form = this;
		
		var formParams = {
			Person_id: form.Person_id
		};
		if ( action == 'add' ) {
			formParams.Evn_id = el_data.object_id;
			formParams.RepositoryObserv_id = 0;
			formParams.MedStaffFact_id = form.userMedStaffFact.MedStaffFact_id;

			var es_data = form.getObjectData('EvnSection', el_data.object_id)
			if (es_data && es_data.EvnSection_pid) {
				if (es_data.Diag_Code && es_data.Diag_Code.inlist(['U07.1','U07.2'])) {
					formParams.CovidType_id = 3;
				} else {
					var eps_data = form.getObjectData('EvnPS', es_data.EvnSection_pid);
					if (eps_data && eps_data.CovidType_id) {
						formParams.CovidType_id = eps_data.CovidType_id;
					}
				}
			}
		}
		else {
			formParams = this.getObjectData(el_data.object, el_data.object_id);
			if (formParams == false) {
				return false;
			}
			if (formParams.PersonOnkoProfile_id) {
				formParams.RepositoryObserv_id = formParams.PersonOnkoProfile_id; // чтобы открывать наблюдения из опросов
				if (!el_data.useCase) {
					// определяем тип открываемого наблюдения
					form.getLoadMask(langs('Получение данных о наблюдении')).show();
					Ext.Ajax.request({
						url: '/?c=RepositoryObserv&m=getUseCase',
						params: {
							RepositoryObserv_id: formParams.RepositoryObserv_id
						},
						callback: function(options, success, response) {
							form.getLoadMask().hide();
							if (success) {
								var response_obj = Ext.util.JSON.decode(response.responseText);
								if (response_obj.useCase) {
									el_data.useCase = response_obj.useCase;
									form.openRepositoryObservEditWindow(action, el_data);
								}
							}
						}
					});
					return;
				}
			}
		}

		formParams.callback = function(data) {
			this.Tree.getNodeById(this.data.Code +'_'+ this.data.id).select();
			this.loadNodeViewForm(this.Tree.getNodeById(this.node.id));
		}.createDelegate(this);
		formParams.onHide = Ext.emptyFn;
		formParams.useCase = el_data.useCase;
		formParams.parentWin = form;

		this.openForm('swRepositoryObservEditWindow', 'XXX_id', formParams, action, langs('Редактирование наблюдения за пациентом с пневмонией, подозрением на COVID-19 и COVID-19'));
	},
	
	checkAndOpenRepositoryObserv: function (evn_id) {
		var win = this;
		var params = {
			action: 'add',
			useCase: 'evnvizitpl',
			Evn_id: evn_id,
			MedStaffFact_id: win.userMedStaffFact.MedStaffFact_id,
			Person_id: win.Person_id,
			parentWin: win
		};
		
		var plop = getPolkaOptions();
		if (!plop || !plop.arm_vizit_create || plop.arm_vizit_create == 1) {
			return false; // при ручном создании ТАП проверка на самой форме
		}
		
		Ext.Ajax.request({
			callback: function(cbOptions, success, response) {
				if (success) {
					var response_obj = Ext.util.JSON.decode(response.responseText);
					if (response_obj[0] && response_obj[0].RepositoryObserv_id) {
						params.hasPrev = true;
						params.PlaceArrival_id = response_obj[0].PlaceArrival_id;
						params.KLCountry_id = response_obj[0].KLCountry_id;
						params.Region_id = response_obj[0].Region_id;
						params.RepositoryObserv_arrivalDate = response_obj[0].RepositoryObserv_arrivalDate;
						params.TransportMeans_id = response_obj[0].TransportMeans_id;
						params.RepositoryObserv_TransportDesc = response_obj[0].RepositoryObserv_TransportDesc;
						params.RepositoryObserv_TransportPlace = response_obj[0].RepositoryObserv_TransportPlace;
						params.RepositoryObserv_TransportRoute = response_obj[0].RepositoryObserv_TransportRoute;
						params.RepositoryObserv_FlightNumber = response_obj[0].RepositoryObserv_FlightNumber;
						params.RepositoryObserv_IsCVIContact = response_obj[0].RepositoryObserv_IsCVIContact;
						params.RepositoryObesrv_contactDate = response_obj[0].RepositoryObesrv_contactDate || null;
						params.RepositoryObserv_Height = response_obj[0].RepositoryObserv_Height;
						params.RepositoryObserv_Weight = response_obj[0].RepositoryObserv_Weight;
						getWnd('swRepositoryObservEditWindow').show(params);
					} else {
						getWnd('swRepositoryObservEditWindow').show(params);
					}
				}
			},
			params: {
				Person_id: win.Person_id
			},
			url: '/?c=RepositoryObserv&m=findByPerson'
		});
	},
	
	openEvnDiagPLEditWindow: function(action, el_data) {
		var form = this;
		var formParams = new Object();
		if ( action == 'add' ) {
			formParams.EvnDiagPL_id = 0;
			formParams.EvnVizitPL_id = el_data.object_id;
			formParams.Person_id = form.Person_id;
			formParams.PersonEvn_id = form.PersonEvn_id;
			formParams.Server_id = form.Server_id;
		}
		else {
			formParams = form.getObjectData(el_data.object,el_data.object_id);
			if (formParams == false)
			{
				// log('Data for '+ el_data.object +'_'+ el_data.object_id +' NOT found!');
				return false;
			}
		}
		var vizitData = form.getObjectData('EvnVizitPL',formParams.EvnVizitPL_id);
		if (vizitData == false)
		{
			// log('Data for EvnVizitPL_'+ formParams.EvnVizitPL_id +' NOT found!');
			return false;
		}
		var my_params = new Object({
			EvnDiagPL_id: formParams.EvnDiagPL_id,
			callback: function(data) {
				if ( !data || !data.evnDiagPLData || !data.evnDiagPLData[0] || !data.evnDiagPLData[0].EvnDiagPL_id)
				{
					return false;
				}
				form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
				checkSuicideRegistry({
					'Evn_id': vizitData.EvnVizitPL_pid,
					'EvnClass_SysNick': 'EvnPL'
				});
			}.createDelegate(this),
			formParams: formParams,
			vizitComboData: [{
				EvnVizitPL_id: vizitData.EvnVizitPL_id,
				LpuSection_id: vizitData.LpuSection_id,
				MedPersonal_id: vizitData.MedPersonal_id,
				EvnVizitPL_Name: vizitData.EvnVizitPL_setDate + ' / ' + vizitData.LpuSection_Name + ' / ' + vizitData.MedPersonal_Fin,
				EvnVizitPL_setDate: Date.parseDate(vizitData.EvnVizitPL_setDate, 'd.m.Y')
			}]
		});
		my_params.onHide = Ext.emptyFn;
		form.openForm('swEvnDiagPLEditWindow','XXX_id',my_params,action,langs('Редактирование диагноза'));
    },
    openEvnUslugaEditWindowByNode: function(node) {
        //log(node);
        var form = this, params = {
            formParams: {}
        }, win, pk, alias;
        switch (node.attributes.Parent_EvnClass_SysNick)
        {
            case 'EvnSection':
            case 'EvnPS':
                params.parentClass = 'EvnPS';
                break;
            default:
                params.parentClass = 'EvnVizit';
                break;
        }
        /*
        // данные для ParentEvnCombo
        @todo сделать загрузку комбика по пиду в форме,
         т .к. нет смысла тянуть эти данные для каждой услуги в дереве
        params.parentEvnComboData = [{
            Evn_id: es_data.EvnSection_id,
            Evn_Name: es_data.EvnSection_setDate+' / '+ es_data.LpuSection_Name +' / '+ es_data.MedPersonal_Fio,
            Evn_setDate: Date.parseDate(es_data.EvnSection_setDate, 'd.m.Y'),
            Evn_setTime: es_data.EvnSection_setTime,
            MedStaffFact_id:  es_data.MedStaffFact_id,
            LpuSection_id:  es_data.LpuSection_id,
            MedPersonal_id:  es_data.MedPersonal_id
        }];
        */
        switch (node.attributes.EvnClass_SysNick)
        {
            case 'EvnUslugaCommon':
                win = 'swEvnUslugaEditWindow';
                pk = 'EvnUslugaCommon_id';
                alias = 'EvnUsluga_id';
                break;
            case 'EvnUslugaOper':
                win = 'swEvnUslugaOperEditWindow';
                alias = pk = 'EvnUslugaOper_id';
                break;
            case 'EvnUslugaStom':
                win = 'swEvnUslugaStomEditWindow';
                alias = pk = 'EvnUslugaStom_id';
                break;
            case 'EvnUslugaTelemed':
                win = 'swEvnUslugaTelemedEditWindow';
                alias = pk = 'EvnUslugaTelemed_id';
                params.formParams.Person_id = form.Person_id;
                break;
        }
        if (win && pk) {
            params.formParams[pk] = node.attributes.object_value;
            form.openForm(win, alias, params, 'edit');
        }
    },
    openEvnUslugaEditWindow: function(action, el_data) {
		if ( typeof action != 'string' || !action.inlist([ 'add', 'edit', 'view' ]) ) {
			return false;
		}

		var form = this;
		var formParams = new Object();

		if ( action == 'add' ) {
			formParams.EvnUsluga_id = 0;
			formParams.EvnUsluga_pid = el_data.object_id;
		}
		else {
			formParams = this.getObjectData(el_data.object, el_data.object_id);

			if ( formParams == false ) {
				return false;
			}
		}

		var ev_data = this.getObjectData('EvnVizitPL', formParams.EvnUsluga_pid);

		if ( ev_data == false ) {
			return false;
		}

		formParams.PersonEvn_id = form.PersonEvn_id;
		formParams.Person_id = form.Person_id;
		formParams.Server_id = form.Server_id;

		var params = new Object();

		params.action = action;
		params.callback = function(data) {
			if ( !data || !data.evnUslugaData ) {
				return false;
			}
			form.requireCheckChange = false;
			form.processLoad = false;
			var reload_params = {
				section_code: 'EvnUsluga',
				object_key: 'EvnUsluga_id',
				object_value: data.evnUslugaData.EvnUsluga_id,
				parent_object_key: 'EvnVizitPL_id',
				parent_object_value: formParams.EvnUsluga_pid,
				section_id: 'EvnUslugaList_' + formParams.EvnUsluga_pid,
				callback:function(){
					// изменение услуг может влиять на видимость специфик
					form.checkDiagSpecific('EvnVizitPL', formParams.EvnUsluga_pid, ev_data, 'onChangeEvnUsluga');
					form.isFirstAdminCheck = false;
					form.requireCheckChange = true;
					form.openEmkEditWindow(false, form.Tree.getSelectionModel().selNode);// при добавлении услуги перезагружаем стр, чтобы обновить map #142282
				}
			};	
			form.loadTreeNode({
				id: form.data.Code +'_'+ form.data.id,
				callback: function(tl,n){
					form.reloadViewForm(reload_params);
				}
			});
		};
		params.onHide = Ext.emptyFn;
		params.parentClass = 'EvnVizit';

		// данные для ParentEvnCombo
		params.parentEvnComboData = [{
			Evn_id: ev_data.EvnVizitPL_id,
			Evn_Name: ev_data.EvnVizitPL_setDate+' / '+ ev_data.LpuSection_Name +' / '+ ev_data.MedPersonal_Fin,
			Evn_setDate: Date.parseDate(ev_data.EvnVizitPL_setDate, 'd.m.Y'),
			Evn_setTime: ev_data.EvnVizitPL_setTime,
			MedStaffFact_id: ev_data.MedStaffFact_id,
			LpuSection_id: ev_data.LpuSection_id,
			LpuSectionProfile_id: ev_data.LpuSectionProfile_id,
			MedPersonal_id: ev_data.MedPersonal_id,
			ServiceType_SysNick: ev_data.ServiceType_SysNick,
			VizitType_SysNick: ev_data.VizitType_SysNick,
			Diag_id: ev_data.Diag_id,
			UslugaComplex_Code: ev_data.UslugaComplex_Code
		}];

		switch ( action ) {
			case 'add':
				formParams.PayType_id = ev_data.PayType_id;
				formParams.Diag_id = ev_data.Diag_id;
				params.formParams = formParams;
				params.Person_id = form.Person_id;
				sw.Promed.UslugaClass.createMenu({
					callback: function(menu){
						menu.show(Ext.get('EvnUslugaList_' + ev_data.EvnVizitPL_id + '_add'), 'tr');
					},
					onSelect: function(code){
						sw.Promed.UslugaClass.onSelectCode(
							code,
							params,
							ev_data.EvnVizitPL_pid,
							function() { }
						);
					},
					Evn_pid: ev_data.EvnVizitPL_id,
					parentEvent: params.parentClass
				});
			break;

			case 'edit':
			case 'view':
				// Открываем форму редактирования услуги (в зависимости от EvnClass_SysNick)
				switch ( formParams.EvnClass_SysNick ) {
					case 'EvnUslugaCommon':
						params.formParams = {
							EvnUslugaCommon_id: formParams.EvnUsluga_id
						};
						this.openForm('swEvnUslugaEditWindow', 'XXX_id', params, action);
					break;

					case 'EvnUslugaOper':
						params.formParams = {
							EvnUslugaOper_id: formParams.EvnUsluga_id,
							MedStaffFact_id:ev_data.MedStaffFact_id
							
						};
						this.openForm('swEvnUslugaOperEditWindow', 'XXX_id', params, action);
					break;

                    case 'EvnUslugaPar':
                        // должен происходить переход на услугу в дереве ЭМК
                        function loadEvnUslugaParNode(evnRootNode, win) {
                            var params = {
                                parent_node: evnRootNode,
                                last_child: false,
                                node_attr_name: 'id',
                                node_attr_value: 'EvnUslugaPar_'+formParams.EvnUsluga_id
                            };
                            win.searchNodeInTreeAndLoadViewForm(params);
                        }
                        var evnRootNode = form.Tree.getNodeById(form.node.id);
                        if (evnRootNode && 'EvnPL' == form.node.attributes.object) {
                            evnRootNode = evnRootNode.findChild('id','EvnVizitPL_'+formParams.EvnUsluga_pid);
                        }
                        if (evnRootNode) {
                            if (evnRootNode.isExpanded()) {
                                loadEvnUslugaParNode(evnRootNode, form);
                            } else {
                                evnRootNode.expand(false,false,function(){
                                    loadEvnUslugaParNode(evnRootNode, form);
                                });
                            }
                        }
                        break;

					default:
						return false;
					break;
				}
			break;
		}
        return true;
    },
    openEvnXmlViewWindow: function(sectionCode, el_data) {
        var formParams = this.getObjectData(el_data.object, el_data.object_id);
        if ( formParams == false ) {
            return false;
        }
        var win = getWnd('swEvnXmlViewWindow');
        if (win.isVisible()) {
            win.hide();
        }
        var params = {
            EvnXml_id: formParams.EvnXml_id,
            onBlur: function() {
                win.hide();
            },
            onHide: Ext.emptyFn
        };
        // switch(formParams.EvnClass_SysNick)
        win.show(params);
        return true;
    },
	openEvnXmlEditWindow: function(action, sectionCode, d) {
		var form = this, index, dirrec, key_parts,
			ep_data = this.getObjectData(sectionCode, d.object_id),
			params = {
			title: null,
			action: action,
			userMedStaffFact: form.userMedStaffFact,
			EvnClass_id: null,
			XmlType_id: null,
			UslugaComplex_id: null,
			EvnXml_id: null,
			Evn_id: null,
			onBlur: function() {
				//win.hide();
			},
			onHide: function() {
				// обновить панель просмотра
				if (sectionCode.inlist(['EvnPrescrPlan', 'EvnPrescrPolka', 'EvnPrescrStom'])) {
					form.reloadEvnPrescrList(sectionCode, ep_data.PrescriptionType_id, ep_data.EvnPrescr_pid);
				} else if (sectionCode.inlist(['EvnDirection', 'EvnDirectionStac', 'EvnDirectionStom'])) {
					key_parts = d.object_id.split('_');
					dirdata = form.getObjectDataWithFindBy(function(record,id){
						if (typeof record.object_code == "string" && record.object_code.inlist(['EvnDirection', 'EvnDirectionStac', 'EvnDirectionStom']) && record.get('timetable') == key_parts[0] && record.get('timetable_id') == key_parts[1]) {
							dirrec = record;
							return true;
						}
						return false;
					});
					if (!dirrec) {
						log(['dirrec undefined', sectionCode, d]);
						return false;
					}
					var evnsysnick = form.defineParentEvnClass().EvnClass_SysNick;
					form.reloadViewForm({
						section_code: sectionCode,
						object_key: dirrec.object_key,
						object_value: dirrec.object_value,
						parent_object_key: dirrec.parent_object_key || evnsysnick +'_id',
						parent_object_value: dirrec.get('timetable_pid'),
						section_id: sectionCode + 'List' + '_'+ dirrec.get('timetable_pid')
					});
				}
				form.isFirstAdminCheck = false;
			}
		};
		if (sectionCode.inlist(['EvnPrescrPlan', 'EvnPrescrPolka', 'EvnPrescrStom'])) {
			index = form.viewFormDataStore.findBy(function(record,id){
				if (record.object_code == sectionCode && record.get(sectionCode +'_id') == d.object_id) {
					return true;
				}
				return false;
			});
			if (index == -1) {
				return false;
			}
			dirrec = form.viewFormDataStore.getAt(index);
			params.title = langs('Бланк направления');
			params.UslugaComplex_id = dirrec.get('UslugaComplex_2011id')||null;
			params.EvnClass_id = 27;
			params.Evn_id = dirrec.get('EvnDirection_id');
			params.EvnXml_id = dirrec.get('EvnXmlDir_id');
			params.XmlType_id = dirrec.get('EvnXmlDirType_id')||null;
		} else if (sectionCode.inlist(['EvnDirection', 'EvnDirectionStac', 'EvnDirectionStom'])) {
			key_parts = d.object_id.split('_');
			index = form.viewFormDataStore.findBy(function(record,id){
				if(record.object_code = sectionCode && record.get('timetable') == key_parts[0] && record.get('timetable_id') == key_parts[1]) {
					return true;
				}
				return false;
			});
			if (index == -1) {
				return false;
			}
			dirrec = form.viewFormDataStore.getAt(index);
			params.title = langs('Бланк направления');
			params.EvnClass_id = 27;
			params.Evn_id = dirrec.get('EvnDirection_id');
			params.EvnXml_id = dirrec.get('EvnXmlDir_id');
			params.XmlType_id = dirrec.get('EvnXmlDirType_id')||null;
		} else {
			return false;
		}
		if (!params.Evn_id) {
			return false;
		}
		var win = getWnd('swEvnXmlEditWindow');
		if (win.isVisible()) {
			win.hide();
		}
		win.show(params);
		return true;
	},
	openUslugaEvnXmlEditWindow: function(sectionCode, d, action,isNarcosis) {
		var form = this, index, rec, key_parts, evn_data,
			ep_data = this.getObjectData(sectionCode, d.object_id),
			params = {
				title: null,
				action: 'edit',
				userMedStaffFact: form.userMedStaffFact,
				EvnClass_id: null,
				XmlType_id: null,
				UslugaComplex_id: null,
				EvnXml_id: null,
				Evn_id: null,
				onBlur: function() {
					//win.hide();
				},
				onHide: function() {
					if (params.action == 'view') {
						return false;
					}
					if (sectionCode == 'EvnUslugaStom') {
						// в стоматке почему-то работает только полное обновление
						form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
					}
					else {
						var reload_params = {
							section_code: sectionCode,
							object_key: 'EvnUsluga_id',
							object_value: d.object_id,
							parent_object_key: d.object + 'List_id',
							parent_object_value: ep_data.EvnUsluga_pid,
							section_id: d.object + 'List_' + ep_data.EvnUsluga_pid
						};
						form.reloadViewForm(reload_params);
					}
				}
			};
		index = form.viewFormDataStore.findBy(function(record,id){
			if (record.object_code == sectionCode && record.object_value == d.object_id) {
				return true;
			}
			return false;
		});
		if (index == -1) {
			return false;
		}
		
		rec = form.viewFormDataStore.getAt(index);
		evn_data = form.getObjectData(rec.parent_object_code, ep_data.EvnUsluga_pid);
		params.title = 'Форма редактирования XML-документа';
		params.UslugaComplex_id = rec.get('UslugaComplex_id') || null;
		params.EvnClass_id = rec.get('EvnClass_id');
		params.Evn_id = rec.get('EvnUsluga_id');
		params.EvnXml_id = isNarcosis ? rec.get('EvnXmlNarcosis_id') : rec.get('EvnXml_id');
		xmlTypeOper=isNarcosis ? 22 : 17;
		params.XmlType_id = rec.get('EvnClass_SysNick') == 'EvnUslugaOper' ? xmlTypeOper : 4;
		if (rec.get('accessType') == 'view' || action == 'view') {
			params.title = 'Форма просмотра XML-документа';
			params.action = 'view';
		}
		else if (!params.EvnXml_id) {
			params.action = 'add';
		}
		if (params.action == 'edit' && !action && params.EvnXml_id) {
			var me = this;
			if (me.printMenu) {
				me.printMenu.destroy();
				me.printMenu = null;
			}
			me.d = d;
			me.sectionCode = sectionCode;
			me.printMenu = new Ext.menu.Menu();
			me.printMenu.add({
				text: 'Посмотреть',
				value: 'Посмотреть',
				iconCls : 'view16',
				handler: function(e,c,d) {
					me.openUslugaEvnXmlEditWindow(me.sectionCode, me.d, 'view',isNarcosis);
				}
			});
			me.printMenu.add({
				text: 'Редактировать',
				value: 'Редактировать',
				iconCls : 'edit16',
				handler: function() {
					me.openUslugaEvnXmlEditWindow(me.sectionCode, me.d, 'edit',isNarcosis);
				}
			});
			me.printMenu.add({
				text: 'Удалить',
				value: 'Удалить',
                iconCls: 'delete16',
				handler: function() {
					sw.swMsg.show({
						buttons: Ext.Msg.YESNO,
						fn: function(buttonId, text, obj) {
							if ( buttonId == 'yes' ) {
								Ext.Ajax.request({
									url: '/?c=EvnXml&m=destroy',
									callback: function(opt, success, response) {
										if (success && response.responseText != '') {
											params.onHide();
										}
									},
									params: {EvnXml_id: params.EvnXml_id}
								});
							}
						}.createDelegate(this),
						icon: Ext.MessageBox.QUESTION,
						msg: 'Удалить документ?',
						title: langs('Вопрос')
					});
				}
			});
			var suffix=isNarcosis ? '_narcosis' : '_xml';
			var btnEl = Ext.get(d.object +'_'+d.object_id+suffix);
			me.printMenu.show(btnEl);
			return false;
		}
		if (!params.Evn_id) {
			return false;
		}
		if (params.action == 'view' && !params.EvnXml_id) {
			return false;
		}
		var win = getWnd('swEvnXmlEditWindow');
		if (win.isVisible()) {
			win.hide();
		}
		win.show(params);
		return true;
	},

	openEvnReceptGeneralEditWindow: function(action, el_data)
	{
		var form = this;
		var my_params = new Object();
		my_params.EvnReceptGeneral_id = el_data.object_id;
		my_params.EvnCourseTreatDrug_id = null;
		my_params.onHide = Ext.emptyFn;
		form.openForm('swEvnReceptGeneralEditWindow','EvnReceptGeneral_id',my_params,'view',langs('Редактирование рецепта'));

	},
    openEvnReceptEditWindow: function(action, el_data) {
		var form = this;
		var my_params = new Object();
		if ( action == 'add' ) {
			// Проверяем для врача возможность выписывать рецепты
			setMedStaffFactGlobalStoreFilter({
				id: this.userMedStaffFact.MedStaffFact_id,
				isDlo: true,
				allowLowLevel: 'yes',
                onDate: getGlobalOptions().date
			});

			if ( swMedStaffFactGlobalStore.getCount() == 0 ) {
				sw.swMsg.alert(langs('Ошибка'), langs('Вы не внесены в список врачей, работающих с ЛЛО на текущую дату.'));
				return false;
			}

			my_params.EvnRecept_id = 0;
			my_params.EvnRecept_pid = el_data.object_id;
			var vizitData = form.getObjectData('EvnVizitPL',el_data.object_id);
			if (vizitData == false)
			{
				// log('Data for EvnVizitPL_'+ el_data.object_id +' NOT found!');
				return false;
			}
			my_params.EvnRecept_setDate = Date.parseDate(vizitData.EvnVizitPL_setDate, 'd.m.Y');
			my_params.Diag_id = vizitData.Diag_id;
			my_params.LpuSection_id = vizitData.LpuSection_id
			my_params.MedPersonal_id = vizitData.MedPersonal_id;
		}
		else {
			my_params.EvnRecept_id = el_data.object_id;
		}

		my_params.callback = function(data) {
			if ( !data || !data.EvnReceptData ) {
				return false;
			}
			var reload_params = {
				section_code: 'EvnRecept',
				object_key: 'EvnRecept_id',
				object_value: data.EvnReceptData.EvnRecept_id,
				section_id: 'EvnReceptList_'+ data.EvnReceptData.EvnRecept_pid
			};
			if ('editEvnRecept' == action)
			{
				reload_params.section_code = 'EvnReceptView';
				reload_params.section_id = 'EvnReceptView_'+ data.EvnReceptData.EvnRecept_id
			}
			else
			{
				reload_params.section_code = 'EvnReceptList';
				reload_params.parent_object_key = 'EvnVizitPL_id';
				reload_params.parent_object_value = data.EvnReceptData.EvnRecept_pid;
			}

            //если с ответом вернулся идентификатор назначения, пытаемся сначала перезагрузить раздел лекраственного лечения
            if (!Ext.isEmpty(data.EvnReceptData.EvnCourseTreatDrug_id)) {
                form.reloadEvnPrescrList('EvnPrescrPolka', 5, data.EvnReceptData.EvnRecept_pid);
            }

			form.loadTreeNode({
				id: form.data.Code +'_'+ form.data.id,
				callback: function(tl,n){
					form.reloadViewForm(reload_params);
				}
			});
		};
		if ('editEvnRecept' == action)
		{
			action = 'edit'
		}
		my_params.onHide = Ext.emptyFn;
		my_params.userMedStaffFact = this.userMedStaffFact;
		if(getGlobalOptions().drug_spr_using == 'dbo')
			form.openForm('swEvnReceptEditWindow','XXX_id',my_params,action,langs('Редактирование рецепта'));
		else
			form.openForm('swEvnReceptRlsEditWindow','XXX_id',my_params,action,langs('Редактирование рецепта'));
	},
    openEvnReceptKardioEditWindow: function(action, el_data) {
		var form = this;
		var my_params = new Object();

		if (action == 'add') {
			// Проверяем для врача возможность выписывать рецепты (отключена для ДЛО Кардио)
			setMedStaffFactGlobalStoreFilter({
				id: this.userMedStaffFact.MedStaffFact_id
			});

			my_params.EvnRecept_id = 0;
			my_params.EvnRecept_pid = el_data.object_id;

			var objectData = form.getObjectData('EvnVizitPL', el_data.object_id);
			if (objectData != false) {
                my_params.EvnRecept_setDate = Date.parseDate(objectData.EvnVizitPL_setDate, 'd.m.Y');
                my_params.Diag_id = objectData.Diag_id;
				my_params.MedPersonal_id = objectData.MedPersonal_id;
			} else {
                objectData = form.getObjectData('EvnSection', el_data.object_id);
                if (objectData != false) {
                    my_params.EvnRecept_setDate = Date.parseDate(objectData.EvnSection_setDate, 'd.m.Y');
                    my_params.Diag_id = objectData.Diag_id;
                    my_params.LpuSection_id = objectData.LpuSection_id;
                    my_params.MedPersonal_id = objectData.MedPersonal_id;
                } else {
					objectData = form.getObjectData('EvnUslugaTelemed', el_data.object_id);
					if (objectData != false) {
						my_params.EvnRecept_setDate = Date.parseDate(objectData.EvnUslugaTelemed_setDate, 'd.m.Y');
						my_params.Diag_id = objectData.Diag_id;
						my_params.LpuSection_id = objectData.LpuSection_uid;
						my_params.MedPersonal_id = objectData.MedStaffFact_id;
						my_params.EvnUslugaTelemed = 1;		//признак открытия из телемедицинской услуги
					} else {
						return false;
					}
                }
            }
		} else {
			my_params.EvnRecept_id = el_data.object_id;
		}

		my_params.callback = function(data) {
			if ( !data || !data.EvnReceptData ) {
				return false;
			}
			var reload_params = {
				section_code: 'EvnReceptKardio',
				object_key: 'EvnRecept_id',
				object_value: data.EvnReceptData.EvnRecept_id,
				section_id: 'EvnReceptKardioList_'+ data.EvnReceptData.EvnRecept_pid
			};
			if ('editEvnRecept' == action) {
				reload_params.section_code = 'EvnReceptKardioView';
				reload_params.section_id = 'EvnReceptKardioView_'+ data.EvnReceptData.EvnRecept_id
			} else {
				reload_params.section_code = 'EvnReceptKardioList';
				reload_params.parent_object_value = data.EvnReceptData.EvnRecept_pid;
				if (!Ext.isEmpty(objectData.EvnSection_id)) {
					reload_params.parent_object_key = 'EvnSection_id';
				}
				if (!Ext.isEmpty(objectData.EvnVizitPL_id)) {
					reload_params.parent_object_key = 'EvnVizitPL_id';
				}
				if (!Ext.isEmpty(objectData.EvnUslugaTelemed_id)) {
					reload_params.parent_object_key = 'EvnUslugaTelemed_id';
				}
			}
			form.loadTreeNode({
				id: form.data.Code +'_'+ form.data.id,
				callback: function(tl,n){
					form.reloadViewForm(reload_params);
				}
			});
		};
		if ('editEvnRecept' == action) {
			action = 'edit'
		}
		my_params.onHide = Ext.emptyFn;
        my_params.isKardio = true;
        my_params.MedPersonal_id = this.userMedStaffFact.MedStaffFact_id;

		if (action == 'add') {
			if (!Ext.isEmpty(objectData.EvnUslugaTelemed_id)) { //для рецептов телемедицинской услуги врач извлекается из самой услуги
				my_params.MedPersonal_id = objectData.MedStaffFact_id;
			}
			if (!Ext.isEmpty(objectData.EvnVizitPL_id) || !Ext.isEmpty(objectData.EvnUslugaTelemed_id)) {
				//проверка, есть ли у пациента льгота, и если есть то можно ли добавлять рецепты
				form.checkKardioPrivilegeConsent({ //если форма открываетсяиз посещения и в режиме добавления, то нужно сделать дополнительные проверки
					params: {
						Person_id: objectData.Person_id
					},
					callback: function (data) {
						if (data.open_edit_form) {
							form.openForm('swEvnReceptRlsEditWindow', 'XXX_id', my_params, action, langs('Редактирование рецепта'));
						}
					}
				});
			} else {
				form.openForm('swEvnReceptRlsEditWindow','XXX_id', my_params, action, langs('Редактирование рецепта'));
			}
		} else {
			form.openForm('swEvnReceptRlsEditWindow', 'XXX_id', my_params, action, langs('Редактирование рецепта'));
		}
	},
    checkKardioPrivilegeConsent: function(options) {
	    var wnd = this;
	    var Person_id = null;
	    var callback = Ext.emptyFn;

	    if (options && options.params && options.callback) {
	        if (!Ext.isEmpty(options.params.Person_id)) {
                Person_id = options.params.Person_id;
            }
            if (typeof options.callback == 'function') {
                callback = options.callback;
            }
        }

        if (!Ext.isEmpty(Person_id)) {
            var loadMask = new Ext.LoadMask(wnd.getEl(), {msg: langs('Получение данных о включении пациента в программу')});
            loadMask.show();
            Ext.Ajax.request({
                url: '/?c=Privilege&m=getKardioPrivilegeConsentData',
                params: {
                    Person_id: Person_id
                },
                callback: function (options, success, response) {
                    loadMask.hide();
                    if (success) {
                        var response_obj = Ext.util.JSON.decode(response.responseText);
                        if (response_obj.recept_edit_allowed && response_obj.recept_edit_allowed == '1') {
                            if (response_obj.need_consent && response_obj.need_consent == '1' && response_obj.EvnPS_id && response_obj.EvnPS_id > 0) {
                                getWnd('swPrivilegeConsentEditWindow').show({
                                    Person_id: Person_id,
                                    Evn_id: response_obj.EvnPS_id,
									EvnPS_disDate: response_obj.EvnPS_disDate,
									action: 'add',
                                    onSave: function(data) {
                                        if (!Ext.isEmpty(data.PersonPrivilege_id)) {
                                            callback.call(wnd, {
                                                open_edit_form: true
                                            });
                                        }
                                    }
                                });
                            } else {
                                callback.call(wnd, {
                                    open_edit_form: true
                                });
                            }
                        } else {
                            var err_msg = '';
                            if (response_obj.success) {
                                err_msg = 'Пациент не может быть включен в програму, так как не соответствует модели пациента.  Для включения в программу у пациента должна быть КВС с  выпиской после 1 января 2019 г., в которой должны быть указаны основной или сопутствующий диагнозы и услуги, установленные приказом МЗ ПК.';
                            } else {
                                err_msg = 'При проверке данных пациента произошла ошибка';
                            }
                            sw.swMsg.alert(langs('Ошибка'), langs(err_msg));
                            callback.call(wnd, {
                                open_edit_form: false
                            });
                        }
                    } else {
                        callback.call(wnd, {
                            open_edit_form: false
                        });
                    }
                }
            });
        } else {
            callback.call(wnd, {
                open_edit_form: false
            });
        }
    },
	deleteEvnStick: function(evnstick_node, options) {
		var form = this;
		
		if ( !evnstick_node || !evnstick_node.attributes.EvnStick_pid || evnstick_node.attributes.delAccessType == 'view' )
		{
			return false;
		}

		if(options === undefined) {
			options = {};
		}
		var evnstick_id = evnstick_node.attributes.object_value,
			evnstick_pid = evnstick_node.attributes.Evn_pid,
			error, question, url,
			params = new Object();
		if ( evnstick_node.attributes.evnStickType == 3 )
		{
			if(evnstick_node.attributes.Evn_pid == evnstick_node.attributes.EvnStick_pid) {
				error = langs('При удалении справки учащегося возникли ошибки');
				question = langs('Удалить справку учащегося?');
			} else {
				error = langs('При удалении связи справки учащегося с текущим документом возникли ошибки');
				question = langs('Удалить связь справки учащегося с текущим документом?');
			}
			url = '/?c=Stick&m=deleteEvnStickStudent';
			params['EvnStickStudent_id'] = evnstick_id;
			params['EvnStickStudent_mid'] = evnstick_pid;
		}
		else
		{
			if (evnstick_node.attributes.EvnStick_closed == 1) {
				error = langs('При удалении ЛВН возникли ошибки');
				question = langs('Вы уверены, что хотите удалить закрытый ЛВН?');
			} else {
				error = langs('При удалении ЛВН возникли ошибки');
				question = langs('Удалить ЛВН?');
			}
			url = '/?c=Stick&m=deleteEvnStick';
			params['EvnStick_id'] = evnstick_id;
			params['EvnStick_mid'] = evnstick_pid;
		}
		if(options.deleteType == 'cancel') {
			params['deleteType'] = options.deleteType;
			form.doDeleteEvnStick({
				error: error,
				params: params,
				evnstick_node: evnstick_node,
				evnstick_pid: evnstick_pid,
				evnstick_id: evnstick_id,
				url: url
			});
		} else {
			sw.swMsg.show({
				buttons: Ext.Msg.YESNO,
				fn: function(buttonId, text, obj) {
					if ( buttonId == 'yes' ) {
						form.doDeleteEvnStick({
							error: error,
							params: params,
							evnstick_node: evnstick_node,
							evnstick_pid: evnstick_pid,
							evnstick_id: evnstick_id,
							url: url
						});
					}
				}.createDelegate(this),
				icon: Ext.MessageBox.QUESTION,
				msg: question,
				title: langs('Вопрос')
			});
		}
		
	},
	doDeleteEvnStick: function(options) {
		var form = this;
		var maskMsg = "Удаление записи...";
		if(options.params && options.params.deleteType == 'cancel') {
			maskMsg = "Аннулирование записи...";
		}
		var loadMask = new Ext.LoadMask(form.getEl(), {msg: maskMsg});
		loadMask.show();

		var alert = sw.Promed.EvnStick.getDeleteAlertCodes({
			callback: function(options) {
				form.doDeleteEvnStick(options);
			},
			options: options
		});

		Ext.Ajax.request({
			failure: function(response, options) {
				loadMask.hide();
				sw.swMsg.alert(langs('Ошибка'), options.error);
			},
			params: options.params,
			success: function(response, opts) {
				loadMask.hide();

				var response_obj = Ext.util.JSON.decode(response.responseText);

				if ( response_obj.success == false ) {
					if (response_obj.Alert_Msg) {
						if (response_obj.Alert_Code == 705) {
							getWnd('swStickCauseDelSelectWindow').show({
								countNotPaid: response_obj.countNotPaid,
								existDuplicate: response_obj.existDuplicate,
								callback: function(StickCauseDel_id) {
									if (StickCauseDel_id) {
										options.params.StickCauseDel_id = StickCauseDel_id;
										form.doDeleteEvnStick(options);
									}
								}.createDelegate(this)
							});
						} else {
							var a_params = alert[response_obj.Alert_Code];
							sw.swMsg.show({
								buttons: a_params.buttons,
								fn: function(buttonId) {
									a_params.fn(buttonId, form);
								}.createDelegate(this),
								msg: response_obj.Alert_Msg,
								icon: Ext.MessageBox.QUESTION,
								title: 'Вопрос'
							});
						}
					} else {
						sw.swMsg.alert(langs('Ошибка'), response_obj.Error_Msg ? response_obj.Error_Msg : options.error);
					}
				}
				else {
					if (response_obj.IsDelQueue) {
						sw.swMsg.alert('Внимание', 'ЛВН добавлен в очередь на удаление');
					}
					options.evnstick_node.parentNode.reload();
					if ( form.data && form.data.Code.inlist(['EvnPL','EvnPS']) && options.evnstick_pid == form.data.id )
					{
						var reload_params = {
							section_code: 'EvnStick',
							object_key: 'EvnStick_id',
							object_value: options.evnstick_id,
							parent_object_key: form.data.key,
							parent_object_value: form.data.id,
							section_id: 'EvnStickList_'+ form.data.id
						};
						form.reloadViewForm(reload_params);
					}
				}
			},
			url: options.url
		});
	},
	undoDeleteEvnStick: function(evnstick_node) {
		var form = this;

		if ( !evnstick_node )
		{
			return false;
		}

		var evnstick_id = evnstick_node.attributes.object_value,
			evnstick_pid = evnstick_node.attributes.Evn_pid;

		var loadMask = new Ext.LoadMask(form.getEl(), {msg: "Отмена удаления ЛВН..."});
		loadMask.show();

		Ext.Ajax.request({
			failure: function(response, options) {
				loadMask.hide();
				sw.swMsg.alert(langs('Ошибка'), error);
			},
			params: {
				EvnStick_id: evnstick_id
			},
			success: function(response, options) {
				loadMask.hide();

				var response_obj = Ext.util.JSON.decode(response.responseText);

				if ( response_obj.success == false ) {
					sw.swMsg.alert(langs('Ошибка'), response_obj.Error_Msg ? response_obj.Error_Msg : error);
				}
				else {
					evnstick_node.parentNode.reload();
					if ( form.data && form.data.Code.inlist(['EvnPL','EvnPS']) && evnstick_pid == form.data.id )
					{
						var reload_params = {
							section_code: 'EvnStick',
							object_key: 'EvnStick_id',
							object_value: evnstick_id,
							parent_object_key: form.data.key,
							parent_object_value: form.data.id,
							section_id: 'EvnStickList_'+ form.data.id
						};
						form.reloadViewForm(reload_params);
					}
				}
			},
			url: '/?c=Stick&m=undoDeleteEvnStick'
		});
	},
	getEvnStickSetdate: function(params, callback) {
		var loadMask = new Ext.LoadMask(this.getEl(), {msg: "Получение даты для ЛВН..."});
		loadMask.show();

		Ext.Ajax.request({
			failure: function(response, options) {
				loadMask.hide();
				sw.swMsg.alert(langs('Ошибка'), langs('Не удалось получить дату для ЛВН!'));
			},
			params: params,
			success: function(response, options) {
				loadMask.hide();

				var response_obj = Ext.util.JSON.decode(response.responseText);

				if ( !response_obj[0] || !response_obj[0].EvnStick_setDate ) {
					sw.swMsg.alert(langs('Ошибка'), langs('Не удалось получить дату последнего посещения для ЛВН!'));
				}
				else {
					callback(response_obj);					
				}
			}.createDelegate(this),
			url: '/?c=Stick&m=getEvnStickSetdate'
		});
	},
	// для панели просмотра
    openFormEvnPLStom: function(action, el_data) {
        if ( !action || !action.inlist(['add','edit','view']) ) {
            return false;
        }
        var form = this;
        var win = 'swEvnPLStomEditWindow';
        var params = {
            action: action,
            onHide: Ext.emptyFn,
            PersonEvn_id: this.PersonEvn_id,
            Person_id: this.Person_id,
            Server_id: this.Server_id,
            userMedStaffFact: this.userMedStaffFact
        };
        if ('add' == action) {
            params = Ext.apply(el_data, params);
            params.callback = function(data) {
                if ( !data || !data.evnPLStomData ) {
                    return false;
                }
				var parent_node_id = 'root';
				if (1 == form.Tree.getLoader().baseParams.type) {
					parent_node_id = 'EvnPLStom_11122';
				}
				form.requireCheckChange = false;
				form.loadTreeNode({
					id: parent_node_id,
					selectById: 'EvnPLStom_'+ data.evnPLStomData.EvnPLStom_id,
					callback: function(tl,n){				
						//обязательно обновить ТАП целиком в панели просмотра
						form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
					}
				});
                if (typeof form.onSaveEvnDocument == 'function') {
                    form.onSaveEvnDocument(true, data, 'EvnPLStom');
                }
				// т.к. было обслужено
				if (form.EvnDirectionData) {
					form.EvnDirectionData = null;
				}
				if (form.TimetableGraf_id) {
					form.TimetableGraf_id = null;
				}
                return true;
            };
        } else {
            var node_evnpl = form.Tree.getNodeById('EvnPLStom_'+ el_data.object_id);
            if (!node_evnpl || 'EvnPLStom' != node_evnpl.attributes.object)
            {
                sw.swMsg.alert(langs('Сообщение'), langs('Не найдена нода случая АПЛ!'));
                return false;
            }
			if (!node_evnpl.attributes.accessType || ('view' == node_evnpl.attributes.accessType && 'openEvnPL' != action) || form.isReadonly)
			{
				sw.swMsg.alert(langs('Сообщение'), langs('Случай АПЛ доступен только на чтение!'));
				return false;
			}
            params.action = action;
            params.EvnPLStom_id = el_data.object_id;
            params.TimetableGraf_id = form.TimetableGraf_id;
            params.callback = function(data) {
				form.requireCheckChange = false;
				form.loadTreeNode({
					node: node_evnpl.parentNode,
					selectById: node_evnpl.id,
					callback: function(tl,n){
						var selNode = form.Tree.getSelectionModel().selNode;
						if (selNode.id && selNode.id == 'root') {
							//вероятно удалили ТАП
							form.clearNodeViewForm();
						} else {
							//обязательно обновить ТАП целиком в панели просмотра
							form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
						}
					}
				});
                if (typeof form.onSaveEvnDocument == 'function') {
                    form.onSaveEvnDocument(false, data, 'EvnPLStom');
                }
            };
        }
        if (getWnd(win).isVisible())
        {
            getWnd(win).hide();
        }
        getWnd(win).show(params);
        return true;
    },
    openFormEvnVizitPLStom: function(action, EvnPLStom_id, EvnVizitPLStom_id) {
        if ( !action || !action.inlist(['add','edit','view']) ) {
            return false;
        }
        if ( !EvnPLStom_id ) {
            return false;
        }
        if ( !EvnVizitPLStom_id && 'add' != action ) {
            return false;
        }
        if ( this.isReadOnly && 'view' != action ) {
            return false;
        }
		var node_evnpl = this.Tree.getNodeById('EvnPLStom_'+ EvnPLStom_id);
		if (!node_evnpl || 'EvnPLStom' != node_evnpl.attributes.object) {
			sw.swMsg.alert(langs('Сообщение'), langs('Не найдена нода случая АПЛ!'));
			return false;
		}
        var form = this;
        var win = 'swEvnVizitPLStomEditWindow';
		var parentEvnData = form.getObjectData('EvnPLStom', EvnPLStom_id);

		if(getRegionNick() == 'vologda' && action == 'add' && this.additionalCheckProfileBeforeCreatingVisit({EvnPLStom_id: EvnPLStom_id})){
			sw.swMsg.alert(langs('Сообщение'), langs('Сохранение посещения невозможно, т.к. в рамках текущего ТАП специалистом другого профиля уже добавлено посещение.'));
			return false;
		}

        var params = {
            action: action,
            onHide: Ext.emptyFn,
            formParams: {
				EvnPLStom_setDate: node_evnpl.attributes.date.toString().substr(0, 10),
				ResultClass_id: parentEvnData.ResultClass_id,
                PersonEvn_id: form.PersonEvn_id,
                Person_id: form.Person_id,
                Server_id: form.Server_id
            },
            allowMorbusVizitOnly: false,
            allowNonMorbusVizitOnly: false,
            userMedStaffFact: form.userMedStaffFact
        };
		params.formParams.EvnPLStom_id = EvnPLStom_id;
		var lastEvnVizitPLStomDate;
		form.viewFormDataStore.each(function(rec) {
			if ( rec.object_code == 'EvnVizitPLStom' && ( Ext.isEmpty(lastEvnVizitPLStomDate) || (!Ext.isEmpty(rec.get('EvnVizitPLStom_setDate')) && rec.get('EvnVizitPLStom_setDate') >= lastEvnVizitPLStomDate)) ) {
				lastEvnVizitPLStomDate = rec.get('EvnVizitPLStom_setDate');
			}
		});
		params.lastEvnVizitPLStomDate = lastEvnVizitPLStomDate;

		params.OtherVizitList = [];
		params.OtherUslugaList = [];
		var EvnPLChildren = form.getObjectChildren('EvnPLStom', EvnPLStom_id);
		if (EvnPLChildren.EvnVizitPLStom && Ext.isArray(EvnPLChildren.EvnVizitPLStom.item)) {
			var countVizit = EvnPLChildren.EvnVizitPLStom.item.length;
			var firstVizit = EvnPLChildren.EvnVizitPLStom.item[countVizit-1];
			var TreatmentClass_id = firstVizit.data.TreatmentClass_id;

			if ( getRegionNick() == 'penza' && !Ext.isEmpty(TreatmentClass_id) && (action == 'add' || countVizit > 1) ) {
				params.TreatmentClass_id = parseInt(TreatmentClass_id);
			}

			EvnPLChildren.EvnVizitPLStom.item.forEach(function(vizit) {
				if (vizit.EvnVizitPLStom_id != EvnVizitPLStom_id) {
					params.OtherVizitList.push(vizit.data);
					/*
					var uslugaList = form.searchObjects(function(rec) {
						return rec.object_code == 'EvnUsluga' && rec.parent_object_value == vizit.EvnPLStom_id;
					});
					uslugaList.forEach(function(usluga) {
						params.OtherUslugaList.push(usluga.data);
					});
					*/
				}
			});
		}

		if (action == 'add' && getRegionNick() == 'buryatiya' && !Ext.isEmpty(params.formParams.EvnPLStom_setDate) && getValidDT(params.formParams.EvnPLStom_setDate, '') >= getValidDT('01.05.2019', '')) {
			var allowAdd = true;
			params.OtherVizitList.forEach(function(visit) {
				if(visit.TreatmentClass_id == 2) allowAdd = false;
			});
			
			if(!allowAdd) {
				sw.swMsg.alert(langs('Сообщение'), langs('В рамках текущего ТАП есть посещение с видом обращения в неотложной форме по заболеванию. Добавление еще одного посещения невозможно.'));
				return false;
			}
		}

		params.callback = function(data) {
			if ( 'view' == action ) {
				return false;
			}
			if ( !data || !data.evnVizitPLStomData ) {
				return false;
			}
			form.requireCheckChange = false;
			form.loadTreeNode({
				//node: node_evnpl.parentNode,
				node: node_evnpl,
				selectById: node_evnpl.id,
				callback: function(tl,n){
					if (form.data && form.data.Code && form.data.Code == 'EvnPLStom' && form.data.id == EvnPLStom_id) {
						//обязательно обновить ТАП целиком в панели просмотра
						form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
						form.isFirstAdminCheck = false;
						form.requireCheckChange = true;
					}
				}
			});
			if (typeof form.onSaveEvnDocument == 'function') {
				form.onSaveEvnDocument(('add' == action), data, 'EvnVizitPLStom');
			}
			if ('add' == action) {
				// т.к. было обслужено
				if (form.EvnDirectionData) {
					form.EvnDirectionData = null;
				}
				if (form.TimetableGraf_id) {
					form.TimetableGraf_id = null;
				}
			}
			return true;
		};
        if ('add' == action) {
			var getEvnDirectionData = function(formParams, callback) {
				if (formParams.EvnDirection_id || !formParams.TimetableGraf_id) {
					callback(formParams);
				} else {
					var loadMask = new Ext.LoadMask(form.getEl(), {
						msg: "Получение данных направления..."
					});
					loadMask.show();
					Ext.Ajax.request({
						params: {
							TimetableGraf_id: formParams.TimetableGraf_id
							,Person_id: form.getPersonId()
							,useCase: 'addEvnVizitPLStom'
						},
						callback: function(options, success, response) {
							loadMask.hide();
							if ( success ) {
								var response_obj = Ext.util.JSON.decode(response.responseText);
								if (response_obj.length > 0) {
									formParams.EvnDirection_id = response_obj[0].EvnDirection_id;
									/*callback(formParams);
								} else {
									sw.swMsg.alert(langs('Ошибка'), langs('Направление не найдено'));*/
								}
								callback(formParams);
							} else {
								sw.swMsg.alert(langs('Ошибка'), langs('Ошибка при получении данных направления'));
							}
						},
						url: '/?c=EvnDirection&m=loadEvnDirectionList'
					});
				}
			};
			Ext.Ajax.request({
				url: '/?c=EvnPLStom&m=checkAddEvnVizit',
				params: {
					EvnPLStom_id: EvnPLStom_id
					,MedStaffFact_id: form.userMedStaffFact.MedStaffFact_id || null
				},
				callback: function(o, s, response) {
					var response_obj = Ext.util.JSON.decode(response.responseText);
					if ( response_obj.success && response_obj.isAllowAdd ) {
						var op = getGlobalOptions();
						var plop = getPolkaOptions();
						if(!plop || !plop.arm_vizit_create || plop.arm_vizit_create == 1) {
							params.formParams.EvnVizitPLStom_id = 0;
							params.allowMorbusVizitOnly = response_obj.allowMorbusVizitOnly || false;
							params.allowNonMorbusVizitOnly = response_obj.allowNonMorbusVizitOnly || false;
							params.loadLastData = response_obj.isAllowLoadLastData || false;
							params.isRepeatVizit = response_obj.isRepeatVizit || false;
							if (getWnd(win).isVisible()) {
								getWnd(win).hide();
							}
							params.formParams.EvnDirection_id = null;
							params.formParams.TimetableGraf_id = form.TimetableGraf_id || null;
							if (form.EvnDirectionData && form.EvnDirectionData.EvnDirection_id) {
								params.formParams.EvnDirection_id = form.EvnDirectionData.EvnDirection_id;
								params.formParams.TimetableGraf_id = form.EvnDirectionData.TimetableGraf_id || null;
							}
							getEvnDirectionData(params.formParams, function (formParams) {
								params.formParams = formParams;
								form.openForm(win, 'XXX_id', params, action, WND_POL_EVPLEDIT);
							});
						} else {
							var onComplete = function(data) {
								var params = {node_lvl: 1, parent_node_id: 'root', node_id: 'EvnPLStom_'+ data.EvnPLStom_id};
								if (1 == form.Tree.getLoader().baseParams.type)
								{
									params.parent_node_id = 'EvnPLStom_11122';
								}
								form.onCreateObject(params);
								if(data.Alert_Msg) {
									sw.swMsg.alert(langs('Уведомление'), data.Alert_Msg);
								}
								if (typeof form.onSaveEvnDocument == 'function') {
									form.onSaveEvnDocument(true, data, 'EvnPLStom');
								}
								// т.к. было обслужено
								if (form.EvnDirectionData) {
									form.EvnDirectionData = null;
								}
								if (form.TimetableGraf_id) {
									form.TimetableGraf_id = null;
								}
							};

							// автоматическое создание
							form.getEvnData({
								params: {
									loadLast: 1,
									EvnPLStom_id: EvnPLStom_id
								},
								callback: function(formParams) {
									var d = new Date();
									formParams.action = 'addEvnVizitPLStom';
									formParams.EvnVizitPLStom_id = 0;
									formParams.EvnVizitPLStom_setDate = op.date;
									formParams.EvnVizitPLStom_setTime = d.format('H:i');
									formParams.MedStaffFact_id = form.userMedStaffFact.MedStaffFact_id;
									formParams.LpuSection_id = form.userMedStaffFact.LpuSection_id;
									formParams.LpuSectionProfile_id = form.userMedStaffFact.LpuSectionProfile_id;
									formParams.MedPersonal_id = form.userMedStaffFact.MedPersonal_id;
									formParams.MedStaffFact_sid = null;
									formParams.VizitClass_id = 2;
									formParams.EvnDirection_vid = null;
									formParams.TimetableGraf_id = form.TimetableGraf_id || null;
									if (form.EvnDirectionData && form.EvnDirectionData.EvnDirection_id){
										formParams.EvnDirection_vid = form.EvnDirectionData.EvnDirection_id;
										formParams.TimetableGraf_id = form.EvnDirectionData.TimetableGraf_id || null;
									}
									if (form.EvnDirectionData && form.EvnDirectionData.EvnPrescr_id){
										formParams.EvnPrescr_id = form.EvnDirectionData.EvnPrescr_id;
									}
									// При повторном посещении данное поле должно оставаться пустым.
									if ((op.region && op.region.nick.inlist(['ekb', 'perm', 'vologda']))) {
										formParams.UslugaComplex_uid = null;
									}
									//копируем осмотр или создаем пустой документ
									if(formParams.EvnXml_id) {
										formParams.copyEvnXml_id = formParams.EvnXml_id;
										formParams.EvnXml_id = null;
									}
									formParams.allowCreateEmptyEvnDoc = 2;
									formParams.isAutoCreate = 1;
									if (!plop || !plop.arm_evn_xml_copy || plop.arm_evn_xml_copy == 1) {
										var index = form.payTypeStore.findBy(function(rec) {
											return (rec.get('PayType_SysNick') == form.getPayTypeSysNickOMS());
										});
										if ( index == -1 ) {
											sw.swMsg.alert(langs('Сообщение'), langs('Ошибка при получении идентификатора вида оплаты!'));
											return false;
										}
										formParams.PayType_id = form.payTypeStore.getAt(index).get('PayType_id');

										VizitType_SysNick = form.EvnDirectionData && form.EvnDirectionData.VizitType_SysNick ? form.EvnDirectionData.VizitType_SysNick : 'desease';

										form.vizitTypeStore.clearFilter();
										index = form.vizitTypeStore.findBy(function(rec) {
											return (rec.get('VizitType_SysNick') == VizitType_SysNick);
										});
										if ( index == -1 ) {
											sw.swMsg.alert(langs('Сообщение'), langs('Ошибка при получении идентификатора цели посещения!'));
											return false;
										}
										formParams.VizitType_id = form.vizitTypeStore.getAt(index).get('VizitType_id');

										form.serviceTypeStore.clearFilter();
										index = form.serviceTypeStore.findBy(function(rec) {
											return (rec.get('ServiceType_SysNick') == 'polka');
										});
										if ( index == -1 ) {
											sw.swMsg.alert(langs('Сообщение'), 'Ошибка при получении идентификатора места обслуживания');
											return false;
										}
										formParams.ServiceType_id = form.serviceTypeStore.getAt(index).get('ServiceType_id');
										formParams.MedPersonal_sid = null;
										// @task https://redmine.swan.perm.ru/issues/79903
										//formParams.Diag_id = null;
										//formParams.DeseaseType_id = null;
									}
									getEvnDirectionData(formParams, function(formParams) {
										// addEvnVizitPL
										form.createNewEvnPLAndEvnVizitPL({formParams: formParams, onComplete: onComplete}, true);
									});
								},
								url: '/?c=EvnPLStom&m=loadEmkEvnPLStomEditForm'
							});
						}
					}
					if ( response_obj.Alert_Msg ) {
						sw.swMsg.alert(langs('Сообщение'), response_obj.Alert_Msg);
					}
				}
			});
        } else {
            params.isNeedLoad = true;
            params.EvnPLAction = action;
            params.formParams.EvnVizitPLStom_id = EvnVizitPLStom_id;
			if (getWnd(win).isVisible()) {
				getWnd(win).hide();
			}
			form.openForm(win,'XXX_id',params,action, WND_POL_EVPLEDIT);
        }
        return true;
    },
    openEvnStickEditWindow: function(action, el_data) {
		if ( !action.inlist(['add','edit','view']) )
		{
			return false;
		}
		var form = this;
		//log([el_data,form.data]);
		var formParams = {
			Person_id: form.Person_id,
			PersonEvn_id: form.PersonEvn_id,
			Server_id: form.Server_id
		};
		var my_params = new Object();
		my_params.JobOrg_id = form.PersonInfoFrame.getFieldValue('JobOrg_id');
		my_params.Person_Post = form.PersonInfoFrame.getFieldValue('Person_Post');
		my_params.parentClass = form.data.Code;
		my_params.onHide = Ext.emptyFn;
		var onSaveEvnStick = function(data) {
			if ( !data || !data.evnStickData ) {
				return false;
			}
			var reload_params = {
				section_code: 'EvnStick',
				object_key: 'EvnStick_id',
				object_value: data.evnStickData[0].EvnStick_id,
				parent_object_key: form.data.key,
				parent_object_value: form.data.id,
				section_id: 'EvnStickList_'+ form.data.id
			};
			this.reloadViewForm(reload_params);
			this.Tree.getNodeById(form.data.Code +'_'+ form.data.id).reload();
		}.createDelegate(this);

		if ( action == 'add' ) {
			var EvnData = form.getObjectData(form.data.Code,el_data.object_id);
			if (EvnData == false)
			{
				return false;
			}
			formParams.EvnStick_id = 0;
			var children = form.getObjectChildren(form.data.Code,el_data.object_id);
			if(form.data.Code == 'EvnPS') {
				formParams.EvnStick_mid = EvnData.EvnPS_id;
				formParams.EvnStick_pid = EvnData.EvnPS_id;
				//formParams.EvnStick_begDate = Date.parseDate(EvnData.EvnPS_setDate, 'd.m.Y');
				//formParams.EvnStick_setDate = Date.parseDate(EvnData.EvnPS_setDate, 'd.m.Y');

				my_params.LpuUnitType_SysNick = EvnData.LpuUnitType_SysNick;

				my_params.stacBegDate = null;
				my_params.stacEndDate = null;
				var emptyEndDate = false;

				if (children && children.EvnSection && children.EvnSection.item && children.EvnSection.item.forEach) {
					children.EvnSection.item.forEach(function(evn_section){
						var obj = evn_section.data;
						if (obj.EvnSection_setDate && (my_params.stacBegDate > Date.parseDate(obj.EvnSection_setDate, 'd.m.Y') || my_params.stacBegDate == null)) {
							my_params.stacBegDate = Date.parseDate(obj.EvnSection_setDate, 'd.m.Y');
						}

						if (obj.EvnSection_disDate && (my_params.stacEndDate < Date.parseDate(obj.EvnSection_disDate, 'd.m.Y') || my_params.stacEndDate == null)) {
							my_params.stacEndDate = Date.parseDate(obj.EvnSection_disDate, 'd.m.Y');
						} else {
							my_params.stacEndDate = null;
						}
					});
				}

				my_params.evnStickType = 1;
				my_params.formParams = formParams;
				my_params.callback = onSaveEvnStick;
				form.openForm('swEvnStickChangeWindow','XXX_id',my_params,action,langs('Выбор документа нетрудоспособности'));
			} else {
				var diag_code = EvnData.Diag_Code;
				if (getRegionNick() == 'kz' && (diag_code >= 'A15.0' && diag_code <= 'A19.9' || diag_code >= 'A30.1' && diag_code <= 'A30.2')) {
					my_params.isTubDiag = true;
				}
                formParams.EvnStick_mid = el_data.object_id;
                formParams.EvnStick_pid = el_data.object_id;
                this.getEvnStickSetdate({
                        EvnStick_mid: el_data.object_id
                },
                function(data){
                    formParams.EvnStick_begDate = Date.parseDate(data[0].EvnStick_setDate, 'd.m.Y');
                    formParams.EvnStick_setDate = Date.parseDate(data[0].EvnStick_setDate, 'd.m.Y');
                    my_params.formParams = formParams;
                    my_params.callback = onSaveEvnStick;
                    form.openForm('swEvnStickChangeWindow','XXX_id',my_params,action,langs('Выбор документа нетрудоспособности'));
                });
            }
		}
		else {
			var EvnData = form.getObjectData(form.data.Code,form.data.id);
			var evn_stick_data = form.getObjectData(el_data.object,el_data.object_id);
			//log(evn_stick_data);
			if (evn_stick_data == false)
			{
				return false;
			}
			formParams.Person_id = evn_stick_data.Person_id;
			formParams.Server_id = evn_stick_data.Server_id;
			formParams.EvnStick_mid = evn_stick_data.Evn_pid;
			formParams.EvnStick_pid = evn_stick_data.Evn_pid;
			formParams.EvnStick_id = evn_stick_data.EvnStick_id;
			my_params.evnStickType = evn_stick_data.evnStickType;
			my_params.action = action;
			my_params.callback = onSaveEvnStick;
			if (evn_stick_data.accessType != 'edit' )
			{
				my_params.action = 'view';
			}

			if(form.data.Code == 'EvnPS') {
				my_params.LpuUnitType_SysNick = EvnData.LpuUnitType_SysNick;

				my_params.stacBegDate = null;
				my_params.stacEndDate = null;

				var children = form.getObjectChildren(form.data.Code,form.data.id);
				if (children && children.EvnSection && children.EvnSection.item && children.EvnSection.item.forEach) {
					children.EvnSection.item.forEach(function(evn_section){
						var obj = evn_section.data;
						if (obj.EvnSection_setDate && (my_params.stacBegDate > Date.parseDate(obj.EvnSection_setDate, 'd.m.Y') || my_params.stacBegDate == null)) {
							my_params.stacBegDate = Date.parseDate(obj.EvnSection_setDate, 'd.m.Y');
						}

						if (obj.EvnSection_disDate && (my_params.stacEndDate < Date.parseDate(obj.EvnSection_disDate, 'd.m.Y') || my_params.stacEndDate == null)) {
							my_params.stacEndDate = Date.parseDate(obj.EvnSection_disDate, 'd.m.Y');
						} else {
							my_params.stacEndDate = null;
						}
					});
				}
			}

			my_params.formParams = formParams;
			switch ( evn_stick_data.evnStickType ) {
				case 1:
				case 2:
					form.openForm('swEvnStickEditWindow','XXX_id',my_params,my_params.action,langs('Окно выписки листа нетрудоспособности'));
				break;
				case 3:
					form.openForm('swEvnStickStudentEditWindow','XXX_id',my_params,my_params.action,langs('Окно выписки справки учащегося'));
				break;
			}
		}
	},
	openEvnStickEditWindow2: function(action) {
		if ( !action.inlist(['add','edit','view']) )
		{
			return false;
		}
		var form = this;
		var evnstick_node = form.Tree.getSelectionModel().selNode;
		var evnstick_pid = evnstick_node.attributes.EvnStick_pid || null;
		var evnstick_id = evnstick_node.attributes.object_value || null;
		var evnsticktype = evnstick_node.attributes.evnStickType || null;
		var parentclass = 'EvnPL';
		if (evnstick_node.attributes.object.inlist(['EvnPL','EvnPLStom','EvnPS'])) {
			parentclass = evnstick_node.attributes.object;
		}
		//var evnstick_parentnum = evnstick_node.attributes.EvnStick_ParentNum || null;
		var my_params = new Object();
		var onSaveEvnStick = function(data) {
			
			if ( !data || !data.evnStickData || !this.data || 'EvnPL' != this.data.Code || evnstick_pid != this.data.id ) {
				if (evnstick_node.parentNode) {
					evnstick_node.parentNode.reload();
				}
				return false;
			}
			
			var reload_params = {
				section_code: 'EvnStick',
				object_key: 'EvnStick_id',
				object_value: data.evnStickData[0].EvnStick_id,
				parent_object_key: 'EvnPL_id',
				parent_object_value: this.data.id,
				section_id: 'EvnStickList_'+ this.data.id
			};
			this.reloadViewForm(reload_params);
			if (evnstick_node.parentNode) {
				evnstick_node.parentNode.reload();
			}
		}.createDelegate(this);
		my_params.onHide = Ext.emptyFn;
		my_params.JobOrg_id = form.PersonInfoFrame.getFieldValue('JobOrg_id');
		my_params.Person_Post = form.PersonInfoFrame.getFieldValue('Person_Post');
		var formParams = {
			EvnStick_mid: evnstick_pid,
			EvnStick_pid: evnstick_pid
		};
		formParams.Person_id = form.Person_id;
		formParams.PersonEvn_id = form.PersonEvn_id;
		formParams.Server_id = form.Server_id;
		
		if ( action == 'add' ) {
			this.getEvnStickSetdate(
			{
				EvnStick_mid: evnstick_pid
			},
			function(data){
				formParams.EvnStick_begDate = Date.parseDate(data[0].EvnStick_setDate, 'd.m.Y');
				formParams.EvnStick_setDate = Date.parseDate(data[0].EvnStick_setDate, 'd.m.Y');
				my_params.formParams = formParams;
				my_params.parentClass = parentclass;
				my_params.callback = onSaveEvnStick;
				form.openForm('swEvnStickChangeWindow','XXX_id',my_params,action,langs('Выбор документа нетрудоспособности'));
			});
		}
		else {

			if ( form.isReadOnly || evnstick_node.attributes.accessType != 'edit' ) {
				my_params.action = 'view';
			}

			formParams.EvnStick_id = evnstick_id;

			my_params.evnStickType = evnsticktype;
			my_params.formParams = formParams;
			my_params.parentClass = parentclass;
			//my_params.parentNum = evnstick_parentnum;
			my_params.callback = onSaveEvnStick;

			switch ( evnsticktype ) {
				case 1:
				case 2:
					form.openForm('swEvnStickEditWindow','XXX_id',my_params,action,langs('Окно выписки листа нетрудоспособности'));
				break;

				case 3:
					form.openForm('swEvnStickStudentEditWindow','XXX_id',my_params,my_params.action,langs('Окно выписки справки учащегося'));
				break;

				default:
					return false;
				break;
			}
		}
	},
	openMorbusHepatitisSpecificForm: function(options) {
		if(!options.action || !options.object || !options.eldata) {
			return false;
		}
		
		var win_name,
			object_id,
			data,
			mhdata,
			evndata,
			evnsysnick = this.defineParentEvnClass().EvnClass_SysNick,
			params = {formParams: {}};
			
		/*
		log('openMorbusHepatitisSpecificForm');
		log(options);
		*/
		if(options.action == 'add') {
			object_id = (options.eldata.object_id.split('_').length > 1)?options.eldata.object_id.split('_')[1]:options.eldata.object_id;
			mhdata = options.mhdata || this.getObjectData('MorbusHepatitis',object_id);
			if(!mhdata) {
				return false;
			}
		} else {
			object_id = (options.eldata.object_id.split('_').length > 1)?options.eldata.object_id.split('_')[1]:options.eldata.object_id;
			data = this.getObjectData(options.object,object_id);
			if(!data) {
				return false;
			}
			mhdata = options.mhdata || this.getObjectData('MorbusHepatitis',data.MorbusHepatitis_id);
			if(!mhdata) {
				return false;
			}
		}
		evndata = this.getObjectData(evnsysnick,mhdata.MorbusHepatitis_pid || data.Evn_id);
		if(!evndata) {
			return false;
		}
		/*if(evndata.accessType == 'view') {
			return false;
		}*/
		
		if(options.action == 'add' && object_id == -1) {
			Ext.Ajax.request({
				url: '/?c=MorbusHepatitis&m=saveMorbusHepatitis',
				params: {
					Evn_pid: mhdata.MorbusHepatitis_pid
					,MorbusHepatitis_id: 0
				},
				callback: function(o, s, response) {
					var response_obj = Ext.util.JSON.decode(response.responseText);
					if ( response_obj.success == true ) {
						var reload_params = {
							section_code: 'MorbusHepatitis',
							object_key: 'MorbusHepatitis_id',
							object_value: 0,
							parent_object_key: 'MorbusHepatitis_pid',
							parent_object_value: mhdata.MorbusHepatitis_pid,
							section_id: 'MorbusHepatitis_'+ mhdata.MorbusHepatitis_pid +'_-1',
							callback: function(){
							}.createDelegate(this)
						};
						this.reloadViewForm(reload_params);
						
						options.eldata.object_id = mhdata.MorbusHepatitis_pid +'_'+ response_obj.MorbusHepatitis_id;
						options.eldata.section_id = options.eldata.object +'_'+ mhdata.MorbusHepatitis_pid +'_'+ response_obj.MorbusHepatitis_id;
						mhdata.MorbusHepatitis_id = response_obj.MorbusHepatitis_id;
						options.mhdata = mhdata;
						this.openMorbusHepatitisSpecificForm(options);
					}
				}.createDelegate(this)
			});
			return true;
		}

		params.callback = function() {
			var reload_params = {
				section_code: options.object,
				object_key: options.object +'_id',
				object_value: object_id,
				parent_object_key: 'MorbusHepatitis_id',
				parent_object_value: mhdata.MorbusHepatitis_id,
				param_name: 'MorbusHepatitis_pid',
				param_value: mhdata.MorbusHepatitis_pid,
				section_id: options.object +'List_'+ mhdata.MorbusHepatitis_pid +'_'+ mhdata.MorbusHepatitis_id
			};
			this.reloadViewForm(reload_params);
		}.createDelegate(this);
		
		switch(options.object) {
			case 'MorbusHepatitisEvn':
				if(!data.EvnClass_sysNick || !data.EvnClass_sysNick.inlist(['EvnVizitPL','EvnSection']) || !data.Evn_id || !data.Evn_pid || options.action != 'openEvn') {
					return false;
				}
				if(data.EvnClass_sysNick == 'EvnVizitPL') {
                    if (getWnd('swEmkEvnPLEditWindow').isVisible())
                    {
                        sw.swMsg.alert(langs('Сообщение'), langs('Форма "ТАП:Просмотр посещения" в данный момент открыта.'));
                        return false;
                    }
					params.onHide = Ext.emptyFn;
					params.callback = Ext.emptyFn;
					params.formParams.Person_id = this.Person_id;
					params.formParams.PersonEvn_id = this.PersonEvn_id;
					params.formParams.Server_id = this.Server_id;
					params.formParams.EvnVizitPL_id = data.Evn_id;
					params.formParams.EvnPL_id = data.Evn_pid;
					this.openForm('swEmkEvnPLEditWindow','XXX_id',params,'viewEvnVizitPL',langs('Просмотр посещения'));
					return true;
				}
				if(data.EvnClass_sysNick == 'EvnSection') {
					params.onHide = Ext.emptyFn;
					params.callback = Ext.emptyFn;
					params.formParams.Person_id = this.Person_id;
					params.formParams.PersonEvn_id = this.PersonEvn_id;
					params.formParams.Server_id = this.Server_id;
					params.formParams.EvnSection_id = data.Evn_id;
					params.formParams.EvnSection_pid = data.Evn_pid;
					this.openForm('swEvnSectionEditWindow','XXX_id',params,'view',langs('Просмотр движения'));
					return true;
				}
				break;
			case 'MorbusHepatitisVaccination':
				win_name = 'swMorbusHepatitisVaccinationWindow';
				if(options.action == 'add') {
					params.MorbusHepatitisVaccination_id = null;
					params.formParams = {MorbusHepatitis_id: mhdata.MorbusHepatitis_id, EvnSection_id: mhdata.MorbusHepatitis_pid};
				}
				if(options.action == 'edit') {
					params.MorbusHepatitisVaccination_id = object_id;
					params.formParams = {MorbusHepatitis_id: mhdata.MorbusHepatitis_id};
				}
				break;
			case 'MorbusHepatitisCure':
				win_name = 'swMorbusHepatitisCureWindow';
				if(options.action == 'add') {
					params.MorbusHepatitisCure_id = null;
					params.formParams = {MorbusHepatitis_id: mhdata.MorbusHepatitis_id, EvnSection_id: mhdata.MorbusHepatitis_pid};
				}
				if(options.action == 'edit') {
					params.MorbusHepatitisCure_id = object_id;
					params.formParams = {MorbusHepatitis_id: mhdata.MorbusHepatitis_id};
				}
				if(options.action == 'openEffMonitoring') {
					getWnd('swMorbusHepatitisCureEffMonitoringList').show({MorbusHepatitisCure_id: data.MorbusHepatitisCure_id, accessType: data.AccessType});
					return true;
				}
				break;
			case 'MorbusHepatitisDiag':
				win_name = 'swMorbusHepatitisDiagWindow';
				if(options.action == 'add') {
					params.MorbusHepatitisDiag_id = null;
					params.formParams = {MorbusHepatitis_id: mhdata.MorbusHepatitis_id, EvnSection_id: mhdata.MorbusHepatitis_pid};
					params.formParams.MorbusHepatitisDiag_setDT = (evnsysnick == 'EvnVizitPL')?evndata.EvnVizitPL_setDate:evndata.EvnSection_setDate;
				}
				if(options.action == 'edit') {
					params.MorbusHepatitisDiag_id = object_id;
					params.formParams = {MorbusHepatitis_id: mhdata.MorbusHepatitis_id};
				}
				break;
			case 'MorbusHepatitisQueue':
				win_name = 'swMorbusHepatitisQueueWindow';
				if(options.action == 'add') {
					params.MorbusHepatitisQueue_id = null;
					params.formParams = {MorbusHepatitis_id: mhdata.MorbusHepatitis_id};
				}
				if(options.action == 'edit') {
					params.MorbusHepatitisQueue_id = object_id;
					params.formParams = {MorbusHepatitis_id: mhdata.MorbusHepatitis_id};
				}
				break;
			case 'MorbusHepatitisPlan':
				win_name = 'swMorbusHepatitisPlanWindow';
				if(options.action == 'add') {
					params.MorbusHepatitisPlan_id = null;
					params.formParams = {MorbusHepatitis_id: mhdata.MorbusHepatitis_id};
				}
				if(options.action == 'edit') {
					params.MorbusHepatitisPlan_id = object_id;
					params.formParams = {MorbusHepatitis_id: mhdata.MorbusHepatitis_id};
				}
				break;
			case 'MorbusHepatitisFuncConfirm':
			case 'MorbusHepatitisLabConfirm':
				win_name = 'swEvnUslugaCommonEditWindow';
				params.Person_id = this.PersonInfoFrame.getFieldValue('Person_id');
				params.Person_Firname = this.PersonInfoFrame.getFieldValue('Person_Firname');
				params.Person_Surname = this.PersonInfoFrame.getFieldValue('Person_Surname');
				params.Person_Secname = this.PersonInfoFrame.getFieldValue('Person_Secname');
				params.Person_Birthday = this.PersonInfoFrame.getFieldValue('Person_Birthday');
				params.parentClass = (evnsysnick == 'EvnVizitPL')?'EvnVizit':'EvnSection';
				params.parentEvnComboData = [{
					Evn_id: (evnsysnick == 'EvnVizitPL')?evndata.EvnVizitPL_id:evndata.EvnSection_id,
					LpuSection_id: evndata.LpuSection_id,
					MedStaffFact_id: evndata.MedStaffFact_id,
					MedPersonal_id: evndata.MedPersonal_id,
					Evn_Name: (evnsysnick == 'EvnVizitPL')?langs('Посещение пациентом поликлиники'):langs('Движение'),
					Evn_setDate: Date.parseDate((evnsysnick == 'EvnVizitPL')?evndata.EvnVizitPL_setDate:evndata.EvnSection_setDate, 'd.m.Y'),
					Evn_setTime: (evnsysnick == 'EvnVizitPL' ? evndata.EvnVizitPL_setTime : evndata.EvnSection_setTime)
				}];
				params.action = options.action;
				params.UslugaConfirm = (options.object == 'MorbusHepatitisFuncConfirm')?'FuncConfirm':'LabConfirm';
				params.formParams = {
					//Morbus_id: null
					EvnUslugaCommon_rid: (evnsysnick == 'EvnVizitPL')?evndata.EvnVizitPL_id:evndata.EvnSection_id,
					Person_id: this.Person_id,
					PersonEvn_id: this.PersonEvn_id,
					Server_id: this.Server_id
				};
				
				if(options.action == 'add') {
					params.formParams.EvnUslugaCommon_id = 0;
				}
				if(options.action == 'edit' || options.action == 'openUsluga') {
					params.formParams.EvnUslugaCommon_id = data.EvnUsluga_id;
					params.action = data.AccessType;
					params.accessType = data.AccessType;
					if(data.EvnClass_SysNick == 'EvnUslugaPar') {
						win_name = 'swEvnUslugaParEditWindow';
						params.EvnUslugaPar_id = data.EvnUsluga_id;
						params.formParams.EvnUslugaPar_id = data.EvnUsluga_id;
						params.onSaveUsluga = params.callback;
					}
					if(options.action == 'openUsluga') {
						params.action = 'view';
						params.accessType = 'view';
					}
				}
				break;
			default:
				return false;
		}
		getWnd(win_name).show(params);
	},
	/**
	 * Переключение видимости элемента
	 * @param string id DOM
	 * @param boolean hide Принудительно скрыть или отобразить
	 */
	toggleDisplay: function(id, hide) {
		var el = Ext.get(id);
		if ( el ) {
			if ( typeof hide == 'undefined' ) {
				hide = el.isDisplayed() ? true : false;
			}
			if ( hide == true ) {
				el.setStyle({display: 'none'});
			} else {
				el.setStyle({display: 'block'});
			}
		}
	},
	/*
	 * Переключение видимости для элементов содержащих canvas
	 */
	toggleCanvasDisplay: function(id){
		var el = Ext.get(id);
		if ( el ) {
			var hide = el.hasClass('canvasHidden') ? false : true;
			if ( hide === true ) {
				el.addClass('canvasHidden');
			} else {
				el.removeClass('canvasHidden');
			}
		}
	},
    /**
     * Переключение видимости назначений курса
     */
    toogleEvnCourse: function(d) {
        var parts, className, EvnPrescrSection;
        parts = d.object_id.split('-');
        EvnPrescrSection = d.object+'List_'+parts[0];
        className = 'EvnCourse'+parts[1];
        if (className) {
            var node_list = Ext.query("*[class*="+className+"]",Ext.getDom(EvnPrescrSection));
            var i, el;
            for(i=0; i < node_list.length; i++)
            {
                el = new Ext.Element(node_list[i]);
                this.toggleDisplay(el.id, el.isDisplayed());
            }
        }
    },
    /**
     * Переключение видимости назначений курса
     */
    toogleEvnCourseTreat: function(e, c, d) {
        var btnEl = new Ext.Element(c),
            viewDataEl = Ext.get(d.object+'_'+d.object_id+'_EvnCourseTreatViewData'),
            listEl = Ext.get(d.object+'_'+d.object_id+'_EvnCourseTreatItems');
        if (!btnEl || !listEl || !viewDataEl) {
            return false;
        }
        this.toggleDisplay(listEl.id, listEl.isDisplayed());
        if (btnEl.hasClass('EvnPrescrTreatCollapsed')) {
            if (viewDataEl.dom.innerHTML.length == 0) {
                var ep_data = this.getObjectData(d.object, d.object_id);
                if ( ep_data == false || !ep_data.EvnCourse_id) {
                    return false;
                }
                if (!this.input_cmp_list) {
                    this.input_cmp_list = {};
                }
                this.input_cmp_list[viewDataEl.id] = new sw.Promed.EvnPrescrTreatDrugDataView(
                    'EvnPrescrTreatDrugDataView'+ep_data.EvnCourse_id,
                    viewDataEl.id,
                    ep_data,
                    this,
                    'EvnPrescrPlan',
                    d
                );
            }
            btnEl.removeClass('EvnPrescrTreatCollapsed');
            btnEl.update(langs('Cвернуть'));
        } else {
            btnEl.addClass('EvnPrescrTreatCollapsed');
            btnEl.update(langs('Развернуть'));
        }
        return true;
    },
    /**
     * Отображение меню с действиями для разделов панели просмотра
     * Пока только для документов
     */
    showActions: function(e, c, d, btn_suffix) {
        var form = this;
        if (!form.showActionsMenu) {
            form.showActionsMenu = new Ext.menu.Menu({id: 'showActionsMenu'});
            form.showActionsMenu.swE = e;
            form.showActionsMenu.swS = c;
            form.showActionsMenu.swD = d;
            form.showActionsMenu.swOnHide = Ext.emptyFn;
            form.showActionsMenu.on('hide', function(menu){
                form.showActionsMenu.swOnHide(menu);
            });
            form.showActionsMenu.swMouseOver  = Ext.emptyFn;
            form.showActionsMenu.on('mouseover', function(menu){
                form.showActionsMenu.swMouseOver(menu);
            });
           /* form.showActionsMenu.add({
                id: 'EvnXml_print',
                text: langs('Печать документа'),
                iconCls: 'print16',
                actionType: 'view',
                handler: function() {
					var EvnXml_id = form.showActionsMenu.swD.object_id,
						doc = form.listEvnXml[EvnXml_id];
					if (doc) {
						doc.doPrint();
					} else if (EvnXml_id)  {
						sw.Promed.EvnXml.doPrintById(EvnXml_id);
					}
                }
            });*/
            form.showActionsMenu.add({
                id: 'EvnXml_delete',
                text: 'Удалить документ',
                iconCls: 'delete16',
                actionType: 'edit',
                handler: function() {
                    form.deleteEvent('FreeDocument', form.showActionsMenu.swD);
                }
            });
            form.showActionsMenu.add({
                id: 'EvnXml_save',
                text: langs('Сохранить как шаблон'),
                iconCls: 'copy16',
                actionType: 'edit',
                handler: function() {
                    var EvnXml_id = form.showActionsMenu.swD.object_id,
                        doc = form.listEvnXml[EvnXml_id];
                    if (doc) {
                        doc.saveAsXmlTemplate();
                    }
                }
            });
            form.showActionsMenu.add({
                id: 'XmlTemplate_search',
                text: langs('Выбор шаблона'),
                iconCls: 'search16',
                actionType: 'edit',
                handler: function() {
                    form.changeXmlTemplateForEvnXml(form.showActionsMenu.swD);
                }
            });
            form.showActionsMenu.add({
                id: 'EvnXml_reload',
                text: langs('Восстановить шаблон'),
                iconCls: 'template16',
                actionType: 'edit',
                handler: function() {
                    form.reloadEvnXml(form.showActionsMenu.swD);
                }
            });
            form.showActionsMenu.add({
                id: 'EvnXml_clear',
                text: langs('Очистить'),
                iconCls: 'clear16',
                actionType: 'edit',
                handler: function() {
                    form.clearEvnXml(form.showActionsMenu.swD);
                }
            });
			form.showActionsMenu.add({
				id: 'EvnXml_copy',
				text: langs('Копировать'),
				iconCls: 'copy16',
				actionType: 'edit',
				handler: function() {
					var rec = form.getObjectData(form.showActionsMenu.swD.object,form.showActionsMenu.swD.object_id);
					if(rec) {
						form.copyEvnXML(rec);
					}
					else{
						sw.swMsg.alert(langs('Сообщение'), langs('Не удалось найти шаблон.'));
					}
				}
			});
		}
        form.showActionsMenu.items.each(function(item){
            if (item.actionType == 'edit') {
                item.setDisabled(d.isReadOnly);
            }
        });
        form.showActionsMenu.swE = e;
        form.showActionsMenu.swS = c;
        form.showActionsMenu.swD = d;
        form.showActionsMenu.swOnHide = function(menu){
            var el = document.getElementById(menu.swD.object +'_'+ menu.swD.object_id +'_wrap');
            if (el) {
                el.style['backgroundColor']='';
            }
        };
        form.showActionsMenu.swMouseOver = function(menu){
            var el = document.getElementById(menu.swD.object +'_'+ menu.swD.object_id +'_wrap');
            if (el) {
                el.style['backgroundColor']='#d9e8fb';
            }
        };
        form.showActionsMenu.show(Ext.get(d.object +'_'+d.object_id+'_'+btn_suffix));
        var el = document.getElementById(form.showActionsMenu.swD.object +'_'+ form.showActionsMenu.swD.object_id +'_wrap');
        if (el) {
            el.style['backgroundColor']='#d9e8fb';
        }
    },
	showActionsForEvnXmlDirection: function(e, c, d, btn_suffix) {
		var form = this;
		if (!form.showActionsMenuEXD) {
			form.showActionsMenuEXD = new Ext.menu.Menu({id: 'showActionsMenuEXD'});
			form.showActionsMenuEXD.swE = e;
			form.showActionsMenuEXD.swS = c;
			form.showActionsMenuEXD.swD = d;
			form.showActionsMenuEXD.swOnHide = Ext.emptyFn;
			form.showActionsMenuEXD.on('hide', function(menu){
				form.showActionsMenuEXD.swOnHide(menu);
			});
			form.showActionsMenuEXD.swMouseOver  = Ext.emptyFn;
			form.showActionsMenuEXD.on('mouseover', function(menu){
				form.showActionsMenuEXD.swMouseOver(menu);
			});
			/* form.showActionsMenu.add({
				 id: 'EvnXml_print',
				 text: langs('Печать документа'),
				 iconCls: 'print16',
				 actionType: 'view',
				 handler: function() {
					 var EvnXml_id = form.showActionsMenu.swD.object_id,
						 doc = form.listEvnXml[EvnXml_id];
					 if (doc) {
						 doc.doPrint();
					 } else if (EvnXml_id)  {
						 sw.Promed.EvnXml.doPrintById(EvnXml_id);
					 }
				 }
			 });*/
			form.showActionsMenuEXD.add({
				id: 'EvnXml_delete',
				text: 'Удалить документ',
				iconCls: 'delete16',
				actionType: 'edit',
				handler: function() {
					form.deleteEvent('EvnXmlDirectionLink', form.showActionsMenuEXD.swD);
				}
			});
		}
		form.showActionsMenuEXD.items.each(function(item){
			if (item.actionType == 'edit') {
				item.setDisabled(d.isReadOnly);
			}
		});
		form.showActionsMenuEXD.swE = e;
		form.showActionsMenuEXD.swS = c;
		form.showActionsMenuEXD.swD = d;
		form.showActionsMenuEXD.swOnHide = function(menu){
			var el = document.getElementById(menu.swD.object +'_'+ menu.swD.object_id +'_wrap');
			if (el) {
				el.style['backgroundColor']='';
			}
		};
		form.showActionsMenuEXD.swMouseOver = function(menu){
			var el = document.getElementById(menu.swD.object +'_'+ menu.swD.object_id +'_wrap');
			if (el) {
				el.style['backgroundColor']='#d9e8fb';
			}
		};
		form.showActionsMenuEXD.show(Ext.get(d.object +'_'+d.object_id+'_'+btn_suffix));
		var el = document.getElementById(form.showActionsMenuEXD.swD.object +'_'+ form.showActionsMenuEXD.swD.object_id +'_wrap');
		if (el) {
			el.style['backgroundColor']='#d9e8fb';
		}
	},
	addXmlDocumentToEvnDirection: function(Person_id, EvnDirection_id)
	{
		if (Person_id == undefined || EvnDirection_id == undefined)
		{
			return false;
		}

		var params = {
			onHide: function() {
			},
			callback: function(data) {
				if(typeof data != 'object' || ! data.evnXmlData || ! data.evnXmlData.EvnXml_id) {
					return false;
				}

				var EvnXml_id = data.evnXmlData.EvnXml_id;

				var params = {
					EvnDirection_id: EvnDirection_id,
					EvnXml_id: EvnXml_id
				};

				this.createEvnXmlDirectionLink(params);

			}.createDelegate(this),

			Person_id: Person_id
		};


		getWnd('swEmkDocumentsListWindow').show(params);
	},
	createEvnXmlDirectionLink: function(params)
	{
		if (typeof params !== 'object' || ! params.EvnXml_id || !params.EvnDirection_id)
		{
			return false;
		}
		var url = '/?c=EvnXml&m=createEvnXmlDirectionLink';

		this.requestSaveWithShowInfoMsg(url, params,
			function(response_obj) {
				if (response_obj.success && response_obj.EvnXmlDirectionLink_id > 0) {
					this.loadNodeViewForm(this.Tree.getNodeById(this.node.id), function() {
						var s_id = 'EvnXmlDirectionLinkList_' + params.EvnDirection_id;
						if (Ext.fly(s_id)){
							document.getElementById(s_id).scrollIntoView();
							document.getElementById('main-center-panel').scrollIntoView();
						}
					});
				}
			}, this);
		return true;
	},
    addXmlDocument: function(d, itemSectionCode, XmlType_id) {
        var form = this;
        //сейчас нет просмотра движения/посещения отдельно от КВС/ТАП, документы крепятся к посещению/движению
        var evnsysnick, evnclass_id,evn_data;
        switch (true) {
            case (form.data.Code.inlist(['EvnPL','EvnVizitPL'])):
                evnsysnick = 'EvnVizitPL';
                evnclass_id = 11;
                break;
            case (form.data.Code.inlist(['EvnPLStom','EvnVizitPLStom'])):
                evnsysnick = 'EvnVizitPLStom';
                evnclass_id = 13;
                break;
            default:
                evnsysnick = 'EvnSection';
                evnclass_id = 32;
                break;
        }
        evn_data = form.getObjectData(evnsysnick,d.object_id);
        if (!evn_data) {
            log('addXmlDocument: evn_data is undefined');
            return false;
        }
        switch (true) {
            case (evn_data.EvnClass_id && evn_data.EvnClass_id > 0):
                // берем реальный EvnClass_id
                evnclass_id = evn_data.EvnClass_id;
                break;
        }
        
        if(getRegionNick() == 'msk'){
			form.saveEvnXmlWithBaseXmlTemplate({
				itemSectionCode: itemSectionCode,
				EvnClass_id: evnclass_id,
				Evn_id: d.object_id,
				XmlType_id: XmlType_id,
				isSelect: true,
				createEmpty: true
			});
			return false;
		}
        
        getWnd('swTemplSearchWindow').show({
            onSelect: function(data) {
                var params = {
                    itemSectionCode: itemSectionCode,
                    Evn_id: d.object_id,
                    XmlTemplate_id: data.XmlTemplate_id,
                    XmlType_id: XmlType_id,
                    isSelect: true
                };
                form.saveEvnXmlWithBaseXmlTemplate(params);
            },
            EvnClass_id: evnclass_id,
            Evn_id: d.object_id,
            XmlType_id: XmlType_id,
			isEMK: true,
			itemSectionCode: itemSectionCode,
			ARMType: sw.Promed.MedStaffFactByUser.current.ARMType
        });
        return true;
    },
    clearEvnXml: function(d) {
        var form = this;
        var params = {};
		var f,xmldatanew={},flag=false;

		var searchField = /^EvnXml.*$/.test(d.object)?'EvnXml_id':'Evn_id';

		for (var field_id in form.input_cmp_list) {
			var input_cmp = form.input_cmp_list[field_id];
			if (input_cmp.field && input_cmp.field[searchField] == d.object_id) {
				params.EvnXml_id = input_cmp.field.EvnXml_id;
				input_cmp.setContent('&nbsp;-');
				xmldatanew[input_cmp.field.name] = '&nbsp;-';
				flag = true;
			}
		}

		if (!flag) {
			return false;
		}
		params['XmlData'] = Ext.util.JSON.encode(xmldatanew);
		
		form.requestSaveWithShowInfoMsg('/?c=EvnXml&m=updateContent', 
			params, 
			function(response_obj) {
				if ( response_obj.success ) {
					//form.loadNodeViewForm(form.Tree.getNodeById(form.node.id));
				} 
			}, form);
        return true;
    },
    reloadEvnXml: function(d) {
        var form = this;
        var docdata = form.getObjectData(d.object, d.object_id);
        if(!docdata) {
            log('reloadEvnXml: docdata is undefined');
            return false;
        }
        var params = {
            itemSectionCode: d.object,
            EvnXml_id: d.object_id,
            XmlType_id: docdata.XmlType_id,
            isSelect: false
        };
        form.saveEvnXmlWithBaseXmlTemplate(params);
        return true;
    },
    changeXmlTemplateForEvnXml: function(d) {
        var form = this;
        var docdata = form.getObjectData(d.object, d.object_id);
        if(!docdata) {
            log('changeXmlTemplateForEvnXml: docdata is undefined');
            return false;
        }
        getWnd('swTemplSearchWindow').show({
            onSelect: function(data) {
                var params = {
                    itemSectionCode: d.object,
                    EvnXml_id: d.object_id,
                    XmlTemplate_id: data.XmlTemplate_id,
                    XmlType_id: docdata.XmlType_id, //не должен поменяться
                    isSelect: true
                };
                form.saveEvnXmlWithBaseXmlTemplate(params);
            },
            EvnClass_id: docdata.EvnClass_id,
            Evn_id: docdata.EvnXml_pid,
            EvnXml_id: docdata.EvnXml_id,
            XmlType_id: docdata.XmlType_id
        });
        return true;
    },
	createXmlTemplateForEmptyEvnXml: function(d) {
		var form = this;
		getWnd('swTemplSearchWindow').show({
			onSelect: function(data) {
				if(data.isNotSelect) {
					form.deleteEvent(
						'FreeDocument', 
						{ object: d.itemSectionCode, object_id: d.EvnXml_id, section_id: d.itemSectionCode + "_" +d.EvnXml_id },
						{ ignoreQuestion: true }
						);
				} else {
					form.saveEvnXmlWithBaseXmlTemplate({
						itemSectionCode: d.itemSectionCode,
						EvnXml_id: d.EvnXml_id,
						XmlTemplate_id: data.XmlTemplate_id,
						XmlType_id: data.XmlType_id, //не должен поменяться
						isSelect: true
					});
				}
			},
			EvnClass_id: d.EvnClass_id,
			Evn_id: d.Evn_id,
			EvnXml_id: d.EvnXml_id,
			XmlType_id: d.XmlType_id,
			isEmpty: true
		});
		return true;
	},
    toggleDisplayDocument: function(id, itemSectionCode, isReadOnly) {
        // сворачивание / разворачивание документа
		var win = this;
        var el = Ext.get(itemSectionCode +'_Data_'+ id);
		var sectionData = this.getObjectData(itemSectionCode, id);
		var instance_id = (sectionData && sectionData.instance_id)?sectionData.instance_id:null;
        if (el.hasClass('freedoc_opened')) {
            if (el.isDisplayed()) {
                el.setStyle('display', 'none');
            } else {
                el.setStyle('display', 'block');
            }
        } else {
            el.addClass('freedoc_opened');

            // Грузим данные документа с сервера
			var params = {
				EvnXml_id: id,
				instance_id: instance_id
			};

			var selNode = this.Tree.getSelectionModel().getSelectedNode();
			if (selNode && selNode.attributes && selNode.attributes.archiveRecord) {
				params.archiveRecord = selNode.attributes.archiveRecord;
			}

			win.getLoadMask(LOAD_WAIT).show();
			Ext.Ajax.request({
				url: '/?c=Template&m=loadEvnXmlViewData',
				params: params,
				callback: function(options, success, response) {
					win.getLoadMask().hide();

					if ( success ) {
						var response_obj = Ext.util.JSON.decode(response.responseText);
						if (response_obj.html) {
							el.insertHtml("afterBegin", response_obj.html);
							win.hidePrintOnly(itemSectionCode +'_Data_'+ params.EvnXml_id);

							if (response_obj.EvnXml_id && !isReadOnly) {
								// области редактирования
								win.processingXmlData({
									Evn_id: response_obj.Evn_id || null,
									Evn_pid: response_obj.Evn_pid || null,
									Evn_rid: response_obj.Evn_rid || null,
									EvnClass_id: response_obj.EvnClass_id,
									EvnXml_id: response_obj.EvnXml_id,
									XmlType_id: response_obj.XmlType_id,
									xml_data: response_obj.xml_data,
									instance_id: instance_id,
									sectionCode: itemSectionCode
								});
							}
						}
					}

					el.setStyle('display', 'block');

					var s_id = itemSectionCode +'_'+ params.EvnXml_id +'_content';
					if (Ext.fly(s_id)){
						document.getElementById(s_id).scrollIntoView();
						document.getElementById('main-center-panel').scrollIntoView();
					}

					var editorIds = el.query('.mce-tinymce iframe').map(function(dom) {
						return dom.id.replace('_ifr','');
					});
					for (var id in this.input_cmp_list) {
						if (id.inlist(editorIds)) {
							sw.Promed.EvnXml.refreshEditorSize(this.input_cmp_list[id]);
						}
					}
				}
			});
        }
    },

	saveEvnXmlWithBaseXmlTemplate: function(params) {
        var url = '/?c=EvnXml&m=restore';
        if (params.isSelect) {
            // при перевыборе шаблона документа надо обязательно передавать EvnXml_id
            url = '/?c=EvnXml&m=createEmpty';
            params.MedStaffFact_id = this.userMedStaffFact.MedStaffFact_id;
            params.Server_id = params.Server_id || this.Server_id;
        }
		var form = this;
		var xmldata = form.getObjectDataWithFindBy(function(record,id){
			if(record.object_code == 'EvnXml' && record.parent_object_value && record.object_value && record.parent_object_value==params.Evn_id && parseInt(record.XmlType_id)==params.XmlType_id) {
				params['EvnXml_id'] = record.object_value;
				return true;
			}
			return false;
		});
		
		form.requestSaveWithShowInfoMsg(url, params, 
			function(response_obj) {
				if (response_obj.success && response_obj.EvnXml_id > 0) {
					form.loadNodeViewForm(form.Tree.getNodeById(form.node.id), function() {
						if ( params.itemSectionCode ) {
							// новый документ в разделе "Документы" добавляется в свернутом виде.
							// Необходимо видеть вновь добавленный документ целиком. #22847
							form.toggleDisplayDocument(response_obj.EvnXml_id, params.itemSectionCode, false);
						}
					});
					if (typeof form.onSaveEvnDocument == 'function') {
						form.onSaveEvnDocument(!params['EvnXml_id'], Ext.apply(params, response_obj), 'EvnXml');
					}
					if(params.createEmpty){
						form.createXmlTemplateForEmptyEvnXml({
							itemSectionCode: params.itemSectionCode,
							EvnXml_id: response_obj.EvnXml_id,
							Evn_id: params.Evn_id,
							EvnClass_id: params.EvnClass_id
						})
					}
				}
			}, form);
		
	},

	//добавление карты первичного онкоскрининга
	addNewEvnPLDispScreenOnko: function(Evn_pid) {
		var form = this;
		var loadMask = new Ext.LoadMask(this.getEl(), {msg: LOAD_WAIT});
		loadMask.show();

		Ext.Ajax.request({
			url: '/?c=EvnPLDispScreenOnko&m=checkEvnPLDispScreenOnkoExists',
			params: {
				Person_id: form.Person_id
			},
			callback: function(options, success, response) {
				loadMask.hide();

				var response_obj = Ext.util.JSON.decode(response.responseText);

				if (response_obj.length) {
					sw.swMsg.show({
						buttons: sw.swMsg.YESNO,
						fn: function(buttonId, text, obj) {
							if (buttonId == 'yes') {
								var params = {
									Person_id: form.Person_id,
									PersonEvn_id: form.PersonEvn_id,
									Server_id: form.Server_id,
									UserMedStaffFact_id: form.userMedStaffFact.MedStaffFact_id,
									userMedStaffFact: form.userMedStaffFact,
									LpuSection_id: form.userMedStaffFact.LpuSection_id,
									MedPersonal_id: form.userMedStaffFact.MedPersonal_id,
									MedStaffFact_id: form.userMedStaffFact.MedStaffFact_id,
									Person_Firname: form.PersonInfoFrame.getFieldValue('Person_Firname'),
									Person_Surname: form.PersonInfoFrame.getFieldValue('Person_Surname'),
									Person_Secname: form.PersonInfoFrame.getFieldValue('Person_Secname'),
									Person_Birthday: form.PersonInfoFrame.getFieldValue('Person_Birthday'),
									EvnPLDispScreenOnko_id: response_obj[0],
									callback: function() {
										form.loadNodeViewForm(form.Tree.getNodeById(form.node.id));
									}
								}
								getWnd('swEvnPLDispScreenOnkoWindow').show(params);
							}
						}.createDelegate(this),
						icon: Ext.MessageBox.QUESTION,
						msg: langs('У пациента есть пройдённый осмотр по онкологии. Открыть?'),
						title: langs('Вопрос')
					});
				} else {
					form._addNewEvnPLDispScreenOnko(Evn_pid);
				}
			}
		});

	},
	_addNewEvnPLDispScreenOnko: function(Evn_pid) {
		var form = this;

		var loadMask = new Ext.LoadMask(this.getEl(), {msg: 'Создание нового первичного онкоскрининга...'});
		loadMask.show();

		Ext.Ajax.request({
			url: '/?c=EvnPLDispScreenOnko&m=addEvnPLDispScreenOnko',
			params: {
				PersonEvn_id: form.PersonEvn_id,
				Server_id: form.Server_id,
				Evn_pid: Evn_pid,
				Lpu_id: getGlobalOptions().lpu_id
			},
			callback: function(options, success, response) {
				loadMask.hide();
				var response_obj = Ext.util.JSON.decode(response.responseText);
				if (response_obj.success) {
					var params = {
						Person_id: form.Person_id,
						PersonEvn_id: form.PersonEvn_id,
						Server_id: form.Server_id,
						UserMedStaffFact_id: form.userMedStaffFact.MedStaffFact_id,
						userMedStaffFact: form.userMedStaffFact,
						LpuSection_id: form.userMedStaffFact.LpuSection_id,
						MedPersonal_id: form.userMedStaffFact.MedPersonal_id,
						MedStaffFact_id: form.userMedStaffFact.MedStaffFact_id,
						Person_Firname: form.PersonInfoFrame.getFieldValue('Person_Firname'),
						Person_Surname: form.PersonInfoFrame.getFieldValue('Person_Surname'),
						Person_Secname: form.PersonInfoFrame.getFieldValue('Person_Secname'),
						Person_Birthday: form.PersonInfoFrame.getFieldValue('Person_Birthday'),
						EvnPLDispScreenOnko_id: response_obj['EvnPLDispScreenOnko_id'],
						callback: function() {
							form.loadNodeViewForm(form.Tree.getNodeById(form.node.id));
						}
					}
					getWnd('swEvnPLDispScreenOnkoWindow').show(params);
				}
			}
		});

	},
	// показывает аллергологический анамнез
	showAllergHistory: function() {
		var params = {
			parent_node: this.Tree.getRootNode().findChild('object','SignalInformationAll'),
			last_child: false,
			node_attr_name: 'object',
			node_attr_value: 'AllergHistory'
		};
		this.searchNodeInTreeAndLoadViewForm(params);
	},
	// показывает экспертный анамнез и льготы
	showPrivilegeList: function() {
		var params = {
			parent_node: this.Tree.getRootNode().findChild('object','SignalInformationAll'),
			last_child: false,
			node_attr_name: 'object',
			node_attr_value: 'ExpertHistory'
		};
		this.searchNodeInTreeAndLoadViewForm(params);
	},
	// показывает список уточненных диазгнозов
	showDiagList: function() {
		var params = {
			parent_node: this.Tree.getRootNode().findChild('object','SignalInformationAll'),
			last_child: false,
			node_attr_name: 'object',
			node_attr_value: 'DiagList'
		};
		this.searchNodeInTreeAndLoadViewForm(params);
	},
	/*
	Показать случаи лечения с этим диагнозом
	o,id - код и идешник объекта в данных которого есть Diag_id
	*/
	showEvnTherapyByDiag: function(o,id) {
		var formParams = this.getObjectData(o,id),
			me = this;
		if (formParams) {
			this.Tree.getLoader().baseParams.Diag_id = formParams.Diag_id;
			this.loadTree(0, function(tr,node){
				if (node.lastChild 
					//&& ('EvnPL_'+ id) != node.lastChild.id 
					&& !node.lastChild.isSelected()
				) {
					var params = {
						parent_node: node,
						last_child: true,
						node_attr_name: 'object',
						node_attr_value: 'EvnPL'
					};
					me.searchNodeInTreeAndLoadViewForm(params);
				}
			});
		}
	},
	showFm: function(el_data) {
		var formParams = this.getObjectData(el_data.object,el_data.object_id);
		if (formParams && formParams.DiagFedMes_FileName) {
			this.openPrintDoc('/?c=Common&m=showFm&name=' + formParams.DiagFedMes_FileName);
		} else {
			sw.Promed.EvnPrescr.showCureStandart(el_data.object_id, this);
		}
	},
	// добавляет обработчики клика на автоматически добавленные гиперссылки
	addAutoLinksHandlers: function() {
		var node_list;
		try{
			node_list = Ext.query("*[class*=showAllergHistory]",Ext.getDom(this.data.Code +'_'+ this.data.id));		
			var i, el;
			for(i=0; i < node_list.length; i++)
			{
				el = new Ext.Element(node_list[i]);
				if(!el.hasClass('clickable'))
				{
					el.on('click', this.showAllergHistory,this);
					el.addClass('clickable');
				}
			}
		} catch (e) {
			//node_list = [];
		}
	},
	addEvnNotify: function(el_data, MorbusType_SysNick) {
		var me = this;
		checkEvnNotify({
			Evn_id: el_data.object_id
			,EvnDiagPLSop_id: el_data.EvnDiagPLSop_id || null
			,MorbusType_SysNick: MorbusType_SysNick
			,callback: function(success) {
				if (success && me.loadedSpecifics[el_data.object_id]) {
					if (me.loadedSpecifics[el_data.object_id][MorbusType_SysNick]) {
						me.loadedSpecifics[el_data.object_id][MorbusType_SysNick].hasMorbus = true;
						me.loadedSpecifics[el_data.object_id][MorbusType_SysNick].isChanged = true;
					}
				}
				var node = me.Tree.getNodeById(me.data.Code +'_'+ me.data.id);
				me.requireCheckChange = false;
				me.loadTreeNode({
					node: node.parentNode,
					selectById: node.id,
					callback: function(tl,n){
						me.loadNodeViewForm(me.Tree.getSelectionModel().selNode);
					}
				});
			}
		});
	},
	addEvnNotifyProf: function(el_data) {
		var me = this;
		// создание извещения по профзаболеванию
		var callback = function(success) {
			var node = me.Tree.getNodeById(me.data.Code +'_'+ me.data.id);
			me.requireCheckChange = false;
			me.loadTreeNode({
				node: node.parentNode,
				selectById: node.id,
				callback: function(tl,n){
					me.loadNodeViewForm(me.Tree.getSelectionModel().selNode);
				}
			});
		};

		Ext.Ajax.request({
			url: '/?c=Common&m=checkEvnNotifyProf',
			params: {
				Evn_id: el_data.object_id
			},
			callback: function(options, success, response) {
				var result = Ext.util.JSON.decode(response.responseText);
				if (result.success && result.Records) {
					if (result.Records.length == 0) {
						// сразу создаём
						_processingResponseCheckEvnNotify(result, callback, 'checkEvnNotify');
					} else if (result.Records.length > 0) {
						// выводим форму с сообщением "На данного пациента уже сохранено извещение с диагнозом %диагноз учетного документа."
						getWnd('swEvnNotifyProfAlreadyExistsWindow').show({
							result: result,
							callback: callback
						});
					}
				}
			}
		});
    },
	addEvnInfectNotify: function(el_data) {
		var form = this;
		var evn = this.viewFormDataStore.getById(el_data.object +'_'+ el_data.object_id);
		var formParams = {
			EvnInfectNotify_pid: el_data.object_id
			,Diag_Name: evn.data.Diag_Name
			//,Diag_id: evn.data.Diag_id
			,Server_id: this.Server_id
			,PersonEvn_id: this.PersonEvn_id
			,MedPersonal_id: evn.data.MedPersonal_id
			,EvnInfectNotify_FirstTreatDate: evn.data[el_data.object +'_setDate']
			,EvnInfectNotify_SetDiagDate: getGlobalOptions().date
		};
		var callback = function() {
			showSysMsg(langs('Извещение создано'));
			Ext.get(el_data.object +'_'+ el_data.object_id +'_addEvnInfectNotifyTools').setDisplayed('none');
			if (evn.data.listMorbus['hiv'] && !form.isReadOnly) {
				checkEvnNotify({
					Evn_id: el_data.object_id,
					MorbusType_SysNick: 'hiv'
				});
			}
		};
		getWnd('swEvnInfectNotifyEditWindow').show({formParams: formParams, callback: callback});
	},
	openMorbusPalliat: function(el_data) {
		var form = this;
		var evn = this.viewFormDataStore.getById(el_data.object +'_'+ el_data.object_id);

		Ext.Ajax.request({
			url: '/?c=MorbusPalliat&m=getIdForEmk',
			params: {
				Person_id: evn.data.Person_id,
			},
			success: function(response) {
				var result = Ext.util.JSON.decode(response.responseText);

				if (result.MorbusPalliat_id) {
					getWnd('swMorbusPalliatEditWindow').show({
						action: 'edit',
						MorbusPalliat_id: result.MorbusPalliat_id,
						Person_id: evn.data.Person_id,
						Evn_id: el_data.object_id
					});
				}
			}
		});
	},
	openMorbusGeriatrics: function(el_data) {
		var form = this;
		var evn = this.viewFormDataStore.getById(el_data.object +'_'+ el_data.object_id);

		Ext.Ajax.request({
			url: '/?c=MorbusGeriatrics&m=getIdForEmk',
			params: {
				Person_id: evn.data.Person_id
			},
			success: function(response) {
				var result = Ext.util.JSON.decode(response.responseText);

				if (result.MorbusGeriatrics_id) {
					getWnd('swMorbusGeriatricsEditWindow').show({
						action: 'edit',
						MorbusGeriatrics_id: result.MorbusGeriatrics_id,
						Person_id: evn.data.Person_id
					});
				}
			}
		});
	},
	checkEvnInfectNotify: function(evn_id, callback) {
		Ext.Ajax.request({
			url: '/?c=EvnInfectNotify&m=isIsset',
			params: {EvnInfectNotify_pid: evn_id},
			callback: function(options, success, response) {
				var result = Ext.util.JSON.decode(response.responseText);
				callback(result.success);
			}
		});
	},
    getSpecificMetaData: function(specific_type) {
		var section_code;
		var pid_key;
		var specific_key;
		var is_morbus;
		switch (specific_type) {
			case 'pregnancy': 
				section_code = 'MorbusPregnancy'; 
				is_morbus = true; 
				break;
			case 'onko': 
				section_code = 'MorbusOnko'; 
				is_morbus = true; 
				specific_key = 'Morbus_id'; 
				break;
			case 'crazy': 
				section_code = 'MorbusCrazy'; 
				is_morbus = true; 
				break;
			case 'narc':
				section_code = 'MorbusCrazy';
				is_morbus = true;
				break;
			case 'hepa': 
				section_code = 'MorbusHepatitis'; 
				is_morbus = true; 
				break;
			//case 'orphan': section_code = 'MorbusOrphan'; is_morbus = false; break;
			case 'tub': 
				section_code = 'MorbusTub'; 
				is_morbus = true; 
				break;
			case 'vener': 
				section_code = 'MorbusVener'; 
				is_morbus = true; 
				break;
			//case 'hiv': section_code = 'MorbusHIV'; is_morbus = true; break;
			case 'nephro': 
				section_code = 'MorbusNephro'; 
				is_morbus = true; 
				break;
			case 'palliat':
				section_code = 'MorbusPalliat';
				is_morbus = true;
				break;
			case 'geriatrics':
				section_code = 'MorbusGeriatrics';
				is_morbus = true;
				break;
			//case 'ibs': section_code = 'MorbusIBS'; is_morbus = true; break;
			//case 'prof': section_code = 'MorbusProf'; is_morbus = false; break;
			default: section_code = false; break;
		}
		if (section_code && !pid_key) {
			pid_key = section_code + '_pid';
		}
		if (section_code && !specific_key) {
			specific_key = section_code + '_id';
		}
		return {
			sectionCode: section_code,
			pidKey: pid_key,
			specificKey: specific_key,
			isMorbus: is_morbus
		};
	},
    loadSpecific: function(specific_type, el_data, diag_id) {
		var meta_data = this.getSpecificMetaData(specific_type);
		if (!meta_data.sectionCode) {
			log('code of specific section is undefined');
			return false;
		}
		var id = el_data.object_id;
		var section_id = meta_data.sectionCode +'Data_'+ id + (diag_id ? '_'+diag_id : '');
		var section_el = Ext.get(section_id);
		if (!section_el) {
			log('element of specific section is undefined');
			return false;
		}			
		var record = this.viewFormDataStore.getById(el_data.object +'_'+ id);
		if (!record || !record.data || !record.data.listMorbus) {
			log('parent data of specific section is undefined or not valid');
			return false;
		}
		if (!this.loadedSpecifics) {
			this.loadedSpecifics = {};
		}
		if (!this.loadedSpecifics[id]) {
			this.loadedSpecifics[id] = {};
		}
		
		var loaded_diag_ids = (this.loadedSpecifics[id][specific_type] && this.loadedSpecifics[id][specific_type].Diag_ids) ? this.loadedSpecifics[id][specific_type].Diag_ids : [];
		
		if (!this.loadedSpecifics[id][specific_type] || (specific_type == 'onko' && !diag_id.inlist(loaded_diag_ids))) {
            var thas = this;
			thas.loadedSpecifics[id][specific_type] = {
				elData: el_data,
				Diag_ids: loaded_diag_ids,
				isLoaded: false,
				isChanged: false
			};
			if (meta_data.isMorbus && !record.data.listMorbus[specific_type]) {
				log('specific section is disabled: ' + specific_type);
				log(record.data);
				return false;
			}

			this.mo_key = false;
			if (specific_type == 'onko') {
				for (var k in record.data.listMorbus[specific_type]) {
					if (record.data.listMorbus[specific_type][k].Diag_id == diag_id) {
						this.mo_key = k;
					}
				}
			}
			if ((thas.isReadOnly || (record.data.accessType && record.data.accessType == 'view')) 
				&& meta_data.isMorbus && !record.data.listMorbus[specific_type].Morbus_id
				&& (specific_type == 'onko' && this.mo_key !== false && !record.data.listMorbus[specific_type][this.mo_key].Morbus_id)
			) {
				//нельзя создавать заболевание
				log('Morbus is undefined');
				return false;
			}
			if (meta_data.isMorbus) {
				thas.loadedSpecifics[id][specific_type].Morbus_id = record.data.listMorbus[specific_type].Morbus_id || null;
				thas.loadedSpecifics[id][specific_type].hasMorbus = (record.data.listMorbus[specific_type].Morbus_id > 0);
			}
			var reload_params = {
				allowCreateAction: true,
				section_code: meta_data.sectionCode,
				object_key: meta_data.specificKey,
				object_value: 0,
				parent_object_key: meta_data.pidKey,
				parent_object_value: id,
				section_id: section_id,
				EvnDiagPLSop_id: el_data.EvnDiagPLSop_id || null,
				MorbusType_id: record.data.listMorbus[specific_type].MorbusType_id,
				accessType: (thas.isReadOnly || (record.data.accessType && record.data.accessType == 'view')) ? 'view' : 'edit',
                callback: function(map) {
                    thas.changed_fields = {};
					var o = meta_data.sectionCode;
					if (map && map[o] && map[o].item && Ext.isArray(map[o].item) && map[o].item[0] && map[o].item[0].data && map[o].item[0].data[meta_data.specificKey]) {
						thas.loadedSpecifics[id][specific_type].isLoaded = true;
						if (diag_id) thas.loadedSpecifics[id][specific_type].Diag_ids.push(diag_id);
						if (meta_data.isMorbus && !thas.loadedSpecifics[id][specific_type].hasMorbus) {
							// должно было создаться заболевание
							if (map[o].item[0].data.Morbus_id > 0) {
								thas.loadedSpecifics[id][specific_type].Morbus_id = map[o].item[0].data.Morbus_id;
								if (specific_type == 'onko' && thas.mo_key !== false) {
									record.data.listMorbus[specific_type][thas.mo_key].Morbus_id = map[o].item[0].data.Morbus_id;
								} else {
									record.data.listMorbus[specific_type].Morbus_id = map[o].item[0].data.Morbus_id;
								}
								record.set('listMorbus', record.data.listMorbus);
								record.commit(true);
								thas.viewFormDataStore.commitChanges();
								thas.toggleDisplay(section_id,section_el.isDisplayed());
							} else {
								thas.clearSpecific(specific_type, el_data, 'onFailureLoadSpecific');
							}
						} else {
							thas.toggleDisplay(section_id,section_el.isDisplayed());
						}
						if (specific_type == 'onko' && thas.mo_key !== false) {
							record.data.listMorbus[specific_type][thas.mo_key].MorbusOnkoVizitPLDop_id = map[o].item[0].data.MorbusOnkoVizitPLDop_id;
							record.data.listMorbus[specific_type][thas.mo_key].MorbusOnkoLeave_id = map[o].item[0].data.MorbusOnkoLeave_id;
						}
						record.set('listMorbus', record.data.listMorbus);
						record.commit(true);
						log(record.data.listMorbus);
					} else {
						thas.clearSpecific(specific_type, el_data, 'onFailureLoadSpecific');
					} 
                }
			};
			this.reloadViewForm(reload_params);
		} else {
			this.toggleDisplay(section_id,section_el.isDisplayed());
		}
    },
	loadLpuSectionWardHistory: function(el_data) {
		var win = this;
		var section_id = 'LpuSectionWardHistory_' + el_data.object_id;

		Ext.Ajax.request({
			url: '/?c=EvnSection&m=loadLpuSectionWardHistory',
			params: { EvnSection_id: el_data.object_id },
			success: function(response) {
				var result = Ext.util.JSON.decode(response.responseText);

				var section = Ext.get(section_id); 
				if(!Ext.isEmpty(section)) {
					section.update('');
					Ext.DomHelper.append(section, { tag: 'table', cls: 'LpuSectionWardHistoryTable_' + el_data.object_id });

					var table = section.child('table.LpuSectionWardHistoryTable_' + el_data.object_id);
					if(!Ext.isEmpty(table)) {
						for(var i = 0; i < result.length; i++){
							var createdElement = Ext.DomHelper.append(table, '<tr><td>' + result[i].LpuSectionWard_Text + '</td></tr>');
						}
					}
					win.toggleDisplay(section_id, false);
				}
			}
		});
	
	},
	/**
	 * Очистка данных и свертывание раздела специфики
	 * Вызывается:
	 * onLoadViewPanel при загрузке в панель просмотра КВС/ТАП/посещения/движения
	 * onChangeDiag при изменении диагноза посещения/движения
	 * onChangeEvnUsluga при изменении услуг посещения поликлиники
	 * onChangeVizitType при изменении типа посещения поликлиники
	 * onFailureLoadSpecific при возникновении ошибки загрузки раздела специфики
	 * onDeleteMorbus
	 */
    clearSpecific: function(specific_type, el_data, mode) {
		var meta_data = this.getSpecificMetaData(specific_type);
		if (!meta_data.sectionCode) {
			log('code of specific section is undefined');
			return false;
		}
		var id = el_data.object_id;
		var section_id = meta_data.sectionCode +'Data_'+ id;
		var section_el = Ext.get(section_id);
		if (!section_el) {
			log('element of specific section is undefined');
			return false;
		}
		if (!this.loadedSpecifics) {
			this.loadedSpecifics = {};
		}
		if (!this.loadedSpecifics[id]) {
			this.loadedSpecifics[id] = {};
		}
        var thas = this;
        if (thas.loadedSpecifics[id][specific_type]) {
            if (section_el.isDisplayed()) {
                thas.toggleDisplay(section_id, true);
            }
            section_el.update('');
            thas.viewFormDataStore.each(function(rec){
                if (rec.data[meta_data.pidKey]
                    && rec.data[meta_data.pidKey] == el_data.object_id
                    && rec.data[meta_data.specificKey]
                ) {
                    thas.viewFormDataStore.remove(rec);
                }
            });
			if (mode == 'onFailureLoadSpecific') {
				thas.loadedSpecifics[id][specific_type].isLoaded = false;
			} else {
				delete thas.loadedSpecifics[id][specific_type];
			}
        }
	},
	/**
	 * Отработка кнопки на специфике онкология
	 * 19.04.2019 А.И.Г
	 */
	SpecificOnkoMenu: function(el_data)
	{
		btnEl = Ext.get(el_data);
		//console.log('btnEl!!!=',btnEl); 
		var object_id = (el_data.split('_').length > 1) ? el_data.split('_')[1] : el_data;
		console.log('object_id!!!=',object_id); 
		var printMenu = new Ext.menu.Menu();
			printMenu.add({
				text: langs('Печатная форма по специфике'),
				iconCls: 'print16',
				handler: function() {
						//printEvnPS(options);
						console.log('birtpath!!!=',getGlobalOptions().birtpath);
//						printBirt({
//         'Report_FileName': 'SpecificsOnko_Print.rptdesign',
//         'Report_Params': '&paramEvn=' + object_id,
//         'Report_Format': 'pdf'
//        });
						var url = ((getGlobalOptions().birtpath) ? getGlobalOptions().birtpath : '') + '/run?__report=report/SpecificsOnko_Print.rptdesign';
						url += '&paramEvn=' + object_id;
						url += '&__format=pdf';
						//console.log('BOB_url=', url);  //BOB - 06.08.2017
						window.open(url, '_blank');
					}
			});
			printMenu.add({
				text: langs('Печать КЛУ при ЗНО'),
				iconCls: 'print16',
				handler: function(){
						printControlCardZno(object_id);
						}
			},{
				text: langs('Печать выписки при онкологии'),
				iconCls: 'print16',
				hidden: getRegionNick() != 'ekb',
				handler: function(){
						printControlCardOnko(object_id);
						}
			});

			printMenu.show(btnEl);
		
	},
	
	/*
	* Функции для формы просмотра. Конец
	*/
	addNewEvnPLDispScreen: function(opts) {
		var form = this;
		if (!opts) {
			opts = {};
		}

		var date = date = getValidDT(getGlobalOptions().date, '') || new Date();
		var age = swGetPersonAge(form.PersonInfoFrame.getFieldValue('Person_Birthday'));

		var params = {
			action: 'add',
			Year: date.getFullYear(),
			onHide: Ext.emptyFn,
			callback: function() {
				form.reloadTree();
			},
			Person_id: form.Person_id,
			Server_id: form.Server_id
		};

		var wnd_name = 'swEvnPLDispScreenEditWindow';
		if (age < 18) {
			// если на текущую дату пациенту меньше 18 лет
			wnd_name = 'swEvnPLDispScreenChildEditWindow';
			params.DispClass_id = 15;
			params.EvnPLDispScreenChild_id = null;

			// проверяем возможность добавления карты
			form.getLoadMask(langs('Проверка возможности добавления скринингового исследования')).show();
			Ext.Ajax.request({
				params: {
					Person_id: form.Person_id
				},
				callback: function(options, success, response) {
					form.getLoadMask().hide();

					if ( success ) {
						var response_obj = Ext.util.JSON.decode(response.responseText);
						if (Ext.isEmpty(response_obj.Error_Msg)) {
							getWnd(wnd_name).show(params);
						} else {
							// Вопрос
							sw.swMsg.show({
								buttons: {ok: langs('Создать карту'), cancel: langs('Отмена')},
								fn: function(buttonId, text, obj) {
									if ( buttonId == 'ok' ) {
										getWnd('swEvnPLDispScreenChildEditWindow').show(params);
									}
								},
								icon: Ext.MessageBox.QUESTION,
								msg: response_obj.Error_Msg,
								title: langs('Внимание')
							});
						}
					}
				},
				url: '/?c=EvnPLDispScreenChild&m=checkAddAvailability'
			});
		} else {
			params.DispClass_id = 13;
			params.EvnPLDispScreen_id = null;

			if(getRegionNick() == 'kz') {//Убираем проверку возрастной группы для казахстана #138439
				getWnd(wnd_name).show(params);
			}else {
				// проверяем возможность добавления карты
				form.getLoadMask(langs('Проверка возможности добавления скринингового исследования')).show();
				Ext.Ajax.request({
					params: {
						Person_id: form.Person_id
					},
					callback: function(options, success, response) {
						form.getLoadMask().hide();

						if ( success ) {
							var response_obj = Ext.util.JSON.decode(response.responseText);
							if (Ext.isEmpty(response_obj.Error_Msg)) {
								getWnd(wnd_name).show(params);
							}
						}
					},
					url: '/?c=EvnPLDispScreen&m=checkAddAvailability'
				});
			}
		}
	},
	addNewEvnPLDisp: function(opts) {
		var form = this;
		if (!opts) {
			opts = {};
		}

		// создаём карту, встаём на неё в дереве.
		form.getLoadMask('Создание случая диспансеризации').show();
		Ext.Ajax.request({
			params: {
				Person_id: form.getPersonId(),
				DispClass_id: opts.DispClass_id
			},
			callback: function(options, success, response) {
				form.getLoadMask().hide();
				var response_obj = Ext.util.JSON.decode(response.responseText);
				if (response_obj.success) {
					form.getDispClassListAvailable();
					form.onCreateObject({node_lvl: 1, parent_node_id: 'root', node_id: response_obj.node_id});
				}
			},
			url: '/?c=EvnPLDisp&m=createEvnPLDisp'
		});
	},
    addNewEvnPLAndEvnVizitPL: function(opts) {
        var form = this;
        if (!opts) {
            opts = {};
        }
		if (form.userMedStaffFact.MedStaffFactCache_IsDisableInDoc == 2) {
			sw.swMsg.alert(langs('Сообщение'), langs('Текущее рабочее место запрещено для выбора в документах'));
			return false;
		}

        var button,
            isStom = opts.isStom || false,
            tapSysNick,
            curNode = this.Tree.getSelectionModel().getSelectedNode(),
            vizitSysNick,
			yes_handler = function() { 
				form.addNewEvnPLAndEvnVizitPL(opts);
			};

        if (curNode && curNode.attributes && curNode.attributes.object && !form.checkChange(curNode.attributes.object, curNode.attributes.object_id, curNode.attributes.object_value, yes_handler)) {
            return false;
        }

        if (isStom) {
            button = this.Actions.action_New_EvnPLStom;
            tapSysNick = 'EvnPLStom';
            vizitSysNick = 'EvnVizitPLStom';
        } else {
            button = this.Actions.action_New_EvnPL;
            tapSysNick = 'EvnPL';
            vizitSysNick = 'EvnVizitPL';
        }
        button.disable();
        form.getLoadMask(langs('Пожалуйста подождите...')).show();
        var d = new Date();
        var plop = getPolkaOptions();
        var op = getGlobalOptions();
        var formParams = {
            action:'add' + tapSysNick,
            allowCreateEmptyEvnDoc: 2,
            MedStaffFact_id: form.userMedStaffFact.MedStaffFact_id,
            LpuSection_id: form.userMedStaffFact.LpuSection_id,
            MedPersonal_id: form.userMedStaffFact.MedPersonal_id,
            TimetableGraf_id: form.TimetableGraf_id,
            EvnDirection_id: opts.EvnDirection_id||null,
            EvnDirection_vid: opts.EvnDirection_id||null,
            EvnPrescr_id: opts.EvnPrescr_id||null,
            isMyOwnRecord: form.isMyOwnRecord, // true если запись создана врачём, который создаёт посещение.
            PersonEvn_id: form.PersonEvn_id,
            Person_id: form.Person_id,
            Server_id: form.Server_id
        };
        formParams[tapSysNick + '_id'] = 0;
        formParams[tapSysNick + '_IsFinish'] = 1;
        formParams[vizitSysNick + '_id'] = 0;
        formParams[vizitSysNick + '_setDate'] = op.date;




        // строка давала ошибку refs #121362 (Тестовая Пенза. не связывается услуга со случаем АПЛ)
        formParams[vizitSysNick + '_setTime'] = d.format('H:i');

        // получаем время в зоне региона (исправляет refs #121362)
        getCurrentDateTime({
            callback: function(result){
                if (result.success) {
                    formParams[vizitSysNick + '_setTime'] = result.time;
                }
            }
        });




        if ((op.region && op.region.nick.inlist(['ufa','pskov','ekb']))) {
            formParams.EvnUslugaCommon_id = 0;
        }
        if (form.EvnDirectionData && form.EvnDirectionData.EvnDirection_id){
            formParams.EvnDirection_id = form.EvnDirectionData.EvnDirection_id;
            formParams.EvnDirection_vid = form.EvnDirectionData.EvnDirection_id;
        }
        if (form.EvnDirectionData && form.EvnDirectionData.EvnPrescr_id){
            formParams.EvnPrescr_id = form.EvnDirectionData.EvnPrescr_id;
		}
        var onComplete = function(data) {
            button.enable();
            var params = {node_lvl: 1, parent_node_id: 'root', node_id: tapSysNick + '_'+ data[tapSysNick + '_id']};
            if (1 == form.Tree.getLoader().baseParams.type)
            {
                params.parent_node_id = (isStom) ? 'EvnPLStom_11122' : 'EvnPLList_11115';
            }
            form.onCreateObject(params);
            if(data.Alert_Msg) {
                sw.swMsg.alert(langs('Уведомление'), data.Alert_Msg);
            }
            if (typeof form.onSaveEvnDocument == 'function') {
                form.onSaveEvnDocument(true, data, tapSysNick);
            }
			// т.к. было обслужено
			if (form.EvnDirectionData) {
				form.EvnDirectionData = null;
			}
			if (form.TimetableGraf_id) {
				form.TimetableGraf_id = null;
			}
			if (data.EvnVizitPL_id) {
				form.checkAndOpenRepositoryObserv(data.EvnVizitPL_id);
			}
        };

		if (form.EvnDirectionData && form.EvnDirectionData.useCase) {
			opts.useCase = form.EvnDirectionData.useCase;
		}
		
		var getEvnDirectionData = function(data, callback) {
			formParams[tapSysNick + '_NumCard'] = data[tapSysNick + '_NumCard']||null;
			if (formParams.TimetableGraf_id || formParams.EvnDirection_id) {
				var loadMask = new Ext.LoadMask(form.getEl(), {
					msg: "Получение данных направления..."
				});
				loadMask.show();
				Ext.Ajax.request({
					params: {
						TimetableGraf_id: formParams.TimetableGraf_id||null,
						EvnDirection_id: formParams.EvnDirection_id||null
						,Person_id: form.getPersonId()
						,useCase: opts.useCase || 'load_data_for_auto_create_tap'
					},
					callback: function(options, success, response) {
						loadMask.hide();

						if ( success ) {
							var response_obj = Ext.util.JSON.decode(response.responseText);
							if (form.HomeVisit_id && form.allowHomeVisit == true){
								formParams.HomeVisit_id = form.HomeVisit_id;

								form.serviceTypeStore.clearFilter();
								index = form.serviceTypeStore.findBy(function(rec) {
									return (rec.get('ServiceType_SysNick') == 'home');
								});
								if ( index == -1 ) {
									sw.swMsg.alert(langs('Сообщение'), 'Ошибка при получении идентификатора места обслуживания');
									return false;
								}
								formParams.ServiceType_id = form.serviceTypeStore.getAt(index).get('ServiceType_id');
								form.allowHomeVisit = false;
							}
							formParams[tapSysNick + '_IsWithoutDirection'] = 1;
							if (response_obj.length > 0) {
								formParams.EvnDirection_id = response_obj[0].EvnDirection_id;
								formParams.EvnDirection_vid = response_obj[0].EvnDirection_id;
								formParams.EvnDirection_IsAuto = response_obj[0].EvnDirection_IsAuto;
								formParams.EvnDirection_IsReceive = response_obj[0].EvnDirection_IsReceive;
								formParams.Lpu_fid = response_obj[0].Lpu_sid;
								formParams.Lpu_id = op.lpu_id;
								formParams.Diag_id = response_obj[0].Diag_id;
								if (2 != formParams.EvnDirection_IsAuto) {
									formParams.EvnDirection_Num = response_obj[0].EvnDirection_Num;
									formParams.EvnDirection_setDate = response_obj[0].EvnDirection_setDate;
									formParams.Diag_did = response_obj[0].Diag_id;
									formParams.Org_did = response_obj[0].Org_id;
									formParams.LpuSection_did = response_obj[0].LpuSection_id;
									formParams.MedStaffFact_did = response_obj[0].MedStaffFact_id;
								}
								formParams.PrehospDirect_id = sw.Promed.EvnDirectionAllPanel.calcPrehospDirectId(response_obj[0].Lpu_sid, response_obj[0].Org_id, response_obj[0].LpuSection_id, response_obj[0].EvnDirection_IsAuto);
								formParams[tapSysNick + '_IsWithoutDirection'] = sw.Promed.EvnDirectionAllPanel.isWithDirection(formParams.EvnDirection_id, formParams.EvnDirection_IsAuto, formParams.EvnDirection_IsReceive, formParams.EvnDirection_Num);
							}
							if (response_obj.length == 0 && formParams.EvnDirection_id) {
								sw.swMsg.alert(langs('Ошибка'), langs('Данные направления не найдены'));
							} else {
								callback();
							}
						} else {
							sw.swMsg.alert(langs('Ошибка'), langs('Ошибка при получении данных направления'));
						}
					},
					url: '/?c=EvnDirection&m=loadEvnDirectionList'
				});
			} else {
				formParams[tapSysNick + '_IsWithoutDirection'] = 1;
				callback();
			}
		};
        var VizitType_SysNick = opts.VizitType_SysNick||'desease';
		if (form.EvnDirectionData && form.EvnDirectionData.VizitType_SysNick) {
			VizitType_SysNick = form.EvnDirectionData.VizitType_SysNick;
		}
		if (isStom && 'kareliya' == getRegionNick()) {
			VizitType_SysNick = 'desease';
		}
        var vizit_type_storage = new sw.Promed.LocalStorage({
            tableName: 'VizitType'
            ,typeCode: 'int'
            ,allowSysNick: true
            ,loadParams: {params: {where: " where VizitType_SysNick = '"+VizitType_SysNick+"' AND (vizittype_enddt is null or vizittype_enddt > '" + Ext.util.Format.date(new Date(), 'Y-m-d') + "')"}}
            ,onLoadStore: function(){
                form.getLoadMask().hide();
                formParams.VizitType_id = vizit_type_storage.getValueOfKeyByFirstRecord() || null;
                if (!plop || !plop.arm_vizit_create || plop.arm_vizit_create == 1) {
                    if (isStom) {
                        button.enable();
						formParams.TimetableGraf_id = form.TimetableGraf_id || null;
						getEvnDirectionData({}, function(){
							form.openFormEvnPLStom('add', formParams);
                        });
                    } else {
                        if (getWnd('swEmkEvnPLEditWindow').isVisible()) {
                            sw.swMsg.alert(langs('Сообщение'), langs('Форма "ТАП:добавление" в данный момент открыта.'));
                            return false;
                        }
                        var params = {};
                        params.callback = onComplete;
                        params.formParams = formParams;
                        params.TimetableGraf_id = form.TimetableGraf_id||formParams.TimetableGraf_id;
                        params.onHide = Ext.emptyFn;
                        if (form.HomeVisit_id && form.allowHomeVisit == true) {
                            params.HomeVisit_id = form.HomeVisit_id;
                            form.allowHomeVisit = false;
                            params.formParams.ServiceType_id = 2; // Место: На дому
                            if(getRegionNick() == 'ufa'){
                            	params.formParams.ServiceType_id = 12; // Место: На дому
                            } else if (getRegionNick() == 'krym'){
                            	params.formParams.ServiceType_id = 18; // Место: На дому
                            }
                        }
                        form.getEvnPLNumber(getEvnDirectionData, function(){
                            form.openForm('swEmkEvnPLEditWindow', 'EvnVizitPL_id', params, 'addEvnPL');
                        }, isStom);
                    }
                } else {
                    form.getEvnPLNumber(getEvnDirectionData, function(){
                        formParams.isAutoCreate = 1;
                        if (form.HomeVisit_id && form.allowHomeVisit == true) {
                            formParams.HomeVisit_id = form.HomeVisit_id;
                            formParams.ServiceType_id = 2; // Место: На дому
                            if(getRegionNick() == 'ufa'){
                            	formParams.ServiceType_id = 12; // Место: На дому
                            } else if (getRegionNick() == 'krym'){
                            	formParams.ServiceType_id = 18; // Место: На дому
                            }
                            form.allowHomeVisit = false;
                        }
						// addNewEvnPLAndEvnVizitPL
                        form.createNewEvnPLAndEvnVizitPL({formParams: formParams, onComplete: onComplete}, isStom);
                    }, isStom);
                }
            }
        });
        var service_type_storage = new sw.Promed.LocalStorage({
            tableName: 'ServiceType'
            ,typeCode: 'int'
            ,allowSysNick: true
            ,loadParams: {params: {where: " where ServiceType_SysNick = 'polka'"}}
            ,onLoadStore: function(){
                formParams.ServiceType_id = service_type_storage.getValueOfKeyByFirstRecord() || null;
                vizit_type_storage.load();
            }
        });
		var PayType_SysNick = form.getPayTypeSysNickOMS();
		if (getRegionNick() == 'ekb' && Ext.getCmp('PEMK_PersonInfoFrame').getFieldValue('Person_IsAnonym') == 2) {
			PayType_SysNick = 'bud';
		}
		var pay_type_storage = new sw.Promed.LocalStorage({
			tableName: 'PayType'
			, typeCode: 'int'
			, allowSysNick: true
			, loadParams: {params: {where: " where PayType_SysNick = '" + PayType_SysNick + "'"}}
			, onLoadStore: function () {
				formParams.PayType_id = null;
				if (getRegionNick()!='kz') formParams.PayType_id = pay_type_storage.getValueOfKeyByFirstRecord() || null;
				service_type_storage.load();
			}
		});
		pay_type_storage.load();
    },
    getEvnPLNumber: function(callback, callback2, isStom) {
		var url = isStom ? '/?c=EvnPLStom&m=getEvnPLStomNumber' : '/?c=EvnPL&m=getEvnPLNumber',
            loadMask = new Ext.LoadMask(this.getEl(), {
                msg: "Получение номера талона..."
            });
		loadMask.show();
		Ext.Ajax.request({
			callback: function(options, success, response) {
				loadMask.hide();
				if ( success ) {
					callback(Ext.util.JSON.decode(response.responseText), callback2);
				}
				else {
					sw.swMsg.alert(langs('Ошибка'), langs('Ошибка при получении номера талона'));
				}
			},
			url: url
		});
	},
	getEvnPSNumber: function(callback) {
		var loadMask = new Ext.LoadMask(this.getEl(), {
			msg: "Получение номера случая стационарного лечения..."
		});
		loadMask.show();
		Ext.Ajax.request({
			callback: function(options, success, response) {
				loadMask.hide();
				if ( success ) {
					callback(Ext.util.JSON.decode(response.responseText));
				}
				else {
					sw.swMsg.alert('Ошибка', 'Ошибка при получении номера талона');
				}
			},
			url: '/?c=EvnPS&m=getEvnPSNumber'
		});
	},
	requestAmbulatCard: function(data){
		if(!this.Person_id || !data.TimetableGraf_id) return false;
		sw.swMsg.show({
			title: 'Запрос амбулаторной карты!',
			icon: Ext.Msg.WARNING,
			msg: "Запросить амбулаторную карту у картохранилища?",
			buttons: {yes: 'Запросить', no: '&nbsp;Карта уже на приёме&nbsp;'},
			scope: {win: this, data: data},
			closable: false,
			fn: function(butn){
				this.data.RequestStatus_id = 1;
				if (butn == 'no')
					this.data.RequestStatus_id = 2;

				var params = {
					Person_id: this.win.Person_id,
					Person_FIO: this.win.Person_Surname + ' ' + this.win.Person_Firname + ' ' + this.win.Person_Secname,
					TimetableGraf_id: this.data.TimetableGraf_id
				};
				params.callback= function(prm, id){
					//this.setDisabled(false);
					if(!prm || !prm.PersonAmbulatCard_id){
						sw.swMsg.alert(langs('Сообщение'), langs('амбулаторная карта не была выбрана!'));
						return false;
					}
					var params = {};
					params.PersonAmbulatCard_id = prm.PersonAmbulatCard_id;
					params.TimetableGraf_id = this.data.TimetableGraf_id;
					params.AmbulatCardRequest_id = null;
					params.AmbulatCardRequestStatus_id = this.data.RequestStatus_id;
					params.MedStaffFact_id = this.win.userMedStaffFact.MedStaffFact_id;
					//return true;
					Ext.Ajax.request({
						params: params,
						scope: {win: this, data: params},
						failure: function (result_form, action) {
							log('ошибка при запросе амб.карты');
						},
						callback: function(options, success, response) {
							if (success && response.responseText != ''){
								//var response_obj = Ext.util.JSON.decode(response.responseText);
							}
							else{
								log('ошибка при запросе амб.карты');
							}
						},
						url: '?c=PersonAmbulatCard&m=setAmbulatCardRequest'
					});
				}.createDelegate(this);
				var formPersonAmbulatCardWindow = getWnd('swPersonAmbulatCardWindow');
				if(formPersonAmbulatCardWindow){
					if(formPersonAmbulatCardWindow.isVisible()){
						sw.swMsg.alert(langs('Сообщение'), langs('Форма "Амбулаторные карты" уже открыта'));
						return false;
					}
					//this.setDisabled(true);
					formPersonAmbulatCardWindow.show(params);
				}
			}
		});
	},
	loadLpuSectionLpuSectionProfileGrid: function(){
		//Получение списка дополнительных профилей отделения из рабочего места текущего пользователя 
		
		this.additionalLpuSectionProfileUser = [];

		if(Ext.isEmpty(this.userMedStaffFact.LpuSection_id)) return false;
		var CurLpuSection_id = this.userMedStaffFact.LpuSection_id;
		if(!getRegionNick().inlist(['vologda']) || !CurLpuSection_id) return false; 

		Ext.Ajax.request({
			failure: function (response, options) {
				console.warn('Ошибка при получении списка дополнительных профилей отделения из рабочего места текущего пользователя');
			},
			params: {
				LpuSection_id: CurLpuSection_id
			},
			success: function (response, options) {
				var response_obj = Ext.util.JSON.decode(response.responseText);	
				if(Array.isArray(response_obj) && response_obj.length>0){
					this.additionalLpuSectionProfileUser = response_obj;
				}
			}.createDelegate(this),
			url: '?c=LpuStructure&m=loadLpuSectionLpuSectionProfileGrid'
		});
	},

    // Получение номера талона
	createNewEvnPLAndEvnVizitPL: function(conf, isStom) {

		if ( getRegionNick() == 'penza' && !isStom ){
			conf.formParams.VizitType_id = 0;
		}

		var me = this,
			url = isStom ? '/?c=EvnPLStom&m=createEvnPLStom' : '/?c=EvnPL&m=saveEmkEvnPL',
            loadMask = new Ext.LoadMask(this.getEl(), {
                msg: "Создание нового посещения и нового случая лечения..."
            });
		loadMask.show();
		Ext.Ajax.request({
			params: conf.formParams,
			callback: function(options, success, response) {
				loadMask.hide();
				var response_obj = Ext.util.JSON.decode(response.responseText);
				if (response_obj.success) {
					conf.onComplete(response_obj);
					if(getPolkaOptions().allow_access_to_the_functionality_card_store && me.acceptWithoutRecording && response_obj.TimetableGraf_id){
						me.requestAmbulatCard(response_obj);
					}
				} else if (response_obj.Error_Msg && !response_obj.Error_Msg.inlist(['YesNo', 'EvnVizitPLDouble'])) {
					var msg = response_obj.Error_Msg;

					if (response_obj.Error_Code == 112 && response_obj.addMsg) {
						var headMsg = 'Информация о пересечениях';
						var addMsg = escapeHtml(response_obj.addMsg);
						msg += '<br/> <a onclick="Ext.Msg.alert(\' ' + headMsg +  ' \',\' ' + addMsg +  ' \');" href=\'#\' >Подробнее</a>';
					}

					//sw.swMsg.alert('Ошибка', response_obj.Error_Msg);
					sw.swMsg.show({
						buttons: Ext.Msg.OK,
						icon: Ext.Msg.WARNING,
						title: langs('Ошибка'),
						msg: msg
					});
				} else if (response_obj.Alert_Msg && response_obj.Error_Msg == 'YesNo') {
					var msg = response_obj.Alert_Msg;

					if (response_obj.Error_Code == 112 && response_obj.addMsg) {
						var headMsg = 'Информация о пересечениях';
						var addMsg = escapeHtml(response_obj.addMsg);
						msg += '<br/> <a onclick="Ext.Msg.alert(\' ' + headMsg +  ' \',\' ' + addMsg +  ' \');" href=\'#\' >Подробнее</a>';
					}

					sw.swMsg.show({
						buttons: Ext.Msg.YESNO,
						fn: function(buttonId, text, obj) {
							if ( buttonId == 'yes' ) {
								switch (true) {
									case (111 == response_obj.Error_Code):
										conf.formParams.vizit_kvs_control_check = 1;
										break;
									case (103 == response_obj.Error_Code):
										conf.formParams.ignoreControl59536 = 1;
										break;
									case (105 == response_obj.Error_Code):
										conf.formParams.ignoreControl122430 = 1;
										break;
									case (104 == response_obj.Error_Code):
										conf.formParams.ignoreEvnDirectionProfile = 1;
										break;
									case 106:
										options.ignoreMorbusOnkoDrugCheck = 1;
										break;
									case (112 == response_obj.Error_Code):
										conf.formParams.vizit_intersection_control_check = 1;
										break;
									case (113 == response_obj.Error_Code):
										conf.formParams.ignoreLpuSectionProfileVolume = 1;
										break;
									case (130 == response_obj.Error_Code):
										conf.formParams.ignoreCheckEvnUslugaChange = 1;
										break;
									default: 
										conf.formParams.ignoreDayProfileDuplicateVizit = 1;
										break;
								}
								me.createNewEvnPLAndEvnVizitPL(conf, isStom);
							}
						},
						icon: Ext.MessageBox.QUESTION,
						msg: msg,
						title: langs(' Продолжить сохранение?')
					});
				} else if ( response_obj.Alert_Msg && 'EvnVizitPLDouble' == response_obj.Error_Msg ) {
					getWnd('swEvnVizitPLDoublesWindow').show({
						EvnVizitPLDoublesData: response_obj.Alert_Msg,
						callback: function(data) {
							conf.formParams.EvnVizitPLDoublesData = data.EvnVizitPLDoublesData;
							me.createNewEvnPLAndEvnVizitPL(conf, isStom);
						}.createDelegate(this)
					});
				} else {
					sw.swMsg.alert(langs('Ошибка'), langs('При сохранении произошли ошибки [Тип ошибки: 1]'));
				}
			},
			url: url
		});
	},
	onCreateObject: function(data) {
		var form = this;
		var pnode;
		if (data.node_lvl == 1) {
			pnode = form.Tree.getRootNode();
		}
		if (1 == form.Tree.getLoader().baseParams.type) {
			pnode = form.Tree.getNodeById(data.parent_node_id);
		}
		form.requireCheckChange = false;
		form.loadTreeNode({
			node: pnode,
			selectById: data.node_id,
			callback: function(tl,n){				
				form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
			}
		});
	},
	getEvnData: function(conf) {
		var loadMask = new Ext.LoadMask(this.getEl(), {
			msg: "Получение данных..."
		});
		loadMask.show();
		Ext.Ajax.request({
			params: conf.params,
			callback: function(options, success, response) {
				loadMask.hide();

				if ( success ) {
					var response_obj = Ext.util.JSON.decode(response.responseText);
					if(response_obj.length > 0) {
						conf.callback(response_obj[0]);
						return true;
					}
				}
				sw.swMsg.alert(langs('Ошибка'), langs('Ошибка при получении данных'));
			},
			url: conf.url
		});
	},
	copyEvnVizitPL: function(data) {
		var form = this;
		var onComplete = function(data) {
			var params = {node_lvl: 1, parent_node_id: 'root', node_id: 'EvnPL_'+ data.EvnPL_id};
			if (1 == form.Tree.getLoader().baseParams.type)
			{
				params.parent_node_id = 'EvnPLList_11115';
			}
			form.onCreateObject(params);
			if(data.Alert_Msg) {
				sw.swMsg.alert(langs('Уведомление'), data.Alert_Msg);
			}
			// т.к. было обслужено
			if (form.EvnDirectionData) {
				form.EvnDirectionData = null;
			}
			if (form.TimetableGraf_id) {
				form.TimetableGraf_id = null;
			}
		};
		var op = getGlobalOptions();
		var plop = getPolkaOptions();
		var getEvnPLEvnVizitPLData = function(o, callback) {
			form.getEvnData({
				params: {
					EvnPL_id: data.EvnPL_id,
					EvnVizitPL_id: data.EvnVizitPL_id
				},
				callback: function(formParams) {
					var d = new Date();
					formParams.action = 'addEvnPL';
					formParams.EvnPL_id = 0;
					formParams.EvnPL_NumCard = o.EvnPL_NumCard;
					formParams.EvnPL_IsFinish = 1;
					formParams.DirectClass_id = null;
					formParams.DirectType_id = null;
					formParams.EvnPL_UKL = null;
					formParams.ResultClass_id = null;
					formParams.Lpu_oid = null;
					formParams.LpuSection_oid = null;
					formParams.EvnVizitPL_id = 0;
					formParams.EvnVizitPL_setDate = op.date;
					formParams.EvnVizitPL_setTime = d.format('H:i');
                    formParams.MedStaffFact_id = form.userMedStaffFact.MedStaffFact_id;
                    formParams.LpuSection_id = form.userMedStaffFact.LpuSection_id;
					formParams.LpuSectionProfile_id = form.userMedStaffFact.LpuSectionProfile_id;
					formParams.MedPersonal_id = form.userMedStaffFact.MedPersonal_id;
					formParams.MedStaffFact_sid = null;
					formParams.VizitClass_id = null;
					formParams.TimetableGraf_id = form.TimetableGraf_id || null;
					formParams.EvnDirection_id = null;
					formParams.EvnDirection_vid = null;
					if (form.EvnDirectionData && form.EvnDirectionData.EvnDirection_id){
						formParams.EvnDirection_id = form.EvnDirectionData.EvnDirection_id;
						formParams.EvnDirection_vid = form.EvnDirectionData.EvnDirection_id;
					}
					if (form.EvnDirectionData && form.EvnDirectionData.EvnPrescr_id){
						formParams.EvnPrescr_id = form.EvnDirectionData.EvnPrescr_id;
					}
					if((op.region && op.region.nick.inlist(['ufa','pskov','ekb']))){
						formParams.EvnUslugaCommon_id = 0;
					}
					//копируем осмотр или создаем пустой документ
					if(formParams.EvnXml_id) {
						formParams.copyEvnXml_id = formParams.EvnXml_id;
						formParams.EvnXml_id = null;
					}
					formParams.allowCreateEmptyEvnDoc = 2;
                    formParams.isAutoCreate = 1;



					// copyEvnVizitPL
					form.createNewEvnPLAndEvnVizitPL({formParams: formParams, onComplete: onComplete}, false);
				},
				url: '/?c=EvnPL&m=loadEmkEvnPLEditForm'
			});
		};
		//if(!plop || !plop.arm_vizit_create || plop.arm_vizit_create == 1) {
		if(false) {
			Ext.Msg.show({
				title: langs('Внимание'),
				msg: langs('Вы действительно желаете скопировать выбранное посещение в новый случай?'),
				buttons: Ext.Msg.YESNO,
				fn: function(btn) {
					if (btn === 'yes') {
						var formParams = {
							Person_id: form.Person_id,
							PersonEvn_id: form.PersonEvn_id,
							EvnPL_id: data.EvnPL_id,
							EvnVizitPL_id: data.EvnVizitPL_id,
							Server_id: form.Server_id
						};
						form.openForm('swEmkEvnPLEditWindow', 'XXX_id', {
							EvnPL_id: data.EvnPL_id,
							EvnVizitPL_id: data.EvnVizitPL_id,
							TimetableGraf_id: form.TimetableGraf_id,
							formParams: formParams,
							callback: onComplete
						}, 'copyEvnVizitPL', langs('Копирование посещения'));
					} else {
						return false;
					}
				},
				icon: Ext.MessageBox.QUESTION
			});
		} else {
			form.getEvnPLNumber(getEvnPLEvnVizitPLData, Ext.emptyFn, false);
		}
	},
	copyEvnVizitPLStom: function(data) {
		var form = this;
		var onComplete = function(data) {
			var params = {node_lvl: 1, parent_node_id: 'root', node_id: 'EvnPLStom_'+ data.EvnPLStom_id};
			if (1 == form.Tree.getLoader().baseParams.type)
			{
				params.parent_node_id = 'EvnPLList_11112';
			}
			var pnode  = form.Tree.getRootNode();
			if (1 == form.Tree.getLoader().baseParams.type) {
				pnode = form.Tree.getNodeById(params.parent_node_id);
			}
			form.requireCheckChange = false;
			form.loadTreeNode({
				node: pnode,
				selectById: params.node_id,
				callback: function(tl,n){
					var selNode = form.Tree.getNodeById(params.node_id);
					if (selNode) {
						selNode.select();
					}	
					form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
				}
			});
			if(data.Alert_Msg) {
				sw.swMsg.alert(langs('Уведомление'), data.Alert_Msg);
			}
			// т.к. было обслужено
			if (form.EvnDirectionData) {
				form.EvnDirectionData = null;
			}
			if (form.TimetableGraf_id) {
				form.TimetableGraf_id = null;
			}
			form.isFirstAdminCheck = false;
			form.requireCheckChange = true;
		};
		var op = getGlobalOptions();
		var plop = getPolkaOptions();
		var getEvnPLEvnVizitPLData = function(o, callback) {
			loadMask = new Ext.LoadMask(form.getEl(), {
                msg: "Копирование случая..."
            });
			loadMask.show();
			Ext.Ajax.request({
				url: '/?c=EvnPLStom&m=getEvnDiagPLStom',
				params: {
					EvnPLStom_id: data.EvnPLStom_id,
					EvnVizitPLStom_id: data.EvnVizitPLStom_id
				},
				callback: function(options, success, response) {
					loadMask.hide();
					if ( success ) {
						var result = Ext.util.JSON.decode(response.responseText);log(result);
						if(result && result[0] && result[0].Error_Msg){
							sw.swMsg.alert(langs('Ошибка'),result[0].Error_Msg);
							return false;
						}
						var EvnDiagPLStom_id = '';
						var getEvnData = function(data,o,op,EvnDiagPLStom_id,form) {
							form.getEvnData({
								params: {
									EvnPLStom_id: data.EvnPLStom_id,
									EvnVizitPLStom_id: data.EvnVizitPLStom_id
								},
								callback: function(formParams) {
									var d = new Date();
									//formParams.action = 'addEvnPL';
									formParams.EvnPLStom_id = 0;
									formParams.EvnPLStom_NumCard = o.EvnPLStom_NumCard;
									formParams.EvnPLStom_IsFinish = 1;
									formParams.DirectClass_id = null;
									formParams.DirectType_id = null;
									formParams.EvnPLStom_UKL = null;
									formParams.ResultClass_id = null;
									formParams.Lpu_oid = null;
									formParams.LpuSection_oid = null;
									formParams.EvnVizitPLStom_id = 0;
									formParams.EvnVizitPLStom_setDate = op.date;
									formParams.EvnVizitPLStom_setTime = d.format('H:i');
				                    formParams.MedStaffFact_id = form.userMedStaffFact.MedStaffFact_id;
				                    formParams.LpuSection_id = form.userMedStaffFact.LpuSection_id;
				                    formParams.LpuSectionProfile_id = form.userMedStaffFact.LpuSectionProfile_id;
									formParams.MedPersonal_id = form.userMedStaffFact.MedPersonal_id;
									formParams.MedStaffFact_sid = null;
									formParams.VizitClass_id = null;
									formParams.TimetableGraf_id = form.TimetableGraf_id || null;
									formParams.EvnDirection_id = null;
									formParams.EvnDirection_vid = null;
									formParams.EvnPLStom_IsUnlaw = null;
									formParams.EvnPLStom_IsSurveyRefuse = null;
									formParams.EvnPLStom_IsUnport = null;
									formParams.EvnPLStom_IsCons = null;
									formParams.PrehospTrauma_id = null;
									formParams.ResultDeseaseType_id = null;
									formParams.LeaveType_fedid = null;
									formParams.ResultDeseaseType_fedid = null;
									formParams.MedicalCareKind_id = null;
									formParams.PrehospDirect_id = null;
									formParams.EvnDirection_Num = null;
									formParams.Org_did = null;
									formParams.Lpu_did = null;
									formParams.LpuSection_did = null;
									formParams.MedStaffFact_did = null;
									formParams.Diag_did = null;
									formParams.Diag_preid = null;
									formParams.EvnDirection_IsAuto = null;
									formParams.EvnDirection_IsReceive = null;
									formParams.Lpu_fid = null;
									formParams.EvnPrescr_id = null;
									formParams.Diag_fid = null;
									formParams.Diag_lid = null;
									if((op.region && op.region.nick.inlist(['ufa','pskov','ekb']))){
										formParams.EvnUslugaCommon_id = 0;
									}
									formParams.Mes_id = null;
									//копируем осмотр или создаем пустой документ
									if(formParams.EvnXml_id) {
										formParams.copyEvnXml_id = formParams.EvnXml_id;
										formParams.EvnXml_id = null;
									}
									formParams.allowCreateEmptyEvnDoc = 2;
				                    formParams.isAutoCreate = 1;
				                    formParams.copyEvnDiagPLStom = 1;
				                    formParams.EvnDiagPLStom_ids = EvnDiagPLStom_id;
									// copyEvnVizitPL
									form.afterCopyEvnVizitPLStom = true;
									form.createNewEvnPLAndEvnVizitPL({formParams: formParams, onComplete: onComplete}, true);
								},
								url: '/?c=EvnPLStom&m=loadEmkEvnPLStomEditForm'
							});
						};
						if(result){
							if(result.length > 1) {
								var prms = {};
								prms.store = result;
								prms.callback = function(dt) {
									if((typeof dt == 'object') && dt.length > 0){
										for(var i=0;i<dt.length;i++){
											if(dt[i].get('EvnDiagPLStom_id') && dt[i].get('EvnDiagPLStom_id') > 0)
												EvnDiagPLStom_id += (dt[i].get('EvnDiagPLStom_id')+',');
										}
									}
									getEvnData(data,o,op,EvnDiagPLStom_id,form);
								};
								getWnd('swSelectEvnDiagPLStomWindow').show(prms);
							} else if(result[0] && result[0].EvnDiagPLStom_id) {
								EvnDiagPLStom_id = result[0].EvnDiagPLStom_id;
								getEvnData(data,o,op,EvnDiagPLStom_id,form);
							}
						}
					}
				}
			});
			
		};
		form.getEvnPLNumber(getEvnPLEvnVizitPLData, Ext.emptyFn, true);
	},
	//@task https://jira.is-mis.ru/browse/PROMEDWEB-3186
	copyEvnXML: function(rec){
		var form = this,
			params = {
				EvnXml_id: form.showActionsMenu.swD.object_id,
				Evn_id: rec.EvnXml_pid
			},
			copyTemplateLoadMask = new Ext.LoadMask(this.getEl(), {
				msg: "Создание копии шаблона..."
			}),
			copyGetContentLoadMask = new Ext.LoadMask(this.getEl(), {
				msg: "Получение дневниковой записи..."
			});
			copyContentLoadMask = new Ext.LoadMask(this.getEl(), {
				msg: "Копирование дневниковой записи..."
			});
		copyTemplateLoadMask.show();
		// копирование шаблона
		Ext.Ajax.request({
			url: '?c=EvnXml&m=doCopy',
			params: params,
			callback: function(options, success, response) {
				if(success){
					var response_obj = Ext.util.JSON.decode(response.responseText),
						copyEvnXml_id = response_obj.EvnXml_id;
					copyGetContentLoadMask.show();
					if (Ext.isEmpty(response_obj.Error_Msg)) {
						copyContentLoadMask.show();
						form.showActionsMenu.hide();
						// получение данных копируемой дневниковой записи
						Ext.Ajax.request({
							url: '/?c=Template&m=loadEvnXmlViewData',
							params: params,
							callback: function (options, success, response) {
								copyContentLoadMask.hide();
								if (success) {
									var response_obj = Ext.util.JSON.decode(response.responseText);
									var update_params = {
										EvnXml_id: copyEvnXml_id,
										XmlData: Ext.util.JSON.encode(response_obj.xml_data),
									}
									copyGetContentLoadMask.hide();
									// обновление содержимого копированной записи
									Ext.Ajax.request({
										url: '/?c=EvnXml&m=updateContent',
										params: update_params,
										callback: function (options, success, response) {
											if(success){
												sw.swMsg.alert(langs('Сообщение'),
													langs('Документ успешно скопирован.')
												);
											}else{
												sw.swMsg.alert(langs('Ошибка'),
													langs('Не удалось скопировать содержимое шаблона')
												);
												if(IS_DEBUG){
													console.log(response);
												}
											}
										}
									});
								}
							}
						});
						form.openEmkEditWindow('Person_id', form.Tree.getSelectionModel().selNode);
					} else {
						sw.swMsg.alert(langs('Ошибка'), langs('Не удалось скопировать документ.'));
						if(IS_DEBUG){
							console.log(response_obj.Error_Msg);
						}
					}
				} else {
					sw.swMsg.alert(langs('Ошибка'), langs('Не удалось скопировать документ.'));
					if(IS_DEBUG){
						console.log(response);
					}
				}
			}
		});
		copyTemplateLoadMask.hide();
		copyContentLoadMask.hide();
		form.reloadViewForm();
	},
	additionalCheckProfileBeforeCreatingVisit: function(data){
		// проверка на соответствие профилей отделений при создании нового посещения
		var childrenVizit = null;
		var vizits = null;
		if(getRegionNick() == 'vologda' &&  (!Ext.isEmpty(data.EvnPL_id) || !Ext.isEmpty(data.EvnPLStom_id))){
			//проверка на соответствие профиля отделения
			//var EvnPLChildren = this.getObjectChildren('EvnPL', data.EvnPL_id);
			if(!Ext.isEmpty(data.EvnPL_id)){
				childrenVizit = this.getObjectChildren('EvnPL', data.EvnPL_id);
				vizits = childrenVizit.EvnVizitPL;
			}else if(!Ext.isEmpty(data.EvnPLStom_id)){
				childrenVizit = this.getObjectChildren('EvnPLStom', data.EvnPLStom_id);
				vizits = childrenVizit.EvnVizitPLStom;
			}
			if(!childrenVizit || !vizits) return false;

			var userLpuSectionProfile_id = this.userMedStaffFact.LpuSectionProfile_id;
			var userLpuSectionProfile_Code = Number.parseInt(this.userMedStaffFact.LpuSectionProfile_Code);

			if (Ext.isArray(vizits.item) && vizits.item.length>0 && userLpuSectionProfile_id) {
				var NotExceptionProfileCodes = [];
				vizits.item.forEach(function(record){
					if(!record.data.LpuSectionProfile_Code.inlist(getGlobalOptions().exceptionprofiles) 
						&& record.data.LpuSectionProfile_Code != userLpuSectionProfile_Code)
						NotExceptionProfileCodes.push(record.data.LpuSectionProfile_Code);
				});

				if(NotExceptionProfileCodes.length == 0) return false;
				
				if(!userLpuSectionProfile_Code.inlist(getGlobalOptions().exceptionprofiles)){
					if(!Ext.isEmpty(this.additionalLpuSectionProfileUser) && this.additionalLpuSectionProfileUser.length > 0){
						var NotExceptionDopProfileCodes = [];
						if( this.additionalLpuSectionProfileUser.length > 0) {
							//PROMEDWEB-11462
							//Исправление обработки проверки доп профилей
							var DopProfile = this.additionalLpuSectionProfileUser.map(rec=>rec.LpuSectionProfile_Code);
							var profile_begDate = Date.parseDate(DopProfile.LpuSectionLpuSectionProfile_begDate, 'd.m.Y') ;
							var profile_endDate = (DopProfile.LpuSectionLpuSectionProfile_endDate) ? Date.parseDate(DopProfile.LpuSectionLpuSectionProfile_endDate, 'd.m.Y') : false;
							
							vizits.item.forEach(function(record){
								if (!record.data) return;

								var visitDate = record.data.EvnVizitPL_setDate ? Date.parseDate(record.data.EvnVizitPL_setDate, 'd.m.Y') : new Date,
									profile_code = record.data.LpuSectionProfile_Code;
								if( profile_begDate <= visitDate && (!profile_endDate || profile_endDate >= visitDate ) ) {
									if(profile_code
										&& !profile_code.inlist(getGlobalOptions().exceptionprofiles)
										&& !profile_code.inlist(DopProfile))
										NotExceptionDopProfileCodes.push(profile_code);
								}
							});
						}
						return (NotExceptionDopProfileCodes.length != 0);
					}
					return true;
				}
				return false;
			}
		}
	},
	addEvnVizitPL: function(data) {
		var nodeData = this.getObjectData('EvnPL', data.EvnPL_id);
        if (this.isReadOnly || nodeData.accessType == 'view') {
            sw.swMsg.alert(langs('Сообщение'), langs('Случай АПЛ недоступен для редактирования!'));
            return false;
        }
		if (nodeData.EvnPL_IsFinish == 2) {
			sw.swMsg.alert(langs('Сообщение'), langs('Случай АПЛ закрыт!'));
			return false;
		}
		if (this.userMedStaffFact.MedStaffFactCache_IsDisableInDoc == 2) {
			sw.swMsg.alert(langs('Сообщение'), langs('Текущее рабочее место запрещено для выбора в документах'));
			return false;
		}
		var node = this.Tree.getNodeById('EvnPL_'+ data.EvnPL_id);
        if (!this.allowAddEvnVizitPL(node)) {
            sw.swMsg.alert(langs('Уведомление'), langs('Вы не можете создать посещение в этом талоне!'));
            return false;
        }
		var form = this;
		var allowConsulDiagnVizitOnly = false;
		var allowMorbusVizitOnly = false;
		
		if(getRegionNick() == 'vologda' && this.additionalCheckProfileBeforeCreatingVisit(data)){
			sw.swMsg.alert(langs('Сообщение'), langs('Добавление посещения невозможно, т.к. в рамках текущего ТАП специалистом другого профиля уже добавлено посещение.'));
			return false;
		}

		if ( getRegionNick().inlist(['buryatiya','kareliya','astra','ufa']) ) {
			var params = {
				object: 'EvnPL',
				object_id: data.EvnPL_id
			},
			yes_handler = function() { 
				form.addEvnVizitPL(data);
			},
			vizitList = form.getObjectChildren('EvnPL', data.EvnPL_id).EvnVizitPL.item,
			checkResult = form._checkEvnPL(nodeData, vizitList, params, 'addEvnVizitPL', yes_handler);
			if (!checkResult.success) {
				form.showWarningMsg({
					msg: checkResult.msg || null,
					links: checkResult.links || {}
				}, (checkResult.field || null), (checkResult.link || null), checkResult.params);
				return false;
			} else {
				allowConsulDiagnVizitOnly = checkResult.allowConsulDiagnVizitOnly;
				allowMorbusVizitOnly = checkResult.allowMorbusVizitOnly;
			}
		}

		var onComplete = function(data) {
			var params = {node_lvl: 1, parent_node_id: 'root', node_id: 'EvnPL_'+ data.EvnPL_id};
			if (1 == form.Tree.getLoader().baseParams.type)
			{
				params.parent_node_id = 'EvnPLList_11115';
			}
			form.onCreateObject(params);
			if(data.Alert_Msg) {
				sw.swMsg.alert(langs('Уведомление'), data.Alert_Msg);
			}
			if (typeof form.onSaveEvnDocument == 'function') {
				form.onSaveEvnDocument(true, data, 'EvnPL');
			}
			// т.к. было обслужено
			if (form.EvnDirectionData) {
				form.EvnDirectionData = null;
			}
			if (form.TimetableGraf_id) {
				form.TimetableGraf_id = null;
			}
			if (data.EvnVizitPL_id) {
				form.checkAndOpenRepositoryObserv(data.EvnVizitPL_id);
			}
		};
		var getEvnDirectionData = function(formParams, callback) {
			if (formParams.EvnDirection_vid || !formParams.TimetableGraf_id) {
				callback(formParams);
			} else {
				var loadMask = new Ext.LoadMask(form.getEl(), {
					msg: "Получение данных направления..."
				});
				loadMask.show();
				Ext.Ajax.request({
					params: {
						TimetableGraf_id: formParams.TimetableGraf_id
						,Person_id: form.getPersonId()
						,useCase: 'addEvnVizitPL'
					},
					callback: function(options, success, response) {
						loadMask.hide();
						if ( success ) {
							var response_obj = Ext.util.JSON.decode(response.responseText);
							if (response_obj.length > 0) {
								formParams.EvnDirection_vid = response_obj[0].EvnDirection_id;
								/*callback(formParams);
							} else {
								sw.swMsg.alert(langs('Ошибка'), langs('Направление не найдено'));*/
							}
							callback(formParams);
						} else {
							sw.swMsg.alert(langs('Ошибка'), langs('Ошибка при получении данных направления'));
						}
					},
					url: '/?c=EvnDirection&m=loadEvnDirectionList'
				});
			}
		};
		var op = getGlobalOptions();
		var plop = getPolkaOptions();
		if(!plop || !plop.arm_vizit_create || plop.arm_vizit_create == 1) {
            if (getWnd('swEmkEvnPLEditWindow').isVisible())
            {
                sw.swMsg.alert(langs('Сообщение'), langs('Форма "ТАП:добавление" в данный момент открыта.'));
                return false;
            }
			var formParams = new Object();
			 
			formParams.EvnPL_id = data.EvnPL_id;
			formParams.EvnVizitPL_id = 0;
			formParams.Person_id = form.Person_id;
			formParams.Server_id = form.Server_id;
			formParams.PersonEvn_id = form.PersonEvn_id;
			var params = new Object();
			if (form.HomeVisit_id && form.allowHomeVisit == true){
				form.serviceTypeStore.clearFilter();
				index = form.serviceTypeStore.findBy(function(rec) {
					return (rec.get('ServiceType_SysNick') == 'home');
				});
				if ( index == -1 ) {
					sw.swMsg.alert(langs('Сообщение'), 'Ошибка при получении идентификатора места обслуживания');
					return false;
				}

				params.HomeVisit_id = form.HomeVisit_id;
				params.ServiceType_id = form.serviceTypeStore.getAt(index).get('ServiceType_id');
				formParams.HomeVisit_id = form.HomeVisit_id;
				formParams.ServiceType_id = form.serviceTypeStore.getAt(index).get('ServiceType_id');
				form.allowHomeVisit = false;
			}
			params.callback = function(resdata) {
				//form.onAfterAction('action_New_EvnVizitPL',resdata, 'EvnVizitPL', node);
				onComplete(resdata);
			};
			params.formParams = formParams;
			params.formParams.EvnDirection_vid = null;
			params.formParams.TimetableGraf_id = form.TimetableGraf_id || null;
			if (form.EvnDirectionData && form.EvnDirectionData.EvnDirection_id){
				params.formParams.EvnDirection_vid = form.EvnDirectionData.EvnDirection_id;
				params.formParams.TimetableGraf_id = form.EvnDirectionData.TimetableGraf_id || null;
			}
			if (form.EvnDirectionData && form.EvnDirectionData.EvnPrescr_id){
				params.formParams.EvnPrescr_id = form.EvnDirectionData.EvnPrescr_id;
			}
			params.onHide = Ext.emptyFn;
            params.allowConsulDiagnVizitOnly = allowConsulDiagnVizitOnly;
            params.allowMorbusVizitOnly = allowMorbusVizitOnly;
			params.OtherVizitList = [];
			params.OtherUslugaList = [];
			var EvnPLChildren = form.getObjectChildren('EvnPL',params.formParams.EvnPL_id);
			if (EvnPLChildren.EvnVizitPL && Ext.isArray(EvnPLChildren.EvnVizitPL.item)) {
				EvnPLChildren.EvnVizitPL.item.forEach(function(vizit) {
					if (vizit.EvnVizitPL_id != params.formParams.EvnVizitPL_id) {
						params.OtherVizitList.push(vizit.data);

						var uslugaList = form.searchObjects(function(rec) {
							return rec.object_code == 'EvnUsluga' && rec.parent_object_value == vizit.EvnVizitPL_id;
						});
						uslugaList.forEach(function(usluga) {
							params.OtherUslugaList.push(usluga.data);
						});
					}
				});
			}
			var lastEvnVizitPLDate;
			form.viewFormDataStore.each(function(rec) {
				if (rec.object_code=='EvnVizitPL'&&( Ext.isEmpty(lastEvnVizitPLDate) || (!Ext.isEmpty(rec.get('EvnVizitPL_setDate')) && rec.get('EvnVizitPL_setDate') >= lastEvnVizitPLDate))){
					lastEvnVizitPLDate = rec.get('EvnVizitPL_setDate');
				}
			});
			params.lastEvnVizitPLDate = lastEvnVizitPLDate;
			getEvnDirectionData(params.formParams, function(formParams) {
				params.formParams = formParams;
				form.openForm('swEmkEvnPLEditWindow', 'EvnVizitPL_id', params, 'addEvnVizitPL');
			});
		} else {
			form.getEvnData({
				params: {
					loadLast: 1,
					EvnPL_id: data.EvnPL_id
				},
				callback: function(formParams) {
					// https://redmine.swan.perm.ru/issues/53050
					if ( getRegionNick() == 'pskov' && !Ext.isEmpty(formParams.EvnVizitPL_id) && Ext.isEmpty(formParams.UslugaComplex_uid) ) {
						sw.swMsg.alert(langs('Ошибка'), langs('Добавление посещения невозможно, т.к. в предудыщем посещении не указан код посещения'));
						return false;
					}

					var d = new Date();
					formParams.action = 'addEvnVizitPL';
					formParams.EvnVizitPL_id = 0;
					formParams.EvnVizitPL_setDate = op.date;
					formParams.EvnVizitPL_setTime = d.format('H:i');
                    formParams.MedStaffFact_id = form.userMedStaffFact.MedStaffFact_id;
					formParams.LpuSection_id = form.userMedStaffFact.LpuSection_id;
					formParams.LpuSectionProfile_id = form.userMedStaffFact.LpuSectionProfile_id;
					formParams.MedPersonal_id = form.userMedStaffFact.MedPersonal_id;
					formParams.MedStaffFact_sid = null;
					formParams.VizitClass_id = 2;
					formParams.EvnDirection_vid = null;
					formParams.TimetableGraf_id = form.TimetableGraf_id || null;
					if (form.EvnDirectionData && form.EvnDirectionData.EvnDirection_id){
						formParams.EvnDirection_vid = form.EvnDirectionData.EvnDirection_id;
						formParams.TimetableGraf_id = form.EvnDirectionData.TimetableGraf_id || null;
					}
					if (form.EvnDirectionData && form.EvnDirectionData.EvnPrescr_id){
						formParams.EvnPrescr_id = form.EvnDirectionData.EvnPrescr_id;
					}
					if ((op.region && op.region.nick.inlist(['ufa','pskov','ekb']))) {
						formParams.EvnUslugaCommon_id = 0;
						if (isProphylaxisVizitOnly(formParams.UslugaComplex_Code)) {
							//Если 1-ое посещение профилактическое, то запретить вводить более одного посещения в ТАП и требовать закрыть случай лечения
							sw.swMsg.alert(langs('Запрещено'), langs('В ТАП указан код профилактического посещения, запрещено вводить более одного посещения. Необходимо закрыть случай лечения'), function() {form.openEvnVizitPLEditWindow('closeEvnPL', {object_id: data.EvnPL_id});} );
							return false;
						}
					}
					// При повторном посещении данное поле должно оставаться пустым.
					if ((op.region && op.region.nick.inlist(['ekb', 'perm', 'vologda']))) {
						formParams.UslugaComplex_uid = null;
					}
					//копируем осмотр или создаем пустой документ
					if(formParams.EvnXml_id) {
						formParams.copyEvnXml_id = formParams.EvnXml_id;
						formParams.EvnXml_id = null;
					}
					formParams.allowCreateEmptyEvnDoc = 2;
                    formParams.isAutoCreate = 1;
					if (!plop || !plop.arm_evn_xml_copy || plop.arm_evn_xml_copy == 1) {
						var index = form.payTypeStore.findBy(function(rec) {
							return (rec.get('PayType_SysNick') == form.getPayTypeSysNickOMS());
						});
						if ( index == -1 ) {
							sw.swMsg.alert(langs('Сообщение'), langs('Ошибка при получении идентификатора вида оплаты!'));
							return false;
						}
						formParams.PayType_id = form.payTypeStore.getAt(index).get('PayType_id');

						VizitType_SysNick = form.EvnDirectionData && form.EvnDirectionData.VizitType_SysNick ? form.EvnDirectionData.VizitType_SysNick : 'desease';

						form.vizitTypeStore.clearFilter();
						index = form.vizitTypeStore.findBy(function(rec) {
							return (rec.get('VizitType_SysNick') == VizitType_SysNick);
						});
						if ( index == -1 ) {
							sw.swMsg.alert(langs('Сообщение'), langs('Ошибка при получении идентификатора цели посещения!'));
							return false;
						}
						formParams.VizitType_id = form.vizitTypeStore.getAt(index).get('VizitType_id');

						form.serviceTypeStore.clearFilter();
						index = form.serviceTypeStore.findBy(function(rec) {
							return (rec.get('ServiceType_SysNick') == 'polka');
						});
						if ( index == -1 ) {
							sw.swMsg.alert(langs('Сообщение'), 'Ошибка при получении идентификатора места обслуживания');
							return false;
						}
						formParams.ServiceType_id = form.serviceTypeStore.getAt(index).get('ServiceType_id');
						formParams.MedPersonal_sid = null;
						// @task https://redmine.swan.perm.ru/issues/79903
						//formParams.Diag_id = null;
						//formParams.DeseaseType_id = null;
					}


					getEvnDirectionData(formParams, function(formParams) {
						// addEvnVizitPL
						form.createNewEvnPLAndEvnVizitPL({formParams: formParams, onComplete: onComplete}, false);
					});
				},
				url: '/?c=EvnPL&m=loadEmkEvnPLEditForm'
			});
		}
	},
    allowAddEvnVizitPL: function(node_evnpl){
        if ( getRegionNick() != 'ufa' )
        {
            // эта проверка только для Уфы
            return true;
        }
        if ( !node_evnpl || !node_evnpl.attributes.LpuUnitSet_id || !this.userMedStaffFact.LpuUnitSet_id )
        {
            // это чтобы разрешить добавление посещение, если код не указан
            return true;
        }
        if ( this.userMedStaffFact.LpuUnitSet_id != node_evnpl.attributes.LpuUnitSet_id )
        {
            // коды не совпадают, запрещаем добавление посещения
            return false;
        }
        return true;
    },
	showArchive: false,
	refreshArchiveElement: function() {
		var form = this;
		if (!form.addArchiveAfter || !form.showArchive) {
			form.addArchiveAfter = form.Tree.getEl().child('.x-tree-root-node').last('li');
		}
		if (form.addArchiveAfter) {
			if (!form.showArchiveElement) {
				form.showArchiveElement = new Ext.Element(document.createElement('div'));
			}
			var buttonText = langs('Показать');
			if (form.showArchive) {
				buttonText = langs('Скрыть');
			}
			form.showArchiveElement.update('<div style="padding: 10px 0px 5px 5px; border-bottom: 2px solid #99bbe8;"><b>Архивные данные</b><img id="'+form.id+'-archiveImg" src="img/grid/info.png"/>&nbsp;&nbsp;&nbsp;<a class="archiveBtn" href="#" style="margin:5px;float: right;" onClick="Ext.getCmp(\''+form.id+'\').toggleArchiveRecords(this);">'+buttonText+'</a></div>');
			form.showArchiveElement.insertAfter(form.addArchiveAfter);
			var archiveImg = Ext.get(form.id+'-archiveImg');
			var info = new Ext.ToolTip({html:langs('Архивные данные доступны в режиме просмотра.'),target:archiveImg});
		}
	},
	addEMDOuterButtonLink: function() {
		if (getRegionNick() == 'kz') return false;
		var form = this,
			parentEl = form.Tree.getEl().child('.x-tree-root-node');
		if(parentEl && getGlobalOptions().enableEMD) {
			if (!form.EMDOuterButton) {
				form.EMDOuterButton = new Ext.Element(document.createElement('div'));
				form.EMDOuterButton.update('<div style="padding: 10px 0px 5px 5px;"><a class="emdOuterBtn" href="#" onClick="Ext.getCmp(\'' + form.id + '\').openEMDOuterRegistry(this);">Внешние ЭМД</a></div>');
			}
			parentEl.appendChild(form.EMDOuterButton);//помещаем в конец чтобы развернутые архивные данные не спутали
		}
	},
	openEMDOuterRegistry: function() {
		var me = this;
		getWnd('swEMDOuterRegistryWindow').show({
			parentform: 'EMK',
			Person_id: me.Person_id,
			Person_Surname: me.Person_Surname,
			Person_Firname: me.Person_Firname,
			Person_Secname: me.Person_Secname,
			Person_Birthday: me.Person_Birthday,
			Person_Snils: me.PersonInfoFrame.getFieldValue('Person_Snils')
		});
	},
	toggleArchiveRecords: function(button) {
		var win = this;
		if (win.showArchive) {
			win.loadTree();

			button.innerHTML = langs('Показать');
		} else {
			win.loadArchiveRecords();

			button.innerHTML = langs('Скрыть');
		}
	},
	loadArchiveRecords: function(callback) {
		var win = this;
		if (!win.blockLoadArchive) {
			win.blockLoadArchive = true;
			win.getLoadMask(langs('Загрузка архивных записей')).show();
			var root = win.Tree.getRootNode();
			win.Tree.getLoader().baseParams.useArchive = 1; // добавляем признак загрузки архивных записей
			win.Tree.getLoader().clearOnLoad = false; // не очищаем дерево
			win.Tree.getLoader().load(root,function(tl,n){
				win.showArchive = true;
				win.blockLoadArchive = false;
				win.getLoadMask().hide();
				win.Tree.getLoader().clearOnLoad = true;
				if (callback && typeof callback == 'function') {
					callback();
				}
			}.createDelegate(this));
		}
	},
	printPersonLpuInfo: function(data) {
		var form = this;
		Ext.Ajax.request({
			url: '/?c=Person&m=savePersonLpuInfo',
			success: function(response){
				var response_obj = Ext.util.JSON.decode(response.responseText);
				if (response_obj && response_obj.Error_Msg ) {
					sw.swMsg.alert('Ошибка', 'Ошибка при сохранении согласие на обработку перс. данных');
					return false;
				} else if ( response_obj && !Ext.isEmpty(response_obj.PersonLpuInfo_id) ) {
					form.loadTree(0, function(tl,n){
						if(form.searchNodeObj && form.searchNodeObj.parentNodeId) {
							//ищем ноду в дереве и делаем с ней что-то
							if(form.searchNodeObj.parentNodeId == 'root') {
								var sparams = {
									parent_node: form.Tree.getRootNode(),
									last_child: false,//form.searchNodeObj.last_child || 
									disableLoadViewForm: form.searchNodeObj.disableLoadViewForm,
									node_attr_name: 'id',
									node_attr_value: form.searchNodeObj.EvnClass_SysNick +'_'+ form.searchNodeObj.Evn_id
								};
								form.searchNodeInTreeAndLoadViewForm(sparams);
							}
						}
					});
					var lan = (getAppearanceOptions().language == 'ru' ? 1 : 2);
					if (data.IsAgree == 1) {
						var template = 'Otkaz';
						var parLang = '';
					} else {
						var template = 'Soglasie';
						var parLang = '&paramLang=' + lan;
					}
					if (getRegionNick() == 'kz') {
						printBirt({
							'Report_FileName': 'Person'+template+'_PersData.rptdesign',
							'Report_Params': '&paramPersonLpuInfo_id=' + response_obj.PersonLpuInfo_id + parLang,
							'Report_Format': 'pdf'
						});
					} else {
						printBirt({
							'Report_FileName': 'Person'+template+'_PersData.rptdesign',
							'Report_Params': '&paramPersonLpuInfo_id=' + response_obj.PersonLpuInfo_id,
							'Report_Format': 'pdf'
						});
					}
				}
			}.createDelegate(this),
			params: {
				Person_id: data.Person_id,
				PersonLpuInfo_IsAgree: data.IsAgree
			}
		});
	},
	printElectroReceptInfo: function(){
		Ext.Ajax.request({
			url: '/?c=Person&m=loadPersonLpuInfoPanel',
			success: function (response) {
				var response_obj = Ext.util.JSON.decode(response.responseText);
				if ((response_obj && response_obj.Error_Msg) || typeof response_obj != 'object') {
					sw.swMsg.alert('Ошибка', 'Ошибка при печати согласия на  рецепт в форме электронного документа');
					return false;
				}
				response_obj.forEach(rec => {
					if(rec.PersonLpuInfoType == 'ReceptElectronic'){
							printBirt({
								'Report_FileName': rec.PersonLpuInfo_IsAgree == 1 ? 'Withdraw_Consent_Recipe_EDF.rptdesign' : 'Consent_Recipe_EDF.rptdesign',
								'Report_Params': '&paramReceptElectronic=' + rec.PersonLpuInfo_id,
								'Report_Format': 'pdf'
							});
					}
				});
			},
			params: {
				Person_id: this.Person_id
			}
		});
	},
	setElectroReceptInfo: function (data) {
		var form = this;
		Ext.Ajax.request({
			url: '/?c=Person&m=saveElectroReceptInfo',
			success: function (response) {
				var response_obj = Ext.util.JSON.decode(response.responseText);
				if (response_obj && response_obj.Error_Msg) {
					sw.swMsg.alert('Ошибка', 'Ошибка при сохранении согласия на оформление рецепта в форме электронного документа');
					return false;
				} else if (response_obj && !Ext.isEmpty(response_obj.ReceptElectronic_id)) {
					form.ReceptElectronic_id = response_obj.ReceptElectronic_id;
				}
				form.reloadPersonLpuInfoPersData();
				form.printElectroReceptInfo();
			}.createDelegate(this),
			params: {
				Person_id: data.Person_id,
				ReceptElectronic_id: data.ReceptElectronic_id ? data.ReceptElectronic_id : 0,
				Refuse: data.Refuse ? data.Refuse : 0
			}
		});
	},
	reloadPersonLpuInfoPersData: function() {
		var reload_params = {
			section_code: 'PersonLpuInfoPersData',
			object_key: 'PersonLpuInfo_id',
			object_value: this.Person_id,
			parent_object_key: 'Person_id',
			parent_object_value: this.Person_id,
			section_id: 'PersonLpuInfoPersData_'+ this.Person_id
		};
		this.reloadViewForm(reload_params);
	},
	initComponent: function()
	{
        this.ResultClassCodeDie = 4;
        if ( getRegionNick() == 'ufa' )
        {
            this.ResultClassCodeDie = 5;
        }
        if ( getRegionNick().inlist([ 'buryatiya', 'ekb', 'kareliya', 'krym', 'penza', 'pskov' ]) )
        {
            this.ResultClassCodeDie = 313;
        }
		var form = this;

		form.EvnPLDispMenu = new Ext.menu.Menu([{
			text: 'Диспансеризация взрослого населения - 1 этап',
			handler: function () {
				form.addNewEvnPLDisp({
					DispClass_id: 1
				});
			}
		}, {
			text: 'Диспансеризация взрослого населения - 2 этап',
			handler: function() {
				form.addNewEvnPLDisp({
					DispClass_id: 2
				});
			}
		}, {
			text: 'Профилактические осмотры взрослых',
			handler: function() {
				form.addNewEvnPLDisp({
					DispClass_id: 5
				});
			}
		}, {
			text: 'Диспансеризация детей сирот - 1 этап',
			handler: function() {
				form.addNewEvnPLDisp({
					DispClass_id: 3
				});
			}
		}, {
			text: 'Диспансеризация детей сирот - 2 этап',
			handler: function() {
				form.addNewEvnPLDisp({
					DispClass_id: 4
				});
			}
		}, {
			text: 'Периодические осмотры несовершеннолетних',
			handler: function() {
				form.addNewEvnPLDisp({
					DispClass_id: 6
				});
			}
		}, {
			text: 'Профилактические осмотры несовершеннолетних - 1 этап',
			handler: function() {
				form.addNewEvnPLDisp({
					DispClass_id: 10
				});
			}
		}, {
			text: 'Профилактические осмотры несовершеннолетних - 2 этап',
			handler: function() {
				form.addNewEvnPLDisp({
					DispClass_id: 12
				});
			}
		}, {
			text: 'Предварительные осмотры несовершеннолетних - 1 этап',
			handler: function() {
				form.addNewEvnPLDisp({
					DispClass_id: 9
				});
			}
		}, {
			text: 'Предварительные осмотры несовершеннолетних - 2 этап',
			handler: function() {
				form.addNewEvnPLDisp({
					DispClass_id: 11
				});
			}
		}]);

		this.PersonInfoFrame = new sw.Promed.PersonInfoPanel({
			button2Callback: function(callback_data)
			{
				form.PersonInfoFrame.load({Person_id: callback_data.Person_id, Server_id: callback_data.Server_id});
			},
			button2OnHide: function()
			{
				var cw = Ext.getCmp('PersonEmkForm');
				if (cw.action == 'view')
					{
					cw.buttons[1].focus();
					}
			},
			button3OnHide: function()
			{
				var cw = Ext.getCmp('PersonEmkForm');
				if (cw.action == 'view')
				{
   				cw.buttons[1].focus();
				}
			},
			plugins: [Ext.ux.PanelCollapsedTitle],
			id: 'PEMK_PersonInfoFrame',
			titleCollapse: true,
			floatable: false,
			collapsible: true,
			collapsed: true,
			border: true,
			region: 'north'
		});

		/*
		this.PersonInfoFrame = new sw.Promed.PersonInfoPanel(
		{
			button2Callback: function(callback_data)
			{
				var cw = Ext.getCmp('PersonEmkForm');
				//cw.findById('EPLEF_PersonEvn_id').setValue(personevn_id);
				//cw.findById('EPLEF_Server_id').setValue(server_id);
				cw.PersonInfoFrame.load({ Person_id: callback_data.Person_id, Server_id: callback_data.Server_id });
			},
			button2OnHide: function()
			{
				var cw = Ext.getCmp('PersonEmkForm');
				if (cw.action == 'view')
					{
					cw.buttons[1].focus();
					}
			},
			button3OnHide: function()
			{
				var cw = Ext.getCmp('PersonEmkForm');
				if (cw.action == 'view')
				{
   				cw.buttons[1].focus();
				}
			},
			id: 'PEMK_PersonInfoFrame',
			title: langs('Загрузка...'),
			collapsible: true,
			collapsed: true,
			//plugins: [Ext.ux.PanelCollapsedTitle],
			floatable: false,
			//collapsedCls: 'x-panel-collapsed',
			border: true,
			region: 'north',
			titleCollapse: true
		});*/

		/* 
		* Для нод (node.attributes.object) из этого списка может быть загружена форма просмотра с элементами управления
		*/
		this.codeListForLoad = [
			'AllergHistory',
			'FeedingType',
			'PersonMedHistory',
			'Anthropometry',
			'BloodData',
			'PalliatInfoConsentData',
			'PersonLpuInfoPersData',
            'EvnPL',
			'EvnPLDispAdult',
			'EvnPLDispChild',
			'EvnPLDispDop13',
			'EvnPLDispProf',
			'EvnPLDispOrp',
			'EvnPLDispTeenInspection',
			'EvnPLDispMigrant',
			'EvnPLDispDriver',
            'EvnPLStom',
			'EvnDiagPLStom',
			'EvnUslugaPar',
			'EvnUslugaCommon',
			'EvnUslugaTelemed',
			'CmpCloseCard',
			'CmpCallCard',
			'EvnVizitPL',
			'ExpertHistory',
			'EvnRecept',
			'EvnReceptGeneral',
			'FreeDocument',
			'MorbusOnkoVizitPLDop',
			'MorbusOnkoLeave',
			'DiagList',
			'PersonSvidInfo',
			'PersonDispInfo',
			'EvnPLDispInfo',
            'EvnStickOpenInfo',
            'PersonOnkoProfileInfo',
            'PersonDrugRequestInfo',
            'PalliatNotify',
			'SignalInformationAll',
			'SurgicalList',
			'DirFailList',
			'EvnPS',
			'RepositoryObserv',
			'BleedingCard'
			,'EvnSection'

			// #182475
			// Три пункта о прививках в сигнальной информации (регионы 'ufa', 'vologda'):
			,'MantuReaction'
			,'Inoculation'
			,'InoculationPlan'

			,'EvnCostPrint'
			,'CmpCallCardCostPrint'
			,'EvnVK'
			,'EvnReanimatPeriod'   //BOB - 10.05.2017
			,'EvnReanimatCondition'//BOB - 04.12.2017
			,'EvnScale' //BOB - 11.12.2017
			,'EvnUslugaOper'
			,'PersonQuarantine'
		];

		/* 
		* Конфиги акшенов для элементов управления в форме просмотра
		* 
		*	Определяются для каждого объекта, для которого есть шаблон формы просмотра
		* Если не указать параметр text, то данный экшен не появится в тулбаре (в будущем)
		*	Дополнительные параметры экшена:
		* actionType нужен для того, чтобы можно было передать доп.параметры для экшена. Возможные значения: add,edit,del
		* sectionCode Указывается код секции шаблона, чтобы знать, в какой секции шаблона может быть вызван даннный экшен
		* dblClick - true, чтобы данный экшен выполнился при двойном клике на указанной секции, по умолчанию - false
		*
		*	Чтобы установить обработчик клика на элемент управления, например,
		* <span id="EvnPL_{EvnPL_id}_print" class="section-button" title="Печать талона АПЛ">[Печать]</span>
		* который находится внутри секции, например, <div id="EvnPL_{EvnPL_id}" class="section">
		* Тут указывается код секции и элементы, на которые устанавливаются обработчики
		* id элемента управления должен быть в формате: idСекции_кодДействия
		* id секций должны быть в формате: кодСекции_idОбъекта
		*	Входящие параметры для обработчиков:
		* d.object - string, код секции объекта (события или документа или списка), например, EvnPL, EvnVizitPL_data, EvnReceptList
		* d.object_id - int, id объекта (события или документа)
		* d.section_id - string, id секции, например, EvnPL_1872
		* d.content_id - string, id контейнера с контентом для обновления после редактирования. Параметр присутствует у обработчиков с actionType: 'edit', например, EvnPL_data_1872_content
		*/
		this.config_actions =
		{
			CmpCloseCard: {
				print: {
					actionType: 'view',
					sectionCode: 'CmpCloseCard',
					handler: function(e, c, d) {
						var CmpCloseCardData = this.getObjectData('CmpCloseCard', d.object_id);
						var	data = {
								CmpCallCard_id: CmpCloseCardData.CmpCallCard_id
							},
							btnEl = Ext.get(d.object +'_'+d.object_id+'_print');

						data.callbackCostPrint = function() {
							form.reloadViewForm({
								section_code: d.object
								,section_id: d.object + '_' + d.object_id
								,object_key: d.object +'_id'
								,object_value: d.object_id
							});
						}
						sw.Promed.CmpCallCardHelper.Report.showPrintMenu(form.Person_id, data, btnEl);
					}.createDelegate(this),
					iconCls: 'print16',
					tooltip: langs('Печать'),
					text: BTN_FRMPRINT
				},
				viewCmpCloseCard: {
					actionType: 'view',
					sectionCode: 'CmpCloseCard',
					handler: function(e, c, d) {
						this.openCmpCallCardViewWindow('view',d);
					}.createDelegate(this)
				}
			},
			CmpCallCard: {
				print: {
					actionType: 'view',
					sectionCode: 'CmpCallCard',
					handler: function(e, c, d) {
						var CmpCallCardData = this.getObjectData('CmpCallCard', d.object_id);
						var	data = {
							CmpCallCard_id: CmpCallCardData.CmpCallCard_id
						};
						window.open('/?c=CmpCallCard&m=printCmpCallCard&CmpCallCard_id=' + data.CmpCallCard_id, '_blank');
					}.createDelegate(this),
					iconCls: 'print16',
					tooltip: langs('Печать'),
					text: BTN_FRMPRINT
				},
				viewCmpCallCard: {
					actionType: 'view',
					sectionCode: 'CmpCallCard',
					handler: function(e, c, d) {
						this.openCmpCallCardViewWindow('view',d);
					}.createDelegate(this)
				}
			},
            EvnPLStom: {
                addEvnVizitPLStom: {
                    actionType: 'add',
                    sectionCode: 'EvnPLStom',
                    handler: function(e, c, d) {
                        form.openFormEvnVizitPLStom('add', d.object_id, 0);
                    },
                    iconCls: 'add16',
                    tooltip: langs('Добавить посещение в рамках данного случая'),
                    text: langs('Добавить посещение')
                },
                inputIsSan: {
                    actionType: 'edit',
                    sectionCode: 'EvnPLStom',
                    handler: function(e, c, d) {
                        form.createInputArea('IsSan', 'EvnPLStom', d);
                    }
                },
                inputSanationStatus: {
                    actionType: 'edit',
                    sectionCode: 'EvnPLStom',
                    handler: function(e, c, d) {
                        form.createInputArea('SanationStatus', 'EvnPLStom', d);
                    }
                },
                inputPrehospTrauma: {
                    actionType: 'edit',
                    sectionCode: 'EvnPLStom',
                    handler: function(e, c, d) {
                        form.createInputArea('PrehospTrauma', 'EvnPLStom', d);
                    }
                },
                inputIsUnlaw: {
                    actionType: 'edit',
                    sectionCode: 'EvnPLStom',
                    handler: function(e, c, d) {
                        form.createInputArea('IsUnlaw', 'EvnPLStom', d);
                    }
                },
				inputIsSurveyRefuse: {
                    actionType: 'edit',
                    sectionCode: 'EvnPLStom',
                    handler: function(e, c, d) {
                        form.createInputArea('IsSurveyRefuse', 'EvnPLStom', d);
                    }
                },
                inputIsUnport: {
                    actionType: 'edit',
                    sectionCode: 'EvnPLStom',
                    handler: function(e, c, d) {
                        form.createInputArea('IsUnport', 'EvnPLStom', d);
                    }
                },
				inputDiagPreid: {
					actionType: 'edit',
					sectionCode: 'EvnPLStom_data',
					handler: function(e, c, d) {
						form.createInputArea('DiagPreid', 'EvnPLStom', d);
					}
				},
				inputDiagF: {
					actionType: 'edit',
					sectionCode: 'EvnPLStom_data',
					handler: function(e, c, d) {
						form.createInputArea('DiagF', 'EvnPLStom', d);
					}
				},
				inputDiagL: {
					actionType: 'edit',
					sectionCode: 'EvnPLStom_data',
					handler: function(e, c, d) {
						form.createInputArea('DiagL', 'EvnPLStom', d);
					}
				},
                inputIsFinish: {
                    actionType: 'edit',
                    sectionCode: 'EvnPLStom',
                    handler: function(e, c, d) {
                        form.createInputArea('IsFinish', 'EvnPLStom', d);
                    }
                },
                inputResultClass: {
                    actionType: 'edit',
                    sectionCode: 'EvnPLStom',
                    handler: function(e, c, d) {
                        form.createInputArea('ResultClass', 'EvnPLStom', d);
                    }
                },
                inputMedicalStatus: {
                    actionType: 'edit',
                    sectionCode: 'EvnPLStom',
                    handler: function(e, c, d) {
                        form.createInputArea('MedicalStatus', 'EvnPLStom', d);
                    }
                },
                inputResultDeseaseType: {
                    actionType: 'edit',
                    sectionCode: 'EvnPLStom',
                    handler: function(e, c, d) {
                        form.createInputArea('ResultDeseaseType', 'EvnPLStom', d);
                    }
                },
				inputDiagConc: {
                	actionType: 'edit',
					sectionCode: 'EvnPLStom',
					handler: function(e, c, d) {
                		form.createInputArea('DiagConc', 'EvnPLStom', d);
					}
				},
				inputInterruptLeaveType:{
					actionType: 'edit',
                    sectionCode: 'EvnPLStom',
                    handler: function(e, c, d) {
                        form.createInputArea('InterruptLeaveType', 'EvnPLStom', d);
                    }
				},
                inputUKL: {
                    actionType: 'edit',
                    sectionCode: 'EvnPLStom',
                    handler: function(e, c, d) {
                        form.createInputArea('UKL', 'EvnPLStom', d);
                    }
                },
                inputDirectType: {
                    actionType: 'edit',
                    sectionCode: 'EvnPLStom',
                    handler: function(e, c, d) {
                        form.createInputArea('DirectType', 'EvnPLStom', d);
                    }
                },
                inputDirectClass: {
                    actionType: 'edit',
                    sectionCode: 'EvnPLStom',
                    handler: function(e, c, d) {
                        form.createInputArea('DirectClass', 'EvnPLStom', d);
                    }
                },
                inputLpuSectionO: {
                    actionType: 'edit',
                    sectionCode: 'EvnPLStom',
                    handler: function(e, c, d) {
                        form.createInputArea('LpuSectionO', 'EvnPLStom', d);
                    }
                },
                inputLpuO: {
                    actionType: 'edit',
                    sectionCode: 'EvnPLStom',
                    handler: function(e, c, d) {
                        form.createInputArea('LpuO', 'EvnPLStom', d);
                    }
                },
                print: {
                    actionType: 'view',
                    sectionCode: 'EvnPLStom',
                    handler: function(e, c, d) {
                        var	children = form.getObjectChildren(d.object, d.object_id),
                            cnt = 0,
                            data = {                            
                                EvnPLStom_id: d.object_id,
                                EvnVizitPLStom_id: null
                            },
                            btnEl = Ext.get(d.object +'_'+d.object_id+'_print');
							if (children && children.EvnVizitPLStom) {
								cnt = children.EvnVizitPLStom.item.length;

								//data.EvnVizitPLStom_id = children.EvnVizitPLStom.item[cnt-1].EvnVizitPLStom_id;
								//нам нужен последний визит
								var arrEvnVizitPLStom = children.EvnVizitPLStom.item;
								data.EvnVizitPLStom_id = arrEvnVizitPLStom.reduce(function(previousValue, currentItem){
									if(previousValue > currentItem.EvnVizitPLStom_id){
										return previousValue;
									}else{
										return currentItem.EvnVizitPLStom_id;
									}
								}, 0);
							}

						data.callbackCostPrint = function() {
							form.reloadViewForm({
								section_code: d.object
								,section_id: d.object + '_' + d.object_id
								,object_key: d.object +'_id'
								,object_value: d.object_id
							});
						}
						
                        if (data.EvnVizitPLStom_id) {
                            sw.Promed.StomHelper.Report.showPrintMenu(form.Person_id, data, btnEl);
                        } else {
                            sw.Promed.StomHelper.loadLastEvnPLStomData(form.Person_id, function(data)
                            {
                                sw.Promed.StomHelper.Report.showPrintMenu(form.Person_id, data, btnEl);
                            });
                        }
                    },
                    iconCls: 'print16',
                    tooltip: langs('Печать'),
                    text: BTN_FRMPRINT
                },
                signedEvnPLStom: {
                    actionType: 'edit',
                    sectionCode: 'EvnPLStom_data',
                    handler: function(e, c, d) {
                        this.signedEvn('EvnPLStom',d.object_id);
                    }.createDelegate(this)
                },
				cancelSigned: {
					actionType: 'view',
					sectionCode: 'EvnPLStom_data',
					handler: function(e, c, d) {
						form.signedEvn('EvnPLStom',d.object_id);
					}
				},
                editEvnPLStom: {
                    actionType: 'edit',
                    sectionCode: 'EvnPLStom_data',
                    handler: function(e, c, d) {
                        this.openFormEvnPLStom('edit', d);
                    }.createDelegate(this)
                },
				inputFedResultDeseaseType: {
                    actionType: 'edit',
                    sectionCode: 'EvnPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('FedResultDeseaseType', 'EvnPLStom', d);
                    }
                },
				inputFedLeaveType: {
                    actionType: 'edit',
                    sectionCode: 'EvnPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('FedLeaveType', 'EvnPLStom', d);
                    }
                },
                toggleDisplayFileList: {
                    actionType: 'view',
                    sectionCode: 'EvnMediaDataList',
                    handler: function(e, c, d) {
                        var id = 'EvnMediaDataList_'+ d.object_id;
                        form.toggleDisplay(id,Ext.get(id).isDisplayed());
                    }
                },
                showDiagList: {
                    actionType: 'view',
                    sectionCode: 'EvnPLStom_data',
                    handler: function(e, c, d) {
                        this.showDiagList();
                    }.createDelegate(this)
                },
                showFm: {
                    actionType: 'view',
                    sectionCode: 'EvnPLStom',
                    handler: function(e, c, d) {
                        form.showFm(d);
                    }
                }
            },
			EvnCostPrint: {
				inputSetDate: {
					actionType: 'edit',
					sectionCode: 'EvnCostPrint',
					handler: function(e, c, d) {
						form.createInputArea('CostSetDate', 'EvnCostPrint', d);
					}
				},
				inputIsNoPrint: {
					actionType: 'edit',
					sectionCode: 'EvnCostPrint',
					handler: function(e, c, d) {
						form.createInputArea('IsNoPrint', 'EvnCostPrint', d);
					}
				}
			},
			CmpCallCardCostPrint: {
				inputSetDate: {
					actionType: 'edit',
					sectionCode: 'CmpCallCardCostPrint',
					handler: function(e, c, d) {
						form.createInputArea('CostSetDate', 'CmpCallCardCostPrint', d);
					}
				},
				inputIsNoPrint: {
					actionType: 'edit',
					sectionCode: 'CmpCallCardCostPrint',
					handler: function(e, c, d) {
						form.createInputArea('IsNoPrint', 'CmpCallCardCostPrint', d);
					}
				}
			},
            EvnVizitPLStom: {
                toggleDisplayMorbusHepatitis: {
                    actionType: 'view',
                    sectionCode: 'EvnVizitPLStom',
                    handler: function(e, c, d) {
                        this.loadSpecific('hepa',d);
                    }.createDelegate(this)
                },
				toggleDisplayMorbusProf: {
					actionType: 'view',
					sectionCode: 'EvnVizitPLStom',
					handler: function(e, c, d) {
						form.loadSpecific('prof',d);
					}
				},
                toggleDisplayMorbusOnko: {
                    actionType: 'view',
                    sectionCode: 'EvnVizitPLStom',
                    handler: function(e, c, d) {
                        this.loadSpecific('onko',d);
                    }.createDelegate(this)
                },
                toggleDisplayMorbusCrazy: {
                    actionType: 'view',
                    sectionCode: 'EvnVizitPLStom',
                    handler: function(e, c, d) {
                        this.loadSpecific('crazy',d);
                    }.createDelegate(this)
                },
                toggleDisplayMorbusTub: {
                    actionType: 'view',
                    sectionCode: 'EvnVizitPLStom',
                    handler: function(e, c, d) {
                        this.loadSpecific('tub',d);
                    }.createDelegate(this)
                },
                toggleDisplayMorbusVener: {
                    actionType: 'view',
                    sectionCode: 'EvnVizitPLStom',
                    handler: function(e, c, d) {
                        this.loadSpecific('vener',d);
                    }.createDelegate(this)
                },
				toggleDisplayMorbusPalliat: {
					actionType: 'view',
					sectionCode: 'EvnVizitPLStom',
					handler: function(e, c, d) {
						this.openMorbusPalliat(d);
					}.createDelegate(this)
				},
				toggleDisplayMorbusGeriatrics: {
					actionType: 'view',
					sectionCode: 'EvnVizitPLStom',
					handler: function(e, c, d) {
						this.openMorbusGeriatrics(d);
					}.createDelegate(this)
				},
                toggleParodontogram: {
                    actionType: 'view',
                    sectionCode: 'EvnVizitPLStom',
                    handler: function(e, c, d) {
                        form.toggleParodontogram(d);
                    }
                },
                addParodontogram: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom',
                    handler: function(e, c, d) {
                        form.openEvnUslugaStomEditWindow('addParodontogram', d);
                    }
                },
				addEvnInfectNotify: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPLStom',
					handler: function(e, c, d) {
						form.addEvnInfectNotify(d);
					}
				},
                addEvnNotifyHepatitis: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom',
                    handler: function(e, c, d) {
                        form.addEvnNotify(d, 'hepa');
                    }
                },
                addEvnOnkoNotify: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom',
                    handler: function(e, c, d) {
                        form.addEvnNotify(d, 'onko');
                    }
                },
                addEvnNotifyCrazy: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom',
                    handler: function(e, c, d) {
                        form.addEvnNotify(d, 'crazy');
                    }
                },
				addEvnNotifyNarc: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPLStom',
					handler: function(e, c, d) {
						form.addEvnNotify(d, 'narc');
					}
				},
                addEvnNotifyTub: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom',
                    handler: function(e, c, d) {
                        form.addEvnNotify(d, 'tub');
                    }
                },
                addEvnNotifyVener: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom',
                    handler: function(e, c, d) {
                        form.addEvnNotify(d, 'vener');
                    }
                },
				addEvnNotifyProf: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPLStom',
					handler: function(e, c, d) {
						form.addEvnNotifyProf(d);
					}
				},
                editEvnVizitPLStom: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    dblClick: false,
                    handler: function(e, c, d) {
						var node = form.Tree.getSelectionModel().selNode;
						if (node && 'EvnVizitPLStom' == node.attributes.object) {
							node = node.parentNode;
						}
						if (node) {
							form.openFormEvnVizitPLStom('edit', node.attributes.object_value, d.object_id);
						}
                    }
                },
                inputMedStaffFact: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('MedStaffFact', 'EvnVizitPLStom', d);
                    }
                },
                inputSMedPersonal: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('SMedPersonal', 'EvnVizitPLStom', d);
                    }
                },
                inputServiceType: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('ServiceType', 'EvnVizitPLStom', d);
                    }
                },
                inputTreatmentClass: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('TreatmentClass', 'EvnVizitPLStom', d);
                    }
                },
				inputBitePersonType: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('BitePersonType', 'EvnVizitPLStom', d);
                    }
                },
	            inputVizitActiveType: {
		            actionType: 'edit',
		            sectionCode: 'EvnVizitPLStom_data',
		            handler: function(e, c, d) {
			            this.createInputArea('VizitActiveType', 'EvnVizitPLStom', d);
		            }.createDelegate(this)
	            },
                inputMedicalCareKind: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('MedicalCareKind', 'EvnVizitPLStom', d);
                    }
                },
                inputVizitClass: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    dblClick: false,
                    handler: function(e, c, d) {
                        form.createInputArea('VizitClass', 'EvnVizitPLStom', d);
                    }
                },
                inputIsPrimaryVizit: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    dblClick: false,
                    handler: function(e, c, d) {
                        form.createInputArea('IsPrimaryVizit', 'EvnVizitPLStom', d);
                    }
                },
                inputVizitType: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('VizitType', 'EvnVizitPLStom', d);
                    }
                },
                inputProfGoal: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('ProfGoal', 'EvnVizitPLStom', d);
                    }
                },
                inputDispProfGoalType: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('DispProfGoalType', 'EvnVizitPLStom', d);
                    }
                },
                inputUslugaComplex: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('UslugaComplex', 'EvnVizitPLStom', d);
                    }
                },
                inputUslugaMedType: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('UslugaMedType', 'EvnVizitPLStom', d);
                    }
                },
                inputUslugaComplexTariff: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('UslugaComplexTariff', 'EvnVizitPLStom', d);
                    }
                },
                inputLpuSectionProfile: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('LpuSectionProfile', 'EvnVizitPLStom', d);
                    }
                },
				inputMesOldVizit: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('MesOldVizit', 'EvnVizitPLStom', d);
                    }
                },
                inputRiskLevel: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('RiskLevel', 'EvnVizitPLStom', d);
                    }
                },
                inputPayType: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('PayType', 'EvnVizitPLStom', d);
                    }
                },
				inputPersonDisp: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPLStom_data',
					dblClick: false,
					handler: function(e, c, d) {
						this.createInputArea('PersonDisp', 'EvnVizitPLStom', d);
					}.createDelegate(this)
				},
                inputDiag: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('Diag', 'EvnVizitPLStom', d);
                    }
                },
                inputDiagnew: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('Diagnew', 'EvnVizitPLStom', d);
                    }
                },
                inputDeseaseType: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('DeseaseType', 'EvnVizitPLStom', d);
                    }
                },
                inputTooth: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('Tooth', 'EvnVizitPLStom', d);
                    }
                },
                inputToothSurface: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('ToothSurface', 'EvnVizitPLStom', d);
                    }
                },
                inputMes: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('Mes', 'EvnVizitPLStom', d);
                    }
                },
                inputUet: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('Uet', 'EvnVizitPLStom', d);
                    }
                },
                inputUetOMS: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('UetOMS', 'EvnVizitPLStom', d);
                    }
                },
				inputHealthKind: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPLStom_data',
					dblClick: false,
					handler: function(e, c, d) {
						var vizitData = form.getObjectData('EvnVizitPLStom',d.object_id);
						if (
							Date.parseDate(vizitData.EvnVizitPLStom_setDate,'d.m.Y') >= Date.parseDate('01.04.2018','d.m.Y')
							&& vizitData.UslugaComplex_Code
							&& vizitData.UslugaComplex_Code.substr(-3, 3).inlist(['805'])
						) {
							this.createInputArea('HealthKind2', 'EvnVizitPLStom', d);
						}
					}.createDelegate(this)
				},
                signedEvnVizitPLStom: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom',
                    handler: function(e, c, d) {
                        // нужно проверить что у посещения есть диагноз и он сохранен
                        if (this.isDisableSignedEvnVizitPL) {
                            Ext.Msg.alert(langs('Внимание'), langs('Введенный Вами диагноз еще не сохранен!<br>Повторите позже попытку подписания документа!'));
                            return false;
                        }
                        var record = this.viewFormDataStore.getById('EvnVizitPLStom_'+ d.object_id);
                        if (record && !record.get('Diag_id') && record.get('EvnVizitPLStom_IsSigned') != 2)
                        {
                            Ext.Msg.alert(langs('Внимание'), langs('Необходимо ввести основной диагноз перед подписанием посещения!'));
                            return false;
                        }
                        this.signedEvn('EvnVizitPLStom',d.object_id);
                    }.createDelegate(this)
                },
                print: {
                    actionType: 'view',
                    sectionCode: 'EvnVizitPLStom_protocol',
                    handler: function(e, c, d) {
						var EvnXml_id, 
							xmldata = form.getObjectDataWithFindBy(function(record,id){
								if (record.object_code == 'EvnXml' 
									&& record.parent_object_value 
									&& record.object_value 
									&& record.parent_object_value==d.object_id
								) {
									EvnXml_id = record.object_value;
									return true;
								}
								return false;
							}),
							doc = form.listEvnXml[EvnXml_id];
						if (doc) {
							doc.doPrint();
						} else if (EvnXml_id)  {
							sw.Promed.EvnXml.doPrintById(EvnXml_id);
						}
                    }
                },
                del: {
                    actionType: 'del',
                    sectionCode: 'EvnVizitPLStom_protocol',
                    handler: function(e, c, d) {
                        form.deleteEvent('EvnXmlData',d);
                    }
                },
                reload: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_protocol',
                    handler: function(e, c, d) {
                        var params = {
                            Evn_id: d.object_id,
                            XmlType_id: sw.Promed.EvnXml.EVN_VIZIT_PROTOCOL_TYPE_ID,
                            isSelect: false
                        };
                        form.saveEvnXmlWithBaseXmlTemplate(params);
                    }.createDelegate(this)
                },
                clear: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_protocol',
                    handler: function(e, c, d) {
						form.clearEvnXml(d);
                    }
                },
                select: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_protocol',
                    handler: function(e, c, d) {
                        getWnd('swTemplSearchWindow').show({
                            onSelect: function(data) {
                                var params = {
                                    Evn_id: d.object_id,
                                    XmlTemplate_id: data.XmlTemplate_id,
                                    XmlType_id: sw.Promed.EvnXml.EVN_VIZIT_PROTOCOL_TYPE_ID,
                                    isSelect: true
                                };
                                form.saveEvnXmlWithBaseXmlTemplate(params);
                            },
                            EvnClass_id: 13,
                            Evn_id: form.data.id,
                            XmlType_id: sw.Promed.EvnXml.EVN_VIZIT_PROTOCOL_TYPE_ID
                        });
                    }.createDelegate(this)
                },
                search: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_protocol',
                    handler: function(e, c, d) {
                        var EvnXml_id;
                        form.getObjectDataWithFindBy(function(record,id){
                            if(record.object_code == 'EvnXml' && record.parent_object_value && record.object_value && record.parent_object_value==d.object_id) {
                                EvnXml_id = record.object_value;
                                return true;
                            }
                            return false;
                        });
                        getWnd('swTemplSearchWindow').show({
                            onSelect: function(data) {
                                var params = {
                                    EvnXml_id: EvnXml_id,
                                    Evn_id: d.object_id,
                                    XmlTemplate_id: data.XmlTemplate_id,
                                    XmlType_id: sw.Promed.EvnXml.EVN_VIZIT_PROTOCOL_TYPE_ID,
                                    isSelect: true
                                };
                                form.saveEvnXmlWithBaseXmlTemplate(params);
                            },
                            EvnClass_id: 13,
                            Evn_id: d.object_id,
                            EvnXml_id: EvnXml_id,
                            XmlType_id: sw.Promed.EvnXml.EVN_VIZIT_PROTOCOL_TYPE_ID
                        });
                    }.createDelegate(this)
                },
                showFm: {
                    actionType: 'view',
                    sectionCode: 'EvnVizitPLStom',
                    handler: function(e, c, d) {
                        form.showFm(d);
                    }
                }
            },
            EvnDiagPLStom: {
                toggleDisplay: {
                    actionType: 'view',
                    sectionCode: 'EvnDiagPLStomList',
                    handler: function(e, c, d) {
                        var id = 'EvnDiagPLStomTable_'+ d.object_id;
                        form.toggleDisplay(id,Ext.get(id).isDisplayed());
                    }
                },
                add: {
                    actionType: 'add',
                    sectionCode: 'EvnDiagPLStomList',
                    handler: function(e, c, d) {
                        form.openEvnDiagPLStomEditWindow('add',d);
                    }.createDelegate(this)
                },
                view: {
                    actionType: 'view',
                    sectionCode: 'EvnDiagPLStom',
                    handler: function(e, c, d) {
                        form.openEvnDiagPLStomEditWindow('view',d);
                    }.createDelegate(this)
                },
                edit: {
                    actionType: 'edit',
                    sectionCode: 'EvnDiagPLStom',
                    dblClick: true,
                    handler: function(e, c, d) {
                        form.openEvnDiagPLStomEditWindow('edit',d);
                    }.createDelegate(this)
                },
                printZno: {
                    actionType: 'edit',
                    sectionCode: 'EvnDiagPLStom',
                    dblClick: true,
                    handler: function(e, c, el_data) {
						var object_id = (el_data.object_id.split('_').length > 1) ? el_data.object_id.split('_')[1] : el_data.object_id;
						printControlCardZno(object_id);
                    }.createDelegate(this)
                },
                'delete': {
                    actionType: 'del',
                    sectionCode: 'EvnDiagPLStom',
                    handler: function(e, c, d) {
                        form.deleteEvent('EvnDiagPLStom', d);
                    }.createDelegate(this)
                }
            },
            EvnDiagPLStomSop: {
                toggleDisplay: {
                    actionType: 'view',
                    sectionCode: 'EvnDiagPLStomSopList',
                    handler: function(e, c, d) {
                        var id = 'EvnDiagPLStomSopTable_'+ d.object_id;
                        form.toggleDisplay(id,Ext.get(id).isDisplayed());
                    }
                },
                add: {
                    actionType: 'add',
                    sectionCode: 'EvnDiagPLStomSopList',
                    handler: function(e, c, d) {
                        form.openEvnDiagPLStomSopEditWindow('add',d);
                    }.createDelegate(this)
                },
                view: {
                    actionType: 'view',
                    sectionCode: 'EvnDiagPLStomSop',
                    handler: function(e, c, d) {
                        form.openEvnDiagPLStomSopEditWindow('view',d);
                    }.createDelegate(this)
                },
                edit: {
                    actionType: 'edit',
                    sectionCode: 'EvnDiagPLStomSop',
                    dblClick: true,
                    handler: function(e, c, d) {
                        form.openEvnDiagPLStomSopEditWindow('edit',d);
                    }.createDelegate(this)
                },
                'delete': {
                    actionType: 'del',
                    sectionCode: 'EvnDiagPLStomSop',
                    handler: function(e, c, d) {
                        form.deleteEvent('EvnDiagPLStomSop', d);
                    }.createDelegate(this)
                }
            },
            EvnPrescrStom: {
                loadEvnPrescr: {
                    actionType: 'view',
                    sectionCode: 'EvnPrescrStom',
                    handler: function(e, c, d) {
                        form.loadEvnPrescr(d, 'EvnPrescrStom');
                    }
                },
                toogleEvnCourse: {//ok
                    actionType: 'view',
                    sectionCode: 'EvnPrescrStom',
                    handler: function(e, c, d) {
                        form.toogleEvnCourse(d);
                    }
                },
                addPrescription: {//ok
                    actionType: 'add',
                    sectionCode: 'EvnPrescrStom',
                    handler: function(e, c, d) {
                        form.addPrescription(d, 'EvnPrescrStom');
                    }
                },
                openPrescrListActionMenu: {//ok
                    actionType: 'add',
                    sectionCode: 'EvnPrescrStomList',
                    handler: function(e,c,d) {
                        form.openPrescrListActionMenu(e, d, 'EvnPrescrStom');
                    }
                },
                openPrescrActionMenu: {//ok
                    actionType: 'view',
                    sectionCode: 'EvnPrescrStom',
                    handler: function(e, c, d) {
                        form.openPrescrActionMenu(e, d, 'EvnPrescrStom');
                    }
                },
				openDirActionMenu: {//ok
                    actionType: 'view',
                    sectionCode: 'EvnPrescrStom',
                    handler: function(e, c, d) {
                        form.openDirActionMenu(e, d, 'EvnPrescrStom');
                    }
                },
                xml: {
                    actionType: 'view',
                    sectionCode: 'EvnPrescrStom',
                    handler: function(e, c, d) {
                        form.openEvnXmlViewWindow('EvnPrescrStom',d);
                    }
                },
                toggleDisplay: {//ок
                    actionType: 'view',
                    sectionCode: 'EvnPrescrStomList',
                    handler: function(e, c, d) {
                        var id = 'EvnPrescrStomTable_'+ d.object_id;
                        form.toggleDisplay(id,Ext.get(id).isDisplayed());
                    }
                },
				addBlankDir: {
					actionType: 'edit',
					sectionCode: 'EvnPrescrStom',
					handler: function(e, c, d) {
						form.openEvnXmlEditWindow('add','EvnPrescrStom',d);
					}
				},
				editBlankDir: {
					actionType: 'view',
					sectionCode: 'EvnPrescrStom',
					handler: function(e, c, d) {
						form.openEvnXmlEditWindow('edit','EvnPrescrStom',d);
					}
				},
                viewdir: {//ок
                    actionType: 'view',
                    sectionCode: 'EvnPrescrStom',
                    handler: function(e, c, d) {
                        form.openEvnDirectionEditWindow('view',d);
                    }
                }
            },
            EvnDirectionStom: {
                toggleDisplay: {
                    actionType: 'view',
                    sectionCode: 'EvnDirectionStomList',
                    handler: function(e, c, d) {
                        var id = 'EvnDirectionStomTable_'+ d.object_id;
                        form.toggleDisplay(id,Ext.get(id).isDisplayed());
                    }
                },
                go: {
                    actionType: 'view',
                    sectionCode: 'timetable',//related_objects.field_code
                    dblClick: true,
                    handler: function(e, c, d) {
                        form.openEvnDirectionEditWindow('view',d);
                    }
                },
                add: {
                    actionType: 'add',
                    sectionCode: 'EvnDirectionStomList',
                    handler: function(e, c, d) {
                        var dirTypeCodeExcList = ['7','9','10','11','14','15','16','17','23'];
                        sw.Promed.Direction.createDirTypeMenu({
                            excList: dirTypeCodeExcList,
                            id: 'DirTypeListMenu',
                            onSelect: function(rec) {
                                d.object = 'EvnDirectionStom';
                                form.createDirection(d, rec, this.excList);
                            },
                            onCreate: function(m){
                                m.show(Ext.get('EvnDirectionStomList_'+d.object_id+'_add'),'tr');
                            }
                        });
                    }
                },
				addtome: {
					actionType: 'add',
					sectionCode: 'EvnDirectionStomList',
					handler: function(e, c, d) {
						form.openEvnDirectionEditWindow('addtome',d);
					}
				},
                print: {
                    actionType: 'view',
                    sectionCode: 'timetable',
                    handler: function(e, c, d) {
                        var opt = d.object_id.split('_');
                        var dirdata = form.getObjectDataWithFindBy(function(record,id){
                            if(record.object_code == 'EvnDirectionStom' && record.get('timetable') == opt[0] && record.get('timetable_id') == opt[1]) {
                                return true;
                            }
                            return false;
                        });

						sw.Promed.Direction.print({
							EvnDirection_id: dirdata.EvnDirection_id
						});
                    }
                },
				eutedit: {
					actionType: 'edit',
					sectionCode: 'timetable',
					handler: function(e, c, d) {
						var opt = d.object_id.split('_');
						var dir_data = form.getObjectDataWithFindBy(function (record, id) {
							return (
								record.object_code == 'EvnDirectionStom' && 
								record.get('timetable') == opt[0] && 
								record.get('timetable_id') == opt[1]
							);
						});
						
						
						if (!!dir_data.EvnUslugaTelemed_id) {
							form.openEvnUslugaTelemedEditWindow('editNoWork', dir_data);
						} else {
							form.openEvnUslugaTelemedEditWindow('add', dir_data);
						}
					}
				},
				addBlankDir: {
					actionType: 'edit',
					sectionCode: 'timetable',
					handler: function(e, c, d) {
						form.openEvnXmlEditWindow('add','EvnDirectionStom',d);
					}
				},
				editBlankDir: {
					actionType: 'view',
					sectionCode: 'timetable',
					handler: function(e, c, d) {
						form.openEvnXmlEditWindow('edit','EvnDirectionStom',d);
					}
				},
                'delete': {
                    actionType: 'del',
                    sectionCode: 'timetable',
                    handler: function(e, c, d) {
                        form.deleteEvent('EvnDirectionStom', d);
                    }
                },
				addDoc: {
					actionType: 'edit',
					sectionCode: 'EvnDirectionStom',
					handler: function(e, c, d) {

						var Person_id = form.Person_id,
							EvnDirection_id = d.object_id;

						form.addXmlDocumentToEvnDirection(Person_id, EvnDirection_id)
					}
				}
            },
            EvnUslugaStom: {
                toggleDisplay: {
                    actionType: 'view',
                    sectionCode: 'EvnUslugaStomList',
                    handler: function(e, c, d) {
                        var id = 'EvnUslugaStomTable_'+ d.object_id;
                        form.toggleDisplay(id,Ext.get(id).isDisplayed());
                    }
                },
                xml: {
                    actionType: 'view',
                    sectionCode: 'EvnUslugaStom',
                    handler: function(e, c, d) {
                        form.openUslugaEvnXmlEditWindow('EvnUslugaStom',d);
                    }
                },
                add: {
                    actionType: 'add',
                    sectionCode: 'EvnUslugaStomList',
                    handler: function(e, c, d) {
                        form.openEvnUslugaStomEditWindow('add',d);
                    }
                },
                addByMes: {
                    actionType: 'add',
                    sectionCode: 'EvnUslugaStomList',
                    handler: function(e, c, d) {
                        form.openEvnUslugaStomEditWindow('addByMes',d);
                    }
                },
                view: {
                    actionType: 'view',
                    sectionCode: 'EvnUslugaStom',
                    handler: function(e, c, d) {
                        form.openEvnUslugaStomEditWindow('view',d);
                    }
                },
                parodontogram: {
                    actionType: 'view',
                    sectionCode: 'EvnUslugaStom',
                    handler: function(e, c, d) {
                        form.openParodontogramEditWindow(d);
                    }
                },
                edit: {
                    actionType: 'edit',
                    sectionCode: 'EvnUslugaStom',
                    dblClick: true,
                    handler: function(e, c, d) {
                        form.openEvnUslugaStomEditWindow('edit',d);
                    }.createDelegate(this)
                },
                'delete': {
                    actionType: 'del',
                    sectionCode: 'EvnUslugaStom',
                    handler: function(e, c, d) {
                        form.deleteEvent('EvnUslugaStom', d);
                    }.createDelegate(this)
                }
            },
			EvnUslugaTelemed: {
				editEvnUslugaTelemed: {
					actionType: 'edit',
					sectionCode: 'EvnUslugaTelemed_data',
					dblClick: true,
					handler: function(e, c, d) {
						form.openEvnUslugaTelemedEditWindow('edit', d);
					}
				},
				printEvnUslugaTelemed: {
					actionType: 'view',
					sectionCode: 'EvnUslugaTelemed',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}.createDelegate(this)
				}
			},
			EvnUslugaPar: {
				editEvnUslugaPar: {
					actionType: 'edit',
					sectionCode: 'EvnUslugaPar_data',
					dblClick: true,
					handler: function(e, c, d) {
						form.openEvnUslugaParEditWindow('edit',d);
					}
				},
				editEvnUslugaParSimple: {
					actionType: 'view',
					sectionCode: 'EvnUslugaPar_data',
					dblClick: true,
					handler: function(e, c, d) {
						form.openEvnUslugaParSimpleEditWindow('view',d);
					}
				},
				printEvnUslugaPar: {
					actionType: 'view',
					sectionCode: 'EvnUslugaPar',
					handler: function(e, c, d) {
						var	data = {
								EvnUslugaPar_id: d.object_id
							},
							btnEl = Ext.get(d.object +'_'+d.object_id+'_printEvnUslugaPar');

						data.callbackCostPrint = function() {
							form.reloadViewForm({
								section_code: d.object
								,section_id: d.object + '_' + d.object_id
								,object_key: d.object +'_id'
								,object_value: d.object_id
							});
						}

						sw.Promed.EvnUslugaParHelper.Report.showPrintMenu(form.Person_id, data, btnEl, function() {
							var usl_data = form.getObjectData(d.object, d.object_id);
							if (usl_data && usl_data.isLab) {
								// если лабораторная, то один шаблон
								printBirt({
									'Report_FileName': 'EvnParCard_list.rptdesign',
									'Report_Params': '&paramEvnUslugaPar=' + d.object_id,
									'Report_Format': 'pdf'
								});
							} else {
								// иначе другой
								form.printHtml(d.section_id);
							}
						});
					},
					iconCls: 'print16',
					tooltip: langs('Печать'),
					text: BTN_FRMPRINT
				},
				print: {
					actionType: 'view',
					sectionCode: 'EvnUslugaPar_protocol',
					handler: function(e, c, d) {
						var EvnXml_id, 
							xmldata = form.getObjectDataWithFindBy(function(record,id){
								if (record.object_code == 'EvnXml' 
									&& record.parent_object_value 
									&& record.object_value 
									&& record.parent_object_value==d.object_id
								) {
									EvnXml_id = record.object_value;
									return true;
								}
								return false;
							}),
							doc = form.listEvnXml[EvnXml_id];
						if (doc) {
							doc.doPrint();
						} else if (EvnXml_id)  {
							sw.Promed.EvnXml.doPrintById(EvnXml_id);
						}
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnUslugaPar_protocol',
					dblClick: true,
					handler: function(e, c, d) {
						form.openEvnUslugaParEditWindow('editProtocol',d);
					}
				},
				showEvnDirection: {
					actionType: 'view',
					sectionCode: 'EvnUslugaPar_data',
					handler: function(e, c, d) {
						var formParams = form.getObjectData('EvnUslugaPar',d.object_id);
						if (formParams == false)
						{
							return false;
						}
						var my_params = new Object({
							EvnDirection_id: formParams.EvnDirection_id,
							formParams: formParams
						});
						my_params.onHide = Ext.emptyFn;
						form.openForm('swEvnDirectionEditWindow','XXX_id',my_params,'view',langs('Просмотр направления'));
					}
				},
				showNodeByUsluga: {
					actionType: 'view',
					sectionCode: 'EvnUslugaPar_data',
					handler: function(e, c, d) {
						//form.showEvnTherapyByDiag('EvnUslugaPar',d.object_id);
					}
				},
				selDiag: {
					actionType: 'view',
					sectionCode: 'EvnUslugaPar_data',
					handler: function(e, c, d) {
						form.showEvnTherapyByDiag('EvnUslugaPar',d.object_id);
					}
				},
				showDiagList: {
					actionType: 'view',
					sectionCode: 'EvnUslugaPar_data',
					handler: function(e, c, d) {
						this.showDiagList();
					}.createDelegate(this)
				}
			},
			EvnUslugaCommon: {
				editEvnUslugaCommon: {
					actionType: 'edit',
					sectionCode: 'EvnUslugaCommon_data',
					dblClick: true,
					handler: function(e, c, d) {
						var node = form.Tree.getSelectionModel().selNode.parentNode;
						var node_attr = node.attributes;
						params = {
							parentClass: "EvnPS"
						};						
						params.parentEvnComboData = [{
							Evn_id: node_attr.object_value,
							Evn_Name: Ext.util.Format.stripTags(node_attr.node_name)
						}];
						params.formParams = {
							EvnUslugaCommon_id: d.object_id
						};
						form.openForm('swEvnUslugaEditWindow', 'XXX_id', params, 'edit');
					}
				},
				printEvnUslugaCommon: {
					actionType: 'view',
					sectionCode: 'EvnUslugaCommon',
					handler: function(e, c, d) {
						var	data = {
								EvnUslugaCommon_id: d.object_id
							},
							btnEl = Ext.get(d.object +'_'+d.object_id+'_printEvnUslugaCommon');

						data.callbackCostPrint = function() {
							form.reloadViewForm({
								section_code: d.object
								,section_id: d.object + '_' + d.object_id
								,object_key: d.object +'_id'
								,object_value: d.object_id
							});
						}
						sw.Promed.EvnUslugaCommonHelper.Report.showPrintMenu(form.Person_id, data, btnEl, function() {
							form.printHtml(d.section_id);
						});
					},
					iconCls: 'print16',
					tooltip: langs('Печать'),
					text: BTN_FRMPRINT
				},
				print: {
					actionType: 'view',
					sectionCode: 'EvnUslugaCommon_protocol',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnUslugaCommon_protocol',
					dblClick: true,
					handler: function(e, c, d) {
						var node = form.Tree.getSelectionModel().selNode.parentNode;
						var node_attr = node.attributes;
						params = {
							parentClass: "EvnPS"
						};						
						params.parentEvnComboData = [{
							Evn_id: node_attr.object_value,
							Evn_Name: Ext.util.Format.stripTags(node_attr.node_name)
						}];
						params.formParams = {
							EvnUslugaCommon_id: d.object_id
						};
						form.openForm('swEvnUslugaEditWindow', 'XXX_id', params, 'edit');
					}
				},
				showEvnDirection: {
					actionType: 'view',
					sectionCode: 'EvnUslugaCommon_data',
					handler: function(e, c, d) {
						var formParams = form.getObjectData('EvnUslugaCommon',d.object_id);
						if (formParams == false)
						{
							return false;
						}
						var my_params = new Object({
							EvnDirection_id: formParams.EvnDirection_id,
							formParams: formParams
						});
						my_params.onHide = Ext.emptyFn;
						form.openForm('swEvnDirectionEditWindow','XXX_id',my_params,'view',langs('Просмотр направления'));
					}
				},
				showNodeByUsluga: {
					actionType: 'view',
					sectionCode: 'EvnUslugaCommon_data',
					handler: function(e, c, d) {
						//form.showEvnTherapyByDiag('EvnUslugaCommon',d.object_id);
					}
				},
				selDiag: {
					actionType: 'view',
					sectionCode: 'EvnUslugaCommon_data',
					handler: function(e, c, d) {
						form.showEvnTherapyByDiag('EvnUslugaCommon',d.object_id);
					}
				},
				showDiagList: {
					actionType: 'view',
					sectionCode: 'EvnUslugaCommon_data',
					handler: function(e, c, d) {
						this.showDiagList();
					}.createDelegate(this)
				}
			},
			EvnMediaData: {
				add: {
					actionType: 'add',
					sectionCode: 'EvnMediaDataList',
					handler: function(e, c, d) {
						var callback = function(data){
                            var response_obj = Ext.util.JSON.decode(data);
                            if (response_obj[0]) {
                                var reload_params = {
                                    section_code: 'EvnMediaData',
                                    object_key: 'EvnMediaData_id',
                                    object_value: 111222333,
                                    parent_object_key: 'Evn_id',
                                    parent_object_value: d.object_id,
                                    section_id: 'EvnMediaDataList_'+ d.object_id
                                };
                                form.reloadViewForm(reload_params);
                                if (typeof(form.onSaveEvnDocument) == 'function') {
                                    form.onSaveEvnDocument(true, response_obj[0], 'EvnMediaData');
									if (response_obj[0].EvnMediaData_id && response_obj[0].QueryEvn_id) {
										form.loadedFiles.push({
											EvnMediaData_id: response_obj[0].EvnMediaData_id,
											orig_name: response_obj[0].orig_name,
											file_name: response_obj[0].file_name,
											upload_dir: response_obj[0].upload_dir,
											QueryEvn_id: response_obj[0].QueryEvn_id
										});
									}
                                }
                            }
						};
						var params = new Object();
						params.enableFileDescription = true;
						params.saveUrl = '/?c=EvnMediaFiles&m=uploadFile';
						params.saveParams = {Evn_id: d.object_id, fromQueryEvn: form.fromQueryEvn ? 2 : null};
						params.saveParams.saveOnce = true; // - немедленная запись
						params.callback = callback;
						getWnd('swFileUploadWindow').show(params);
						//form.openForm('swEMFListEditWindow','XXX_id',{Evn_id:d.object_id, onHide: Ext.emptyFn, callback},'edit','"Список файлов"');
					}
				},
				'delete': {
					actionType: 'del',
					sectionCode: 'EvnMediaData',
					handler: function(e, c, d) {
						// в d.object_id будет EvnMediaData_id
						form.deleteEvent('EvnMediaData', d);
					}
				}
			},
			EvnPL: {
				addEvnVizitPL: {
					actionType: 'add',
					sectionCode: 'EvnPL',
					handler: function(e, c, d) {
						form.addEvnVizitPL({'EvnPL_id': d.object_id});
					},
					iconCls: 'add16',
					tooltip: langs('Добавить посещение в рамках данного случая'),
					text: langs('Добавить посещение')
				},
				print: {
					actionType: 'view',
					sectionCode: 'EvnPL',
					handler: function(e, c, d) {
						var	data = {
								EvnPL_id: d.object_id
							},
							btnEl = Ext.get(d.object +'_'+d.object_id+'_print');

						data.callbackCostPrint = function() {
							form.reloadViewForm({
								section_code: d.object
								,section_id: d.object + '_' + d.object_id
								,object_key: d.object +'_id'
								,object_value: d.object_id
							});
						}
						sw.Promed.EvnPLHelper.Report.showPrintMenu(form.Person_id, data, btnEl);
					},
					iconCls: 'print16',
					tooltip: langs('Печать'),
					text: BTN_FRMPRINT
				},
				openEvnPL: {
					actionType: 'edit',
					sectionCode: 'EvnPL_data',
					handler: function(e, c, d) {
						this.openEvnVizitPLEditWindow('openEvnPL',d);
					}.createDelegate(this)
				},
				closeEvnPL: {
					actionType: 'edit',
					sectionCode: 'EvnPL_data',
					handler: function(e, c, d) {
						this.openEvnVizitPLEditWindow('closeEvnPL',d);
					}.createDelegate(this),
					//disabled: true, 
					iconCls: 'close16',
					text: langs('Закрыть случай')
				},
				editEvnPL: {
					actionType: 'edit',
					sectionCode: 'EvnPL_data',
					handler: function(e, c, d) {
						this.openEvnVizitPLEditWindow('editEvnPL',d);
					}.createDelegate(this)
				},
                inputPrehospTrauma: {
                    actionType: 'edit',
                    sectionCode: 'EvnPL',
                    handler: function(e, c, d) {
                        form.createInputArea('PrehospTrauma', 'EvnPL', d);
                    }
                },
				inputFedResultDeseaseType: {
                    actionType: 'edit',
                    sectionCode: 'EvnPL_data',
                    handler: function(e, c, d) {
                        form.createInputArea('FedResultDeseaseType', 'EvnPL', d);
                    }
                },
				inputFedLeaveType: {
                    actionType: 'edit',
                    sectionCode: 'EvnPL_data',
                    handler: function(e, c, d) {
                        form.createInputArea('FedLeaveType', 'EvnPL', d);
                    }
                },
                inputIsUnlaw: {
                    actionType: 'edit',
                    sectionCode: 'EvnPL',
                    handler: function(e, c, d) {
                        form.createInputArea('IsUnlaw', 'EvnPL', d);
                    }
                },
				inputIsSurveyRefuse: {
                    actionType: 'edit',
                    sectionCode: 'EvnPL',
                    handler: function(e, c, d) {
                        form.createInputArea('IsSurveyRefuse', 'EvnPL', d);
                    }
                },
                inputIsUnport: {
                    actionType: 'edit',
                    sectionCode: 'EvnPL',
                    handler: function(e, c, d) {
                        form.createInputArea('IsUnport', 'EvnPL', d);
                    }
                },
				inputIsMseDirected: {
					actionType: 'edit',
					sectionCode: 'EvnPL',
					handler: function (e, c, d) {
						form.createInputArea('IsMseDirected', 'EvnPL', d);
					}
				},
                inputIsFinish: {
                    actionType: 'edit',
                    sectionCode: 'EvnPL',
                    handler: function(e, c, d) {
                        form.createInputArea('IsFinish', 'EvnPL', d);
                    }
                },
				inputDiagConc: {
                    actionType: 'edit',
                    sectionCode: 'EvnPL',
                    handler: function(e, c, d) {
                        form.createInputArea('DiagConc', 'EvnPL', d);
                    }
                },
				inputDiagPreid: {
					actionType: 'edit',
					sectionCode: 'EvnPL_data',
					handler: function(e, c, d) {
						form.createInputArea('DiagPreid', 'EvnPL', d);
					}
				},
				inputDiagF: {
                    actionType: 'edit',
                    sectionCode: 'EvnPL_data',
                    handler: function(e, c, d) {
                        form.createInputArea('DiagF', 'EvnPL', d);
                    }
                },
				inputDiagL: {
                    actionType: 'edit',
                    sectionCode: 'EvnPL_data',
                    handler: function(e, c, d) {
                        form.createInputArea('DiagL', 'EvnPL', d);
                    }
                },
				inputInterruptLeaveType:{
					actionType: 'edit',
                    sectionCode: 'EvnPL',
                    handler: function(e, c, d) {
                        form.createInputArea('InterruptLeaveType', 'EvnPL', d);
                    }
				},
                inputResultClass: {
                    actionType: 'edit',
                    sectionCode: 'EvnPL',
                    handler: function(e, c, d) {
                        form.createInputArea('ResultClass', 'EvnPL', d);
                    }
                },
				inputMedicalStatus: {
                    actionType: 'edit',
                    sectionCode: 'EvnPL',
                    handler: function(e, c, d) {
                        form.createInputArea('MedicalStatus', 'EvnPL', d);
                    }
                },
				inputResultDeseaseType: {
                    actionType: 'edit',
                    sectionCode: 'EvnPL',
                    handler: function(e, c, d) {
                        form.createInputArea('ResultDeseaseType', 'EvnPL', d);
                    }
                },
                inputUKL: {
                    actionType: 'edit',
                    sectionCode: 'EvnPL',
                    handler: function(e, c, d) {
                        form.createInputArea('UKL', 'EvnPL', d);
                    }
                },
                inputIsFirstDisable: {
                    actionType: 'edit',
                    sectionCode: 'EvnPL',
                    handler: function(e, c, d) {
                        form.createInputArea('IsFirstDisable', 'EvnPL', d);
                    }
                },
				inputPrivilegeType: {
                    actionType: 'edit',
                    sectionCode: 'EvnPL',
                    handler: function(e, c, d) {
                        form.createInputArea('PrivilegeType', 'EvnPL', d);
                    }
                },
                inputDirectType: {
                    actionType: 'edit',
                    sectionCode: 'EvnPL',
                    handler: function(e, c, d) {
                        form.createInputArea('DirectType', 'EvnPL', d);
                    }
                },
                inputDirectClass: {
                    actionType: 'edit',
                    sectionCode: 'EvnPL',
                    handler: function(e, c, d) {
                        form.createInputArea('DirectClass', 'EvnPL', d);
                    }
                },
                inputLpuSectionO: {
                    actionType: 'edit',
                    sectionCode: 'EvnPL',
                    handler: function(e, c, d) {
                        form.createInputArea('LpuSectionO', 'EvnPL', d);
                    }
                },
                inputLpuO: {
                    actionType: 'edit',
                    sectionCode: 'EvnPL',
                    handler: function(e, c, d) {
                        form.createInputArea('LpuO', 'EvnPL', d);
                    }
                },
				toggleDisplayFileList: {
					actionType: 'view',
					sectionCode: 'EvnMediaDataList',
					handler: function(e, c, d) {
						var id = 'EvnMediaDataList_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
						//id = 'EvnMediaDataList_'+ d.object_id +'_add';
						//form.toogleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				/*
				selDiag: {
					actionType: 'view',
					sectionCode: 'EvnPL_data',
					handler: function(e, c, d) {
						form.showEvnTherapyByDiag('EvnPL',d.object_id);
					}
				},*/
				showDiagList: {
					actionType: 'view',
					sectionCode: 'EvnPL_data',
					handler: function(e, c, d) {
						form.showDiagList();
					}
				},
				showFm: {
					actionType: 'view',
					sectionCode: 'EvnPL',
					handler: function(e, c, d) {
						form.showFm(d);
					}
				},
				cancelSigned: {
					actionType: 'view',
					sectionCode: 'EvnPL_data',
					handler: function(e, c, d) {
						form.signedEvn('EvnPL',d.object_id);
					}
				},
				signedEvnPL: {
					actionType: 'edit',
					sectionCode: 'EvnPL_data',
					handler: function(e, c, d) {
						form.signedEvn('EvnPL',d.object_id);
					}
				}
			},
			EvnPS: {
				print: {
					actionType: 'view',
					sectionCode: 'EvnPS',
					handler: function(e, c, d) {
						var epsdata = form.getObjectDataWithFindBy(function(record,id){
							return (record.object_code == 'EvnPS' && record.get('EvnPS_id') == d.object_id);
						});
						
						var eslist = form.getObjectChildren('EvnPS', d.object_id).EvnSection.item;
						
						var DiagFinance_IsRankin = 1;
						eslist.forEach(function(es) {
							if (es.data.DiagFinance_IsRankin == 2) {
								DiagFinance_IsRankin = 2;
							}
						});

						var	data = {
								EvnPS_id: d.object_id,
								LpuUnitType_SysNick: epsdata.LpuUnitType_SysNick,
								LeaveType_Code: epsdata.LeaveType_Code,
								DiagFinance_IsRankin: DiagFinance_IsRankin
							},
							btnEl = Ext.get(d.object +'_'+d.object_id+'_print');

						data.callbackCostPrint = function() {
							form.reloadViewForm({
								section_code: d.object
								,section_id: d.object + '_' + d.object_id
								,object_key: d.object +'_id'
								,object_value: d.object_id
							});
						}
						sw.Promed.EvnPSHelper.Report.showPrintMenu(form.Person_id, data, btnEl);
					},
					iconCls: 'print16',
					tooltip: langs('Печать'),
					text: BTN_FRMPRINT
				},
				editEvnPS: {
					actionType: 'edit',
					sectionCode: 'EvnPS_data',
					handler: function(e, c, d) {
						var params = {EvnPS_id: d.object_id};
						params.callback = function(data) {
							form.requireCheckChange = false;
							form.loadTreeNode({
								node: form.node.parentNode,
								selectById: form.node.id,
								callback: function(tl,n){				
									form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
								}
							});
						};
						params.onHide = Ext.emptyFn;
						this.openForm('swEvnPSEditWindow','XXX_id',params,'edit',langs('Редактирование КВС'));
					}.createDelegate(this)
				},
				openEvnPSLocat:{
				actionType: 'edit',
					sectionCode: 'EvnPS_data',
					handler: function(e, c, d) {
						var  params = {};
						params = {
							EvnPS_id: d.object_id
						};
						getWnd('swMedicalHistoryEditWindow').show(params);
					}.createDelegate(this)
				},
				signedEvnPS: {
					actionType: 'edit',
					sectionCode: 'EvnPS',
					handler: function(e, c, d) {
						this.signedEvn('EvnPS',d.object_id);
					}.createDelegate(this)
				},
				toggleDisplayFileList: {
					actionType: 'view',
					sectionCode: 'EvnMediaDataList',
					handler: function(e, c, d) {
						var id = 'EvnMediaDataList_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				/*
				selDiag: {
					actionType: 'view',
					sectionCode: 'EvnPS_data',
					handler: function(e, c, d) {
						form.showEvnTherapyByDiag('EvnPS',d.object_id);
					}
				},
				*/
				showFm: {
					actionType: 'view',
					sectionCode: 'EvnPS',
					handler: function(e, c, d) {
						form.showFm(d);
					}
				},
				showDiagList: {
					actionType: 'view',
					sectionCode: 'EvnPS_data',
					handler: function(e, c, d) {
						this.showDiagList();
					}.createDelegate(this)
				}
			},
			EvnVizitPL: {
				toggleDisplayMorbusHepatitis: {
					actionType: 'view',
					sectionCode: 'EvnVizitPL',
					handler: function(e, c, d) {
						this.loadSpecific('hepa',d);
					}.createDelegate(this)
				},
				toggleDisplayMorbusOnko: {
					actionType: 'view',
					sectionCode: 'EvnVizitPL',
					handler: function(e, c, d) {
						this.loadSpecific('onko',d);
					}.createDelegate(this)
				},
				toggleDisplayMorbusPregnancy: {
					actionType: 'view',
					sectionCode: 'EvnVizitPL',
					handler: function(e, c, d) {
						this.loadSpecific('pregnancy',d);
					}.createDelegate(this)
				},
				toggleDisplayMorbusCrazy: {
					actionType: 'view',
					sectionCode: 'EvnVizitPL',
					handler: function(e, c, d) {
						this.loadSpecific('crazy',d);
					}.createDelegate(this)
				},
				toggleDisplayMorbusTub: {
					actionType: 'view',
					sectionCode: 'EvnVizitPL',
					handler: function(e, c, d) {
						this.loadSpecific('tub',d);
					}.createDelegate(this)
				},
				toggleDisplayMorbusVener: {
					actionType: 'view',
					sectionCode: 'EvnVizitPL',
					handler: function(e, c, d) {
						this.loadSpecific('vener',d);
					}.createDelegate(this)
				},
				toggleDisplayMorbusPalliat: {
					actionType: 'view',
					sectionCode: 'EvnVizitPL',
					handler: function(e, c, d) {
						this.openMorbusPalliat(d);
					}.createDelegate(this)
				},
				toggleDisplayMorbusGeriatrics: {
					actionType: 'view',
					sectionCode: 'EvnVizitPL',
					handler: function(e, c, d) {
						this.openMorbusGeriatrics(d);
					}.createDelegate(this)
				},
				addEvnInfectNotify: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL',
					handler: function(e, c, d) {
						form.addEvnInfectNotify(d);
					}
				},
				addEvnNotifyRegisterIncludeNolos: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL',
					handler: function(e, c, d) {
						form.addEvnNotifyRegisterInclude('nolos', d);
					}
				},
				addEvnNotifyRegisterIncludeOrphan: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL',
					handler: function(e, c, d) {
						form.addEvnNotifyRegisterInclude('orphan', d);
					}
				},
                addEvnNotifyHepatitis: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL',
                    handler: function(e, c, d) {
                        form.addEvnNotify(d, 'hepa');
                    }
                },
                addEvnOnkoNotify: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL',
                    handler: function(e, c, d) {
                        form.addEvnNotify(d, 'onko');
                    }
                },
                addEvnNotifyCrazy: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL',
                    handler: function(e, c, d) {
                        form.addEvnNotify(d, 'crazy');
                    }
                },
				addEvnNotifyNarc: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL',
                    handler: function(e, c, d) {
                        form.addEvnNotify(d, 'narc');
                    }
                },
                addEvnNotifyTub: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL',
                    handler: function(e, c, d) {
                        form.addEvnNotify(d, 'tub');
                    }
                },
                addEvnNotifyVener: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL',
                    handler: function(e, c, d) {
                        form.addEvnNotify(d, 'vener');
                    }
                },
				toggleDisplayMorbusNephro: {
					actionType: 'view',
					sectionCode: 'EvnVizitPL',
					handler: function(e, c, d) {
						form.loadSpecific('nephro',d);
					}
				},
				toggleDisplayMorbusProf: {
					actionType: 'view',
					sectionCode: 'EvnVizitPL',
					handler: function(e, c, d) {
						form.loadSpecific('prof',d);
					}
				},
                addEvnNotifyNephro: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL',
                    handler: function(e, c, d) {
                        form.addEvnNotify(d, 'nephro');
                    }
                },
				addEvnNotifyProf: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL',
					handler: function(e, c, d) {
						form.addEvnNotifyProf(d);
					}
				},
                printEvnVizitPL: {
                    actionType: 'view',
                    sectionCode: 'EvnVizitPL_data',
                    dblClick: false,
                    handler: function(e, c, d) {
                        this.printEvnVizitPL(d);
                    }.createDelegate(this)
                },
				editEvnVizitPL: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_data',
					dblClick: false,
					handler: function(e, c, d) {
						this.openEvnVizitPLEditWindow('editEvnVizitPL',d);
					}.createDelegate(this)
				},
                inputMedStaffFact: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL_data',
                    dblClick: false,
                    handler: function(e, c, d) {
                        this.createInputArea('MedStaffFact', 'EvnVizitPL', d);
                    }.createDelegate(this)
                },
                inputSMedPersonal: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL_data',
                    dblClick: false,
                    handler: function(e, c, d) {
                        this.createInputArea('SMedPersonal', 'EvnVizitPL', d);
                    }.createDelegate(this)
                },
                inputServiceType: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL_data',
                    dblClick: false,
                    handler: function(e, c, d) {
                        this.createInputArea('ServiceType', 'EvnVizitPL', d);
                    }.createDelegate(this)
                },
                inputTreatmentClass: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL_data',
                    dblClick: false,
                    handler: function(e, c, d) {
                        this.createInputArea('TreatmentClass', 'EvnVizitPL', d);
                    }.createDelegate(this)
                },
                inputScreenType: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL_data',
                    dblClick: false,
                    handler: function(e, c, d) {
                        this.createInputArea('ScreenType', 'EvnVizitPL', d);
                    }.createDelegate(this)
                },
				inputVizitActiveType: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_data',
					dblClick: false,
					handler: function(e, c, d) {
						this.createInputArea('VizitActiveType', 'EvnVizitPL', d);
					}.createDelegate(this)
				},
                inputPayType: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL_data',
                    dblClick: false,
                    handler: function(e, c, d) {
                        this.createInputArea('PayType', 'EvnVizitPL', d);
                    }.createDelegate(this)
                },
                inputUslugaComplex: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL_data',
                    dblClick: false,
                    handler: function(e, c, d) {
                        form.createInputArea('UslugaComplex', 'EvnVizitPL', d);
                    }
                },
                inputUslugaMedType: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL_data',
                    dblClick: false,
                    handler: function(e, c, d) {
                        form.createInputArea('UslugaMedType', 'EvnVizitPL', d);
                    }
                },
                inputUslugaComplexTariff: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('UslugaComplexTariff', 'EvnVizitPL', d);
                    }
                },
				inputMedicalCareKind: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL_data',
                    dblClick: false,
                    handler: function(e, c, d) {
                        form.createInputArea('MedicalCareKind', 'EvnVizitPL', d);
                    }
                },
                inputLpuSectionProfile: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL_data',
                    handler: function(e, c, d) {
                        form.createInputArea('LpuSectionProfile', 'EvnVizitPL', d);
                    }
                },
				inputMesOldVizit: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL_data',
                    handler: function(e, c, d) {
                        form.createInputArea('MesOldVizit', 'EvnVizitPL', d);
                    }
                },
                inputVizitType: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL_data',
                    handler: function(e, c, d) {
                        this.createInputArea('VizitType', 'EvnVizitPL', d);
                    }.createDelegate(this)
                },
                inputProfGoal: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL_data',
                    handler: function(e, c, d) {
                        this.createInputArea('ProfGoal', 'EvnVizitPL', d);
                    }.createDelegate(this)
                },
                inputDispProfGoalType: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPL_data',
                    handler: function(e, c, d) {
                        this.createInputArea('DispProfGoalType', 'EvnVizitPL', d);
                    }.createDelegate(this)
                },
				inputRiskLevel: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_data',
					dblClick: false,
					handler: function(e, c, d) {
						this.createInputArea('RiskLevel', 'EvnVizitPL', d);
					}.createDelegate(this)
				},
				inputWellnessCenterAgeGroups: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_data',
					dblClick: false,
					handler: function(e, c, d) {
						this.createInputArea('WellnessCenterAgeGroups', 'EvnVizitPL', d);
					}.createDelegate(this)
				},
				inputVizitClass: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_data',
					dblClick: false,
					handler: function(e, c, d) {
						this.createInputArea('VizitClass', 'EvnVizitPL', d);
					}.createDelegate(this)
				},
				inputDiag: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_data',
					dblClick: false,
					handler: function(e, c, d) {
						this.createInputArea('Diag', 'EvnVizitPL', d);
					}.createDelegate(this)
				},
				inputDiagSpid: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_data',
					handler: function(e, c, d) {
						form.createInputArea('DiagSpid', 'EvnVizitPL', d);
					}
				},
				inputBiopsyDate: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_data',
					handler: function(e, c, d) {
						form.createInputArea('BiopsyDate', 'EvnVizitPL', d);
					}
				},
				inputDeseaseType: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_data',
					dblClick: false,
					handler: function(e, c, d) {
						this.createInputArea('DeseaseType', 'EvnVizitPL', d);
					}.createDelegate(this)
				},
				inputTumorStage: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_data',
					dblClick: false,
					handler: function(e, c, d) {
						this.createInputArea('TumorStage', 'EvnVizitPL', d);
					}.createDelegate(this)
				},
				inputPainIntensity: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_data',
					dblClick: false,
					handler: function(e, c, d) {
						this.createInputArea('PainIntensity', 'EvnVizitPL', d);
					}.createDelegate(this)
				},
				inputIsZNO: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_data',
					dblClick: false,
					handler: function(e, c, d) {
						this.createInputArea('IsZNO', 'EvnVizitPL', d);
					}.createDelegate(this)
				},
				inputPregnancyEvnVizitPLPeriod: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_data',
					dblClick: false,
					handler: function(e, c, d) {
						log(['inputPregnancyEvnVizitPLPeriod', e, c, d]);
						form.createInputArea('PregnancyEvnVizitPL_Period', 'EvnVizitPL', d);
					}
				},
				inputHealthKind: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_data',
					dblClick: false,
					handler: function(e, c, d) {
						var vizitData = form.getObjectData('EvnVizitPL',d.object_id);
						if (
							Date.parseDate(vizitData.EvnVizitPL_setDate,'d.m.Y') >= Date.parseDate('01.07.2013','d.m.Y')
							&& vizitData.UslugaComplex_Code
							&& (vizitData.UslugaComplex_Code.substr(-5, 5).inlist([
									//'66805', '00805', '31805', '57805', '71805', '67805', '68805', '69805',
									'31890', '57890', '71890', '66890', '00890', '67890', '68890', '69890',
									'69893', '67893', '73893',
									'73805'
								]) ||
								vizitData.UslugaComplex_Code.substr(-3, 3).inlist(['805', '893'])
							)
						) {
							this.createInputArea('HealthKind2', 'EvnVizitPL', d);
						}
					}.createDelegate(this)
				},
				inputRankinScale: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_data',
					dblClick: false,
					handler: function(e, c, d) {
						this.createInputArea('RankinScale', 'EvnVizitPL', d);
					}.createDelegate(this)
				},
				inputPersonDisp: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_data',
					dblClick: false,
					handler: function(e, c, d) {
						this.createInputArea('PersonDisp', 'EvnVizitPL', d);
					}.createDelegate(this)
				},
				editPersonPregnancy: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_data',
					dblClick: false,
					handler: function(e, c, d) {
						var vizitData = form.getObjectData('EvnVizitPL',d.object_id);
						var params = {
							Evn_id: d.object_id,
							Person_id: form.Person_id,
							Server_id: form.Server_id,
							Lpu_id: vizitData.Lpu_id,
							LpuSection_id: vizitData.LpuSection_id,
							MedPersonal_id: vizitData.MedPersonal_id,
							MedStaffFact_id: vizitData.MedStaffFact_id,
							date: vizitData.EvnVizitPL_setDate
						};
						Ext.Ajax.request({
							url: '/?c=PersonPregnancy&m=getPersonRegisterByEvnVizitPL',
							params: params,
							callback: function(options, success, response) {
								var response_obj = Ext.util.JSON.decode(response.responseText);
								if (response_obj.success) {
									params.PersonRegister_id = response_obj.PersonRegister_id || null;
									params.PersonDisp_id = response_obj.PersonDisp_id || null;
									params.userMedStafffact = form.userMedStafffact;
									var action = params.PersonRegister_id?'edit':'add';
									this.openForm('swPersonPregnancyEditWindow','XXX_id',params,action,'Сведения о беременности');
								}
							}.createDelegate(this)
						});
					}.createDelegate(this)
				},
				print: {
					actionType: 'view',
					sectionCode: 'EvnVizitPL_protocol',
					handler: function(e, c, d) {
						var EvnXml_id, 
							xmldata = form.getObjectDataWithFindBy(function(record,id){
								if (record.object_code == 'EvnXml' 
									&& record.parent_object_value 
									&& record.object_value 
									&& record.parent_object_value==d.object_id
								) {
									EvnXml_id = record.object_value;
									return true;
								}
								return false;
							}),
							doc = form.listEvnXml[EvnXml_id];
						if (doc) {
							doc.doPrint();
						} else if (EvnXml_id)  {
							sw.Promed.EvnXml.doPrintById(EvnXml_id);
						}
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_protocol',
					//dblClick: true,
					handler: function(e, c, d) {
						//
					}.createDelegate(this)
				},
				del: {
					actionType: 'del',
					sectionCode: 'EvnVizitPL_protocol',
					handler: function(e, c, d) {
						form.deleteEvent('EvnXmlData',d);
					}
				},
				reload: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_protocol',
					handler: function(e, c, d) {
						var params = {
							Evn_id: d.object_id,
							XmlType_id: sw.Promed.EvnXml.EVN_VIZIT_PROTOCOL_TYPE_ID,
                            isSelect: false
						};
						form.saveEvnXmlWithBaseXmlTemplate(params);
					}.createDelegate(this)
				},
				clear: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_protocol',
					handler: function(e, c, d) {
						form.clearEvnXml(d);
					}
				},
				select: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_protocol',
					handler: function(e, c, d) {
                        getWnd('swTemplSearchWindow').show({
                            onSelect: function(data) {
                                var params = {
                                    Evn_id: d.object_id,
                                    XmlTemplate_id: data.XmlTemplate_id,
                                    XmlType_id: sw.Promed.EvnXml.EVN_VIZIT_PROTOCOL_TYPE_ID,
                                    isSelect: true
                                };
                                form.saveEvnXmlWithBaseXmlTemplate(params);
                            },
                            EvnClass_id: 11,
                            Evn_id: form.data.id,
                            XmlType_id: sw.Promed.EvnXml.EVN_VIZIT_PROTOCOL_TYPE_ID
                        });
					}.createDelegate(this)
				},
				search: {
					actionType: 'edit',
					sectionCode: 'EvnVizitPL_protocol',
					handler: function(e, c, d) {
                        var EvnXml_id;
                        form.getObjectDataWithFindBy(function(record,id){
                            if(record.object_code == 'EvnXml' && record.parent_object_value && record.object_value && record.parent_object_value==d.object_id) {
                                EvnXml_id = record.object_value;
                                return true;
                            }
                            return false;
                        });
                        getWnd('swTemplSearchWindow').show({
							onSelect: function(data) {
								var params = {
									Evn_id: d.object_id,
									XmlTemplate_id: data.XmlTemplate_id,
									XmlType_id: sw.Promed.EvnXml.EVN_VIZIT_PROTOCOL_TYPE_ID,
                                    isSelect: true
								};
								form.saveEvnXmlWithBaseXmlTemplate(params);
							},
							EvnClass_id: 11,
							Evn_id: d.object_id,
                            EvnXml_id: EvnXml_id,
							XmlType_id: sw.Promed.EvnXml.EVN_VIZIT_PROTOCOL_TYPE_ID
						});
					}.createDelegate(this)
				},
				showFm: {
					actionType: 'view',
					sectionCode: 'EvnVizitPL',
					handler: function(e, c, d) {
						form.showFm(d);
					}
				}
			},
			EvnVK: {
				inputNumProtocol: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('NumProtocol', d);}},
				inputIsReserve: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('IsReserve', d);}},
				inputSetDate: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('SetDate', d);}},
				inputMedPersonal: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('MedPersonal', d);}},
				inputNumCard: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('NumCard', d);}},
				inputProf: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('Prof', d);}},
				inputPatientStatusType: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('PatientStatusType', d);}},
				inputCauseTreatmentType: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('CauseTreatmentType', d);}},
				inputDiag: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('Diag', d);}},
				inputMainDisease: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('MainDisease', d);}},
				inputDiagS: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('DiagS', d);}},
				inputExpertiseNameType: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('ExpertiseNameType', d);}},
				inputExpertiseEventTypeLink: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('ExpertiseEventTypeLink', d);}},
				inputExpertiseNameSubjectType: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('ExpertiseNameSubjectType', d);}},
				inputEvnStickAll: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('EvnStickAll', d);}},
				inputLVN: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('LVN', d);}},
				inputEvnStickWorkRelease: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('EvnStickWorkRelease', d);}},
				inputWorkReleasePeriod: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('WorkReleasePeriod', d);}},
				inputExpertiseStickNumber: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('ExpertiseStickNumber', d);}},
				inputStickPeriod: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('StickPeriod', d);}},
				inputStickDuration: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('StickDuration', d);}},
				inputDirectionDate: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('DirectionDate', d);}},
				inputConclusionDate: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('ConclusionDate', d);}},
				inputConclusionPeriodDate: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('ConclusionPeriodDate', d);}},
				inputConclusionDescr: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('ConclusionDescr', d);}},
				inputAddInfo: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('AddInfo', d);}},
				inputIsUseStandard: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('IsUseStandard', d);}},
				inputUseStandard: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('UseStandard', d);}},
				inputIsAberration: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('IsAberration', d);}},
				inputAberrationDescr: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('AberrationDescr', d);}},
				inputIsErrors: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('IsErrors', d);}},
				inputErrorsDescr: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('ErrorsDescr', d);}},
				inputIsResult: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('IsResult', d);}},
				inputResultDescr: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('ResultDescr', d);}},
				inputExpertDescr: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('ExpertDescr', d);}},
				inputDecisionVK: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.createEvnVKHtmlForm('DecisionVK', d);}},

				toggleDisplayExpertList: {actionType: 'view', sectionCode: 'EvnVKExpertList', handler: function(e, c, d) {var id = 'EvnVKExpertTable_'+ d.object_id;form.toggleDisplay(id,Ext.get(id).isDisplayed());}},
				selectDecisionVK: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.selectDecisionVK(d);}},
				addExpert: {actionType: 'edit', sectionCode: 'EvnVKExpertList', handler: function(e, c, d) {form.openEvnVKExpertEditWindow('add',d)}},
				editExpert: {actionType: 'edit', sectionCode: 'EvnVKExpert', handler: function(e, c, d) {form.openEvnVKExpertEditWindow('edit',d)}},
				deleteExpert: {actionType: 'edit', sectionCode: 'EvnVKExpert', handler: function(e, c, d) {form.deleteEvent('EvnVKExpert',d)}},
				print: {actionType: 'view', sectionCode: 'EvnVK', handler: function(e, c, d) {form.printEvnVK(d)}},
				
				addSopDiag: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.addEvnVKDiag('sop',d)}},
				addOslDiag: {actionType: 'edit', sectionCode: 'EvnVK', handler: function(e, c, d) {form.addEvnVKDiag('osl',d)}},
				//save: {actionType: 'edit', sectionCode: 'MorbusPregnancy', handler: function(e, c, d) {form.saveMorbusPrenancySpec('saveDiag',d);}}
			},
			MorbusHepatitis: {
				inputEpidAns: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitis',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHepatitisInputCmp('EpidAns', d);
					}
				},
				inputEpidNum: {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitis',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHepatitisInputCmp('EpidNum', d);
					}
				}
			},
			MorbusHepatitisEvn: {
				openEvn: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisEvn',
					handler: function(e, c, d) {
						form.openMorbusHepatitisSpecificForm({action: 'openEvn',object: 'MorbusHepatitisEvn', eldata: d, mhdata: {MorbusHepatitis_id: null}});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisEvnList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisEvnList',
					handler: function(e, c, d) {
						var id = 'MorbusHepatitisEvnTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusHepatitisSopDiag: {
				print: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisSopDiagList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisSopDiagList',
					handler: function(e, c, d) {
						var id = 'MorbusHepatitisSopDiagTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusHepatitisQueue: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisQueue',
					dblClick: true,
					handler: function(e, c, d) {
						if (String(getGlobalOptions().groups).indexOf('HepatitisRegistry', 0) < 0)
						{
							sw.swMsg.alert(langs('Сообщение'), langs('Функция редактирования доступна только для пользователей, с указанной группой "Регистр по гепатиту"'));
							return false;
						}
						form.openMorbusHepatitisSpecificForm({action: 'edit',object: 'MorbusHepatitisQueue', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisQueue',
					handler: function(e, c, d) {
						if (String(getGlobalOptions().groups).indexOf('HepatitisRegistry', 0) < 0)
						{
							sw.swMsg.alert(langs('Сообщение'), langs('Функция редактирования доступна только для пользователей, с указанной группой "Регистр по гепатиту"'));
							return false;
						}
						form.deleteEvent('MorbusHepatitisQueue',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisQueueList',
					handler: function(e, c, d) {
						if (String(getGlobalOptions().groups).indexOf('HepatitisRegistry', 0) < 0)
						{
							sw.swMsg.alert(langs('Сообщение'), langs('Функция редактирования доступна только для пользователей, с указанной группой "Регистр по гепатиту"'));
							return false;
						}
						form.openMorbusHepatitisSpecificForm({action: 'add',object: 'MorbusHepatitisQueue', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisQueueList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisQueueList',
					handler: function(e, c, d) {
						var id = 'MorbusHepatitisQueueTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusHepatitisPlan: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisPlan',
					dblClick: true,
					handler: function(e, c, d) {
						if (String(getGlobalOptions().groups).indexOf('HepatitisRegistry', 0) < 0)
						{
							sw.swMsg.alert(langs('Сообщение'), langs('Функция редактирования доступна только для пользователей, с указанной группой "Регистр по гепатиту"'));
							return false;
						}
						form.openMorbusHepatitisSpecificForm({action: 'edit',object: 'MorbusHepatitisPlan', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisPlan',
					handler: function(e, c, d) {
						if (String(getGlobalOptions().groups).indexOf('HepatitisRegistry', 0) < 0)
						{
							sw.swMsg.alert(langs('Сообщение'), langs('Функция редактирования доступна только для пользователей, с указанной группой "Регистр по гепатиту"'));
							return false;
						}
						form.deleteEvent('MorbusHepatitisPlan',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisPlanList',
					handler: function(e, c, d) {
						if (String(getGlobalOptions().groups).indexOf('HepatitisRegistry', 0) < 0)
						{
							sw.swMsg.alert(langs('Сообщение'), langs('Функция редактирования доступна только для пользователей, с указанной группой "Регистр по гепатиту"'));
							return false;
						}
						form.openMorbusHepatitisSpecificForm({action: 'add',object: 'MorbusHepatitisPlan', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisPlanList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisPlanList',
					handler: function(e, c, d) {
						var id = 'MorbusHepatitisPlanTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusHepatitisVaccination: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisVaccination',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusHepatitisSpecificForm({action: 'edit',object: 'MorbusHepatitisVaccination', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisVaccination',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusHepatitisVaccination',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisVaccinationList',
					handler: function(e, c, d) {
						form.openMorbusHepatitisSpecificForm({action: 'add',object: 'MorbusHepatitisVaccination', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisVaccinationList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisVaccinationList',
					handler: function(e, c, d) {
						var id = 'MorbusHepatitisVaccinationTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusHepatitisCure: {
				openEffMonitoring: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisCure',
					handler: function(e, c, d) {
						form.openMorbusHepatitisSpecificForm({action: 'openEffMonitoring',object: 'MorbusHepatitisCure', eldata: d});
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisCure',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusHepatitisSpecificForm({action: 'edit',object: 'MorbusHepatitisCure', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisCure',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusHepatitisCure',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisCureList',
					handler: function(e, c, d) {
						form.openMorbusHepatitisSpecificForm({action: 'add',object: 'MorbusHepatitisCure', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisCureList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisCureList',
					handler: function(e, c, d) {
						var id = 'MorbusHepatitisCureTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusHepatitisFuncConfirm: {
				openUsluga: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisFuncConfirm',
					handler: function(e, c, d) {
						form.openMorbusHepatitisSpecificForm({action: 'openUsluga',object: 'MorbusHepatitisFuncConfirm', eldata: d});
					}
				},
				inputFuncConfirmResult: {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisFuncConfirm',
					handler: function(e, c, d) {
						form.createMorbusHepatitisInputCmp('FuncConfirmResult', d);
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisFuncConfirm',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusHepatitisSpecificForm({action: 'edit',object: 'MorbusHepatitisFuncConfirm', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisFuncConfirm',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusHepatitisFuncConfirm',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisFuncConfirmList',
					handler: function(e, c, d) {
						form.openMorbusHepatitisSpecificForm({action: 'add',object: 'MorbusHepatitisFuncConfirm', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisFuncConfirmList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisFuncConfirmList',
					handler: function(e, c, d) {
						var id = 'MorbusHepatitisFuncConfirmTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusHepatitisLabConfirm: {
				openUsluga: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisLabConfirm',
					handler: function(e, c, d) {
						form.openMorbusHepatitisSpecificForm({action: 'openUsluga',object: 'MorbusHepatitisLabConfirm', eldata: d});
					}
				},
				inputLabConfirmResult: {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisLabConfirm',
					handler: function(e, c, d) {
						form.createMorbusHepatitisInputCmp('LabConfirmResult', d);
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisLabConfirm',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusHepatitisSpecificForm({action: 'edit',object: 'MorbusHepatitisLabConfirm', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisLabConfirm',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusHepatitisLabConfirm',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisLabConfirmList',
					handler: function(e, c, d) {
						form.openMorbusHepatitisSpecificForm({action: 'add',object: 'MorbusHepatitisLabConfirm', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisLabConfirmList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisLabConfirmList',
					handler: function(e, c, d) {
						var id = 'MorbusHepatitisLabConfirmTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusHepatitisDiag: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisDiag',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusHepatitisSpecificForm({action: 'edit',object: 'MorbusHepatitisDiag', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisDiag',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusHepatitisDiag',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusHepatitisDiagList',
					handler: function(e, c, d) {
						form.openMorbusHepatitisSpecificForm({action: 'add',object: 'MorbusHepatitisDiag', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisDiagList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusHepatitisDiagList',
					handler: function(e, c, d) {
						var id = 'MorbusHepatitisDiagTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusPregnancy: {
				inputOutcomD: {actionType: 'edit', sectionCode: 'MorbusPregnancy', handler: function(e, c, d) {form.createMorbusPregnancyHtmlForm('OutcomD', d);}},
				inputAbortType_id: {actionType: 'edit', sectionCode: 'MorbusPregnancy', handler: function(e, c, d) {form.createMorbusPregnancyHtmlForm('AbortType_id', d);}},
				inputIsHIVtest: {actionType: 'edit', sectionCode: 'MorbusPregnancy', handler: function(e, c, d) {form.createMorbusPregnancyHtmlForm('IsHIVtest', d);}},
				inputIsMedicalAbort: {actionType: 'edit', sectionCode: 'MorbusPregnancy', handler: function(e, c, d) {form.createMorbusPregnancyHtmlForm('IsMedicalAbort', d);}},
				inputIsHIV: {actionType: 'edit', sectionCode: 'MorbusPregnancy', handler: function(e, c, d) {form.createMorbusPregnancyHtmlForm('IsHIV', d);}},
				inputCountPreg: {actionType: 'edit', sectionCode: 'MorbusPregnancy', handler: function(e, c, d) {form.createMorbusPregnancyHtmlForm('CountPreg', d);}},
				inputOutcomPeriod: {actionType: 'edit', sectionCode: 'MorbusPregnancy', handler: function(e, c, d) {form.createMorbusPregnancyHtmlForm('OutcomPeriod', d);}},
				inputOutcomT: {actionType: 'edit', sectionCode: 'MorbusPregnancy', handler: function(e, c, d) {form.createMorbusPregnancyHtmlForm('OutcomT', d);}},
				inputBloodLoss: {actionType: 'edit', sectionCode: 'MorbusPregnancy', handler: function(e, c, d) {form.createMorbusPregnancyHtmlForm('BloodLoss', d);}},
				inputTrueStream:{actionType: 'edit', sectionCode: 'MorbusPregnancy', handler: function(e, c, d) {form.createMorbusPregnancyHtmlForm('TrueStream', d);}},
				save: {actionType: 'edit', sectionCode: 'MorbusPregnancy', handler: function(e, c, d) {form.saveMorbusPrenancySpec('saveDiag',d);}}
			},
			MorbusOnko: {
				copyEvnUsluga: {
					actionType: 'edit',
					sectionCode: 'MorbusOnko',
					handler: function(e, c, d) {
						var Evn_id = d.object_id.split('_')[0];
						var Morbus_id = d.object_id.split('_')[1];
						getWnd('swEvnUslugaCopyWindow').show({
							Evn_id: Evn_id,
							Morbus_id: Morbus_id,
							callback: function() {
								var reload_params = {
									section_code: d.object,
									object_key: 'Morbus_id',
									object_value: Morbus_id,
									parent_object_key: 'MorbusOnko_pid',
									parent_object_value: Evn_id,
									section_id: d.object + '_' + d.object_id
								};
								var EvnDiagPLSop_id = Ext.get(c).parent().parent().parent().getAttribute('sopdiagid');
								if (EvnDiagPLSop_id) reload_params.EvnDiagPLSop_id = EvnDiagPLSop_id.toString();
								form.reloadViewForm(reload_params);
							}
						});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusOnko',
					handler: function(e, c, d) {
						var ids = d.object_id.split('_');

						if ( typeof ids != 'object' || !ids[1] || parseInt(ids[1]) <= 0 ) {
							sw.swMsg.alert(langs('Ошибка'), 'Отсутствует специфика');
							return true;
						}

						var	data = {
								Morbus_id: ids[1]
							},
							btnEl = Ext.get(d.object +'_'+d.object_id+'_print');

						sw.Promed.PersonMorbusOnkoHelper.Report.showPrintMenu(form.Person_id, data, btnEl);
					},
					iconCls: 'print16',
					tooltip: langs('Печать'),
					text: BTN_FRMPRINT
				},
				toggleDisplayDiag: {
					actionType: 'view',
					sectionCode: 'MorbusOnko',
					handler: function(e, c, d) {
						var id = 'MorbusOnkoDiag_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				toggleDisplayHisto: {
					actionType: 'view',
					sectionCode: 'MorbusOnko',
					handler: function(e, c, d) {
						var id = 'MorbusOnkoHisto_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				toggleDisplayMorfo: {
					actionType: 'view',
					sectionCode: 'MorbusOnko',
					handler: function(e, c, d) {
						var id = 'MorbusOnkoMorfo_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				toggleDisplayMeta: {
					actionType: 'view',
					sectionCode: 'MorbusOnko',
					handler: function(e, c, d) {
						var id = 'MorbusOnkoMeta_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				toggleDisplayConfirm: {
					actionType: 'view',
					sectionCode: 'MorbusOnko',
					handler: function(e, c, d) {
						var id = 'MorbusOnkoConfirm_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				toggleDisplayControl: {
					actionType: 'view',
					sectionCode: 'MorbusOnko',
					handler: function(e, c, d) {
						var id = 'MorbusOnkoControl_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				inputOnkoTreatment: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('OnkoTreatment', d);}},
				inputfirstSignDT: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('firstSignDT', d);}},
				inputfirstVizitDT: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('firstVizitDT', d);}},
				inputsetDiagDT: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('setDiagDT', d);}},
				inputNumHisto: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('NumHisto', d);}},
				inputIsMainTumor: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('IsMainTumor', d);}},
				inputIsTumorDepoUnknown: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('IsTumorDepoUnknown', d);}},
				inputIsTumorDepoLympha: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('IsTumorDepoLympha', d);}},
				inputIsTumorDepoBones: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('IsTumorDepoBones', d);}},
				inputIsTumorDepoLiver: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('IsTumorDepoLiver', d);}},
				inputIsTumorDepoLungs: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('IsTumorDepoLungs', d);}},
				inputIsTumorDepoBrain: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('IsTumorDepoBrain', d);}},
				inputIsTumorDepoSkin: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('IsTumorDepoSkin', d);}},
				inputIsTumorDepoKidney: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('IsTumorDepoKidney', d);}},
				inputIsTumorDepoOvary: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('IsTumorDepoOvary', d);}},
				inputIsTumorDepoPerito: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('IsTumorDepoPerito', d);}},
				inputIsTumorDepoMarrow: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('IsTumorDepoMarrow', d);}},
				inputIsTumorDepoOther: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('IsTumorDepoOther', d);}},
				inputIsTumorDepoMulti: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('IsTumorDepoMulti', d);}},
				inputTumorStage: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('TumorStage', d);}},
				inputTumorStageF: { actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) { form.createMorbusOnkoHtmlForm('TumorStageF', d); }},
				inputDiagAttribType: { actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) { form.createMorbusOnkoHtmlForm('DiagAttribType', d); }},
				inputDiagResult: { actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) { form.createMorbusOnkoHtmlForm('DiagResult', d); }},
				inputTumorPrimaryMultipleType: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('TumorPrimaryMultipleType', d);}},
				inputOnkoLesionSide: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('OnkoLesionSide', d);}},
				inputOnkoT: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('OnkoT', d);}},
				inputOnkoN: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('OnkoN', d);}},
				inputOnkoM: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('OnkoM', d);}},
				inputOnkoTF: { actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) { form.createMorbusOnkoHtmlForm('OnkoTF', d); }},
				inputOnkoNF: { actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) { form.createMorbusOnkoHtmlForm('OnkoNF', d); }},
				inputOnkoMF: { actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) { form.createMorbusOnkoHtmlForm('OnkoMF', d); }},
				inputLpu: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('Lpu', d);}},
				inputOnkoRegType: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('OnkoRegType', d);}},
				inputOnkoRegOutType: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('OnkoRegOutType', d);}},
				inputTumorCircumIdentType: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('TumorCircumIdentType', d);}},
				inputOnkoLateDiagCause: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('OnkoLateDiagCause', d);}},
                inputAutopsyPerformType: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('AutopsyPerformType', d);}},
                inputTumorAutopsyResultType: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('TumorAutopsyResultType', d);}},

                inputOnkoDiag: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('OnkoDiag', d);}},
                inputMorbusBaseSetDT: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('MorbusBaseSetDT', d);}},
                inputMorbusBaseDisDT: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('MorbusBaseDisDT', d);}},
                inputMorbusOnkoBaseDeadDT: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('MorbusOnkoBaseDeadDT', d);}},
                inputNumCard: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('NumCard', d);}},
                inputMorbusOnkoHistDT: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('MorbusOnkoHistDT', d);}},
                inputOnkoPostType: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('OnkoPostType', d);}},
                inputOnkoStatusYearEndType: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('OnkoStatusYearEndType', d);}},
                inputOnkoInvalidType:{actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('OnkoInvalidType', d);}},
                inputDiagDead: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('DiagDead', d);}},
                inputEndDiag: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('EndDiag', d);}},
                inputOnkoVariance: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('OnkoVariance', d);}},
                inputOnkoRiskGroup: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('OnkoRiskGroup', d);}},
                inputOnkoResistance: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('OnkoResistance', d);}},
                inputOnkoStatusBegType: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('OnkoStatusBegType', d);}},
                inputHistologicReasonType: {actionType: 'edit', sectionCode: 'MorbusOnko', handler: function(e, c, d) {form.createMorbusOnkoHtmlForm('HistologicReasonType', d);}}
			},
			MorbusOnkoBasePersonState: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoBasePersonState',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'edit',object: 'MorbusOnkoBasePersonState', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoBasePersonState',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusOnkoBasePersonState',d);
					}
				},
				add: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoBasePersonStateList',
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'add',object: 'MorbusOnkoBasePersonState', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoBasePersonStateList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoBasePersonStateList',
					handler: function(e, c, d) {
						var id = 'MorbusOnkoBasePersonStateTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusOnkoBasePS: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoBasePS',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'edit',object: 'MorbusOnkoBasePS', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoBasePS',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusOnkoBasePS',d);
					}
				},
				add: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoBasePSList',
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'add',object: 'MorbusOnkoBasePS', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoBasePSList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoBasePSList',
					handler: function(e, c, d) {
						var id = 'MorbusOnkoBasePSTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusOnkoEvnNotify: {
				addEvnOnkoNotify: {
                    actionType: 'edit',
                    sectionCode: 'MorbusOnkoEvnNotifyList',
                    handler: function(e, c, d) {
                    	d.object_id = d.object_id.split('_')[0];
                    	d.EvnDiagPLSop_id = Ext.get(c).parent().getAttribute('sopdiagid');
                    	if (d.EvnDiagPLSop_id) d.EvnDiagPLSop_id = d.EvnDiagPLSop_id.toString();
                        form.addEvnNotify(d, 'onko');
                    }
                },
                toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoEvnNotifyList',
					handler: function(e, c, d) {
						var id = 'MorbusOnkoEvnNotifyTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoEvnNotifyList',
					handler: function(e, c, d) {
						var object_id, EvnOnkoNotify_id;
						object_id = d.object_id.split('_')[0];
						var EvnOnkoNotifys = Ext.query('[id*=MorbusOnkoEvnNotify_' + object_id + '] td');
						EvnOnkoNotify_id = (Ext.query('[id*=MorbusOnkoEvnNotify_' + object_id + ']')[0]).id.split('_')[2];
						EvnOnkoNotifys.forEach(function(el){
							if(!el.innerHTML)
								EvnOnkoNotify_id = Ext.get(el).parent().id.split('_')[2];
						});

						printBirt({
							'Report_FileName': 'OnkoNotify.rptdesign',
							'Report_Params': '&paramEvnOnkoNotify=' + EvnOnkoNotify_id,
							'Report_Format': 'pdf'
						});
					}
				}
			},
			MorbusOnkoSopDiag: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoSopDiag',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'edit',object: 'MorbusOnkoSopDiag', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoSopDiag',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusOnkoSopDiag',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoSopDiagList',
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'add',object: 'MorbusOnkoSopDiag', eldata: d});
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoSopDiagList',
					handler: function(e, c, d) {
						var id = 'MorbusOnkoSopDiagTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			OnkoConsult: {
				edit: {
					actionType: 'edit',
					sectionCode: 'OnkoConsult',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'edit',object: 'OnkoConsult', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'OnkoConsult',
					handler: function(e, c, d) {
						form.deleteEvent('OnkoConsult',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'OnkoConsultList',
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'add',object: 'OnkoConsult', eldata: d});
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'OnkoConsultList',
					handler: function(e, c, d) {
						var id = 'OnkoConsultTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'OnkoConsult',
					handler: function(e, c, d) {
						//form.printHtml(d.section_id);
						//alert('1111');

						console.log('d=', d.object_id);
						//var object_id = (d.split('_').length > 1) ? el_data.split('_')[1] : el_data;
						var paramEvn = d.object_id.split('_')[0];
						var OnkoConsult_id = d.object_id.split('_')[1];
						console.log('paramEvn=', paramEvn);
						console.log('paramConsil=', OnkoConsult_id);
						var url = ((getGlobalOptions().birtpath) ? getGlobalOptions().birtpath : '') + '/run?__report=report/OnkoConsilium_Print.rptdesign';
						url += '&paramEvn=' + paramEvn;
						url += '&OnkoConsult_id=' + OnkoConsult_id;
						url += '&__format=pdf';
						window.open(url, '_blank');
					}
				}
			},
			MorbusOnkoDrug: {
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoDrugList',
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'add', object: 'MorbusOnkoDrug', eldata: d});
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoDrug',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'edit', object: 'MorbusOnkoDrug', eldata: d});
					}
				},
				view: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoDrug',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'view', object: 'MorbusOnkoDrug', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoDrug',
					dblClick: true,
					handler: function(e, c, d) {
						form.deleteEvent('MorbusOnkoDrug',d);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoDrugList',
					handler: function(e, c, d) {
						var id = 'MorbusOnkoDrugTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoDrugList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				}
			},
			MorbusOnkoSpecTreat: {
				view: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoSpecTreat',
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'view',object: 'MorbusOnkoSpecTreat', eldata: d});
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoSpecTreat',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'edit',object: 'MorbusOnkoSpecTreat', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoSpecTreat',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusOnkoSpecTreat',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoSpecTreatList',
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'add',object: 'MorbusOnkoSpecTreat', eldata: d});
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoSpecTreatList',
					handler: function(e, c, d) {
						var id = 'MorbusOnkoSpecTreatTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusOnkoLink: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoLink',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'edit',object: 'MorbusOnkoLink', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoLink',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusOnkoLink',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoLinkList',
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'add',object: 'MorbusOnkoLink', eldata: d});
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoLinkList',
					handler: function(e, c, d) {
						var id = 'MorbusOnkoLinkTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusOnkoLink: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoLink',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'edit',object: 'MorbusOnkoLink', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoLink',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusOnkoLink',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoLinkList',
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'add',object: 'MorbusOnkoLink', eldata: d});
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoLinkList',
					handler: function(e, c, d) {
						var id = 'MorbusOnkoLinkTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusOnkoRefusal: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoRefusal',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'edit',object: 'MorbusOnkoRefusal', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoRefusal',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusOnkoRefusal',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoRefusalList',
					handler: function(e, c, d) {
						var me = this;

						if (me.refusalMenu) {
							me.refusalMenu.destroy();
							me.refusalMenu = null;
						}

						me.d = d;

						me.refusalMenu = new Ext.menu.Menu();

						me.refusalMenu.add({
							text: 'Отказ от лечения',
							handler: function() {
								form.openMorbusOnkoSpecificForm({action: 'add', object: 'MorbusOnkoRefusal', eldata: d, isRefusal: true});
							}
						});
						me.refusalMenu.add({
							text: 'Противопоказание к лечению',
							handler: function() {
								form.openMorbusOnkoSpecificForm({action: 'add', object: 'MorbusOnkoRefusal', eldata: d, isRefusal: false});
							}
						});

						var btnEl = Ext.get(d.object + '_' + d.object_id + '_add');
						me.refusalMenu.show(btnEl);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoRefusalList',
					handler: function(e, c, d) {
						var id = 'MorbusOnkoRefusalTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusOnkoRadTer: {
				view: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoRadTer',
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'view',object: 'MorbusOnkoRadTer', eldata: d});
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoRadTer',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'edit',object: 'MorbusOnkoRadTer', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoRadTer',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusOnkoRadTer',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoRadTerList',
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'add',object: 'MorbusOnkoRadTer', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoRadTerList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoRadTerList',
					handler: function(e, c, d) {
						var id = 'MorbusOnkoRadTerTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusOnkoHirTer: {
				view: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoHirTer',
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'view',object: 'MorbusOnkoHirTer', eldata: d});
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoHirTer',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'edit',object: 'MorbusOnkoHirTer', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoHirTer',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusOnkoHirTer',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoHirTerList',
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'add',object: 'MorbusOnkoHirTer', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoHirTerList',
					handler: function(e, c, d) {
						if (getRegionNick() == 'ufa') {
							var me = this;
							if (me.printMenu) {
								me.printMenu.destroy();
								me.printMenu = null;
							}
							me.d = d;
							me.printMenu = new Ext.menu.Menu();
							me.printMenu.add({
								text: 'Печать',
								value: 'Печать',
								handler: function() {
									form.printHtml(me.d.section_id);
								}
							});
							me.printMenu.add({
								text: 'Печать списка',
								value: 'Печать списка',
								handler: function() {
									var obj_id = d.object_id.substr(0,d.object_id.indexOf('_'));
									var templ = "<table><tr><th>Дата проведения</th>";
									templ += "<th>Название операции</th>";
									templ += "<th>Тип</th>";
									templ += "<th>Врач</th>";
									templ += "<th>Характер хир-го лечения</th>";
									templ += "<th>Интраоперационное осложнение</th>";
									templ += "<th>Послеоперационное осложнение</th>";
									templ += "</tr>";
									if(Ext.get(d.section_id).dom.children.length>1)
										var from = Ext.get(d.section_id).dom.children[1];
									else
										var from = Ext.get(d.section_id).dom.children[0];
									if(Ext.get(from.id).dom.children.length>2)
										var frm = Ext.get(from.id).dom.children[2];
									else
										var frm = Ext.get(from.id).dom.children[0].children[1].children[2];
									var rows = frm.children;
									var count = rows.length;
									for(var i=0;i<rows.length;i++){
										var id = rows[i].id;
										var EvnId = id.replace('MorbusOnkoHirTer_'+obj_id+'_','');
										Ext.Ajax.request({
											url: '/?c=EvnUslugaOnkoSurg&m=loadForPrint',
											callback: function(options, success, response)  {
												if (success) {
													var response_obj = Ext.util.JSON.decode(response.responseText);
													templ += response_obj;
													count--;
													if(count==0){
														templ += "</table>";
														var id_salt = Math.random();
														var win_id = 'printEvent' + Math.floor(id_salt*10000);
														var win = window.open('', win_id);
														win.document.write('<html><head><title>Печатная форма</title><link href="/css/emk.css?'+ id_salt +'" rel="stylesheet" type="text/css" /><style>td,th{border:solid 1px black;text-align:center;padding:3px}</style></head><body id="rightEmkPanelPrint">'+ templ +'</body></html>');
														win.document.close();
													}
												} else
													sw.swMsg.alert(langs('Ошибка'), 'При запросе списка операций произошла ошибка');
											},
											params: {
												EvnUslugaOnkoSurg_id: EvnId,
												archiveRecord: 0
											}
										});
									} 
								}
							});
							var btnEl = Ext.get(d.object +'_'+d.object_id+'_print');
							me.printMenu.show(btnEl);
						} else {
							form.printHtml(d.section_id);
						}
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoHirTerList',
					handler: function(e, c, d) {
						var id = 'MorbusOnkoHirTerTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusOnkoChemTer: {
				view: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoChemTer',
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'view',object: 'MorbusOnkoChemTer', eldata: d});
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoChemTer',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'edit',object: 'MorbusOnkoChemTer', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoChemTer',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusOnkoChemTer',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoChemTerList',
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'add',object: 'MorbusOnkoChemTer', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoChemTerList',
					handler: function(e, c, d) {
						if (getRegionNick() == 'ufa') {
							var me = this;
							if (me.printMenu) {
								me.printMenu.destroy();
								me.printMenu = null;
							}
							me.d = d;
							me.printMenu = new Ext.menu.Menu();
							me.printMenu.add({
								text: 'Печать',
								value: 'Печать',
								handler: function() {
									form.printHtml(me.d.section_id);
								}
							});
							me.printMenu.add({
								text: 'Печать списка',
								value: 'Печать списка',
								handler: function() {
									var obj_id = d.object_id.substr(0,d.object_id.indexOf('_'));
									var templ = "<table><tr><th rowspan='2'>Препарат</th>";
									templ += "<th rowspan='2'>Доза разовая</th>";
									templ += "<th rowspan='2'>Ед.</th>";
									templ += "<th rowspan='2'>Кратность</th>";
									templ += "<th rowspan='2'>Периодичность</th>";
									templ += "<th rowspan='2'>Сумм.Доза</th>";
									templ += "<th colspan='2'>Дата проведения</th>";
									templ += "<th rowspan='2'>Метод введения</th>";
									templ += "</tr><tr><th>начало</th><th>конец</th></tr>";
									if(Ext.get(d.section_id).dom.children.length>1)
										var from = Ext.get(d.section_id).dom.children[1];
									else
										var from = Ext.get(d.section_id).dom.children[0];
									if(Ext.get(from.id).dom.children.length>2)
										var frm = Ext.get(from.id).dom.children[2];
									else
										var frm = Ext.get(from.id).dom.children[0].children[1].children[2];
									var rows = frm.children;
									var count = rows.length;
									for(var i=0;i<rows.length;i++){
										var id = rows[i].id;
										var EvnId = id.replace('MorbusOnkoChemTer_'+obj_id+'_','');
										Ext.Ajax.request({
											url: '/?c=MorbusOnkoDrug&m=readListForPrint',
											callback: function(options, success, response)  {
												if (success) {
													var response_obj = Ext.util.JSON.decode(response.responseText);
													templ += response_obj;
													count--;
													if(count==0){
														templ += "</table>";
														var id_salt = Math.random();
														var win_id = 'printEvent' + Math.floor(id_salt*10000);
														var win = window.open('', win_id);
														win.document.write('<html><head><title>Печатная форма</title><link href="/css/emk.css?'+ id_salt +'" rel="stylesheet" type="text/css" /><style>td,th{border:solid 1px black;text-align:center;padding:3px}</style></head><body id="rightEmkPanelPrint">'+ templ +'</body></html>');
														win.document.close();
													}
												} else
													sw.swMsg.alert(langs('Ошибка'), 'При запросе списка медикаментов произошла ошибка');
											},
											params: {
												Evn_id: EvnId,
												object: 'MorbusOnkoDrug'
											}
										});
									} 
								}
							});
							var btnEl = Ext.get(d.object +'_'+d.object_id+'_print');
							me.printMenu.show(btnEl);
						} else {
							form.printHtml(d.section_id);
						}
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoChemTerList',
					handler: function(e, c, d) {
						var id = 'MorbusOnkoChemTerTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusOnkoGormTer: {
				view: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoGormTer',
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'view',object: 'MorbusOnkoGormTer', eldata: d});
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoGormTer',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'edit',object: 'MorbusOnkoGormTer', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoGormTer',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusOnkoGormTer',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoGormTerList',
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'add',object: 'MorbusOnkoGormTer', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoGormTerList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoGormTerList',
					handler: function(e, c, d) {
						var id = 'MorbusOnkoGormTerTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusOnkoNonSpecTer: {
				view: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoNonSpecTer',
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'view',object: 'MorbusOnkoNonSpecTer', eldata: d});
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoNonSpecTer',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'edit',object: 'MorbusOnkoNonSpecTer', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoNonSpecTer',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusOnkoNonSpecTer',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusOnkoNonSpecTerList',
					handler: function(e, c, d) {
						form.openMorbusOnkoSpecificForm({action: 'add',object: 'MorbusOnkoNonSpecTer', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoNonSpecTerList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusOnkoNonSpecTerList',
					handler: function(e, c, d) {
						var id = 'MorbusOnkoNonSpecTerTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			EvnDiagPL: {
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'EvnDiagPLList',
					handler: function(e, c, d) {
						var id = 'EvnDiagPLTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				add: {
					actionType: 'add',
					sectionCode: 'EvnDiagPLList',
					handler: function(e, c, d) {
						form.openEvnDiagPLEditWindow('add',d);
					}.createDelegate(this)
				},
				view: {
					actionType: 'view',
					sectionCode: 'EvnDiagPL',
					handler: function(e, c, d) {
						form.openEvnDiagPLEditWindow('view',d);
					}.createDelegate(this)
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnDiagPL',
					dblClick: true,
					handler: function(e, c, d) {
						form.openEvnDiagPLEditWindow('edit',d);
					}.createDelegate(this)
				},
				'delete': {
					actionType: 'del',
					sectionCode: 'EvnDiagPL',
					handler: function(e, c, d) {
						form.deleteEvent('EvnDiagPL', d);
					}.createDelegate(this)
				}
			},
			EvnRecept: {
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'EvnReceptList',
					handler: function(e, c, d) {
						var id = 'EvnReceptTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				add: {
					actionType: 'add',
					sectionCode: 'EvnReceptList',
					handler: function(e, c, d) {
						form.openEvnReceptEditWindow('add',d);
					}.createDelegate(this)
				},
				print: {
					actionType: 'view',
					sectionCode: 'EvnRecept',
					handler: function(e, c, d) {
						var recept_data = form.getObjectDataWithFindBy(function(record,id){
							if(record.object_code == d.object && record.get(d.object +'_id') == d.object_id) {
								return true;
							}
							return false;
						});
						var ReceptType_Code = recept_data.ReceptType_Code;
						if(ReceptType_Code == 1){
							Ext.Msg.alert(langs('Ошибка'), 'Для рецептов, выписанных на бланке, печатная форма не предусмотрена');
							return false;
						}
						if(getRegionNick() != 'kz' && ReceptType_Code == 3 && !EvnRecept_IsSigned){
							Ext.Msg.alert(langs('Ошибка'), 'Рецепт в форме электронного документа можно распечатать после подписания рецепта ЭП. Подпишите рецепт и повторите печать.');
							return false;
						}
                        var evn_recept = new sw.Promed.EvnRecept({EvnRecept_id: d.object_id});
                        evn_recept.print();
					}
				},
				view: {
					actionType: 'view',
					sectionCode: 'EvnRecept',
					dblClick: true,
					handler: function(e, c, d) {
						form.openEvnReceptEditWindow('view',d);
					}
				},
				'delete': {
					actionType: 'del',
					sectionCode: 'EvnRecept',
					handler: function(e, c, d) {
						form.deleteEvent('EvnRecept', d);
					}
				}
			},
			EvnReceptGeneral: {
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'EvnReceptGeneralList',
					handler: function(e, c, d) {
						var id = 'EvnReceptGeneralTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				view: {
					actionType: 'view',
					sectionCode: 'EvnReceptGeneral',
					dblClick: true,
					handler: function(e, c, d) {
						form.openEvnReceptGeneralEditWindow('view',d);
					}
				}
			},
			EvnReceptKardio: {
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'EvnReceptKardioList',
					handler: function(e, c, d) {
						var id = 'EvnReceptKardioTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				add: {
					actionType: 'add',
					sectionCode: 'EvnReceptKardioList',
					handler: function(e, c, d) {
						form.openEvnReceptKardioEditWindow('add',d);
					}.createDelegate(this)
				},
				print: {
					actionType: 'view',
					sectionCode: 'EvnReceptKardio',
					handler: function(e, c, d) {
						var recept_data = form.getObjectDataWithFindBy(function(record,id){
							if(record.object_code == d.object && record.get(d.object +'_id') == d.object_id) {
								return true;
							}
							return false;
						});
						var ReceptType_Code = recept_data.ReceptType_Code;
						if(ReceptType_Code == 1){
							Ext.Msg.alert(langs('Ошибка'), 'Для рецептов, выписанных на бланке, печатная форма не предусмотрена');
							return false;
						}
						if(getRegionNick() != 'kz' && ReceptType_Code == 3 && !EvnRecept_IsSigned){
							Ext.Msg.alert(langs('Ошибка'), 'Рецепт в форме электронного документа можно распечатать после подписания рецепта ЭП. Подпишите рецепт и повторите печать.');
							return false;
						}
                        var evn_recept = new sw.Promed.EvnRecept({EvnRecept_id: d.object_id});
                        evn_recept.print();
					}
				},
				view: {
					actionType: 'view',
					sectionCode: 'EvnReceptKardio',
					dblClick: true,
					handler: function(e, c, d) {
						form.openEvnReceptKardioEditWindow('view',d);
					}
				},
				'delete': {
					actionType: 'del',
					sectionCode: 'EvnReceptKardio',
					handler: function(e, c, d) {
						form.deleteEvent('EvnRecept', d);
					}
				}
			},
			EvnReceptGeneralView:
			{
				printEvnReceptGeneral: {
					actionType: 'view',
					sectionCode: 'EvnReceptGeneralView',
					handler: function(e, c, d) {
                        Ext.Ajax.request({
							url: '/?c=EvnRecept&m=getReceptGeneralForm',
							params: {
								EvnReceptGeneral_id: d.object_id
							},
							callback: function(opt,suc, res)
							{
								if(suc)
								{
									var response_obj = Ext.util.JSON.decode(res.responseText);

									Ext.Ajax.request({
										url: '/?c=EvnRecept&m=saveEvnReceptGeneralIsPrinted',
										params:{
											EvnReceptGeneral_id: d.object_id
										},
										callback: function(){
											if (getRegionNick() == 'kz') {
												printBirt({
													'Report_FileName': 'EvnReceptMoney_print.rptdesign',
													'Report_Params': '&paramEvnRecept=' + d.object_id,
													'Report_Format': 'pdf'
												});
												printBirt({
													'Report_FileName': 'EvnReceptMoney_Oborot_print.rptdesign',
													'Report_Params': '&paramEvnRecept=' + d.object_id,
													'Report_Format': 'pdf'
												});
											} else {
												if (response_obj.ReceptForm_id == 3) {
													if (!Ext.isEmpty(response_obj.EvnReceptGeneral_setDate) && response_obj.EvnReceptGeneral_setDate > '2019-04-06') {
														printBirt({
															'Report_FileName': 'EvnReceptGenprint2_new.rptdesign',
															'Report_Params': '&paramEvnRecept=' + d.object_id,
															'Report_Format': 'pdf'
														});
														printBirt({
															'Report_FileName': 'EvnReceptGenPrintOb_new.rptdesign',
															'Report_Params': '',
															'Report_Format': 'pdf'
														});
													}
													else {
														printBirt({
															'Report_FileName': 'EvnReceptGenprint2.rptdesign',
															'Report_Params': '&paramEvnRecept=' + d.object_id,
															'Report_Format': 'pdf'
														});
														printBirt({
															'Report_FileName': 'EvnReceptGenPrintOb.rptdesign',
															'Report_Params': '',
															'Report_Format': 'pdf'
														});
													}
												}
												else if (response_obj.ReceptForm_id == 2) {
													printBirt({
														'Report_FileName': 'EvnReceptGenprint_1MI.rptdesign',
														'Report_Params': '&paramEvnRecept=' + d.object_id,
														'Report_Format': 'pdf'
													});
												}
												else if (response_obj.ReceptForm_id == 5 && !Ext.isEmpty(response_obj.EvnReceptGeneral_setDate) && response_obj.EvnReceptGeneral_setDate > '2019-04-07') { //при дате выписки рецепта позже 07.04.2019, для рецептов с формой 148-1/у-88 используются отдельные шаблоны
													printBirt({
														'Report_FileName': 'EvnReceptGenprint_2019.rptdesign',
														'Report_Params': '&paramEvnRecept=' + d.object_id,
														'Report_Format': 'pdf'
													});
													printBirt({
														'Report_FileName': 'EvnReceptGenPrintOb_2019.rptdesign',
														'Report_Params': '',
														'Report_Format': 'pdf'
													});
												}
												else if (response_obj.ReceptForm_id == 5 && !Ext.isEmpty(response_obj.EvnReceptGeneral_setDate) && response_obj.EvnReceptGeneral_setDate > '2019-04-07') { //при дате выписки рецепта позже 07.04.2019, для рецептов с формой 148-1/у-88 используются отдельные шаблоны
													printBirt({
														'Report_FileName': 'EvnReceptGenprint_2019.rptdesign',
														'Report_Params': '&paramEvnRecept=' + d.object_id,
														'Report_Format': 'pdf'
													});
													printBirt({
														'Report_FileName': 'EvnReceptGenPrintOb_2019.rptdesign',
														'Report_Params': '',
														'Report_Format': 'pdf'
													});
												}
												else {
													printBirt({
														'Report_FileName': 'EvnReceptGenprint.rptdesign',
														'Report_Params': '&paramEvnRecept=' + d.object_id,
														'Report_Format': 'pdf'
													});
													printBirt({
														'Report_FileName': 'EvnReceptGenPrintOb.rptdesign',
														'Report_Params': '',
														'Report_Format': 'pdf'
													});
												}
											}
										}
									});

									/*if (getRegionNick() == 'kz') {
										printBirt({
											'Report_FileName': 'EvnReceptMoney_print.rptdesign',
											'Report_Params': '&paramEvnRecept=' + d.object_id,
											'Report_Format': 'pdf'
										});
										printBirt({
											'Report_FileName': 'EvnReceptMoney_Oborot_print.rptdesign',
											'Report_Params': '&paramEvnRecept=' + d.object_id,
											'Report_Format': 'pdf'
										});
									} else {
										if (response_obj.ReceptForm_id == 3) {
											printBirt({
												'Report_FileName': 'EvnReceptGenprint2.rptdesign',
												'Report_Params': '&paramEvnRecept=' + d.object_id,
												'Report_Format': 'pdf'
											});
										} else {
											printBirt({
												'Report_FileName': 'EvnReceptGenprint.rptdesign',
												'Report_Params': '&paramEvnRecept=' + d.object_id,
												'Report_Format': 'pdf'
											});
										}
									}*/


								}
							}.createDelegate(this)

						});
					}
				},
				editEvnReceptGeneral: {
					actionType: 'edit',
					sectionCode: 'EvnReceptGeneralView',
					dblClick: true,
					handler: function(e,c,d) {
						form.openEvnReceptGeneralEditWindow('editEvnRecept',d);
					}
				}
			},
			EvnReceptView: {
				showDocVersionList: {
					actionType: 'view',
					sectionCode: 'EvnReceptView',
					handler: function(e, c, d) {
						var data = form.getObjectData(d.object, d.object_id);
						if (data && data.Signatures_id) {
							getWnd('swStickVersionListWindow').show({
								Signatures_id: data.Signatures_id
							});
						} else {
							getWnd('swDocVersionListWindow').show({
								Doc_id: d.object_id,
								Doc_Type: 'EvnReceptOtv'
							});
						}
					}.createDelegate(this)
				},
				verifyDoc: {
					actionType: 'view',
					sectionCode: 'EvnReceptView',
					handler: function(e, c, d) {
						signDocumentVerification({
							ownerWindow: form.GridPanel,
							Doc_Type: 'EvnReceptOtv',
							Doc_id: selected_record.get('EvnRecept_id'),
							callback: function(result) {
								var node = form.node;
								form.requireCheckChange = false;
								form.loadTreeNode({
									node: node.parentNode,
									selectById: node.id,
									callback: function(tl,n){
										form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
									}
								});
							}
						});
					}.createDelegate(this)
				},
				printEvnRecept: {
					actionType: 'view',
					sectionCode: 'EvnReceptView',
					handler: function(e, c, d) {
                        var evn_recept = new sw.Promed.EvnRecept({EvnRecept_id: d.object_id});
                        evn_recept.print();
					}
				},
				editEvnRecept: {
					actionType: 'edit',
					sectionCode: 'EvnReceptView',
					dblClick: true,
					handler: function(e, c, d) {
						form.openEvnReceptEditWindow('editEvnRecept',d);
					}
				},
				editEvnReceptKardio: {
					actionType: 'edit',
					sectionCode: 'EvnReceptView',
					dblClick: true,
					handler: function(e, c, d) {
						form.openEvnReceptKardioEditWindow('editEvnRecept',d);
					}
				},
				selDiag: {
					actionType: 'view',
					sectionCode: 'EvnReceptView',
					handler: function(e, c, d) {
						form.showEvnTherapyByDiag('EvnReceptView',d.object_id);
					}
				},
				showDiagList: {
					actionType: 'view',
					sectionCode: 'EvnReceptView',
					handler: function(e, c, d) {
						form.showDiagList();
					}
				},
				showPrivilegeList: {
					actionType: 'view',
					sectionCode: 'EvnReceptView',
					handler: function(e, c, d) {
						form.showPrivilegeList();
					}
				},
				showFarmTherapy: {
					actionType: 'view',
					sectionCode: 'EvnReceptView',
					handler: function(e, c, d) {
						sw.swMsg.alert(langs('Сообщение'), langs('Функционал в разработке.'));
					}
				},
				showRls: {
					actionType: 'view',
					sectionCode: 'EvnReceptView',
					handler: function(e, c, d) {
						sw.swMsg.alert(langs('Сообщение'), langs('Функционал в разработке.'));
					}
				},
				showDrugResidues: {
					actionType: 'view',
					sectionCode: 'EvnReceptView',
					handler: function(e, c, d) {
						sw.swMsg.alert(langs('Сообщение'), langs('Функционал в разработке.'));
					}
				}
			},
			EvnReceptKardioView: {
				printEvnRecept: {
					actionType: 'view',
					sectionCode: 'EvnReceptKardioView',
					handler: function(e, c, d) {
                        var evn_recept = new sw.Promed.EvnRecept({EvnRecept_id: d.object_id});
                        evn_recept.print();
					}
				},
				editEvnRecept: {
					actionType: 'edit',
					sectionCode: 'EvnReceptKardioView',
					dblClick: true,
					handler: function(e, c, d) {
						form.openEvnReceptKardioEditWindow('editEvnRecept',d);
					}
				},
				selDiag: {
					actionType: 'view',
					sectionCode: 'EvnReceptKardioView',
					handler: function(e, c, d) {
						form.showEvnTherapyByDiag('EvnReceptView',d.object_id);
					}
				},
				showDiagList: {
					actionType: 'view',
					sectionCode: 'EvnReceptKardioView',
					handler: function(e, c, d) {
						form.showDiagList();
					}
				},
				showPrivilegeList: {
					actionType: 'view',
					sectionCode: 'EvnReceptKardioView',
					handler: function(e, c, d) {
						form.showPrivilegeList();
					}
				},
				showFarmTherapy: {
					actionType: 'view',
					sectionCode: 'EvnReceptKardioView',
					handler: function(e, c, d) {
						sw.swMsg.alert(langs('Сообщение'), langs('Функционал в разработке.'));
					}
				},
				showRls: {
					actionType: 'view',
					sectionCode: 'EvnReceptKardioView',
					handler: function(e, c, d) {
						sw.swMsg.alert(langs('Сообщение'), langs('Функционал в разработке.'));
					}
				},
				showDrugResidues: {
					actionType: 'view',
					sectionCode: 'EvnReceptKardioView',
					handler: function(e, c, d) {
						sw.swMsg.alert(langs('Сообщение'), langs('Функционал в разработке.'));
					}
				}
			},
			EvnDirection: {
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'EvnDirectionList',
					handler: function(e, c, d) {
						var id = 'EvnDirectionTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				go: {
					actionType: 'view',
					sectionCode: 'timetable',//related_objects.field_code
                    dblClick: true,
					handler: function(e, c, d) {
						form.openEvnDirectionEditWindow('view',d);
					}
				},
				add: {
					actionType: 'add',
					sectionCode: 'EvnDirectionList',
					handler: function(e, c, d) {
						var KLRgn_id = form.PersonInfoFrame.getFieldValue('KLRgn_id');
                        var dirTypeCodeExcList = [/*'7',*/'10','11','14','16','17'];
						if (getRegionNick() != 'buryatiya') {
							dirTypeCodeExcList.push('18');
						}
						if (getRegionNick() != 'perm' && KLRgn_id == '59') {
							dirTypeCodeExcList.push('15');
						}
                        sw.Promed.Direction.createDirTypeMenu({
                            excList: dirTypeCodeExcList,
                            id: 'DirTypeListMenu',
                            onSelect: function(rec) {
                                d.object = 'EvnDirection';
                                form.createDirection(d, rec, this.excList);
                            },
                            onCreate: function(m){
                                m.show(Ext.get('EvnDirectionList_'+d.object_id+'_add'),'tr');
                            }
                        });
					}
				},
				addtome: {
					actionType: 'add',
					sectionCode: 'EvnDirectionList',
					handler: function(e, c, d) {
						form.openEvnDirectionEditWindow('addtome',d);
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'timetable',
					handler: function(e, c, d) {
						var opt = d.object_id.split('_');
						var dirdata = form.getObjectDataWithFindBy(function(record,id){
							if(record.object_code == 'EvnDirection' && record.get('timetable') == opt[0] && record.get('timetable_id') == opt[1]) {
								return true;
							}
							return false;
						});

						sw.Promed.Direction.print({
							EvnDirection_id: dirdata.EvnDirection_id
						});
					}
				},
				printselect: { //https://redmine.swan.perm.ru/issues/54910
					actionType: 'view',
					sectionCode: 'timetable',
					handler: function(e, c, d) {
						var opt = d.object_id.split('_');
						var dir_data = form.getObjectDataWithFindBy(function(record,id)
							{
								if(record.object_code == 'EvnDirection' && record.get('timetable') == opt[0] && record.get('timetable_id') == opt[1]) {
									return true;
								}
								return false;
							});
							
						if (dir_data.DirType_Code && dir_data.DirType_Code == 30) {
							printBirt({
								'Report_FileName': 'EvnDirectionCVI_Print.rptdesign',
								'Report_Params': '&paramEvnDirectionCVI=' + dir_data.EvnDirection_id,
								'Report_Format': 'pdf'
							});
							return true;
						}

						var disable_talon = ((dir_data.DirType_Code && dir_data.DirType_Code.inlist([1,5, 8, 13])) || (dir_data.timetable && dir_data.timetable.inlist(['EvnQueue','TimetableStac'])));
						sw.Promed.Direction.createTimeTablePrintMenu({
							id: 'TimeTablePrintMenu',
							disable_talon: disable_talon,
							onSelect: function(rec) {
								var dirdata = form.getObjectDataWithFindBy(function(record,id){
									if(record.object_code == 'EvnDirection' && record.get('timetable') == opt[0] && record.get('timetable_id') == opt[1]) {
										return true;
									}
									return false;
								});
								if(rec.get('PrintType_Code') == 1){ //Печать направлений
									if(dir_data.DirType_Code && dir_data.DirType_Code == 23 && dir_data.EvnPrescrMse_id) { // Направление на МСЭ
										printBirt({
											'Report_FileName': getRegionNick() == 'kz' ? 'DirectionMSE_f088u.rptdesign' : 'printEvnPrescrMse.rptdesign',
											'Report_Params': (getRegionNick() == 'kz' ? '&paramEvnPrescrMse_id=' : '&EvnPrescrMse_id=') + dir_data.EvnPrescrMse_id,
											'Report_Format': getRegionNick() == 'kz' ? 'pdf' : 'html'
										});
									} else {
										sw.Promed.Direction.print({
											EvnDirection_id: dirdata.EvnDirection_id
										});
									}
								}
								else // Талон на прием к врачу
								{
									printBirt({
										'Report_FileName': getRegionNick() == 'kz'?'pan_Talon_kvrachy.rptdesign':'f025_4u_88.rptdesign',
										'Report_Params': (getRegionNick() == 'kz'?'&paramtimetablegraf=':'&paramTimeTableGraf=') + dirdata.timetable_id,
										'Report_Format': 'pdf'
									});
								}
							},
							onCreate: function(m){
								m.show(Ext.get('timetable_'+d.object_id+'_printselect'),'tr');
							}
						});
					}
				},
				directZav: {
					actionType: 'edit',
					sectionCode: 'timetable',
					handler: function(e, c, d) {
						var opt = d.object_id.split('_');
						var dir_data = form.getObjectDataWithFindBy(function (record, id) {
							if (record.object_code == 'EvnDirection' && record.get('timetable') == opt[0] && record.get('timetable_id') == opt[1]) {
								return true;
							}
							return false;
						});

						if (dir_data.EvnPrescrVK_id) {
							form.getLoadMask(LOAD_WAIT_SAVE).show();
							setEvnStatus({
								EvnClass_SysNick: 'EvnPrescrVK',
								EvnStatus_SysNick: 'Agreement',
								Evn_id: dir_data.EvnPrescrVK_id,
								callback: function() {
									form.getLoadMask().hide();
									var reload_params = {
										section_code: 'EvnDirection',
										object_key: 'EvnDirection_id',
										object_value: dir_data.EvnDirection_id,
										parent_object_key: 'EvnDirection_id',
										parent_object_value: dir_data.timetable_pid,
										section_id: 'EvnDirectionList_' + dir_data.timetable_pid
									};
									form.reloadViewForm(reload_params);
								}
							});
						}
					}
				},
				eutedit: {
					actionType: 'edit',
					sectionCode: 'timetable',
					handler: function(e, c, d) {
						var opt = d.object_id.split('_');
						var dir_data = form.getObjectDataWithFindBy(function (record, id) {
							return (
								record.object_code == 'EvnDirection' && 
								record.get('timetable') == opt[0] && 
								record.get('timetable_id') == opt[1]
							);
						});
						
						
						if (!!dir_data.EvnUslugaTelemed_id) {
							form.openEvnUslugaTelemedEditWindow('editNoWork', dir_data);
						} else {
							form.openEvnUslugaTelemedEditWindow('add', dir_data);
						}
					}
				},
				addBlankDir: {
					actionType: 'edit',
					sectionCode: 'timetable',
					handler: function(e, c, d) {
						form.openEvnXmlEditWindow('add','EvnDirection',d);
					}
				},
				editBlankDir: {
					actionType: 'view',
					sectionCode: 'timetable',
					handler: function(e, c, d) {
						form.openEvnXmlEditWindow('edit','EvnDirection',d);
					}
				},
				'delete': {
					actionType: 'del',
					sectionCode: 'timetable',
					handler: function(e, c, d) {
						form.deleteEvent('EvnDirection', d);
					}
				}
				,
				addDoc: {
					actionType: 'edit',
					sectionCode: 'EvnDirection',
					handler: function(e, c, d) {

						var Person_id = form.Person_id,
							EvnDirection_id = d.object_id;

						form.addXmlDocumentToEvnDirection(Person_id, EvnDirection_id)
					}
				},
				uploadFile: {
					actionType: 'add',
					sectionCode: 'EvnDirection',
					handler: function(e, c, d) {
						form.uploadRemoteFileToRKC(d);
					}
				}
			},
            EvnDirectionStac: {
                toggleDisplay: {
                    actionType: 'view',
                    sectionCode: 'EvnDirectionStacList',
                    handler: function(e, c, d) {
                        var id = 'EvnDirectionStacTable_'+ d.object_id;
                        form.toggleDisplay(id,Ext.get(id).isDisplayed());
                    }
                },
                go: {
                    actionType: 'view',
                    sectionCode: 'timetable',//related_objects.field_code
                    dblClick: true,
                    handler: function(e, c, d) {
                        form.openEvnDirectionEditWindow('view',d);
                    }
                },
                add: {
                    actionType: 'add',
                    sectionCode: 'EvnDirectionStacList',
                    handler: function(e, c, d) {
                        var dirTypeCodeExcList = ['5','6', '9','10','11','14','15','16','17'];
						var formParams = form.getObjectData('EvnSection', d.object_id);
						if (
							getRegionNick().inlist(['perm','kz']) || 
							!formParams.Diag_Code || 
							!(formParams.Diag_Code.substr(0,3) >= 'C00' && formParams.Diag_Code.substr(0,3) <= 'D48')
						) {
							dirTypeCodeExcList.push('1');
							
						}
                        sw.Promed.Direction.createDirTypeMenu({
                            excList: dirTypeCodeExcList,
                            id: 'DirTypeListMenu',
                            onSelect: function(rec) {
                                d.object = 'EvnDirectionStac';
                                form.createDirection(d, rec, this.excList);
                            },
                            onCreate: function(m){
                                m.show(Ext.get('EvnDirectionStacList_'+d.object_id+'_add'),'tr');
                            }
                        });
                    }
                },
                print: {
                    actionType: 'view',
                    sectionCode: 'timetable',
                    handler: function(e, c, d) {
                        var opt = d.object_id.split('_');
                        var dirdata = form.getObjectDataWithFindBy(function(record,id){
                            if(record.object_code == 'EvnDirectionStac' && record.get('timetable') == opt[0] && record.get('timetable_id') == opt[1]) {
                                return true;
                            }
                            return false;
                        });
						
						if (dirdata.DirType_Code && dirdata.DirType_Code == 30) {
							printBirt({
								'Report_FileName': 'EvnDirectionCVI_Print.rptdesign',
								'Report_Params': '&paramEvnDirectionCVI=' + dirdata.EvnDirection_id,
								'Report_Format': 'pdf'
							});
							return true;
						}

						sw.Promed.Direction.print({
							EvnDirection_id: dirdata.EvnDirection_id
						});
                    }
                },
				eutedit: {
					actionType: 'edit',
					sectionCode: 'timetable',
					handler: function(e, c, d) {
						var opt = d.object_id.split('_');
						var dir_data = form.getObjectDataWithFindBy(function (record, id) {
							return (
								record.object_code == 'EvnDirectionStac' && 
								record.get('timetable') == opt[0] && 
								record.get('timetable_id') == opt[1]
							);
						});
						
						
						if (!!dir_data.EvnUslugaTelemed_id) {
							form.openEvnUslugaTelemedEditWindow('editNoWork', dir_data);
						} else {
							form.openEvnUslugaTelemedEditWindow('add', dir_data);
						}
					}
				},
				directZav: {
					actionType: 'edit',
					sectionCode: 'timetable',
					handler: function(e, c, d) {
						var opt = d.object_id.split('_');
						var dir_data = form.getObjectDataWithFindBy(function (record, id) {
							if (record.object_code == 'EvnDirectionStac' && record.get('timetable') == opt[0] && record.get('timetable_id') == opt[1]) {
								return true;
							}
							return false;
						});

						if (dir_data.EvnPrescrVK_id) {
							form.getLoadMask(LOAD_WAIT_SAVE).show();
							setEvnStatus({
								EvnClass_SysNick: 'EvnPrescrVK',
								EvnStatus_SysNick: 'Agreement',
								Evn_id: dir_data.EvnPrescrVK_id,
								callback: function() {
									form.getLoadMask().hide();
									var reload_params = {
										section_code: 'EvnDirectionStac',
										object_key: 'EvnDirection_id',
										object_value: dir_data.EvnDirection_id,
										parent_object_key: 'EvnDirection_id',
										parent_object_value: dir_data.timetable_pid,
										section_id: 'EvnDirectionStacList_' + dir_data.timetable_pid
									};
									form.reloadViewForm(reload_params);
								}
							});
						}
					}
				},
				addBlankDir: {
					actionType: 'edit',
					sectionCode: 'timetable',
					handler: function(e, c, d) {
						form.openEvnXmlEditWindow('add','EvnDirectionStac',d);
					}
				},
				editBlankDir: {
					actionType: 'view',
					sectionCode: 'timetable',
					handler: function(e, c, d) {
						form.openEvnXmlEditWindow('edit','EvnDirectionStac',d);
					}
				},
                'delete': {
                    actionType: 'del',
                    sectionCode: 'timetable',
                    handler: function(e, c, d) {
                        form.deleteEvent('EvnDirectionStac', d);
                    }
                },
				addDoc: {
					actionType: 'edit',
					sectionCode: 'EvnDirectionStac',
					handler: function(e, c, d) {

						var Person_id = form.Person_id,
							EvnDirection_id = d.object_id;

						form.addXmlDocumentToEvnDirection(Person_id, EvnDirection_id)
					}
				},
				uploadFile: {
					actionType: 'add',
					sectionCode: 'EvnDirectionStac',
					handler: function(e, c, d) {
						form.uploadRemoteFileToRKC(d);
					}
				}
            },
			EvnUsluga: {
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'EvnUslugaList',
					handler: function(e, c, d) {
						var id = 'EvnUslugaTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
                xml: {
                    actionType: 'view',
                    sectionCode: 'EvnUsluga',
                    handler: function(e, c, d) {
                        form.openUslugaEvnXmlEditWindow('EvnUsluga',d);
                    }
                },
				narcosis: {
                    actionType: 'view',
                    sectionCode: 'EvnUsluga',
                    handler: function(e, c, d) {
                        form.openUslugaEvnXmlEditWindow('EvnUsluga',d,null,true);
                    }
                },
				add: {
					actionType: 'add',
					sectionCode: 'EvnUslugaList',
					handler: function(e, c, d) {
						form.openEvnUslugaEditWindow('add',d);
					}.createDelegate(this)
				},
                view: {
                    actionType: 'view',
                    sectionCode: 'EvnUsluga',
                    handler: function(e, c, d) {
                        form.openEvnUslugaEditWindow('view',d);
                    }.createDelegate(this)
                },
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnUsluga',
					dblClick: true,
					handler: function(e, c, d) {
						form.openEvnUslugaEditWindow('edit',d);
					}.createDelegate(this)
				},
				editsimple: {
					actionType: 'view',
					sectionCode: 'EvnUsluga',
					handler: function(e, c, d) {
						form.openEvnUslugaParSimpleEditWindow('edit',d);
					}.createDelegate(this)
				},
				'delete': {
					actionType: 'del',
					sectionCode: 'EvnUsluga',
					handler: function(e, c, d) {
						form.deleteEvent('EvnUsluga', d);
					}.createDelegate(this)
				}
			},
			EvnUslugaStac: {
				add: {
					actionType: 'add',
					sectionCode: 'EvnUslugaStacList',
					handler: function(e, c, d) {
						form.openEvnUslugaStacEditWindow('add',d);
					}.createDelegate(this)
				},
                xml: {
                    actionType: 'view',
                    sectionCode: 'EvnUslugaStac',
                    handler: function(e, c, d) {
                        form.openUslugaEvnXmlEditWindow('EvnUslugaStac',d);
                    }
				},
				narcosis: {
                    actionType: 'view',
                    sectionCode: 'EvnUslugaStac',
                    handler: function(e, c, d) {
                        form.openUslugaEvnXmlEditWindow('EvnUslugaStac',d,null,true);
                    }
                },
				narcosis: {
                    actionType: 'view',
                    sectionCode: 'EvnUslugaStac',
                    handler: function(e, c, d) {
                        form.openUslugaEvnXmlEditWindow('EvnUslugaStac',d,null,true);
                    }
                },
				view: {
					actionType: 'view',
					sectionCode: 'EvnUslugaStac',
					handler: function(e, c, d) {
						form.openEvnUslugaStacEditWindow('view',d);
					}.createDelegate(this)
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnUslugaStac',
					dblClick: true,
					handler: function(e, c, d) {
						form.openEvnUslugaStacEditWindow('edit',d);
					}.createDelegate(this)
				},
				editsimple: {
					actionType: 'view',
					sectionCode: 'EvnUslugaStac',
					handler: function(e, c, d) {
						form.openEvnUslugaParSimpleEditWindow('edit',d);
					}.createDelegate(this)
				},
				'delete': {
					actionType: 'del',
					sectionCode: 'EvnUslugaStac',
					handler: function(e, c, d) {
						form.deleteEvent('EvnUslugaStac', d);
					}.createDelegate(this)
				}
			},
			EvnStick: {
				add: {
					actionType: 'add',
					sectionCode: 'EvnStickList',
					handler: function(e, c, d) {
						form.openEvnStickEditWindow('add',d);
					}
				},
				view: {
					actionType: 'view',
					sectionCode: 'EvnStick',
					handler: function(e, c, d) {
						form.openEvnStickEditWindow('view',d);
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnStick',
					dblClick: true,
					handler: function(e, c, d) {
						form.openEvnStickEditWindow('edit',d);
					}
				},
				'delete': {
					actionType: 'view',
					sectionCode: 'EvnStick',
					handler: function(e, c, d) {
						var data = form.getObjectData(d.object,d.object_id);
						//log(data);
						if ( data == false )
						{
							return false;
						}
						var node;
						switch ( data.evnStickType ) {
							case 1:
								node = form.Tree.getNodeById('EvnStick_'+d.object_id+'_'+data.Evn_pid);
							break;
							case 2:
								node = form.Tree.getNodeById('EvnStickDop_'+d.object_id+'_'+data.Evn_pid);
							break;
							case 3:
								node = form.Tree.getNodeById('EvnStickStudent_'+d.object_id+'_'+data.Evn_pid);
							break;
						}
						if(!node) {
							node = {
								parentNode: form.Tree.getNodeById(form.data.Code+'_'+data.Evn_pid)
								,attributes: {
									evnStickType: data.evnStickType
									,EvnStick_closed: data.EvnStick_closed
									,Evn_pid: data.Evn_pid
									,EvnStick_pid: data.EvnStick_pid
									,object_value: data.EvnStick_id
									,accessType: data.accessType
								}
							};
						}
						form.deleteEvnStick(node);
					}
				},
				cancel: {
					actionType: 'view',
					sectionCode: 'EvnStick',
					handler: function(e, c, d) {

						var data = form.getObjectData(d.object,d.object_id);
						var params = {
							deleteType: 'cancel'
						}
						//log(data);
						if ( data == false )
						{
							return false;
						}
						var node;
						switch ( data.evnStickType ) {
							case 1:
								node = form.Tree.getNodeById('EvnStick_'+d.object_id+'_'+data.Evn_pid);
							break;
							case 2:
								node = form.Tree.getNodeById('EvnStickDop_'+d.object_id+'_'+data.Evn_pid);
							break;
							case 3:
								node = form.Tree.getNodeById('EvnStickStudent_'+d.object_id+'_'+data.Evn_pid);
							break;
						}
						if(!node) {
							node = {
								parentNode: form.Tree.getNodeById(form.data.Code+'_'+data.Evn_pid)
								,attributes: {
									evnStickType: data.evnStickType
									,EvnStick_closed: data.EvnStick_closed
									,Evn_pid: data.Evn_pid
									,EvnStick_pid: data.EvnStick_pid
									,object_value: data.EvnStick_id
									,accessType: data.accessType
								}
							};
						}
						form.deleteEvnStick(node, params);
					}
				},
				undodelete: {
					actionType: 'view',
					sectionCode: 'EvnStick',
					handler: function(e, c, d) {
						var data = form.getObjectData(d.object,d.object_id);
						//log(data);
						if ( data == false )
						{
							return false;
						}
						var node;
						switch ( data.evnStickType ) {
							case 1:
								node = form.Tree.getNodeById('EvnStick_'+d.object_id+'_'+data.Evn_pid);
							break;
							case 2:
								node = form.Tree.getNodeById('EvnStickDop_'+d.object_id+'_'+data.Evn_pid);
							break;
							case 3:
								node = form.Tree.getNodeById('EvnStickStudent_'+d.object_id+'_'+data.Evn_pid);
							break;
						}
						if(!node) {
							node = {
								parentNode: form.Tree.getNodeById(form.data.Code+'_'+data.Evn_pid)
								,attributes: {
									evnStickType: data.evnStickType
									,EvnStick_closed: data.EvnStick_closed
									,Evn_pid: data.Evn_pid
									,EvnStick_pid: data.EvnStick_pid
									,object_value: data.EvnStick_id
									,accessType: data.accessType
								}
							};
						}
						form.undoDeleteEvnStick(node);
					}
				},
				stickfssdata: {
					actionType: 'view',
					sectionCode: 'EvnStick',
					dblClick: false,
					handler: function(e, c, d) {
						var data = form.getObjectData(d.object,d.object_id);
						
						if ( data == false ) return false;

						getWnd('swStickFSSDataEditWindow').show({
							action: 'add',
							Person_id: data.Person_id,
							StickFSSData_StickNum: data.EvnStick_Num,
							ignoreCheckExist: true,
							callback: function() {
								form.loadNodeViewForm(form.Tree.getNodeById(form.node.id));
							}
						});
					}
				}
			},
			AllergHistory: {
				print: {
					actionType: 'view',
					sectionCode: 'AllergHistory',
					handler: function(e, c, d) {
						//log(d);
						form.printHtml(d.section_id);
					}
				},
				add: {
					actionType: 'add',
					sectionCode: 'AllergHistoryList',
					handler: function(e, c, d) {
						// params
						form.openPersonAllergicReactionEditWindow('add', d);
					}.createDelegate(this)
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'AllergHistory',
					dblClick: true,
					handler: function(e, c, d) {
						form.openPersonAllergicReactionEditWindow('edit', d);
					}.createDelegate(this)
				},
				del: {
					actionType: 'del',
					sectionCode: 'AllergHistory',
					handler: function(e, c, d) {
						form.deleteEvent('AllergHistory', d);
					}.createDelegate(this)
				}
			},
			FeedingType: {
				print: {
					actionType: 'view',
					sectionCode: 'FeedingType',
					handler: function (e, c, d) {
						//log(d);
						form.printHtml(d.section_id);
					}
				},
				add: {
					actionType: 'add',
					sectionCode: 'FeedingTypeList',
					handler: function (e, c, d) {
						// params
						form.openPersonFeedingTypeEditWindow('add', d);
					}.createDelegate(this)
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'FeedingType',
					dblClick: true,
					handler: function (e, c, d) {
						form.openPersonFeedingTypeEditWindow('edit', d);
					}.createDelegate(this)
				},
				del: {
					actionType: 'del',
					sectionCode: 'FeedingType',
					handler: function (e, c, d) {
						form.deleteEvent('FeedingType', d);
					}.createDelegate(this)
				}
			},
			BloodData: {
				print: {
					actionType: 'view',
					sectionCode: 'BloodData',
					handler: function(e, c, d) {
						//log(d);
						this.printHtml(d.section_id);
					}.createDelegate(this)
				},
				add: {
					actionType: 'add',
					sectionCode: 'BloodDataList',
					handler: function(e, c, d) {
						// params
						form.openPersonBloodGroupEditWindow('add', d);
					}.createDelegate(this)
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'BloodData',
					dblClick: true,
					handler: function(e, c, d) {
						// params
						form.openPersonBloodGroupEditWindow('edit', d);
					}
				},
				del: {
					actionType: 'del',
					sectionCode: 'BloodData',
					handler: function(e, c, d) {
						form.deleteEvent('BloodData', d);
					}.createDelegate(this)
				}
			},
			PalliatInfoConsentData: {
				print: {
					actionType: 'view',
					sectionCode: 'PalliatInfoConsentData',
					handler: function(e, c, d) {
						//log(d);
						this.printHtml(d.section_id);
					}.createDelegate(this)
				},
				add: {
					actionType: 'add',
					sectionCode: 'PalliatInfoConsentDataList',
					handler: function(e, c, d) {
						var me = this;
						if (me.addMenu) {
							me.addMenu.destroy();
							me.addMenu = null;
						}
						me.d = d;
						me.addMenu = new Ext.menu.Menu();
						me.addMenu.add({
							text: 'Согласие на оказание паллиативной помощи',
							handler: function(e,c,d) {
								form.openPalliatInfoConsentEditWindow('add', d, 2);
							}
						});
						me.addMenu.add({
							text: 'Отказ от паллиативной помощи',
							handler: function(e,c,d) {
								form.openPalliatInfoConsentEditWindow('add', d, 1);
							}
						});
						me.addMenu.add({
							text: 'Отказ от некоторых мероприятий',
							handler: function(e,c,d) {
								form.openPalliatInfoConsentEditWindow('add', d, 4);
							}
						});
						var btnEl = Ext.get(d.object + '_' + d.object_id + '_add');
						me.addMenu.show(btnEl);
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'PalliatInfoConsentData',
					dblClick: true,
					handler: function(e, c, d) {
						// params
						form.openPalliatInfoConsentEditWindow('edit', d);
					}
				},
				del: {
					actionType: 'del',
					sectionCode: 'PalliatInfoConsentData',
					handler: function(e, c, d) {
						form.deleteEvent('PalliatInfoConsentData', d);
					}.createDelegate(this)
				}
			},
			PersonMedHistory: {
				print: {
					actionType: 'view',
					sectionCode: 'PersonMedHistory',
					handler: function(e, c, d) {
						this.printHtml(d.section_id);
					}.createDelegate(this)
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'PersonMedHistory',
					dblClick: true,
					handler: function(e, c, d) {
						form.openPersonMedHistoryEditWindow(d);
					}
				}
			},
			PersonLpuInfoPersData: {
				print: {
					actionType: 'print',
					sectionCode: 'PersonLpuInfoPersData',
					handler: function(e,c,d){
						form.printElectroReceptInfo();
					}
				},add: {
					actionType: 'add',
					sectionCode: 'PersonLpuInfoPersData',
					handler: function(e, c, d) {
						var me = this;
						if (me.addMenu) {
							me.addMenu.destroy();
							me.addMenu = null;
						}
						me.d = d;
						Ext.Ajax.request({
							url: '/?c=Person&m=loadPersonLpuInfoPanel',
							success: function (response) {
								var response_obj = Ext.util.JSON.decode(response.responseText);
								if (response_obj && response_obj.Error_Msg) {
									sw.swMsg.alert('Ошибка', 'Ошибка при получении данных');
									return false;
								}
								//реализация блокирования пукнтов меню для согласий по электронным рецептам
								var index = response_obj.findIndex(
									function fn(rec) {
										return rec['PersonLpuInfoType'] == 'ReceptElectronic' && rec['PersonLpuInfo_IsAgree'] == 2;
									}
								);
								if (index != -1) {
									//создаем переменную me.ReceptElectronic_id для обработчика отзыва согласия на эл. рецепт
									form.ReceptElectronic_id = response_obj[index]['PersonLpuInfo_id'];
								}
								me.addMenu = new Ext.menu.Menu();
								me.addMenu.add({
									text: 'Согласие на обработку перс. Данных',
									disabled:getGlobalOptions().curARMType == 'mse' && getGlobalOptions().use_depersonalized_expertise == 1,
									handler: function(e,c,d) {
										form.reloadPersonLpuInfoPersData();
										form.printPersonLpuInfo({Person_id:form.Person_id,IsAgree:2});
									}
								});
								me.addMenu.add({
									text: 'Отзыв согласия на обработку перс. Данных',
									handler: function(e,c,d) {
										form.reloadPersonLpuInfoPersData();
										form.printPersonLpuInfo({Person_id:form.Person_id,IsAgree:1});
									}
								});
								me.addMenu.add({
									text: 'Согласие на рецепт в форме электронного документа',
									disabled: index != -1,
									handler: function(e,c,d) {
										form.setElectroReceptInfo({Person_id: form.Person_id});
									}
								});
								me.addMenu.add({
									text: 'Отзыв согласия на рецепт в форме электронного документа',
									disabled: index == -1,
									handler: function(e,c,d) {
										form.setElectroReceptInfo({Person_id: form.Person_id, ReceptElectronic_id: form.ReceptElectronic_id, Refuse: 1});
									}
								});
								var btnEl = Ext.get(d.object + '_' + d.object_id + '_add');
								me.addMenu.show(btnEl);
							},
							params: {
								Person_id: form.Person_id
							}
						});
					}
				},
				view: {
					actionType: 'view',
					sectionCode: 'PersonLpuInfoPersData',
					dblClick: true,
					handler: function(e, c, d) {
						var Person_id = form.PersonInfoFrame.DataView.getStore().data.items[0].data.Person_id;
						getWnd('swPersonLpuInfoViewWindow').show({Person_id:Person_id});
					}
				}
			},
			Anthropometry: {
				printAnthropometry: {
					actionType: 'view',
					sectionCode: 'Anthropometry',
					handler: function(e, c, d) {
						this.printHtml(d.section_id);
					}.createDelegate(this)
				},
				addPersonHeight: {
					actionType: 'add',
					sectionCode: 'PersonHeightList',
					handler: function(e, c, d) {
						form.openPersonHeightEditWindow('add', d);
					}
				},
				editPersonHeight: {
					actionType: 'edit',
					sectionCode: 'PersonHeight',
					dblClick: true,
					handler: function(e, c, d) {
						form.openPersonHeightEditWindow('edit', d);
					}
				},
				delPersonHeight: {
					actionType: 'del',
					sectionCode: 'PersonHeight',
					handler: function(e, c, d) {
						form.deleteEvent('PersonHeight', d);
					}
				},
				addPersonWeight: {
					actionType: 'add',
					sectionCode: 'PersonWeightList',
					handler: function(e, c, d) {
						form.openPersonWeightEditWindow('add', d);
					}
				},
				editPersonWeight: {
					actionType: 'edit',
					sectionCode: 'PersonWeight',
					dblClick: true,
					handler: function(e, c, d) {
						form.openPersonWeightEditWindow('edit', d);
					}
				},
				delPersonWeight: {
					actionType: 'del',
					sectionCode: 'PersonWeight',
					handler: function(e, c, d) {
						form.deleteEvent('PersonWeight', d);
					}
				},

				// #182939 Кнопки для работы с таблицей "Окружность головы":
				addHeadCircumference: {
					actionType: 'add',
					sectionCode: 'HeadCircumferenceList',
					handler: function(e, c, d) {
						form.openHeadCircumferenceEditWindow('add', d);
					}
				},
				editHeadCircumference: {
					actionType: 'edit',
					sectionCode: 'HeadCircumference',
					dblClick: true,
					handler: function(e, c, d) {
						form.openHeadCircumferenceEditWindow('edit', d);
					}
				},
				delHeadCircumference: {
					actionType: 'del',
					sectionCode: 'HeadCircumference',
					handler: function(e, c, d) {
						form.deleteEvent('HeadCircumference', d);
					}
				},

				// #182939 Кнопки для работы с таблицей "Окружность груди":
				addChestCircumference: {
					actionType: 'add',
					sectionCode: 'ChestCircumferenceList',
					handler: function(e, c, d) {
						form.openChestCircumferenceEditWindow('add', d);
					}
				},
				editChestCircumference: {
					actionType: 'edit',
					sectionCode: 'ChestCircumference',
					dblClick: true,
					handler: function(e, c, d) {
						form.openChestCircumferenceEditWindow('edit', d);
					}
				},
				delChestCircumference: {
					actionType: 'del',
					sectionCode: 'ChestCircumference',
					handler: function(e, c, d) {
						form.deleteEvent('ChestCircumference', d);
					}
				},

				// #183123 Кнопки для работы с таблицей "Раса пациента":
				addPersonRace: {
					actionType: 'add',
					sectionCode: 'PersonRaceList',
					handler: function(e, c, d) {
						form.openPersonRaceEditWindow('add', d);
					}
				},
				editPersonRace: {
					actionType: 'edit',
					sectionCode: 'PersonRace',
					dblClick: true,
					handler: function(e, c, d) {
						form.openPersonRaceEditWindow('edit', d);
					}
				},
				delPersonRace: {
					actionType: 'del',
					sectionCode: 'PersonRace',
					handler: function(e, c, d) {
						form.deleteEvent('PersonRace', d);
					}
				},
			},
			DiagList: {
				addDiag:{
					actionType: 'add',
					sectionCode: 'DiagList',
					handler: function(e, c, d) {
						form.openDiagSpecEditWindow('add',d)
					}.createDelegate(this)
				},
				editDiag:{
					actionType: 'edit',
					sectionCode: 'DiagList',
					handler: function(e, c, d) {
						form.openDiagSpecEditWindow('edit',d)
					}.createDelegate(this)
				},
				viewDiag:{
					actionType: 'view',
					sectionCode: 'DiagList',
					handler: function(e, c, d) {
						form.openDiagSpecEditWindow('view',d)
					}.createDelegate(this)
				},
				deleteDiag:{
					actionType: 'delete',
					sectionCode: 'DiagList',
					handler: function(e, c, d) {
						form.openDiagSpecEditWindow('delete',d)
					}.createDelegate(this)
				},
				print: {
					actionType: 'view',
					sectionCode: 'DiagList',
					handler: function(e, c, d) {
						this.printHtml(d.section_id);
					}.createDelegate(this)
				}
			},
			EvnStickOpenInfo: {
				print: {
					actionType: 'view',
					sectionCode: 'EvnStickOpenInfo',
					handler: function(e, c, d) {
						this.printHtml(d.section_id);
					}.createDelegate(this)
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnStickOpenInfo',
					handler: function(e, c, d) {
						this.openEvnStickEditWindow('edit', d);
					}.createDelegate(this)
				},
				openWorkReleaseCalculation: {
					actionType: 'view',
					sectionCode: 'EvnStickOpenInfo',
					handler: function(e, c, d) {
						var params = {Person_id: form.Person_id};

						getWnd('swEvnStickWorkReleaseCalculationWindow').show(params);
					}.createDelegate(this)
				}
			},
            PersonOnkoProfileInfo: {
                add: {
                    actionType: 'add',
                    sectionCode: 'PersonOnkoProfileList',
                    handler: function(e, c, d) {
						var me = this;
						if (me.addMenu) {
							me.addMenu.destroy();
							me.addMenu = null;
						}
						me.d = d;
						me.addMenu = new Ext.menu.Menu();
						me.addMenu.add({
							text: 'Онкоконтроль',
							value: 'Онкоконтроль',
							handler: function() {
								sw.Promed.PersonOnkoProfile.openEditWindow('add', {
									Person_id: d.object_id,
									ReportType: 'onko'
								}, function() {
									form.reloadViewForm({
										section_code: 'PersonOnkoProfileInfo',
										object_key: 'Person_id',
										object_value: d.object_id,
										parent_object_key: 'Person_id',
										parent_object_value: d.object_id,
										section_id: 'PersonOnkoProfileInfo_' + d.object_id
									});
								});
							}.createDelegate(this)
						});
						me.addMenu.add({
							text: 'Паллиативная помощь',
							value: 'Паллиативная помощь',
							hidden: getRegionNick() == 'kz',
							handler: function() {
								sw.Promed.PersonOnkoProfile.openEditWindow('add', {
									Person_id: d.object_id,
									ReportType: 'palliat'
								}, function() {
									form.reloadViewForm({
										section_code: 'PersonOnkoProfileInfo',
										object_key: 'Person_id',
										object_value: d.object_id,
										parent_object_key: 'Person_id',
										parent_object_value: d.object_id,
										section_id: 'PersonOnkoProfileInfo_' + d.object_id
									});
								});
							}
						});
						me.addMenu.add({
							text: 'Возраст не помеха',
							value: 'Возраст не помеха',
							hidden: !(getRegionNick() != 'kz' && form.PersonInfoFrame.getFieldValue('Person_Age') >= 60),
							handler: function() {
								sw.Promed.PersonOnkoProfile.openEditWindow('add', {
									Person_id: d.object_id,
									ReportType: 'geriatrics'
								}, function() {
									form.reloadViewForm({
										section_code: 'PersonOnkoProfileInfo',
										object_key: 'Person_id',
										object_value: d.object_id,
										parent_object_key: 'Person_id',
										parent_object_value: d.object_id,
										section_id: 'PersonOnkoProfileInfo_' + d.object_id
									});
								});
							}
						});
						me.addMenu.add({
							text: 'Регистр БСК',
							value: 'Регистр БСК',
							hidden: getRegionNick() == 'kz',
							handler: function() {
								var form = Ext.getCmp('PersonEmkForm');
								var loadMask = new Ext.LoadMask(form.getEl(), {msg: "Проверка пациента в регистре БСК"});
								loadMask.show();
								Ext.Ajax.request({
									params: {
										Person_id: form.Person_id
									},
									callback: function(options, success, response) {
										loadMask.hide();
										var response_obj = Ext.util.JSON.decode(response.responseText);
										if(success) {
											if(response_obj.length > 0) {
												getWnd('personBskRegistryDataWindow').show({Person_id: form.Person_id});
											} else {
												var paramsPersonInfo = {
													Person_id: form.Person_id
													,PersonEvn_id: form.PersonEvn_id
													,Server_id: form.Server_id
													,Person_Firname: form.Person_Firname
													,Person_Secname: form.Person_Secname
													,Person_Surname: form.Person_Surname
													,Person_Birthday: form.Person_Birthday
												}
												getWnd('swBskRegistryWindow').show({userMedStaffFact: form.userMedStaffFact, person: paramsPersonInfo});
												showSysMsg('Пациент отсутствует в Регистре БСК');
											}
										}
									},
									url: '/?c=BSK_Register_User&m=checkPersonInRegisterforEMK'
								});
							}
						});
						me.addMenu.add({
							text: 'Предварительное анкетирование',
							value: 'Предварительное анкетирование',
							hidden: getRegionNick() != 'kz',
							handler: function() {
								sw.Promed.PersonOnkoProfile.openEditWindow('add', {
									Person_id: d.object_id,
									ReportType: 'previzit'
								}, function() {
									form.reloadViewForm({
										section_code: 'PersonOnkoProfileInfo',
										object_key: 'Person_id',
										object_value: d.object_id,
										parent_object_key: 'Person_id',
										parent_object_value: d.object_id,
										section_id: 'PersonOnkoProfileInfo_' + d.object_id
									});
								});
							}.createDelegate(this)
						});
						var btnEl = Ext.get(d.object +'_'+d.object_id+'_add');
						me.addMenu.show(btnEl);
                    }
                },
                del:{
                    actionType: 'delete',
                    sectionCode: 'PersonOnkoProfile',
                    handler: function(e, c, d) {
						var data = form.getObjectData(d.object,d.object_id);
						
						switch(data.ReportType) {
							case 'repositoryobserv':
								form.deleteEvent('RepositoryObserv', d);
								break;
							default:
								sw.Promed.PersonOnkoProfile.doDelete(d.object_id, form, function() {
									form.reloadViewForm({
										section_code: 'PersonOnkoProfileInfo',
										object_key: 'Person_id',
										object_value: form.Person_id,
										parent_object_key: 'Person_id',
										parent_object_value: form.Person_id,
										section_id: 'PersonOnkoProfileInfo_' + form.Person_id
									});
								}, data.ReportType);
								break;
						}
                    }
                },
                edit: {
                    actionType: 'edit',
                    sectionCode: 'PersonOnkoProfile',
                    handler: function(e, c, d) {
						var data = form.getObjectData(d.object,d.object_id);
						sw.Promed.PersonOnkoProfile.openEditWindow('edit', {
							Person_id: form.Person_id,
							ReportType: data.ReportType,
							PersonOnkoProfile_id: d.object_id
						}, function() {
							form.reloadViewForm({
								section_code: 'PersonOnkoProfileInfo',
								object_key: 'Person_id',
								object_value: form.Person_id,
								parent_object_key: 'Person_id',
								parent_object_value: form.Person_id,
								section_id: 'PersonOnkoProfileInfo_' + form.Person_id
							});
						});
                    }
                },
                view: {
                    actionType: 'view',
                    sectionCode: 'PersonOnkoProfile',
                    handler: function(e, c, d) {
						var data = form.getObjectData(d.object,d.object_id);
						switch(data.ReportType) {
							case 'repositoryobserv':
								form.openRepositoryObservEditWindow('view', d);
								break;
							case 'registrBSK':
								var BSKObject_id = '';
								switch (data.PersonProfileType_Name) {
									case "БСК: Скрининг":
										BSKObject_id = 2;
										break;
									case "БСК: Ишемическая болезнь сердца":
										BSKObject_id = 12;
										break;
									case "БСК: Артериальная гипертензия":
										BSKObject_id = 10;
										break;
									case "БСК: Легочная гипертензия":
										BSKObject_id = 9;
										break;
								}
								var params = {
									Person_id: form.Person_id,
									BSKRegistry_id: data.PersonOnkoProfile_id,
									BSKObject_id: BSKObject_id
								};

								getWnd('personBskRegistryDataWindow').show(params);
								break;
							default:
								sw.Promed.PersonOnkoProfile.openEditWindow('view', {
									Person_id: form.Person_id,
									ReportType: data.ReportType,
									PersonOnkoProfile_id: d.object_id
								});
								break;
						}
                    }
                },
                print: {
                    actionType: 'view',
                    sectionCode: 'PersonOnkoProfile',
                    handler: function(e, c, d) {
                        sw.Promed.PersonOnkoProfile.doPrint(form.Person_id, d.object_id, form.PersonInfoFrame.getFieldValue('Sex_id'));
                    }
                },
				addNotify: {
					actionType: 'add',
					sectionCode: 'PalliatNotifyList',
					handler: function(e, c, d) {
						getWnd('swEvnNotifyRegisterPalliatEditWindow').show({
							action: 'add',
							formParams: {
								Person_id: form.Person_id
							},
							callback: function() {
								form.reloadViewForm({
									section_code: 'PersonOnkoProfileInfo',
									object_key: 'Person_id',
									object_value: form.Person_id,
									parent_object_key: 'Person_id',
									parent_object_value: form.Person_id,
									section_id: 'PersonOnkoProfileInfo_' + form.Person_id
								});
							}
						});
					}
				},
				viewNotify: {
					actionType: 'view',
					sectionCode: 'PalliatNotify',
					handler: function(e, c, d) {
						var PalliatNotify_id = d.object_id;
						getWnd('swEvnNotifyRegisterPalliatEditWindow').show({
							action: 'view',
							formParams: {
								Person_id: form.Person_id,
								PalliatNotify_id: PalliatNotify_id
							}
						});
					}
				},
				editNotify: {
					actionType: 'edit',
					sectionCode: 'PalliatNotify',
					handler: function(e, c, d) {
						var PalliatNotify_id = d.object_id;
						getWnd('swEvnNotifyRegisterPalliatEditWindow').show({
							action: 'edit',
							formParams: {
								Person_id: form.Person_id,
								PalliatNotify_id: PalliatNotify_id
							},
							callback: function() {
								form.reloadViewForm({
									section_code: 'PersonOnkoProfileInfo',
									object_key: 'Person_id',
									object_value: form.Person_id,
									parent_object_key: 'Person_id',
									parent_object_value: form.Person_id,
									section_id: 'PersonOnkoProfileInfo_' + form.Person_id
								});
							}
						});
					}
				},
				delNotify: {
					actionType: 'edit',
					sectionCode: 'PalliatNotify',
					handler: function(e, c, d) {
						var PalliatNotify_id = d.object_id;
						var delMessage = langs('Удалить выбранное извещение?');
						sw.swMsg.show({
							icon: Ext.MessageBox.QUESTION,
							msg: delMessage,
							title: langs('Подтверждение'),
							buttons: Ext.Msg.YESNO,
							fn: function(buttonId, text, obj) {
								if ('yes' == buttonId) {
									var loadMask = new Ext.LoadMask(form.getEl(), {msg: "Удаление записи..."});
									loadMask.show();

									Ext.Ajax.request({
										url: '/?c=EvnNotifyPalliat&m=delete',
										params: {
											PalliatNotify_id: PalliatNotify_id
										},
										failure: function(response, options) {
											loadMask.hide();
											Ext.Msg.alert(langs('Ошибка'), langs('При удалении произошла ошибка!'));
										},
										success: function(response, action) {
											loadMask.hide();
											if (response.responseText) {
												var answer = Ext.util.JSON.decode(response.responseText);
												if (answer.success) {
													form.reloadViewForm({
														section_code: d.object,
														object_key: 'Person_id',
														object_value: form.Person_id,
														parent_object_key: 'Person_id',
														parent_object_value: form.Person_id,
														section_id: 'PersonOnkoProfileInfo__' + form.Person_id
													});
												}
											} else {
												Ext.Msg.alert(langs('Ошибка'), langs('Ошибка при удалении! Отсутствует ответ сервера.'));
											}
										}
									});
								}
							}
						});
					}
				}
            },
			PersonSvidInfo: {
				view: {
					actionType: 'view',
					sectionCode: 'PersonSvidInfo',
					handler: function(e, c, d) {
						var svid_data = form.getObjectData(d.object,d.object_id)
						//form.openPersonDispEditWindow('edit', d);
						var PersonSvid_id = svid_data.PersonSvid_id;
						var formParams = new Object();
						var svidWindow = '';
						if(svid_data.PersonSvidType_Code == 'birth'){
							svidWindow = 'swMedSvidBirthEditWindow';
							formParams.BirthSvid_id = PersonSvid_id
						}
						if(svid_data.PersonSvidType_Code == 'death'){
							svidWindow = 'swMedSvidDeathEditWindow';
							formParams.DeathSvid_id = PersonSvid_id
						}
						if(svid_data.PersonSvidType_Code == 'pntdeath'){
							svidWindow = 'swMedSvidPntDeathEditWindow';
							formParams.PntDeathSvid_id = PersonSvid_id
						}
						getWnd(svidWindow).show({
							action: 'view',
							formParams: formParams
						});
					}.createDelegate(this)
				}
			},
			PersonDispInfo: {
				print: {
					actionType: 'view',
					sectionCode: 'PersonDispInfo',
					handler: function(e, c, d) {
						this.printHtml(d.section_id);
					}.createDelegate(this)
				},
				printitem: {
					actionType: 'view',
					sectionCode: 'PersonDispInfo',
					handler: function(e, c, d) {
						// this.printHtml(d.section_id);
						var formParams = form.getObjectData(d.object,d.object_id);
						if (formParams.PersonDisp_id) {
							printBirt({
								'Report_FileName': 'PersonDispCard.rptdesign',
								'Report_Params': '&paramPersonDisp=' + formParams.PersonDisp_id,
								'Report_Format': 'pdf'
							});
						}
					}.createDelegate(this)
				},
				add: {
					actionType: 'add',
					sectionCode: 'PersonDispInfoList',
					handler: function(e, c, d) {
						form.openPersonDispEditWindow('add', d);
					}.createDelegate(this)
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'PersonDispInfo',
					handler: function(e, c, d) {
						form.openPersonDispEditWindow('edit', d);
					}.createDelegate(this)
				}
			},
			EvnPLDispInfo: {
				print: {
					actionType: 'view',
					sectionCode: 'EvnPLDispInfo',
					handler: function(e, c, d) {
						this.printHtml(d.section_id);
					}.createDelegate(this)
				},
				view: {
					actionType: 'view',
					sectionCode: 'EvnPLDispInfo',
					handler: function(e, c, d) {
						form.openEvnPLDispEditWindow('view', d);
					}.createDelegate(this)
				}
			},
			EvnPLDispAdult: {
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispAdult',
					handler: function(e, c, d) {
						form.openEvnPLDispEditWindow('edit', d);
					}.createDelegate(this)
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'EvnDiagDopDispList',
					handler: function(e, c, d) {
						var id = 'EvnDiagDopDispTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			EvnPLDispChild: {
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispChild',
					handler: function(e, c, d) {
						form.openEvnPLDispEditWindow('edit', d);
					}.createDelegate(this)
				},
				print: {
					actionType: 'print',
					sectionCode: 'EvnPLDispChild',
					handler: function(e, c, d) {
						form.printEvnPLDisp(d);
					}.createDelegate(this)
				},
				toggleDisplayDiagList: {
					actionType: 'view',
					sectionCode: 'EvnVizitDispList',
					handler: function(e, c, d) {
						var id = 'EvnVizitDispTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				toggleDisplayRecommendList: {
					actionType: 'view',
					sectionCode: 'EvnVizitDispRecommendList',
					handler: function(e, c, d) {
						var id = 'EvnVizitDispRecommendTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			EvnPLDispDop13: {
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13',
					handler: function (e, c, d) {
						form.openEvnPLDispEditWindow('edit', d);
					}.createDelegate(this)
				},
				print: {
					actionType: 'print',
					sectionCode: 'EvnPLDispDop13',
					handler: function (e, c, d) {
						form.printEvnPLDisp(d);
					}.createDelegate(this)
				},
				inputPayType: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('PayType', 'EvnPLDispDop13', d);
					}
				},
				inputConsDate: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('ConsDate', 'EvnPLDispDop13', d);
					}
				},
				inputIsMobile: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('IsMobile', 'EvnPLDispDop13', d);
					}
				},
				inputLpuM: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('LpuM', 'EvnPLDispDop13', d);
					}
				},
				inputIsStenocard: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('IsStenocard', 'EvnPLDispDop13', d);
					}
				},
				inputIsBrain: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('IsBrain', 'EvnPLDispDop13', d);
					}
				},
				inputIsDoubleScan: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('IsDoubleScan', 'EvnPLDispDop13', d);
					}
				},
				inputIsTub: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('IsTub', 'EvnPLDispDop13', d);
					}
				},
				inputIsEsophag: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('IsEsophag', 'EvnPLDispDop13', d);
					}
				},
				inputDiagS: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('DiagS', 'EvnPLDispDop13', d);
					}
				},
				inputIsSmoking: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('IsSmoking', 'EvnPLDispDop13', d);
					}
				},
				inputIsRiskAlco: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('IsRiskAlco', 'EvnPLDispDop13', d);
					}
				},
				inputIsAlcoDepend: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('IsAlcoDepend', 'EvnPLDispDop13', d);
					}
				},
				inputIsLowActiv: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('IsLowActiv', 'EvnPLDispDop13', d);
					}
				},
				inputIsIrrational: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('IsIrrational', 'EvnPLDispDop13', d);
					}
				},
				inputIsShortCons: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('IsShortCons', 'EvnPLDispDop13', d);
					}
				},
				inputIsHypoten: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('IsHypoten', 'EvnPLDispDop13', d);
					}
				},
				inputCardioRiskType: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('CardioRiskType', 'EvnPLDispDop13', d);
					}
				},
				inputIsLipid: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('IsLipid', 'EvnPLDispDop13', d);
					}
				},
				inputIsHypoglyc: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('IsHypoglyc', 'EvnPLDispDop13', d);
					}
				},
				inputDiag: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('Diag', 'EvnPLDispDop13', d);
					}
				},
				inputIsDisp: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('IsDisp', 'EvnPLDispDop13', d);
					}
				},
				inputNeedDopCure: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('NeedDopCure', 'EvnPLDispDop13', d);
					}
				},
				inputIsSanator: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('IsSanator', 'EvnPLDispDop13', d);
					}
				},
				inputRiskType: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('RiskType', 'EvnPLDispDop13', d);
					}
				},
				inputHealthKind: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('HealthKind', 'EvnPLDispDop13', d);
					}
				},
				inputIsEndStage: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('IsEndStage', 'EvnPLDispDop13', d);
					}
				},
				inputIsTwoStage: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						form.createInputArea('IsTwoStage', 'EvnPLDispDop13', d);
					}
				},
				toggleDisplayDataList: {
					actionType: 'view',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						var id = 'EvnPLDispDop13DataListContent_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				toggleDisplayDataList2: {
					actionType: 'view',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						var id = 'EvnPLDispDop13DataList2Content_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				toggleDisplayDataList3: {
					actionType: 'view',
					sectionCode: 'EvnPLDispDop13_data',
					handler: function(e, c, d) {
						var id = 'EvnPLDispDop13DataList3Content_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			DopDispInfoConsent: {
				printmigr: {
					actionType: 'view',
					sectionCode: 'DopDispInfoConsentList',
					handler: function(e, c, d) {
						form.openDopDispInfoConsentPrintMenu(e, d);
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'DopDispInfoConsentList',
					handler: function(e, c, d) {
						var section = 'DopDispInfoConsentList_' + d.object_id;
						var parent_object = Ext.get(section).getAttribute('parent_object');
						var formParams = form.getObjectData(parent_object, d.object_id); // получить данные талона

						var template = '';
						var param = '';
						switch(parseInt(formParams.DispClass_id)) {
							case 1:
							case 2:
								template = 'EvnPLDopDispInfoConsent';
								param = 'paramEvnPLDispDop13';
								break;
							case 5:
								template = 'EvnPLProfInfoConsent';
								param = 'paramEvnPLProf';
								break;
							case 3:
							case 4:
							case 7:
							case 8:
								template = 'EvnPLOrpDispInfoConsent';
								param = 'paramEvnPLOrpDisp';
								break;
							case 6:
							case 9:
							case 10:
							case 11:
							case 12:
								template = 'EvnPLDispTeenInspectionConsent';
								param = 'EvnPLDispTeenInspection';
								break;
						}

						if (template != '') {
							Ext.Msg.show({
								title: 'Вид согласия',
								msg: 'Выберите вид согласия',
								buttons: {
									yes: "От имени пациента",
									no: "От имени законного представителя",
									cancel: "Отмена"
								},
								fn: function (btn) {
									if (btn == 'cancel') {
										return;
									}
									if (btn == 'yes') { //От имени пациента
										printBirt({
											'Report_FileName': template + '.rptdesign',
											'Report_Params': '&' + param + '=' + d.object_id + '&paramDispClass=' + formParams.DispClass_id,
											'Report_Format': 'pdf'
										});
									}
									if (btn == 'no') { //От имени законного представителя
										printBirt({
											'Report_FileName': template + '_Deputy.rptdesign',
											'Report_Params': '&' + param + '=' + d.object_id + '&paramDispClass=' + formParams.DispClass_id,
											'Report_Format': 'pdf'
										});
									}
								}
							});
						}
					}
				},
				save: {
					actionType: 'edit',
					sectionCode: 'DopDispInfoConsentList',
					handler: function(e, c, d) {

						//убрал отсюда в функцию, ибо используется еще кое-где
						form.saveDopDispInfoConsentList(d.object_id);
					}
				},
				inputsave: {
					actionType: 'edit',
					sectionCode: 'DopDispInfoConsent',
					handler: function(e, c, d) {
						var formParams = form.getObjectData(d.object,d.object_id);
						if (formParams.parent_object == 'EvnPLDispDriver') {
							if (!c.checked) {return false;}
							if (!Ext.get('DopDispInfoConsent_'+d.object_id+'_inputIsEarliersave').isVisible()) {return false;}
							Ext.get('DopDispInfoConsent_'+d.object_id+'_inputIsEarliersave').dom.checked = false;
							return false;
						}
						Ext.Ajax.request({
							url: '/?c=EvnPLDispMigrant&m=updateDopDispInfoConsent',
							params: {
								EvnPLDispMigrant_id: formParams.parent_object_id,
								DopDispInfoConsent_id: d.object_id,
								DopDispInfoConsent_IsAgree: c.checked ? 2 : 1
							},
							failure: function(response, options) {
								
							},
							success: function(response, action) {
								if (response.responseText) {
									var answer = Ext.util.JSON.decode(response.responseText);
									if (answer.success && answer.DopDispInfoConsent_id) {
										form.loadNodeViewForm(form.Tree.getSelectionModel().selNode)
										/*var reload_params = {
											section_code: 'EvnUslugaDispDop',
											object_key: 'DopDispInfoConsent_id',
											object_value: answer.DopDispInfoConsent_id,
											parent_object: 'EvnPLDispMigrant',
											parent_object_key: 'EvnPLDisp_id',
											parent_object_value: formParams.parent_object_id,
											section_id: 'EvnUslugaDispDopList_'+ formParams.parent_object_id
										};
										form.reloadViewForm(reload_params);*/
									}
								}
							}
						});
					}
				},
				inputIsEarliersave: {
					actionType: 'edit',
					sectionCode: 'DopDispInfoConsent',
					handler: function(e, c, d) {
						if (!c.checked) {return false;}
						Ext.get('DopDispInfoConsent_'+d.object_id+'_inputsave').dom.checked = false;
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'DopDispInfoConsentList',
					handler: function(e, c, d) {
						var id = 'DopDispInfoConsentTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			EvnDiagAndRecomendation: {
				view: {
					actionType: 'view',
					sectionCode: 'EvnDiagAndRecomendation',
					handler: function(e, c, d) {
						var formParams = form.getObjectData(d.object,d.object_id);
						var params = {
							Diag_id: formParams.Diag_id,
							FormDataJSON: formParams.FormDataJSON
						};
						form.openForm('swEvnDiagAndRecomendationEditWindow', 'XXX_id', params, 'view');
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnDiagAndRecomendation',
					handler: function(e, c, d) {
						var formParams = form.getObjectData(d.object,d.object_id);
						var params = {
							Diag_id: formParams.Diag_id,
							FormDataJSON: formParams.FormDataJSON,
							callback: function(FormDataJSON) {
								form.getLoadMask('Сохранение рекомендаций').show();
								// сохраняем на сервере
								Ext.Ajax.request({
									url: '/?c=EvnPLDispTeenInspection&m=saveEvnDiagAndRecomendation',
									params: {
										FormDataJSON: FormDataJSON,
										EvnVizitDispDop_id: d.object_id
									},
									failure: function(response, options)
									{
										form.getLoadMask().hide();
									},
									success: function(response, action)
									{
										form.getLoadMask().hide();

										var reload_params = {
											section_code: 'EvnDiagAndRecomendation',
											object_key: 'EvnVizitDispDop_id',
											object_value: d.object_id,
											parent_object: formParams.parent_object,
											parent_object_key: 'EvnVizitDispDop_pid',
											parent_object_value: formParams.parent_object_id,
											section_id: 'EvnDiagAndRecomendationList_'+ formParams.parent_object_id
										};
										form.reloadViewForm(reload_params);
									}
								});
							}
						};
						form.openForm('swEvnDiagAndRecomendationEditWindow', 'XXX_id', params, 'edit');
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'EvnDiagAndRecomendationList',
					handler: function(e, c, d) {
						var id = 'EvnDiagAndRecomendationTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			EvnUslugaDispDop: {
				openDirActionMenu: {
					actionType: 'view',
					sectionCode: 'EvnUslugaDispDop',
					handler: function(e, c, d) {
						form.openDirActionMenu(e, d, 'EvnUslugaDispDop');
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'EvnUslugaDispDopList',
					handler: function(e, c, d) {
						window.open('/?c=EvnPLDisp&m=printEvnPLDisp&EvnPLDisp_id=' + d.object_id);
					}
				},
				add: { // добавление назначения
					actionType: 'add',
					sectionCode: 'EvnUslugaDispDop',
					handler: function(e, c, d) {
						d.menu = false;
						form.addPrescriptionDisp(d, 'EvnUslugaDispDop');
					}
				},
				view: {
					actionType: 'view',
					sectionCode: 'EvnUslugaDispDop',
					handler: function(e, c, d) {
						form.openEvnUslugaDispDopEditWindow('view', d);
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnUslugaDispDop',
					handler: function(e, c, d) {
						form.openEvnUslugaDispDopEditWindow('edit', d);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'EvnUslugaDispDopList',
					handler: function(e, c, d) {
						var id = 'EvnUslugaDispDopTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
                viewdir: {
                    actionType: 'view',
                    sectionCode: 'EvnUslugaDispDop',
                    handler: function(e, c, d) {
                        form.openEvnDirectionEditWindow('editpaytype',d);
                    }
                },
                xml: {
                    actionType: 'view',
                    sectionCode: 'EvnUslugaDispDop',
                    handler: function(e, c, d) {
                        form.openEvnXmlViewWindow('EvnUslugaDispDop',d);
                    }
                }
			},
			EvnPrescrDispDop: {
				openDirActionMenu: {
					actionType: 'view',
					sectionCode: 'EvnPrescrDispDop',
					handler: function(e, c, d) {
						form.openDirActionMenu(e, d, 'EvnPrescrDispDop');
					}
				},
				add: { // добавление назначения
					actionType: 'add',
					sectionCode: 'EvnPrescrDispDop',
					handler: function(e, c, d) {
						d.menu = false;
						form.addPrescriptionDisp(d, 'EvnPrescrDispDop');
					}
				},
				viewdir: {
					actionType: 'view',
					sectionCode: 'EvnPrescrDispDop',
					handler: function(e, c, d) {
						form.openEvnDirectionEditWindow('editpaytype',d);
					}
				},
				xml: {
					actionType: 'view',
					sectionCode: 'EvnPrescrDispDop',
					handler: function(e, c, d) {
						form.openEvnXmlViewWindow('EvnUslugaDispDop',d);
					}
				}
			},
			EvnUslugaDispOrp: {
				view: {
					actionType: 'view',
					sectionCode: 'EvnUslugaDispOrp',
					handler: function(e, c, d) {
						form.openEvnUslugaDispOrpEditWindow('view', d);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'EvnUslugaDispOrpList',
					handler: function(e, c, d) {
						var id = 'EvnUslugaDispOrpTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			EvnVizitDispOrp: {
				view: {
					actionType: 'view',
					sectionCode: 'EvnVizitDispOrp',
					handler: function(e, c, d) {
						form.openEvnVizitDispOrpEditWindow('view', d);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'EvnVizitDispOrpList',
					handler: function(e, c, d) {
						var id = 'EvnVizitDispOrpTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			ProphConsult: {
				add: {
					actionType: 'add',
					sectionCode: 'ProphConsultList',
					handler: function(e, c, d) {
						var params = {
							EvnPLDisp_id: d.object_id,
							callback: function() {
								var reload_params = {
									section_code: 'ProphConsult',
									object_key: 'ProphConsult_id',
									object_value: 111222333,
									parent_object_key: 'EvnPLDisp_id',
									parent_object_value: d.object_id,
									section_id: 'ProphConsultList_'+ d.object_id
								};
								form.reloadViewForm(reload_params);
							}
						};
						form.openForm('swProphConsultEditForm', 'XXX_id', params, 'add');
					}
				},
				view: {
					actionType: 'view',
					sectionCode: 'ProphConsult',
					handler: function(e, c, d) {
						var params = {
							ProphConsult_id: d.object_id
						};
						form.openForm('swProphConsultEditForm', 'XXX_id', params, 'view');
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'ProphConsult',
					handler: function(e, c, d) {
						var formParams = form.getObjectData(d.object,d.object_id);
						var params = {
							ProphConsult_id: d.object_id,
							callback: function() {
								var reload_params = {
									section_code: 'ProphConsult',
									object_key: 'ProphConsult_id',
									object_value: d.object_id,
									parent_object_key: 'EvnPLDisp_id',
									parent_object_value: formParams.EvnPLDisp_id,
									section_id: 'ProphConsultList_'+ formParams.EvnPLDisp_id
								};
								form.reloadViewForm(reload_params);
							}
						};
						form.openForm('swProphConsultEditForm', 'XXX_id', params, 'edit');
					}
				},
				'delete': {
					actionType: 'del',
					sectionCode: 'ProphConsult',
					handler: function(e, c, d) {
						form.deleteEvent('ProphConsult',d);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'ProphConsultList',
					handler: function(e, c, d) {
						var id = 'ProphConsultTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			NeedConsult: {
				add: {
					actionType: 'add',
					sectionCode: 'NeedConsultList',
					handler: function(e, c, d) {
						var params = {
							EvnPLDisp_id: d.object_id,
							callback: function() {
								var reload_params = {
									section_code: 'NeedConsult',
									object_key: 'NeedConsult_id',
									object_value: 111222333,
									parent_object_key: 'EvnPLDisp_id',
									parent_object_value: d.object_id,
									section_id: 'NeedConsultList_'+ d.object_id
								};
								form.reloadViewForm(reload_params);
							}
						};
						form.openForm('swNeedConsultEditForm', 'XXX_id', params, 'add');
					}
				},
				view: {
					actionType: 'view',
					sectionCode: 'NeedConsult',
					handler: function(e, c, d) {
						var params = {
							NeedConsult_id: d.object_id
						};
						form.openForm('swNeedConsultEditForm', 'XXX_id', params, 'view');
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'NeedConsult',
					handler: function(e, c, d) {
						var formParams = form.getObjectData(d.object,d.object_id);
						var params = {
							NeedConsult_id: d.object_id,
							callback: function() {
								var reload_params = {
									section_code: 'NeedConsult',
									object_key: 'NeedConsult_id',
									object_value: d.object_id,
									parent_object_key: 'EvnPLDisp_id',
									parent_object_value: formParams.EvnPLDisp_id,
									section_id: 'NeedConsultList_'+ formParams.EvnPLDisp_id
								};
								form.reloadViewForm(reload_params);
							}
						};
						form.openForm('swNeedConsultEditForm', 'XXX_id', params, 'edit');
					}
				},
				'delete': {
					actionType: 'del',
					sectionCode: 'NeedConsult',
					handler: function(e, c, d) {
						form.deleteEvent('NeedConsult',d);
					}
				},
				toggleDisplay: {
					actionType: 'del',
					sectionCode: 'NeedConsultList',
					handler: function(e, c, d) {
						var id = 'NeedConsultTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			HeredityDiag: {
				add: {
					actionType: 'add',
					sectionCode: 'HeredityDiagList',
					handler: function(e, c, d) {
						var params = {
							EvnPLDisp_id: d.object_id,
							callback: function() {
								var reload_params = {
									section_code: 'HeredityDiag',
									object_key: 'HeredityDiag_id',
									object_value: 111222333,
									parent_object_key: 'EvnPLDisp_id',
									parent_object_value: d.object_id,
									section_id: 'HeredityDiagList_'+ d.object_id
								};
								form.reloadViewForm(reload_params);
							}
						};
						form.openForm('swHeredityDiagEditForm', 'XXX_id', params, 'add');
					}
				},
				view: {
					actionType: 'view',
					sectionCode: 'HeredityDiag',
					handler: function(e, c, d) {
						var params = {
							HeredityDiag_id: d.object_id
						};
						form.openForm('swHeredityDiagEditForm', 'XXX_id', params, 'view');
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'HeredityDiag',
					handler: function(e, c, d) {
						var formParams = form.getObjectData(d.object,d.object_id);
						var params = {
							HeredityDiag_id: d.object_id,
							callback: function() {
								var reload_params = {
									section_code: 'HeredityDiag',
									object_key: 'HeredityDiag_id',
									object_value: d.object_id,
									parent_object_key: 'EvnPLDisp_id',
									parent_object_value: formParams.EvnPLDisp_id,
									section_id: 'HeredityDiagList_'+ formParams.EvnPLDisp_id
								};
								form.reloadViewForm(reload_params);
							}
						};
						form.openForm('swHeredityDiagEditForm', 'XXX_id', params, 'edit');
					}
				},
				'delete': {
					actionType: 'del',
					sectionCode: 'HeredityDiag',
					handler: function(e, c, d) {
						form.deleteEvent('HeredityDiag',d);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'HeredityDiagList',
					handler: function(e, c, d) {
						var id = 'HeredityDiagTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			EvnDiagDopDispBefore: {
				add: {
					actionType: 'add',
					sectionCode: 'EvnDiagDopDispBeforeList',
					handler: function(e, c, d) {
						var params = {
							EvnPLDisp_id: d.object_id,
							DeseaseDispType_id: 1,
							callback: function() {
								var reload_params = {
									section_code: 'EvnDiagDopDispBefore',
									object_key: 'EvnDiagDopDisp_id',
									object_value: 111222333,
									parent_object_key: 'EvnDiagDopDisp_pid',
									parent_object_value: d.object_id,
									section_id: 'EvnDiagDopDispBeforeList_'+ d.object_id
								};
								form.reloadViewForm(reload_params);
							}
						};
						form.openForm('swEvnDiagDopDispEditForm', 'XXX_id', params, 'add');
					}
				},
				view: {
					actionType: 'view',
					sectionCode: 'EvnDiagDopDispBefore',
					handler: function(e, c, d) {
						var params = {
							EvnDiagDopDisp_id: d.object_id,
							DeseaseDispType_id: 1
						};
						form.openForm('swEvnDiagDopDispEditForm', 'XXX_id', params, 'view');
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnDiagDopDispBefore',
					handler: function(e, c, d) {
						var formParams = form.getObjectData(d.object,d.object_id);
						var params = {
							EvnDiagDopDisp_id: d.object_id,
							DeseaseDispType_id: 1,
							callback: function() {
								var reload_params = {
									section_code: 'EvnDiagDopDispBefore',
									object_key: 'EvnDiagDopDisp_id',
									object_value: d.object_id,
									parent_object_key: 'EvnDiagDopDisp_pid',
									parent_object_value: formParams.EvnDiagDopDisp_pid,
									section_id: 'EvnDiagDopDispBeforeList_'+ formParams.EvnDiagDopDisp_pid
								};
								form.reloadViewForm(reload_params);
							}
						};
						form.openForm('swEvnDiagDopDispEditForm', 'XXX_id', params, 'edit');
					}
				},
				'delete': {
					actionType: 'del',
					sectionCode: 'EvnDiagDopDispBefore',
					handler: function(e, c, d) {
						form.deleteEvent('EvnDiagDopDispBefore',d);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'EvnDiagDopDispBeforeList',
					handler: function(e, c, d) {
						var id = 'EvnDiagDopDispBeforeTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			EvnDiagDopDispAndRecomendation: {
				add: {
					actionType: 'add',
					sectionCode: 'EvnDiagDopDispAndRecomendationList',
					handler: function(e, c, d) {
						var params = {
							EvnDiagDopDisp_pid: d.object_id,
							callback: function() {
								var reload_params = {
									section_code: 'EvnDiagDopDispAndRecomendation',
									object_key: 'EvnDiagDopDisp_id',
									object_value: 111222333,
									parent_object_key: 'EvnDiagDopDisp_pid',
									parent_object_value: d.object_id,
									section_id: 'EvnDiagDopDispAndRecomendationList_'+ d.object_id
								};
								form.reloadViewForm(reload_params);
							}
						};
						form.openForm('swEvnDiagDopDispAndRecomendationEditWindow', 'XXX_id', params, 'add');
					}
				},
				view: {
					actionType: 'view',
					sectionCode: 'EvnDiagDopDispAndRecomendation',
					handler: function(e, c, d) {
						var params = {
							EvnDiagDopDisp_id: d.object_id
						};
						form.openForm('swEvnDiagDopDispAndRecomendationEditWindow', 'XXX_id', params, 'view');
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnDiagDopDispAndRecomendation',
					handler: function(e, c, d) {
						var formParams = form.getObjectData(d.object,d.object_id);
						var params = {
							EvnDiagDopDisp_id: d.object_id,
							callback: function() {
								var reload_params = {
									section_code: 'EvnDiagDopDispAndRecomendation',
									object_key: 'EvnDiagDopDisp_id',
									object_value: d.object_id,
									parent_object_key: 'EvnDiagDopDisp_pid',
									parent_object_value: formParams.EvnDiagDopDisp_pid,
									section_id: 'EvnDiagDopDispAndRecomendationList_'+ formParams.EvnDiagDopDisp_pid
								};
								form.reloadViewForm(reload_params);
							}
						};
						form.openForm('swEvnDiagDopDispAndRecomendationEditWindow', 'XXX_id', params, 'edit');
					}
				},
				'delete': {
					actionType: 'del',
					sectionCode: 'EvnDiagDopDispAndRecomendation',
					handler: function(e, c, d) {
						form.deleteEvent('EvnDiagDopDispAndRecomendation',d);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'EvnDiagDopDispAndRecomendationList',
					handler: function(e, c, d) {
						var id = 'EvnDiagDopDispAndRecomendationTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			EvnDiagDopDispFirst: {
				add: {
					actionType: 'add',
					sectionCode: 'EvnDiagDopDispFirstList',
					handler: function(e, c, d) {
						var params = {
							EvnPLDisp_id: d.object_id,
							DeseaseDispType_id: 2,
							callback: function() {
								var reload_params = {
									section_code: 'EvnDiagDopDispFirst',
									object_key: 'EvnDiagDopDisp_id',
									object_value: 111222333,
									parent_object_key: 'EvnDiagDopDisp_pid',
									parent_object_value: d.object_id,
									section_id: 'EvnDiagDopDispFirstList_'+ d.object_id
								};
								form.reloadViewForm(reload_params);
							}
						};
						form.openForm('swEvnDiagDopDispEditForm', 'XXX_id', params, 'add');
					}
				},
				view: {
					actionType: 'view',
					sectionCode: 'EvnDiagDopDispFirst',
					handler: function(e, c, d) {
						var params = {
							EvnDiagDopDisp_id: d.object_id,
							DeseaseDispType_id: 2
						};
						form.openForm('swEvnDiagDopDispEditForm', 'XXX_id', params, 'view');
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnDiagDopDispFirst',
					handler: function(e, c, d) {
						var formParams = form.getObjectData(d.object,d.object_id);
						var params = {
							EvnDiagDopDisp_id: d.object_id,
							DeseaseDispType_id: 2,
							callback: function() {
								var reload_params = {
									section_code: 'EvnDiagDopDispFirst',
									object_key: 'EvnDiagDopDisp_id',
									object_value: d.object_id,
									parent_object_key: 'EvnDiagDopDisp_pid',
									parent_object_value: formParams.EvnDiagDopDisp_pid,
									section_id: 'EvnDiagDopDispFirstList_'+ formParams.EvnDiagDopDisp_pid
								};
								form.reloadViewForm(reload_params);
							}
						};
						form.openForm('swEvnDiagDopDispEditForm', 'XXX_id', params, 'edit');
					}
				},
				'delete': {
					actionType: 'del',
					sectionCode: 'EvnDiagDopDispFirst',
					handler: function(e, c, d) {
						form.deleteEvent('EvnDiagDopDispFirst',d);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'EvnDiagDopDispFirstList',
					handler: function(e, c, d) {
						var id = 'EvnDiagDopDispFirstTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			EvnPLDispProf: {
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispProf',
					handler: function (e, c, d) {
						form.openEvnPLDispEditWindow('edit', d);
					}.createDelegate(this)
				},
				print: {
					actionType: 'print',
					sectionCode: 'EvnPLDispProf',
					handler: function (e, c, d) {
						form.printEvnPLDisp(d);
					}.createDelegate(this)
				},
				inputPayType: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispProf_data',
					handler: function(e, c, d) {
						form.createInputArea('PayType', 'EvnPLDispProf', d);
					}
				},
				toggleDisplayDataList: {
					actionType: 'view',
					sectionCode: 'EvnPLDispProf_data',
					handler: function(e, c, d) {
						var id = 'EvnPLDispProfDataListContent_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				toggleDisplayDataList2: {
					actionType: 'view',
					sectionCode: 'EvnPLDispProf_data',
					handler: function(e, c, d) {
						var id = 'EvnPLDispProfDataList2Content_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				toggleDisplayDataList3: {
					actionType: 'view',
					sectionCode: 'EvnPLDispProf_data',
					handler: function(e, c, d) {
						var id = 'EvnPLDispProfDataList3Content_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			EvnPLDispOrp: {
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispOrp',
					handler: function (e, c, d) {
						form.openEvnPLDispEditWindow('edit', d);
					}.createDelegate(this)
				},
				print: {
					actionType: 'print',
					sectionCode: 'EvnPLDispOrp',
					handler: function (e, c, d) {
						form.printEvnPLDisp(d);
					}.createDelegate(this)
				},
				toggleDisplayDopDispInfoConsent: {
					actionType: 'view',
					sectionCode: 'EvnPLDispOrp_data',
					handler: function(e, c, d) {
						var id = 'DopDispInfoConsentTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			EvnPLDispTeenInspection: {
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispTeenInspection',
					handler: function(e, c, d) {
						form.openEvnPLDispEditWindow('edit', d);
					}.createDelegate(this)
				},
				print: {
					actionType: 'print',
					sectionCode: 'EvnPLDispTeenInspection',
					handler: function(e, c, d) {
						form.printEvnPLDisp(d);
					}.createDelegate(this)
				},
				toggleDisplayDopDispInfoConsent: {
					actionType: 'view',
					sectionCode: 'EvnPLDispTeenInspection_data',
					handler: function(e, c, d) {
						var id = 'DopDispInfoConsentTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				toggleDisplayEvnDiagAndRecomendation: {
					actionType: 'view',
					sectionCode: 'EvnPLDispTeenInspection_data',
					handler: function(e, c, d) {
						var id = 'EvnDiagAndRecomendationTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				toggleDisplayEvnUslugaDispDop: {
					actionType: 'view',
					sectionCode: 'EvnUslugaDispDopList',
					handler: function(e, c, d) {
						var id = 'EvnUslugaDispDopTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			EvnPLDispMigrant: {
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispMigrant',
					handler: function(e, c, d) {
						form.openEvnPLDispEditWindow('edit', d);
					}.createDelegate(this)
				},
				inputPayType: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispMigrant_data',
					handler: function(e, c, d) {
						form.createInputArea('PayType', 'EvnPLDispMigrant', d);
					}
				},
				inputConsDate: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispMigrant_data',
					handler: function(e, c, d) {
						form.createInputArea('ConsDate', 'EvnPLDispMigrant', d);
					}
				},
				inputRFDateRange: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispMigrant_data',
					handler: function(e, c, d) {
						form.createInputArea('RFDateRange', 'EvnPLDispMigrant', d);
					}
				},
				inputSertHIVNumber: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispMigrant_data',
					handler: function(e, c, d) {
						form.createInputArea('SertHIVNumber', 'EvnPLDispMigrant', d);
					}
				},
				inputSertInfectNumber: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispMigrant_data',
					handler: function(e, c, d) {
						form.createInputArea('SertInfectNumber', 'EvnPLDispMigrant', d);
					}
				},
				inputSertNarcoNumber: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispMigrant_data',
					handler: function(e, c, d) {
						form.createInputArea('SertNarcoNumber', 'EvnPLDispMigrant', d);
					}
				},
				inputSertHIVDate: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispMigrant_data',
					handler: function(e, c, d) {
						form.createInputArea('SertHIVDate', 'EvnPLDispMigrant', d);
					}
				},
				inputSertInfectDate: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispMigrant_data',
					handler: function(e, c, d) {
						form.createInputArea('SertInfectDate', 'EvnPLDispMigrant', d);
					}
				},
				inputSertNarcoDate: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispMigrant_data',
					handler: function(e, c, d) {
						form.createInputArea('SertNarcoDate', 'EvnPLDispMigrant', d);
					}
				},
				inputIsFinish: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispMigrant_data',
					handler: function(e, c, d) {
						form.createInputArea('IsFinishM', 'EvnPLDispMigrant', d);
					}
				},
				inputResultDispMigrant: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispMigrant_data',
					handler: function(e, c, d) {
						form.createInputArea('ResultDispMigrant', 'EvnPLDispMigrant', d);
					}
				},
				SertHIV_print: {
					actionType: 'print',
					sectionCode: 'EvnPLDispMigrant_data',
					handler: function(e, c, d) {
						printBirt({
							'Report_FileName': 'HIV_Certif.rptdesign',
							'Report_Params': '&paramDispMigrant=' + d.object_id,
							'Report_Format': 'pdf'
						});
					}
				},
				SertInfect_print: {
					actionType: 'print',
					sectionCode: 'EvnPLDispMigrant_data',
					handler: function(e, c, d) {
						printBirt({
							'Report_FileName': 'Migrant_Infection_Conclusion.rptdesign',
							'Report_Params': '&paramEvnPLDispMigrant=' + d.object_id,
							'Report_Format': 'pdf'
						});
					}
				},
				SertNarco_print: {
					actionType: 'print',
					sectionCode: 'EvnPLDispMigrant_data',
					handler: function(e, c, d) {
						printBirt({
							'Report_FileName': 'Migrant_Narco_Conclusion.rptdesign',
							'Report_Params': '&paramEvnPLDispMigrant=' + d.object_id,
							'Report_Format': 'pdf'
						});
					}
				}
			},
			MigrantContact: {
				del: {
					actionType: 'delete',
					sectionCode: 'MigrantContact',
					handler: function(e, c, d) {
						form.deleteMigrantContact(d);
					}.createDelegate(this)
				},
				add: {
					actionType: 'add',
					sectionCode: 'MigrantContactList',
					handler: function(e, c, d) {
						form.addMigrantContact(d);
					}
				},
			},
			EvnPLDispDriver: {
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDriver',
					handler: function(e, c, d) {
						form.openEvnPLDispEditWindow('edit', d);
					}.createDelegate(this)
				},
				inputPayType: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDriver_data',
					handler: function(e, c, d) {
						form.createInputArea('PayType', 'EvnPLDispDriver', d);
					}
				},
				inputConsDate: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDriver_data',
					handler: function(e, c, d) {
						form.createInputArea('ConsDate', 'EvnPLDispDriver', d);
					}
				},
				inputMedSer: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDriver_data',
					handler: function(e, c, d) {
						form.createInputArea('MedSer', 'EvnPLDispDriver', d);
					}
				},
				inputMedNum: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDriver_data',
					handler: function(e, c, d) {
						form.createInputArea('MedNum', 'EvnPLDispDriver', d);
					}
				},
				inputMedDate: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDriver_data',
					handler: function(e, c, d) {
						form.createInputArea('MedDate', 'EvnPLDispDriver', d);
					}
				},
				inputIsFinish: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDriver_data',
					handler: function(e, c, d) {
						form.createInputArea('IsFinishM', 'EvnPLDispDriver', d);
					}
				},
				inputResultDispDriver: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDriver_data',
					handler: function(e, c, d) {
						form.createInputArea('ResultDispDriver', 'EvnPLDispDriver', d);
					}
				},
				checkall: {
					actionType: 'edit',
					sectionCode: 'EvnPLDispDriver_data',
					handler: function(e, c, d) {
						form.DopDispInfoConsentCheckAll('EvnPLDispDriver', c, d);
					}
				}
			},
			ExpertHistory: {
				print: {
					actionType: 'view',
					sectionCode: 'ExpertHistory',
					handler: function(e, c, d) {
						this.printHtml(d.section_id);
					}.createDelegate(this)
				},
				add: {
					actionType: 'add',
					sectionCode: 'ExpertHistoryList',
					handler: function(e, c, d) {
						form.openPersonPrivilegeEditWindow('add', d);
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'ExpertHistory',
					dblClick: true,
					handler: function(e, c, d) {
						if (getRegionNick() == 'perm') {
							var loadMask = new Ext.LoadMask(Ext.get('PersonEmkForm'), { msg: LOAD_WAIT });
							loadMask.show();
							var params = {};
							params.PersonPrivilege_id = d.object_id;
							Ext.Ajax.request({
								params: params,
								callback: function (options, success, response) {
									loadMask.hide();
									var response_obj = Ext.util.JSON.decode(response.responseText)[0];
									if (response_obj.PrivilegeType_SysNick == 'kardio') {						//ДЛО Кардио
										getWnd('swPrivilegeConsentEditWindow').show({
											Person_id: form.Person_id,
											action: 'edit',
											PersonPrivilege_id: d.object_id,
											Privilege_begDate: response_obj.Privilege_begDate,
											Privilege_endDate: response_obj.Privilege_endDate
										});
									} else {
                                        form.openPersonPrivilegeEditWindow('edit', d);
                                    }
								},
								url: '/?c=Privilege&m=loadPrivilegeEditForm'
							});
						} else {
							form.openPersonPrivilegeEditWindow('edit', d);
						}
					}
				}
			},
			EvnPrescrPolka: {
                loadEvnPrescr: {//ok
                    actionType: 'view',
                    sectionCode: 'EvnPrescrPolka',
                    handler: function(e, c, d) {
                        form.loadEvnPrescr(d, 'EvnPrescrPolka');
                    }
                },
                toogleEvnCourse: {//ok
                    actionType: 'view',
                    sectionCode: 'EvnPrescrPolka',
                    handler: function(e, c, d) {
                        form.toogleEvnCourse(d);
                    }
                },
                addPrescription: {//ok
                    actionType: 'add',
                    sectionCode: 'EvnPrescrPolka',
                    handler: function(e, c, d) {
                        form.addPrescription(d, 'EvnPrescrPolka');
                    }
                },
                openPrescrListActionMenu: {//ok
                    actionType: 'add',
                    sectionCode: 'EvnPrescrPolkaList',
                    handler: function(e,c,d) {
                        form.openPrescrListActionMenu(e, d, 'EvnPrescrPolka');
                    }
                },
                openPrescrActionMenu: {//ok
                    actionType: 'view',
                    sectionCode: 'EvnPrescrPolka',
                    handler: function(e, c, d) {
                        form.openPrescrActionMenu(e, d, 'EvnPrescrPolka');
                    }
                },
				openDirActionMenu: {//ok
					actionType: 'view',
					sectionCode: 'EvnPrescrPolka',
					handler: function(e, c, d) {
						form.openDirActionMenu(e, d, 'EvnPrescrPolka');
					}
				},
                xml: {
                    actionType: 'view',
                    sectionCode: 'EvnPrescrPolka',
                    handler: function(e, c, d) {
                        form.openEvnXmlViewWindow('EvnPrescrPolka',d);
                    }
                },
                toggleDisplay: {//ок
                    actionType: 'view',
                    sectionCode: 'EvnPrescrPolkaList',
                    handler: function(e, c, d) {
                        var id = 'EvnPrescrPolkaTable_'+ d.object_id;
                        form.toggleDisplay(id,Ext.get(id).isDisplayed());
                    }
                },
				addBlankDir: {
					actionType: 'edit',
					sectionCode: 'EvnPrescrPolka',
					handler: function(e, c, d) {
						form.openEvnXmlEditWindow('add','EvnPrescrPolka',d);
					}
				},
				editBlankDir: {
					actionType: 'view',
					sectionCode: 'EvnPrescrPolka',
					handler: function(e, c, d) {
						form.openEvnXmlEditWindow('edit','EvnPrescrPolka',d);
					}
				},
                viewdir: {//ок
                    actionType: 'view',
                    sectionCode: 'EvnPrescrPolka',
                    handler: function(e, c, d) {
                        form.openEvnDirectionEditWindow('editpaytype',d);
                    }
                }
			},
			EvnObservGraphs: {
			},
			EvnPrescrPlan: {
				loadEvnPrescr: {//ok
					actionType: 'view',
					sectionCode: 'EvnPrescrPlan',
					handler: function(e, c, d) {
                        form.loadEvnPrescr(d, 'EvnPrescrPlan');
					}
				},
                toogleEvnCourse: {//ok
                    actionType: 'view',
                    sectionCode: 'EvnPrescrPlan',
                    handler: function(e, c, d) {
                        form.toogleEvnCourse(d);
                    }
                },
                toogleEvnCourseTreat: {//ok
                    actionType: 'view',
                    sectionCode: 'EvnPrescrPlan',
                    handler: function(e, c, d) {
                        form.toogleEvnCourseTreat(e, c, d);
                    }
                },
				addPrescription: {//ok
					actionType: 'add',
					sectionCode: 'EvnPrescrPlan',
					handler: function(e, c, d) {
                        form.addPrescription(d, 'EvnPrescrPlan');
					}
				},
				openPrescrListActionMenu: {//ok
					actionType: 'add',
					sectionCode: 'EvnPrescrPlanList',
					handler: function(e,c,d) {
                        form.openPrescrListActionMenu(e, d, 'EvnPrescrPlan');
					}
				},
                openPrescrActionMenu: {//ok
					actionType: 'view',
					sectionCode: 'EvnPrescrPlan',
                    handler: function(e, c, d) {
						form.openPrescrActionMenu(e, d, 'EvnPrescrPlan');
                    }
				},
				openDirActionMenu: {//ok
					actionType: 'view',
					sectionCode: 'EvnPrescrPlan',
					handler: function(e, c, d) {
						form.openDirActionMenu(e, d, 'EvnPrescrPlan');
					}
				},
				addPacketPrescr: {
					actionType: 'add',
					sectionCode: 'EvnPrescrPlanList',
					handler: function(e,c,d) {
                        form.addPacketPrescr(e, d, 'EvnPrescrPlan');
					}
				},
				savePacketPrescr: {
					actionType: 'add',
					sectionCode: 'EvnPrescrPlanList',
					handler: function(e,c,d) {
                        form.savePacketPrescr(e, d, 'EvnPrescrPlan');
					}
				},
                xml: {
                    actionType: 'view',
                    sectionCode: 'EvnPrescrPlan',
                    handler: function(e, c, d) {
                        form.openEvnXmlViewWindow('EvnPrescrPlan',d);
                    }
                },
				toggleDisplay: {//ок
					actionType: 'view',
					sectionCode: 'EvnPrescrPlanList',
					handler: function(e, c, d) {
						var id = 'EvnPrescrPlanTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				addBlankDir: {
					actionType: 'edit',
					sectionCode: 'EvnPrescrPlan',
					handler: function(e, c, d) {
						form.openEvnXmlEditWindow('add','EvnPrescrPlan',d);
					}
				},
				editBlankDir: {
					actionType: 'view',
					sectionCode: 'EvnPrescrPlan',
					handler: function(e, c, d) {
						form.openEvnXmlEditWindow('edit','EvnPrescrPlan',d);
					}
				},
                viewdir: {//ок
                    actionType: 'view',
                    sectionCode: 'EvnPrescrPlan',
                    handler: function(e, c, d) {
                        form.openEvnDirectionEditWindow('editpaytype',d);
                    }
				}
			},
			EvnSection: {
				toggleDisplayEvnObservGraphs: {
					actionType: 'view',
					sectionCode: 'EvnSection_data',
					handler: function(e, c, d) {
						form.toggleDisplayEvnObservGraphs(d);
					}
				},
				// Печатная форма графиков
				printEvnObservGraphs: {
					actionType: 'view',
					sectionCode: 'EvnSection_data',
					handler: function(e, c, d) {
						form.openPrintDoc('/?c=EvnPrescr&m=printEvnObservGraphs&EvnObserv_pid=' + d.object_id );
					}
				},
				inputKsg: {
                    actionType: 'edit',
                    sectionCode: 'EvnSection_data',
                    dblClick: false,
                    handler: function(e, c, d) {
                        form.createInputArea('Ksg', 'EvnSection', d);
                    }
                },
                inputUslugaComplex: {
                    actionType: 'edit',
                    sectionCode: 'EvnSection_data',
                    handler: function(e, c, d) {
                        form.createInputArea('UslugaComplex', 'EvnSection', d);
                    }
                },
                inputUslugaComplexTariff: {
                    actionType: 'edit',
                    sectionCode: 'EvnVizitPLStom_data',
                    handler: function(e, c, d) {
                        form.createInputArea('UslugaComplexTariff', 'EvnSection', d);
                    }
                },
				inputFedResultDeseaseType: {
                    actionType: 'edit',
                    sectionCode: 'EvnSection_data',
                    handler: function(e, c, d) {
                        form.createInputArea('FedResultDeseaseType', 'EvnSection', d);
                    }
                },
				inputFedLeaveType: {
                    actionType: 'edit',
                    sectionCode: 'EvnSection_data',
                    handler: function(e, c, d) {
                        form.createInputArea('FedLeaveType', 'EvnSection', d);
                    }
                },
				
				inputRankinScaleEs: {
					actionType: 'edit',
					sectionCode: 'EvnSection_data',
					dblClick: false,
					handler: function(e, c, d) {
						this.createInputArea('RankinScaleEs', 'EvnSection', d);
					}.createDelegate(this)
				},
				inputRankinScaleEsSid: {
					actionType: 'edit',
					sectionCode: 'EvnSection_data',
					dblClick: false,
					handler: function(e, c, d) {
						this.createInputArea('RankinScaleEsSid', 'EvnSection', d);
					}.createDelegate(this)
				},
				inputEsInsultScale: {
					actionType: 'edit',
					sectionCode: 'EvnSection_data',
					dblClick: false,
					handler: function(e, c, d) {
						this.createInputArea('EsInsultScale', 'EvnSection', d);
					}.createDelegate(this)
				},
				inputRehabScale: {
					actionType: 'edit',
					sectionCode: 'EvnSection_data',
					dblClick: false,
					handler: function(e, c, d) {
						this.createInputArea('RehabScale', 'EvnSection', d);
					}.createDelegate(this)
				},
				inputRehabScaleVid: {
					actionType: 'edit',
					sectionCode: 'EvnSection_data',
					dblClick: false,
					handler: function(e, c, d) {
						this.createInputArea('RehabScaleVid', 'EvnSection', d);
					}.createDelegate(this)
				},
				inputLpuSectionProfile: {
                    actionType: 'edit',
                    sectionCode: 'EvnSection_data',
                    dblClick: false,
                    handler: function(e, c, d) {
                        form.createInputArea('LpuSectionProfile_EvnSection', 'EvnSection', d);
                    }
                },
				inputMesRid: {
                    actionType: 'edit',
                    sectionCode: 'EvnSection_data',
                    dblClick: false,
                    handler: function(e, c, d) {
                        form.createInputArea('MesRid', 'EvnSection', d);
                    }
                },
				inputPregnancyEvnPSPeriod: {
					actionType: 'edit',
					sectionCode: 'EvnSection_data',
					dblClick: false,
					handler: function(e, c, d) {
						form.createInputArea('PregnancyEvnPS_Period', 'EvnSection', d);
					}
				},
				inputIsFinish: {
                    actionType: 'edit',
                    sectionCode: 'EvnSection_data',
                    dblClick: false,
                    handler: function(e, c, d) {
                        form.createInputArea('CureResult_id', 'EvnSection', d);
                    }
                },
				showFm: {
					actionType: 'view',
					sectionCode: 'EvnSection',
					handler: function(e, c, d) {
						form.showFm(d);
					}
				},
				showDiagList: {
					actionType: 'view',
					sectionCode: 'EvnSection',
					handler: function(e, c, d) {
						this.showDiagList();
					}.createDelegate(this)
				},
				toggleDisplayMorbusHepatitis: {
					actionType: 'view',
					sectionCode: 'EvnSection',
					handler: function(e, c, d) {
						this.loadSpecific('hepa',d);
					}.createDelegate(this)
				},
				toggleDisplayMorbusProf: {
					actionType: 'view',
					sectionCode: 'EvnSection',
					handler: function(e, c, d) {
						form.loadSpecific('prof',d);
					}
				},
				toggleDisplayMorbusOnko: {
					actionType: 'view',
					sectionCode: 'EvnSection',
					handler: function(e, c, d) {
						this.loadSpecific('onko',d);
					}.createDelegate(this)
				},
				toggleDisplayMorbusCrazy: {
					actionType: 'view',
					sectionCode: 'EvnSection',
					handler: function(e, c, d) {
						this.loadSpecific('crazy',d);
					}.createDelegate(this)
				},
				toggleDisplayMorbusTub: {
					actionType: 'view',
					sectionCode: 'EvnSection',
					handler: function(e, c, d) {
						this.loadSpecific('tub',d);
					}.createDelegate(this)
				},
                toggleDisplayMorbusVener: {
                    actionType: 'view',
                    sectionCode: 'EvnSection',
                    handler: function(e, c, d) {
                        this.loadSpecific('vener',d);
                    }.createDelegate(this)
                },
                toggleDisplayMorbusPalliat: {
                    actionType: 'view',
                    sectionCode: 'EvnSection',
                    handler: function(e, c, d) {
						this.openMorbusPalliat(d);
                    }.createDelegate(this)
                },
                toggleDisplayMorbusGeriatrics: {
                    actionType: 'view',
                    sectionCode: 'EvnSection',
                    handler: function(e, c, d) {
						this.openMorbusGeriatrics(d);
                    }.createDelegate(this)
                },
				addEvnInfectNotify: {
					actionType: 'edit',
					sectionCode: 'EvnSection',
					handler: function(e, c, d) {
						form.addEvnInfectNotify(d);
					}
				},
				addEvnNotifyRegisterIncludeNolos: {
					actionType: 'edit',
					sectionCode: 'EvnSection',
					handler: function(e, c, d) {
						form.addEvnNotifyRegisterInclude('nolos', d);
					}
				},
				addEvnNotifyRegisterIncludeOrphan: {
					actionType: 'edit',
					sectionCode: 'EvnSection',
					handler: function(e, c, d) {
						form.addEvnNotifyRegisterInclude('orphan', d);
					}
				},
                addEvnNotifyHepatitis: {
                    actionType: 'edit',
                    sectionCode: 'EvnSection',
                    handler: function(e, c, d) {
                        form.addEvnNotify(d, 'hepa');
                    }
                },
                addEvnOnkoNotify: {
                    actionType: 'edit',
                    sectionCode: 'EvnSection',
                    handler: function(e, c, d) {
                        form.addEvnNotify(d, 'onko');
                    }
                },
                addEvnNotifyCrazy: {
                    actionType: 'edit',
                    sectionCode: 'EvnSection',
                    handler: function(e, c, d) {
                        form.addEvnNotify(d, 'crazy');
                    }
                },
				addEvnNotifyNarc: {
					actionType: 'edit',
					sectionCode: 'EvnSection',
					handler: function(e, c, d) {
						form.addEvnNotify(d, 'narc');
					}
				},
                addEvnNotifyTub: {
                    actionType: 'edit',
                    sectionCode: 'EvnSection',
                    handler: function(e, c, d) {
                        form.addEvnNotify(d, 'tub');
                    }
                },
                addEvnNotifyVener: {
                    actionType: 'edit',
                    sectionCode: 'EvnSection',
                    handler: function(e, c, d) {
                        form.addEvnNotify(d, 'vener');
                    }
                },
				addEvnNotifyProf: {
					actionType: 'edit',
					sectionCode: 'EvnSection',
					handler: function(e, c, d) {
						form.addEvnNotifyProf(d);
					}
				},
				print:
				{
					actionType: 'view',
					sectionCode: 'EvnSection_data',
					handler: function(e, c, d) {
						var es_data = form.getObjectData('EvnSection',d.object_id)
						var KVS_Type = '';
						var Parent_Code = 0;
						if ( es_data == false )
						{
							return false;
						}
						if (es_data.EvnSection_pid != es_data.EvnSection_id)
						{
							//Выбрано движение в профильном отделении 
							KVS_Type = 'VG';
							Parent_Code = 7;
						}
						else
						{
							//Выбрано движение в приемном отделениии
							Parent_Code = 6;
						}

						var options = {};
						options.EvnPS_id = es_data.EvnSection_pid;
						options.Parent_Code = Parent_Code;
						options.KVS_Type = KVS_Type;
						options.EvnSection_id = es_data.EvnSection_id;
						options.LpuUnitType_SysNick = es_data.LpuUnitType_SysNick;

						btnEl = Ext.get(d.object +'_'+d.object_id+'_print');

						var printMenu = new Ext.menu.Menu();
						printMenu.add({
							text: langs('Печать КВС'),
							iconCls: 'print16',
							handler: function() {
								printEvnPS(options);
							}
						});
						printMenu.add({
							text: langs('Печать КЛУ при ЗНО'),
							iconCls: 'print16',
							handler: function(){
								printControlCardZno(options.EvnSection_id);
							}
						},{
							text: langs('Печать выписки при онкологии'),
							iconCls: 'print16',
							hidden: getRegionNick() != 'ekb',
							handler: function(){
								printControlCardOnko(options.EvnSection_id);
							}
						});

						printMenu.show(btnEl);

					}.createDelegate(this)
				},
				editLeavePriem: {
					actionType: 'edit',
					sectionCode: 'EvnSection_data',
					handler: function(e, c, d) {
						var es_data = form.getObjectData('EvnSection',d.object_id)
						if ( es_data == false )
						{
							return false;
						}
						var action = 'add';
						if (es_data.PrmLeaveType_Code || es_data.PrehospWaifRefuseCause_id || es_data.LpuSectionNEXT_id){
							action = 'edit';
						}
						var params = new Object();
						params.callback = function(data) {
							this.loadNodeViewForm(this.Tree.getNodeById(this.node.id));	
						}.createDelegate(form);
						params.onHide = Ext.emptyFn;						
						params.formParams = new Object();
						// @task https://jira.is-mis.ru/browse/PROMEDWEB-3989
						// добавление необходимых полей в форму для отображения 
						params.formParams.Diag_id = es_data.Diag_id;
						params.formParams.DeseaseType_Name = es_data.DeseaseType_Name;
						/*
						params.formParams.Diag_id = es_data.Diag_id;
						params.formParams.ChildEvn_id = es_data.ChildEvn_id;
						*/
						params.formParams.Person_id = es_data.Person_id;
						params.formParams.PersonEvn_id = es_data.PersonEvn_id;
						params.formParams.Server_id = es_data.Server_id;
						params.formParams.EvnPS_id = es_data.EvnSection_pid;
						params.formParams.EvnPS_IsTransfCall = es_data.EvnPS_IsTransfCall || null;
						params.formParams.EvnPS_OutcomeDate = es_data.EvnPS_OutcomeDate || null;
						params.formParams.LeaveType_prmid = es_data.LeaveType_prmid || null;
						params.formParams.UslugaComplex_id = es_data.UslugaComplex_id || null;
						params.formParams.PrehospWaifRefuseCause_id = es_data.PrehospWaifRefuseCause_id || null;
						params.formParams.LpuSection_id = es_data.LpuSectionNEXT_id || null;
						params.formParams.LpuSection_pid = es_data.LpuSection_id;
						params.formParams.PrehospArrive_id = es_data.PrehospArrive_id;
						params.formParams.PrehospArrive_SysNick = es_data.PrehospArrive_SysNick;
						params.formParams.PrehospType_id = es_data.PrehospType_id;
						params.formParams.PrehospType_SysNick = es_data.PrehospType_SysNick;
						params.formParams.MedPersonal_pid = es_data.MedPersonal_id;
						params.formParams.MedStaffFact_pid = es_data.MedStaffFact_id;
						params.formParams.FedMedSpec_id = es_data.FedMedSpec_id;
						//только для Карелии
						params.formParams.ResultClass_id = es_data.ResultClass_id || null;
						params.formParams.ResultDeseaseType_id = es_data.ResultDeseaseType_id || null;
						form.openForm('swLeavePriemEditWindow','XXX_id',params,action,langs('Исход пребывания в приемном отделении'));
					}
				},
				delLeave: {
					actionType: 'edit',
					sectionCode: 'EvnSection_data',
					handler: function(e, c, d) {
						var es_data = form.getObjectData('EvnSection',d.object_id)
						if ( es_data == false || es_data.IsSigned == 2) return false;
						return sw.Promed.Leave.deleteLeave({
							EvnSection_id: es_data.EvnSection_id,
							ownerWindow: form,
							callback: function(){
								form.requireCheckChange = false;
								form.loadTreeNode({
									node: form.node.parentNode,
									selectById: form.node.id,
									callback: function(tl,n){
										form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
									}
								});
							}
						});
					}
				},
				signLeave: {
					actionType: 'edit',
					sectionCode: 'EvnSection_data',
					handler: function(e, c, d) {
						var es_data = form.getObjectData('EvnSection',d.object_id)
						if ( es_data == false)
						{
							return false;
						}
						//log(es_data);
						var conf = {
								LeaveEvent_pid: es_data.EvnSection_id,
								LeaveEvent_rid: es_data.EvnSection_pid,
								LeaveEvent_id: es_data.Leave_id,
								LeaveType_id: es_data.LeaveType_id,
								LeaveType_Code: es_data.LeaveType_Code,
								parentClass: 'EvnSection',
								ownerWindow: form,
								callback: function(){
									form.requireCheckChange = false;
									form.loadTreeNode({
										node: form.node.parentNode,
										selectById: form.node.id,
										callback: function(tl,n){				
											form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
										}
									});
								}
							};
						
						if (es_data.IsSigned == 2) {
							sw.Promed.Leave.doSign(conf); // отмена подписания
						} else {
							sw.Promed.Leave.sign(conf);
						}
					}
				},
				addLeave: {
					actionType: 'edit',
					sectionCode: 'EvnSection_data',
					handler: function(e, c, d) {
						var es_data = form.getObjectData('EvnSection',d.object_id);
						if ( es_data == false ) {
							return false;
						}
                        var field, link, output = {
                            links: {}
                        };
                        if (!es_data.MedPersonal_id || !es_data.MedPersonal_Fio) {
                            output.msg = langs('Необходимо указать MedPersonal!');
                            output.links['MedPersonal'] = {
                                link: langs('лечащего врача'),
                                onclick: function(e, link, msg) {
                                    sw.Promed.MedPersonal.getMenu({
                                        LpuSection_id: es_data.LpuSection_id,
                                        id: 'ListMenuMedPersonal',
                                        getParams: function(){
                                            var params = {};
                                            params.LpuSection_id = es_data.LpuSection_id;
                                            params.EvnSection_id = es_data.EvnSection_id;
                                            params.EvnSection_pid = es_data.EvnSection_pid;
                                            params.Person_id = es_data.Person_id;
                                            params.PersonEvn_id = es_data.PersonEvn_id;
                                            params.Server_id = es_data.Server_id;
                                            params.MedPersonalCur_id = es_data.MedPersonal_id;
                                            return params;
                                        },
                                        onSuccess: function(){
                                            msg.hide();
                                            form.loadNodeViewForm(form.Tree.getNodeById(form.node.id));
                                        }
                                    }).show(new Ext.Element(link),'tr');
                                }
                            };
                            form.showWarningMsg(output);
                            return false;
                        }
						var begDate = Date.parseDate(es_data.EvnSection_setDate, 'd.m.Y');
						var endDate = Date.parseDate(es_data.EvnSection_disDate, 'd.m.Y');
						var age = swGetPersonAge(form.PersonInfoFrame.getFieldValue('Person_Birthday'), begDate);
                        sw.Promed.EvnSection.createListLeaveTypeMenu({
                            LpuUnitType_SysNick: es_data.LpuUnitType_SysNick,
							ownerWindow: form,
							id: 'ListMenuLeave',
							begDate: begDate,
							endDate: endDate,
							getParams: function(){
								return {
									Person_id: es_data.Person_id,
									PersonEvn_id: es_data.PersonEvn_id,
									Server_id: es_data.Server_id,
									Person_Firname: form.PersonInfoFrame.getFieldValue('Person_Firname'),
									Person_Surname: form.PersonInfoFrame.getFieldValue('Person_Surname'),
									Person_Secname: form.PersonInfoFrame.getFieldValue('Person_Secname'),
									Person_Birthday: form.PersonInfoFrame.getFieldValue('Person_Birthday'),						
									EvnPS_id: es_data.EvnSection_pid,
									EvnSection_disDT: Date.parseDate((es_data.EvnSection_disDate+' '+es_data.EvnSection_disTime), 'd.m.Y H:i'),
									EvnSection_id: es_data.EvnSection_id,
									isEvnSectionLast: (es_data._item_index == (es_data._item_count - 1)),
									LeaveType_id: es_data.LeaveType_id,
									LeaveType_Code: es_data.LeaveType_Code,
									EvnLeave_id: (!Ext.isEmpty(es_data.LeaveType_Code) && es_data.LeaveType_Code.toString().inlist([ '1' ])) ? es_data.Leave_id : 0,
									EvnOtherLpu_id: (!Ext.isEmpty(es_data.LeaveType_Code) && es_data.LeaveType_Code.toString().inlist([ '1' ])) ? es_data.Leave_id : 0,
									EvnDie_id: (!Ext.isEmpty(es_data.LeaveType_Code) && es_data.LeaveType_Code.toString().inlist([ '1' ])) ? es_data.Leave_id : 0,
									EvnOtherStac_id: (!Ext.isEmpty(es_data.LeaveType_Code) && es_data.LeaveType_Code.toString().inlist([ '1' ])) ? es_data.Leave_id : 0,
									EvnOtherSection_id: (!Ext.isEmpty(es_data.LeaveType_Code) && es_data.LeaveType_Code.toString().inlist([ '5' ])) ? es_data.Leave_id : 0,
									EvnOtherSectionBedProfile_id: (!Ext.isEmpty(es_data.LeaveType_Code) && es_data.LeaveType_Code.toString().inlist([ '104', '204' ])) ? es_data.Leave_id : 0,
									EvnLeave_setDate: es_data.EvnLeave_setDate,
									EvnLeave_UKL: es_data.EvnLeave_UKL,
									LeaveCause_id: es_data.LeaveCause_id,
									ARMType_id: form.userMedStaffFact.ARMType_id,
									ResultDesease_id: es_data.ResultDesease_id,
									childPS: age === 0
								};
							},
							onHideEditWindow: Ext.emptyFn,
							callbackEditWindow: function(){
								form.requireCheckChange = false;
								form.loadTreeNode({
									node: form.node.parentNode,
									selectById: form.node.id,
									callback: function(tl,n){				
										form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
										form.isFirstAdminCheck = false;
										form.requireCheckChange = true;
									}
								});
							},
							onCreate: function(m){
								m.show(Ext.get('EvnSection_data_'+d.object_id+'_addLeave'),'tr');
							}
						});
					}
				},
				editLeave: {
					actionType: 'edit',
					sectionCode: 'EvnSection_data',
					handler: function(e, c, d) {
						var es_data = form.getObjectData('EvnSection',d.object_id)
						if ( es_data == false || es_data.IsSigned == 2)
						{
							return false;
						}
						sw.Promed.Leave.openEditWindow({
							ownerWindow: form,
							getParams: function(){
								return {
									ARMType_id: form.userMedStaffFact.ARMType_id,
									Person_id: es_data.Person_id,
									PersonEvn_id: es_data.PersonEvn_id,
									Server_id: es_data.Server_id,
									Person_Firname: form.PersonInfoFrame.getFieldValue('Person_Firname'),
									Person_Surname: form.PersonInfoFrame.getFieldValue('Person_Surname'),
									Person_Secname: form.PersonInfoFrame.getFieldValue('Person_Secname'),
									Person_Birthday: form.PersonInfoFrame.getFieldValue('Person_Birthday'),						
									EvnPS_id: es_data.EvnSection_pid,
									EvnSection_disDT: Date.parseDate((es_data.EvnSection_disDate+' '+es_data.EvnSection_disTime), 'd.m.Y H:i'),
									EvnSection_id: es_data.EvnSection_id,
									isEvnSectionLast: (es_data._item_index == (es_data._item_count - 1)),
									LeaveType_id: es_data.LeaveType_id,
									LeaveType_Code: es_data.LeaveType_Code,
									EvnLeave_id: (!Ext.isEmpty(es_data.LeaveType_Code) && es_data.LeaveType_Code.toString().inlist([ '1' ])) ? es_data.Leave_id : 0,
									EvnOtherLpu_id: (!Ext.isEmpty(es_data.LeaveType_Code) && es_data.LeaveType_Code.toString().inlist([ '1' ])) ? es_data.Leave_id : 0,
									EvnDie_id: (!Ext.isEmpty(es_data.LeaveType_Code) && es_data.LeaveType_Code.toString().inlist([ '1' ])) ? es_data.Leave_id : 0,
									EvnOtherStac_id: (!Ext.isEmpty(es_data.LeaveType_Code) && es_data.LeaveType_Code.toString().inlist([ '1' ])) ? es_data.Leave_id : 0,
									EvnOtherSection_id: (!Ext.isEmpty(es_data.LeaveType_Code) && es_data.LeaveType_Code.toString().inlist([ '5' ])) ? es_data.Leave_id : 0,
									EvnOtherSectionBedProfile_id: (!Ext.isEmpty(es_data.LeaveType_Code) && es_data.LeaveType_Code.toString().inlist([ '104', '204' ])) ? es_data.Leave_id : 0,
									EvnLeave_setDate: es_data.EvnLeave_setDate,
									EvnLeave_UKL: es_data.EvnLeave_UKL,
									LeaveCause_id: es_data.LeaveCause_id,
									ResultDesease_id: es_data.ResultDesease_id
								};
							},
							onHideEditWindow: Ext.emptyFn,
							callbackEditWindow: function(){
								form.requireCheckChange = false;
								form.loadTreeNode({
									node: form.node.parentNode,
									selectById: form.node.id,
									callback: function(tl,n){
										form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
										form.isFirstAdminCheck = false;
										form.requireCheckChange = true;
									}
								});
							}
						}).show(Ext.get('EvnSection_data_'+d.object_id+'_editLeave'),'tr');
					}
				},
				editMedPersonal: {
					actionType: 'edit',
					sectionCode: 'EvnSection_data',
					handler: function(e, c, d) {
						var es_data = form.getObjectData('EvnSection',d.object_id);
						if ( es_data == false )
						{
							return false;
						}
						sw.Promed.MedPersonal.getMenu({
							LpuSection_id: es_data.LpuSection_id,
							id: 'ListMenuMedPersonal',
							getParams: function(){
								var params = {};
								params.LpuSection_id = es_data.LpuSection_id;
								params.EvnSection_id = es_data.EvnSection_id;
								params.EvnSection_pid = es_data.EvnSection_pid;
								params.Person_id = es_data.Person_id;
								params.PersonEvn_id = es_data.PersonEvn_id;
								params.Server_id = es_data.Server_id;
								params.MedPersonalCur_id = es_data.MedPersonal_id;
								return params;
							},
							onSuccess: function(){
								form.loadNodeViewForm(form.Tree.getNodeById(form.node.id));
							}
						}).show(Ext.get('EvnSection_data_'+d.object_id+'_editMedPersonal'),'tr');
					}
				},
				viewMedPersonal: {
					actionType: 'view',
					sectionCode: 'EvnSection_data',
					handler: function(e, c, d) {
						var es_data = form.getObjectData('EvnSection',d.object_id);
						if ( es_data == false )
						{
							return false;
						}
						var menu=sw.Promed.MedPersonal.getMedPersonalListById({
							LpuSection_id: es_data.LpuSection_id,
							id: 'ListMenuMedPersonalView',
							getParams: function(){
								var params = {};
								params.LpuSection_id = es_data.LpuSection_id;
								params.EvnSection_id = es_data.EvnSection_id;
								params.EvnSection_pid = es_data.EvnSection_pid;
								params.Person_id = es_data.Person_id;
								params.PersonEvn_id = es_data.PersonEvn_id;
								params.Server_id = es_data.Server_id;
								params.MedPersonalCur_id = es_data.MedPersonal_id;
								return params;
							},
							ids:Object.entries(es_data.ListDoctorHistory).map(x=>x[0]),
							personals:es_data.ListDoctorHistory
						});
						menu.show(Ext.get('EvnSection_data_'+d.object_id+'_viewMedPersonal'),'bl');
						var menuEl=menu.getEl();
						var oldLeft=menuEl.getLeft();
						menuEl.setLeft(oldLeft-menuEl.getWidth()/2);
					}
				},
				editLpuSectionWard: {
					actionType: 'edit',
					sectionCode: 'EvnSection_data',
					handler: function(e, c, d) {
						var es_data = form.getObjectData('EvnSection',d.object_id)
						if ( es_data == false )
						{
							return false;
						}
						sw.Promed.LpuSectionWard.createListLpuSectionWard({
							LpuSection_id: es_data.LpuSection_id,
							date: getGlobalOptions().date,
							id: 'ListMenuLpuSectionWard',
							getParams: function(){
								var params = {};
								params.LpuSection_id = es_data.LpuSection_id;
								//палата записывается или в EvnSection или в EvnPS
								if(es_data.EvnSection_pid == es_data.EvnSection_id){
									params.EvnPS_id = es_data.EvnSection_pid;
									params.EvnSection_id = null;
								} else {
									params.EvnPS_id = null;
									params.EvnSection_id = es_data.EvnSection_id;
								}
								params.ignore_sex = false;
								params.Sex_id = form.PersonInfoFrame.getFieldValue('Sex_id');
								params.Person_id = es_data.Person_id;
								params.LpuSectionWardCur_id = es_data.LpuSectionWard_id;
								return params;
							},
							callback: function(menu){
								menu.items.each(function(item,i,l){
									if(item.Sex_id)
										item.setVisible(item.Sex_id==form.PersonInfoFrame.getFieldValue('Sex_id'));
								});
								menu.show(Ext.get('EvnSection_data_'+d.object_id+'_editLpuSectionWard'),'tr')
							},
							onSuccess: function(params){
								form.loadNodeViewForm(form.Tree.getNodeById(form.node.id));
								if(typeof form.onChangeLpuSectionWard == 'function')
									form.onChangeLpuSectionWard(params);
							}
						});
					}
				},
				openLpuSectionWardHistory: {
					actionType: 'view',
					sectionCode: 'EvnSection_data',
					handler: function(e, c, d) {
						this.loadLpuSectionWardHistory(d);
					}.createDelegate(this)
				},
				editLpuSectionBedProfile: {
					actionType: 'edit',
					sectionCode: 'EvnSection_data',
					handler: function(e, c, d) {
						var es_data = form.getObjectData('EvnSection',d.object_id)
						if ( es_data == false )
						{
							return false;
						}
						sw.Promed.LpuSectionBedProfile.createListLpuSectionBedProfileMenu({
							LpuSection_id: es_data.LpuSection_id,
							id: 'ListMenuLpuSectionBedProfile',
							getParams: function(){
								var params = {};
								params.LpuSection_id = es_data.LpuSection_id;
								params.EvnSection_id = es_data.EvnSection_id;
								params.PersonEvn_id = es_data.PersonEvn_id;
								params.Server_id = es_data.Server_id;
								params.LpuSectionBedProfileCur_id = es_data.LpuSectionBedProfileCur_id;
								params.LpuSectionBedProfileLink_fedid = es_data.LpuSectionBedProfileLink_fedid;
								return params;
							},
							callback: function(menu){
								menu.show(Ext.get('EvnSection_data_'+d.object_id+'_editLpuSectionBedProfile'),'tr')
							},
							onSuccess: function(params){
								form.loadNodeViewForm(form.Tree.getNodeById(form.node.id));
							}
						});
					}
				},
				editEvnSection: {
					actionType: 'edit',
					sectionCode: 'EvnSection_data',
					handler: function(e, c, d) {
						var es_data = form.getObjectData('EvnSection',d.object_id)
						if ( es_data == false )
						{
							return false;
						}
						
						var action = 'edit';
						var callback = function() {
							form.requireCheckChange = false;
							form.loadTreeNode({
								node: form.node.parentNode,
								selectById: form.node.id,
								callback: function(tl,n){
									form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
									form.isFirstAdminCheck = false;
									form.requireCheckChange = true;
								}
							});
						};
						
						if(es_data.accessType != 'edit'){
							log(es_data.accessType);
							//action = 'view';
							//sw.swMsg.alert('Сообщение', 'Случай движения доступен только на чтение!');
							//return false;
						}
						
						var eps_data = form.getObjectData('EvnPS',es_data.EvnSection_pid);
						var eps_node = form.Tree.getNodeById('EvnPS_'+ es_data.EvnSection_pid);
						var eps_setdate;
						if ( eps_data )
						{
							eps_setdate = getValidDT(eps_data.EvnPS_setDate, eps_data.EvnPS_setTime);
						}
						else if ( eps_node )
						{
							eps_setdate = getValidDT(eps_node.attributes.date, '');
						}
						if (es_data.EvnSection_IsPriem && 2 == es_data.EvnSection_IsPriem){
							var params = {EvnPS_id: es_data.EvnSection_pid, form_mode: 'edit_priem'};
							params.callback = callback;
							params.onHide = Ext.emptyFn;
							form.openForm('swEvnPSEditWindow','XXX_id',params,'edit',langs('Редактирование КВС'));
						} else {
							var diag_pred_id = null;
							var es_pr_data = form.getObjectDataWithFindBy(function(record,id){
								if(record.get('EvnSection_pid') && record.get('EvnSection_pid')==es_data.EvnSection_pid && record.get('_item_index')==(es_data._item_index))
									return true;
								return false;
							});
							if ( es_pr_data )
							{
								diag_pred_id = es_pr_data.Diag_id;
							}
							var params = {
								EvnLeave_setDT: null,
								EvnPS_setDT: eps_setdate,
								evnSectionIsFirst: (es_data._item_index == 1),//es_data._item_index == 0 - это фиктивное движение по приемному
								evnSectionIsLast: (es_data._item_index == (es_data._item_count - 1)),
								DiagPred_id: diag_pred_id,
								CovidType_id: eps_data.CovidType_id,
								EvnPS_IsWithoutDirection: es_data.EvnPS_IsWithoutDirection,
								formParams: {
									Diag_id: es_data.Diag_id,
									EvnSection_disDate: es_data.EvnSection_disDate,
									EvnSection_disTime: es_data.EvnSection_disTime,
									EvnSection_id: es_data.EvnSection_id,
									EvnSection_pid: es_data.EvnSection_pid,
									EvnSection_setDate: es_data.EvnSection_setDate,
									EvnSection_setTime: es_data.EvnSection_setTime,
									LpuSection_id: es_data.LpuSection_id,
									LpuSectionWard_id: es_data.LpuSectionWard_id,
									MedStaffFact_id: es_data.MedStaffFact_id,
									Mes_id: es_data.Mes_id,
									PayType_id: es_data.PayType_id,
									Person_id: es_data.Person_id,
									PersonEvn_id: es_data.PersonEvn_id,
									Server_id: es_data.Server_id,
									TariffClass_id: es_data.TariffClass_id,
									UslugaComplex_id: es_data.UslugaComplex_id
								},
								onHide: Ext.emptyFn,
								callback: callback
							};
							form.openForm('swEvnSectionEditWindow','XXX_id',params,action,langs('Редактирование движения'));
						}
					}
				}
			},
			EvnDrug: {
				add: {
					actionType: 'add',
					sectionCode: 'EvnDrugList',
					handler: function(e, c, d) {
						form.openEvnDrugEditWindow('add',d);
					}
				},
				toggleDisplayList: {
					actionType: 'view',
					sectionCode: 'EvnDrug',
					handler: function(e, c, d) {
						var el = Ext.get('EvnDrug_'+ d.object_id+'_List'),
							btn = Ext.get('EvnDrug_'+ d.object_id+'_toggleDisplayList');
						if (!form.map.toggleDisplayList) {
							form.map.toggleDisplayList = {};
						}
						if (!form.map.toggleDisplayList[el.id]) {
							if (el.isDisplayed()) {
								form.toggleDisplay(el.id, true);
								btn.update(langs('Показать'));
							} else {
								form.toggleDisplay(el.id, false);
								btn.update(langs('Скрыть'));
							}
							form.map.toggleDisplayList[el.id] = setTimeout(function(){
								delete form.map.toggleDisplayList[el.id];
							}, 100);
						}
					}
				},
                edit: {
					actionType: 'edit',
					sectionCode: 'EvnDrug',
					dblClick: true,
					handler: function(e, c, d) {
						form.openEvnDrugEditWindow('edit',d);
					}
				},
				'delete': {
					actionType: 'del',
					sectionCode: 'EvnDrug',
					handler: function(e, c, d) {
						form.deleteEvent('EvnDrug', d);
					}
				}
			},
			EvnSectionNarrowBed: {
				add: {
					actionType: 'add',
					sectionCode: 'EvnSectionNarrowBedList',
					handler: function(e, c, d) {
						form.openEvnSectionNarrowBedEditWindow('add',d);
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnSectionNarrowBed',
					dblClick: true,
					handler: function(e, c, d) {
						form.openEvnSectionNarrowBedEditWindow('edit',d);
					}
				},
				'delete': {
					actionType: 'del',
					sectionCode: 'EvnSectionNarrowBed',
					handler: function(e, c, d) {
						form.deleteEvent('EvnSectionNarrowBed', d);
					}
				}
			},
			EvnDiagPS: {
				add: {
					actionType: 'add',
					sectionCode: 'EvnDiagPSList',
					handler: function(e, c, d) {
						form.openEvnDiagPSEditWindow('add',d);
					}
				},
				view: {
					actionType: 'view',
					sectionCode: 'EvnDiagPS',
					handler: function(e, c, d) {
						form.openEvnDiagPSEditWindow('view',d);
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnDiagPS',
					dblClick: true,
					handler: function(e, c, d) {
						form.openEvnDiagPSEditWindow('edit',d);
					}
				},
				'delete': {
					actionType: 'del',
					sectionCode: 'EvnDiagPS',
					handler: function(e, c, d) {
						form.deleteEvent('EvnDiagPS', d);
					}
				}
			},// Список карт наблюдения за кровотечением
			BleedingCard: {
				add: {
					actionType: 'add',
					sectionCode: 'BleedingCardList',
					handler: function(e, c, d) {
						form.openBleedingCardEditWindow('add',d);
					}
				},
				view: {
					actionType: 'view',
					sectionCode: 'BleedingCard',
					handler: function(e, c, d) {
						form.openBleedingCardEditWindow('view',d);
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'BleedingCard',
					dblClick: true,
					handler: function(e, c, d) {
						form.openBleedingCardEditWindow('edit',d);
					}
				},
				'delete': {
					actionType: 'del',
					sectionCode: 'BleedingCard',
					handler: function(e, c, d) {
						form.deleteEvent('BleedingCard', d);
					}
				}
			},
			RepositoryObserv: {
				add: {
					actionType: 'edit',
					sectionCode: 'RepositoryObservList',
					handler: function(e, c, d) {
						d.useCase = (form.node && form.node.attributes.object.inlist(['EvnPL', 'EvnVizitPL'])) ? 'evnvizitpl' : 'evnsection';
						form.openRepositoryObservEditWindow('add', d);
					}
				},
				edit: {
					actionType: 'edit',
					sectionCode: 'RepositoryObserv',
					dblClick: true,
					handler: function(e, c, d) {
						d.useCase = (form.node && form.node.attributes.object.inlist(['EvnPL', 'EvnVizitPL'])) ? 'evnvizitpl' : 'evnsection';
						form.openRepositoryObservEditWindow('edit', d);
					}
				},
				view: {
					actionType: 'view',
					sectionCode: 'RepositoryObserv',
					dblClick: true,
					handler: function(e, c, d) {
						d.useCase = (form.node && form.node.attributes.object.inlist(['EvnPL', 'EvnVizitPL'])) ? 'evnvizitpl' : 'evnsection';
						form.openRepositoryObservEditWindow('view', d);
					}
				},
				delete: {
					actionType: 'edit',
					sectionCode: 'RepositoryObserv',
					handler: function(e, c, d) {
						form.deleteEvent('RepositoryObserv', d);
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'RepositoryObserv',
					handler: function(e, c, d) {
						printBirt({
							'Report_FileName': 'printObserv_covid_daily.rptdesign',
							'Report_Params': '&RepositoryObserv_id=' + d.object_id,
							'Report_Format': 'pdf'
						});
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'RepositoryObservList',
					handler: function(e, c, d) {
						var id = 'RepositoryObservTable_'+ d.object_id;
						form.toggleDisplay(id, Ext.get(id).isDisplayed());
					}
				}
			},
			SignalInformationAll: {
				print: {
					actionType: 'view',
					sectionCode: 'SignalInformationAll',
					handler: function(e, c, d) {
						this.printHtml(d.section_id);
					}.createDelegate(this)
				},
				editPhoto: {
					actionType: 'edit',
					sectionCode: 'person_data',
					handler: function(e, c, d) {
						var params = {
							action: 'loadimage',
							//saveUrl: '/?c=PersonMediaData&m=uploadPersonPhoto',
							saveUrl: '/?c=PMMediaData&m=uploadPersonPhoto',
							enableFileDescription: false,
							saveParams: {Person_id: d.object_id},
							callback: function(data){
								if (data && data.person_thumbs_src)
								{
									document[('photo_person_'+ d.object_id)].src=data.person_thumbs_src +'?'+ Math.random();
								}
							}
						};
						getWnd('swFileUploadWindow').show(params);
					}
				},
				editPers: {
					actionType: 'edit',
					dblClick: true,
					sectionCode: 'person_data',
					handler: function(e, c, d) {
						var data = form.getObjectData('SignalInformationAll',d.object_id);
						if (!data || data.PersonEncrypHIV_Encryp){
							return;
						}
						var params = {
							callback: function(data){
								if (data && data.Person_id)
								{
									/*
									нужно обновить секцию person_data, но пока этого не сделать
									var reload_params = {
										section_code: d.object,
										view_section: 'subsection',
										object_key: 'Person_id',
										object_value: data.Person_id,
										parent_object_key: 'Person_id',
										parent_object_value: d.object_id,
										section_id: d.section_id
									};
									form.reloadViewForm(reload_params);
									*/
									// пока будем перезагружать всю сигн.информацию
									form.loadNodeViewForm(form.Tree.getNodeById(form.node.id));
								}
							}
						};
						form.openForm('swPersonEditWindow','XXX_id',params,'edit',langs('Редактирование персональных данных пациента'));
					}
				},
				printMedCard: {
					actionType: 'view',
					sectionCode: 'person_data', 
					handler: function(e, c, d) {
						var data = form.getObjectData('SignalInformationAll',d.object_id);

						if (getRegionNick() =='ufa'){
							printMedCard4Ufa(data.PersonCard_id);
							return;
						}
						if(getRegionNick().inlist([ 'buryatiya', 'astra', 'perm', 'ekb', 'pskov', 'krym', 'khak', 'kareliya', 'penza', 'kaluga', 'vologda' ])){
							var PersonCard = 0;
							if(!Ext.isEmpty(data.PersonCard_id)){
								var PersonCard = data.PersonCard_id;
							}

							printBirt({
		                        'Report_FileName': 'pan_PersonCard_f025u.rptdesign',
		                        'Report_Params': '&paramPerson=' + data.Person_id + '&paramPersonCard=' + PersonCard + '&paramLpu=' + getLpuIdForPrint(),
		                        'Report_Format': 'pdf'
		                    });
						} else {

							Ext.Ajax.request(
							{
								url : '/?c=PersonCard&m=printMedCard',
								params : 
								{
									PersonCard_id: data.PersonCard_id,
									Person_id: data.Person_id
								},
								callback: function(options, success, response)
								{
									if ( success ) {
										var responseData = Ext.util.JSON.decode(response.responseText);

										if ( getRegionNick() == 'ekb' ) {
											if ( !Ext.isEmpty(responseData.result1) ) {
												openNewWindow(responseData.result1);
											}

											if ( !Ext.isEmpty(responseData.result2) ) {
												openNewWindow(responseData.result2);
											}
										}
										else if ( !Ext.isEmpty(responseData.result) ) {
											openNewWindow(responseData.result);
										}
										else {
											sw.swMsg.alert(langs('Ошибка'), langs('Ошибка при получении данных для печати'));
										}
									}
									else {
										sw.swMsg.alert(langs('Ошибка'), langs('Ошибка при получении данных для печати'));
									}
								}
							});
						}
					}.createDelegate(this)	
				},				
				editAttach: {
					actionType: 'edit',
					sectionCode: 'person_data',
					handler: function(e, c, d) {
						var params = {
							callback: Ext.emptyFn, // почему-то в форме swPersonCardHistoryWindow вызывается только при нажатии на кн. "помощь"
							onHide: function(data){
								// нужно обновить секцию person_data, пока будем перезагружать всю сигн.информацию
								form.loadNodeViewForm(form.Tree.getNodeById(form.node.id));
							}
						};
						form.openForm('swPersonCardHistoryWindow','XXX_id',params,'edit',langs('История прикрепления'));
					}
				/*},
				addAttach: {
					actionType: 'add',
					sectionCode: 'person_data',
					handler: function(e, c, d) {
						log(d);
						//форма для добавления прикрепления - какого прикрепления? Пусть юзер сам выберет в форме swPersonCardHistoryWindow
					}*/
				}
			},
			MorbusOnkoVizitPLDop: {
				print: {
					sectionCode: 'MorbusOnkoVizitPLDop',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				}
			},
			MorbusOnkoLeave: {
				print: {
					sectionCode: 'MorbusOnkoLeave',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				}
			},
			
			MorbusCrazy: {
				toggleDisplayDiag: {actionType: 'view',sectionCode: 'MorbusCrazy', handler: function(e, c, d) {
					var id = 'MorbusCrazyDiag_'+ d.object_id;
					form.toggleDisplay(id,Ext.get(id).isDisplayed());}
				},
				toggleMorbusCrazyDynamicsObserv: {actionType: 'view',sectionCode: 'MorbusCrazy', handler: function(e, c, d) {
					var id = 'MorbusCrazyDynamicsObserv_'+ d.object_id;
					form.toggleDisplay(id,Ext.get(id).isDisplayed());}
				},
				toggleMorbusCrazyBasePS: {actionType: 'view',sectionCode: 'MorbusCrazy', handler: function(e, c, d) {
					var id = 'MorbusCrazyBasePS_'+ d.object_id;
					form.toggleDisplay(id,Ext.get(id).isDisplayed());}
				},
				toggleMorbusCrazyPerson: {actionType: 'view',sectionCode: 'MorbusCrazy', handler: function(e, c, d) {
					var id = 'MorbusCrazyPerson_'+ d.object_id;
					form.toggleDisplay(id,Ext.get(id).isDisplayed());}
				},
				toggleMorbusCrazyDrug: {actionType: 'view',sectionCode: 'MorbusCrazy', handler: function(e, c, d) {
					var id = 'MorbusCrazyDrug_'+ d.object_id;
					form.toggleDisplay(id,Ext.get(id).isDisplayed());}
				},
				inputMorbus_setDT: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHtmlForm('Morbus_setDT', d);
					}
				},
				inputMorbus_disDT: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHtmlForm('Morbus_disDT', d);
					}
				},
				inputDiag_nid: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHtmlForm('Diag_nid', d);
					}
				},
				inputDiag_sid: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHtmlForm('Diag_sid', d);
					}
				},
				inputCrazyResultDeseaseType: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {

						form.createMorbusHtmlForm('CrazyResultDeseaseType', d);
					}
				},
				inputCrazyDeathCauseType: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {

						form.createMorbusHtmlForm('CrazyDeathCauseType', d);
					}
				},
				inputMorbusCrazyBase_LTMDayCount: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {

						form.createMorbusHtmlForm('MorbusCrazyBase_LTMDayCount', d);
					}
				},
				inputMorbusCrazyBase_HolidayDayCount: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {

						form.createMorbusHtmlForm('MorbusCrazyBase_HolidayDayCount', d);
					}
				},
				inputMorbusCrazyBase_HolidayCount: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHtmlForm('MorbusCrazyBase_HolidayCount', d);
					}
				},
				inputMorbusCrazyPerson_IsWowInvalid: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHtmlForm('MorbusCrazyPerson_IsWowInvalid', d);
					}
				},
				inputMorbusCrazyPerson_IsWowMember: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHtmlForm('MorbusCrazyPerson_IsWowMember', d);
					}
				},
				inputCrazyEducationType: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHtmlForm('CrazyEducationType', d);
					}
				},
				inputMorbusCrazyPerson_CompleteClassCount: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHtmlForm('MorbusCrazyPerson_CompleteClassCount', d);
					}
				},
				inputMorbusCrazyPerson_IsEducation: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHtmlForm('MorbusCrazyPerson_IsEducation', d);
					}
				},
				inputCrazySourceLivelihoodType: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHtmlForm('CrazySourceLivelihoodType', d);
					}
				},
				inputCrazyResideType: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHtmlForm('CrazyResideType', d);
					}
				},
				inputCrazyResideConditionsType: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHtmlForm('CrazyResideConditionsType', d);
					}
				},
				inputMorbusCrazyBase_firstDT: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHtmlForm('MorbusCrazyBase_firstDT', d);
					}
				},
				inputMorbusCrazyPerson_IsConvictionBeforePsych: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHtmlForm('MorbusCrazyPerson_IsConvictionBeforePsych', d);
					}
				},
				inputMorbusCrazyBase_DeathDT: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHtmlForm('MorbusCrazyBase_DeathDT', d);
					}
				},
				inputCrazyCauseEndSurveyType: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHtmlForm('CrazyCauseEndSurveyType', d);
					}
				},
				inputMorbusCrazyBase_IsUseAlienDevice: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHtmlForm('MorbusCrazyBase_IsUseAlienDevice', d);
					}
				},
				inputMorbusCrazyBase_IsLivingConsumDrug: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazy',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusHtmlForm('MorbusCrazyBase_IsLivingConsumDrug', d);
					}
				},
				saveDiag: {actionType: 'edit', sectionCode: 'MorbusCrazy', handler: function(e, c, d) {form.submitMorbusCrazyHtmlForm('saveDiag',d);}},
				saveMorbusCrazyDynamicsObserv: {actionType: 'edit', sectionCode: 'MorbusCrazy', handler: function(e, c, d) {form.submitMorbusCrazyHtmlForm('saveMorbusCrazyDynamicsObserv',d);}},
				saveMorbusCrazyPerson: {actionType: 'edit', sectionCode: 'MorbusCrazy', handler: function(e, c, d) {form.submitMorbusCrazyHtmlForm('saveMorbusCrazyPerson',d);}},
				saveMorbusCrazyDrug: {actionType: 'edit', sectionCode: 'MorbusCrazy', handler: function(e, c, d) {form.submitMorbusCrazyHtmlForm('saveMorbusCrazyDrug',d);}}
			},
			MorbusCrazyDiag: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyDiag',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'edit',object: 'MorbusCrazyDiag', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyDiag',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusCrazyDiag',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyDiagList',
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'add',object: 'MorbusCrazyDiag', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyDiagList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyDiagList',
					handler: function(e, c, d) {
						var id = 'MorbusCrazyDiagTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusCrazyDynamicsObserv: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyDynamicsObserv',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'edit',object: 'MorbusCrazyDynamicsObserv', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyDynamicsObserv',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusCrazyDynamicsObserv',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyDynamicsObservList',
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'add',object: 'MorbusCrazyDynamicsObserv', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyDynamicsObservList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyDynamicsObservList',
					handler: function(e, c, d) {
						var id = 'MorbusCrazyDynamicsObservTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusCrazyVizitCheck: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyVizitCheck',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'edit',object: 'MorbusCrazyVizitCheck', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyVizitCheck',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusCrazyVizitCheck',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyVizitCheckList',
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'add',object: 'MorbusCrazyVizitCheck', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyVizitCheckList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyVizitCheckList',
					handler: function(e, c, d) {
						var id = 'MorbusCrazyVizitCheckTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusCrazyDynamicsState: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyDynamicsState',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'edit',object: 'MorbusCrazyDynamicsState', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyDynamicsState',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusCrazyDynamicsState',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyDynamicsStateList',
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'add',object: 'MorbusCrazyDynamicsState', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyDynamicsStateList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyDynamicsStateList',
					handler: function(e, c, d) {
						var id = 'MorbusCrazyDynamicsStateTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusCrazyBasePS: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyBasePS',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'edit',object: 'MorbusCrazyBasePS', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyBasePS',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusCrazyBasePS',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyBasePSList',
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'add',object: 'MorbusCrazyBasePS', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyBasePSList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyBasePSList',
					handler: function(e, c, d) {
						var id = 'MorbusCrazyBasePSTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusCrazyForceTreat: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyForceTreat',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'edit',object: 'MorbusCrazyForceTreat', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyForceTreat',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusCrazyForceTreat',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyForceTreatList',
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'add',object: 'MorbusCrazyForceTreat', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyForceTreatList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyForceTreatList',
					handler: function(e, c, d) {
						var id = 'MorbusCrazyForceTreatTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusCrazyPersonStick: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyPersonStick',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'edit',object: 'MorbusCrazyPersonStick', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyPersonStick',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusCrazyPersonStick',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyPersonStickList',
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'add',object: 'MorbusCrazyPersonStick', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyPersonStickList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyPersonStickList',
					handler: function(e, c, d) {
						var id = 'MorbusCrazyPersonStickTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusCrazyPersonSuicidalAttempt: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyPersonSuicidalAttempt',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'edit',object: 'MorbusCrazyPersonSuicidalAttempt', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyPersonSuicidalAttempt',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusCrazyPersonSuicidalAttempt',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyPersonSuicidalAttemptList',
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'add',object: 'MorbusCrazyPersonSuicidalAttempt', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyPersonSuicidalAttemptList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyPersonSuicidalAttemptList',
					handler: function(e, c, d) {
						var id = 'MorbusCrazyPersonSuicidalAttemptTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusCrazyPersonSocDangerAct: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyPersonSocDangerAct',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'edit',object: 'MorbusCrazyPersonSocDangerAct', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyPersonSocDangerAct',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusCrazyPersonSocDangerAct',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyPersonSocDangerActList',
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'add',object: 'MorbusCrazyPersonSocDangerAct', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyPersonSocDangerActList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyPersonSocDangerActList',
					handler: function(e, c, d) {
						var id = 'MorbusCrazyPersonSocDangerActTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusCrazyBaseDrugStart: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyBaseDrugStart',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'edit',object: 'MorbusCrazyBaseDrugStart', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyBaseDrugStart',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusCrazyBaseDrugStart',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyBaseDrugStartList',
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'add',object: 'MorbusCrazyBaseDrugStart', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyBaseDrugStartList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyBaseDrugStartList',
					handler: function(e, c, d) {
						var id = 'MorbusCrazyBaseDrugStartTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusCrazyDrug: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyDrug',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'edit',object: 'MorbusCrazyDrug', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyDrug',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusCrazyDrug',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyDrugList',
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'add',object: 'MorbusCrazyDrug', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyDrugList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyDrugList',
					handler: function(e, c, d) {
						var id = 'MorbusCrazyDrugTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusCrazyDrugVolume: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyDrugVolume',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'edit',object: 'MorbusCrazyDrugVolume', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyDrugVolume',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusCrazyDrugVolume',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyDrugVolumeList',
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'add',object: 'MorbusCrazyDrugVolume', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyDrugVolumeList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyDrugVolumeList',
					handler: function(e, c, d) {
						var id = 'MorbusCrazyDrugVolumeTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusCrazyBBK: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyBBK',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'edit',object: 'MorbusCrazyBBK', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyBBK',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusCrazyBBK',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyBBKList',
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'add',object: 'MorbusCrazyBBK', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyBBKList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyBBKList',
					handler: function(e, c, d) {
						var id = 'MorbusCrazyBBKTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusCrazyPersonSurveyHIV: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyPersonSurveyHIV',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'edit',object: 'MorbusCrazyPersonSurveyHIV', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyPersonSurveyHIV',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusCrazyPersonSurveyHIV',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyPersonSurveyHIVList',
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'add',object: 'MorbusCrazyPersonSurveyHIV', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyPersonSurveyHIVList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyPersonSurveyHIVList',
					handler: function(e, c, d) {
						var id = 'MorbusCrazyPersonSurveyHIVTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusCrazyNdOsvid: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyNdOsvid',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'edit',object: 'MorbusCrazyNdOsvid', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyNdOsvid',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusCrazyNdOsvid',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyNdOsvidList',
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'add',object: 'MorbusCrazyNdOsvid', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyNdOsvidList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyNdOsvidList',
					handler: function(e, c, d) {
						var id = 'MorbusCrazyNdOsvidTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusCrazyPersonInvalid: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyPersonInvalid',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'edit',object: 'MorbusCrazyPersonInvalid', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyPersonInvalid',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusCrazyPersonInvalid',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusCrazyPersonInvalidList',
					handler: function(e, c, d) {
						form.openMorbusCrazySpecificForm({action: 'add',object: 'MorbusCrazyPersonInvalid', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyPersonInvalidList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusCrazyPersonInvalidList',
					handler: function(e, c, d) {
						var id = 'MorbusCrazyPersonInvalidTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},

			MorbusNephro: {
				saveMorbusNephro: {
					actionType: 'edit', sectionCode: 'MorbusNephro', handler: function(e, c, d) {form.submitMorbusNephroHtmlForm('saveMorbusNephro',d);}
				},
				inputPersonWeight: {
					actionType: 'edit',
					sectionCode: 'MorbusNephro',
					handler: function(e, c, d) {
						form.createMorbusNephroHtmlForm('PersonWeight', d);
					}
				},
				inputMorbusNephro_begDate: {
					actionType: 'edit',
					sectionCode: 'MorbusNephro',
					handler: function(e, c, d) {
						form.createMorbusNephroHtmlForm('MorbusNephro_begDate', d);
					}
				},
				inputMorbusNephro_firstDate: {
					actionType: 'edit',
					sectionCode: 'MorbusNephro',
					handler: function(e, c, d) {
						form.createMorbusNephroHtmlForm('MorbusNephro_firstDate', d);
					}
				},
				inputMorbusNephro_dialDate: {
					actionType: 'edit',
					sectionCode: 'MorbusNephro',
					dblClick: false,
					handler: function(e, c, d) {

						form.createMorbusNephroHtmlForm('MorbusNephro_dialDate', d);
					}
				},
				inputMorbusNephro_transDate: {
					actionType: 'edit',
					sectionCode: 'MorbusNephro',
					handler: function(e, c, d) {
						form.createMorbusNephroHtmlForm('MorbusNephro_transDate', d);
					}
				},
				inputMorbusNephro_deadDT: {
					actionType: 'edit',
					sectionCode: 'MorbusNephro',
					handler: function(e, c, d) {
						form.createMorbusNephroHtmlForm('MorbusNephro_deadDT', d);
					}
				},
				inputNephroDiagConfType: {
					actionType: 'edit',
					sectionCode: 'MorbusNephro',
					handler: function(e, c, d) {
						form.createMorbusNephroHtmlForm('NephroDiagConfType', d);
					}
				},
				inputNephroCRIType: {
					actionType: 'edit',
					sectionCode: 'MorbusNephro',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusNephroHtmlForm('NephroCRIType', d);
					}
				},
				inputKidneyTransplantType: {
					actionType: 'edit',
					sectionCode: 'MorbusNephro',
					handler: function(e, c, d) {
						form.createMorbusNephroHtmlForm('KidneyTransplantType', d);
					}
				},
				inputDialysisType: {
					actionType: 'edit',
					sectionCode: 'MorbusNephro',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusNephroHtmlForm('DialysisType', d);
					}
				},
				inputDispGroupType: {
					actionType: 'edit',
					sectionCode: 'MorbusNephro',
					handler: function(e, c, d) {
						form.createMorbusNephroHtmlForm('DispGroupType', d);
					}
				},
                inputNephroResultType: {
                    actionType: 'edit',
                    sectionCode: 'MorbusNephro',
                    dblClick: false,
                    handler: function(e, c, d) {
                        form.createMorbusNephroHtmlForm('NephroResultType', d);
                    }
                },
				inputPersonHeight: {
					actionType: 'edit',
					sectionCode: 'MorbusNephro',
					handler: function(e, c, d) {
						form.createMorbusNephroHtmlForm('PersonHeight', d);
					}
				},
				inputMorbusNephro_Treatment: {
					actionType: 'edit',
					sectionCode: 'MorbusNephro',
					handler: function(e, c, d) {
						form.createMorbusNephroHtmlForm('MorbusNephro_Treatment', d);
					}
				},
				inputMorbusNephro_CRIDinamic: {
					actionType: 'edit',
					sectionCode: 'MorbusNephro',
					handler: function(e, c, d) {
						form.createMorbusNephroHtmlForm('MorbusNephro_CRIDinamic', d);
					}
				},
				inputNephroDiagConfTypeC: {
					actionType: 'edit',
					sectionCode: 'MorbusNephro',
					handler: function(e, c, d) {
						form.createMorbusNephroHtmlForm('NephroDiagConfTypeC', d);
					}
				},
				inputMorbusNephro_IsHyperten: {
					actionType: 'edit',
					sectionCode: 'MorbusNephro',
					handler: function(e, c, d) {
						form.createMorbusNephroHtmlForm('MorbusNephro_IsHyperten', d);
					}
				}
			},
			MorbusProf: {
				saveMorbusProf: {
					actionType: 'edit', sectionCode: 'MorbusProf', handler: function(e, c, d) {
						form.submitMorbusProfHtmlForm('saveMorbusProf',d);
					}
				},
				inputMorbusProfDiag: {
					actionType: 'edit',
					sectionCode: 'MorbusProf',
					handler: function(e, c, d) {
						form.createMorbusProfHtmlForm('MorbusProfDiag', d);
					}
				},
				inputMorbusProf_Year: {
					actionType: 'edit',
					sectionCode: 'MorbusProf',
					handler: function(e, c, d) {
						form.createMorbusProfHtmlForm('MorbusProf_Year', d);
					}
				},
				inputMorbusProf_Month: {
					actionType: 'edit',
					sectionCode: 'MorbusProf',
					handler: function(e, c, d) {
						form.createMorbusProfHtmlForm('MorbusProf_Month', d);
					}
				},
				inputMorbusProf_Day: {
					actionType: 'edit',
					sectionCode: 'MorbusProf',
					handler: function(e, c, d) {
						form.createMorbusProfHtmlForm('MorbusProf_Day', d);
					}
				},
				inputMorbusProf_IsFit: {
					actionType: 'edit',
					sectionCode: 'MorbusProf',
					handler: function(e, c, d) {
						form.createMorbusProfHtmlForm('MorbusProf_IsFit', d);
					}
				},
				inputOrg: {
					actionType: 'edit',
					sectionCode: 'MorbusProf',
					handler: function(e, c, d) {
						form.createMorbusProfHtmlForm('Org', d);
					}
				},
				inputOnkoOccupationClass: {
					actionType: 'edit',
					sectionCode: 'MorbusProf',
					handler: function(e, c, d) {
						form.createMorbusProfHtmlForm('OnkoOccupationClass', d);
					}
				}
			},
			EvnDiagNephro: {
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnDiagNephro',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusNephroSpecificForm({action: 'edit',object: 'EvnDiagNephro', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'EvnDiagNephro',
					handler: function(e, c, d) {
						form.deleteEvent('EvnDiagNephro',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'EvnDiagNephroList',
					handler: function(e, c, d) {
						form.openMorbusNephroSpecificForm({action: 'add',object: 'EvnDiagNephro', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'EvnDiagNephroList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'EvnDiagNephroList',
					handler: function(e, c, d) {
						var id = 'EvnDiagNephroTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusNephroLab: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusNephroLab',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusNephroSpecificForm({action: 'edit',object: 'MorbusNephroLab', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusNephroLab',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusNephroLab',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusNephroLabList',
					handler: function(e, c, d) {
						form.openMorbusNephroSpecificForm({action: 'add',object: 'MorbusNephroLab', eldata: d});
					}
				},
				selectIsLast: {
					actionType: 'view',
					sectionCode: 'MorbusNephroLabList',
					handler: function(e, c, d) {
						form.openMorbusNephroSpecificForm({action: 'selectIsLast',object: 'MorbusNephroLab', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusNephroLabList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusNephroLabList',
					handler: function(e, c, d) {
						var id = 'MorbusNephroLabTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusNephroDisp: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusNephroDisp',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusNephroSpecificForm({action: 'edit',object: 'MorbusNephroDisp', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusNephroDisp',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusNephroDisp',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusNephroDispList',
					handler: function(e, c, d) {
						form.openMorbusNephroSpecificForm({action: 'add',object: 'MorbusNephroDisp', eldata: d});
					}
				},
				selectIsLast: {
					actionType: 'view',
					sectionCode: 'MorbusNephroDispList',
					handler: function(e, c, d) {
						form.openMorbusNephroSpecificForm({action: 'selectIsLast',object: 'MorbusNephroDisp', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusNephroDispList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusNephroDispList',
					handler: function(e, c, d) {
						var id = 'MorbusNephroDispTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusNephroDialysis: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusNephroDialysis',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusNephroSpecificForm({action: 'edit',object: 'MorbusNephroDialysis', eldata: d});
					}
				},
				editout: {
					actionType: 'edit',
					sectionCode: 'MorbusNephroDialysis',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusNephroSpecificForm({action: 'editout',object: 'MorbusNephroDialysis', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusNephroDialysis',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusNephroDialysis',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusNephroDialysisList',
					handler: function(e, c, d) {
						form.openMorbusNephroSpecificForm({action: 'add',object: 'MorbusNephroDialysis', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusNephroDialysisList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusNephroDialysisList',
					handler: function(e, c, d) {
						var id = 'MorbusNephroDialysisTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			
			MorbusTub: {
				printSpecific2: {
					actionType: 'view',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						var ids = d.object_id.split('_');
						if(typeof ids == 'object' && ids[1] && parseInt(ids[1]) > 0){
							printBirt({
								'Report_FileName': 'f030grr.rptdesign',
								'Report_Params': '&paramMorbus=' + ids[1],
								'Report_Format': 'pdf'
							});
						} else {
							sw.swMsg.alert(langs('Ошибка'), 'Отсуствует специфика');
							return true;
						}
					}
				},
				inputMorbusTub_RegNumCard: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('MorbusTub_RegNumCard', d);
					}
				},
				inputMorbusTub_begDT: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('MorbusTub_begDT', d);
					}
				},
				inputMorbusTub_FirstDT: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('MorbusTub_FirstDT', d);
					}
				},
				inputMorbusTub_DiagDT: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					dblClick: false,
					handler: function(e, c, d) {

						form.createMorbusTubHtmlForm('MorbusTub_DiagDT', d);
					}
				},
				inputTubSickGroupType: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					dblClick: false,
					handler: function(e, c, d) {

						form.createMorbusTubHtmlForm('TubSickGroupType', d);
					}
				},
				inputMorbusTub_ResultDT: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					dblClick: false,
					handler: function(e, c, d) {

						form.createMorbusTubHtmlForm('MorbusTub_ResultDT', d);
					}
				},
				inputMorbusTub_deadDT: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					dblClick: false,
					handler: function(e, c, d) {

						form.createMorbusTubHtmlForm('MorbusTub_deadDT', d);
					}
				},
				inputMorbusTub_breakDT: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					dblClick: false,
					handler: function(e, c, d) {

						form.createMorbusTubHtmlForm('MorbusTub_breakDT', d);
					}
				},
				inputMorbusTub_disDT: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					dblClick: false,
					handler: function(e, c, d) {

						form.createMorbusTubHtmlForm('MorbusTub_disDT', d);
					}
				},
				inputMorbusTub_unsetDT: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					dblClick: false,
					handler: function(e, c, d) {

						form.createMorbusTubHtmlForm('MorbusTub_unsetDT', d);
					}
				},
				inputTubResultChemClass: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					dblClick: false,
					handler: function(e, c, d) {

						form.createMorbusTubHtmlForm('TubResultChemClass', d);
					}
				},
				inputTubResultChemType: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('TubResultChemType', d);
					}
				},
				inputTubResultDeathType: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('TubResultDeathType', d);
					}
				},
				inputTubDiag: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('TubDiag', d);
					}
				},
				inputPersonDecreedGroup: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('PersonDecreedGroup', d);
					}
				},
				inputPersonLivingFacilies: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('PersonLivingFacilies', d);
					}
				},
				inputPersonDispGroup: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('PersonDispGroup', d);
					}
				},
				inputTubBreakChemType: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('TubBreakChemType', d);
					}
				},
                inputPersonResidenceType: {
                    actionType: 'edit',
                    sectionCode: 'MorbusTub',
                    dblClick: false,
                    handler: function(e, c, d) {
                        form.createMorbusTubHtmlForm('PersonResidenceType', d);
                    }
                },
				inputMorbusTub_ConvDT: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('MorbusTub_ConvDT', d);
					}
				},
				inputMorbusTub_CountDay: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('MorbusTub_CountDay', d);
					}
				},
				saveMorbusTub: {
					actionType: 'edit', sectionCode: 'MorbusTub', handler: function(e, c, d) {form.submitMorbusTubHtmlForm('saveMorbusTub',d);}
				},
				saveMorbusTub2: {
					actionType: 'edit', sectionCode: 'MorbusTub', handler: function(e, c, d) {form.submitMorbusTubHtmlForm('saveMorbusTub',d);}
				},
				saveMorbusTub3: {
					actionType: 'edit', sectionCode: 'MorbusTub', handler: function(e, c, d) {form.submitMorbusTubHtmlForm('saveMorbusTub',d);}
				},
				addMorbusTubAdvice: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						form.openMorbusTubSpecificForm({action: 'add',object: 'MorbusTubAdvice', eldata: d});
					}
				},
				toggleDisplayMorbusTubAdviceList: {
					actionType: 'view',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						var id = 'MorbusTubAdviceItems_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				},
				morbusPrint: {
					actionType: 'view',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						var me = this;
						if (me.printMenu){
							me.printMenu.destroy();
							me.printMenu = null;
						}
						me.d = d;
						me.printMenu = new Ext.menu.Menu();
						
						var
							ids = d.object_id.split('_'),
							object_id,
							PersonRegister_id,
							specifics;
						
						if (typeof ids == 'object' && ids[1] && parseInt(ids[1]) > 0 ) {
							object_id = ids[1];
							specifics = form.viewFormDataStore.getById(me.d.object + '_' + object_id);
							
							if (typeof specifics == 'object' && !Ext.isEmpty(specifics.get('PersonRegister_id'))) {
								PersonRegister_id = specifics.get('PersonRegister_id');
							}
						} 
						
						if (!Ext.isEmpty(PersonRegister_id)){
							me.printMenu.add({
								text: 'Печать формы № 81/У',
								value: 'Печать формы № 81/У',
								handler: function(e, c, d) {
									printBirt({
										'Report_FileName': 'f81u.rptdesign',
										'Report_Params': '&paramRegistry=' + PersonRegister_id,
										'Report_Format': 'pdf'
									});
									return true;
								}.createDelegate(this)
							});
							me.printMenu.add({
								text: 'Печать формы № 01-ТБ/у',
								value: 'Печать формы № 01-ТБ/у',
								handler: function(e, c, d) {
									printBirt({
										'Report_FileName': 'F01_TB_u.rptdesign',
										'Report_Params': '&paramRegistry=' + PersonRegister_id,
										'Report_Format': 'pdf'
									});
									return true;
								}.createDelegate(this)
							});
							me.printMenu.add({
								text: 'Печать формы № 081-1/у',
								value: 'Печать формы № 081-1/у',
								handler: function(e, c, d) {
									printBirt({
										'Report_FileName': '081_1u_tub.rptdesign',
										'Report_Params': '&paramRegistry=' + PersonRegister_id,
										'Report_Format': 'pdf'
									});
									return true;
								}.createDelegate(this)
							});
						}
						var btnEl = Ext.get(d.object + '_' + d.object_id + '_morbusPrint');
						me.printMenu.show(btnEl);
					}
				},
                printLink: {
                    actionType: 'view',
                    sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
                        var record = form.viewFormDataStore.getById('MorbusTub_'+ d.object_id.split('_')[1]);
                        if (record && record.get('Morbus_id')) {
							printBirt({
								'Report_FileName': 'f01mdrtubu.rptdesign',
								'Report_Params': '&paramMorbus=' + record.get('Morbus_id'),
								'Report_Format': 'pdf'
							});
                        }
					}
                },
				toggleDisplayMorbusTubMDR: {
					actionType: 'view',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						var id = 'MorbusTubMDR_'+ d.object_id,
							//params = form.getObjectData('MorbusTub',d.object_id.split('_')[1]),
							record = form.viewFormDataStore.getById('MorbusTub_'+ d.object_id.split('_')[1]),
							isDisplayed = Ext.get(id).isDisplayed();
						//log(d, form.viewFormDataStore);
						if (!record) {
							return false;
						}
						if (!record.get('MorbusTubMDR_id') && !isDisplayed) {
							Ext.Msg.show({
								title: langs('Вопрос'),
								msg: langs('Создать медицинскую карту случая лечения туберкулеза по IV режиму химиотерапии по форме №01-МЛУ-ТБ/у?'),
								buttons: Ext.Msg.OKCANCEL,// YESNO
								fn: function(btn) {
									if (btn === 'ok') {
										form.requestSaveWithShowInfoMsg('/?c=MorbusTub&m=createMorbusTubMDR',
											{
												Morbus_id: record.get('Morbus_id')
											},
											function(result)
											{
												if ( result.success && result.MorbusTubMDR_id ) {
													record.set('MorbusTubMDR_id', result.MorbusTubMDR_id);
													record.commit(true);
													form.viewFormDataStore.commitChanges();
													form.toggleDisplay(id, isDisplayed);
													form.loadedSpecifics[record.get('MorbusTub_pid')]['tub'].isChanged = true;
												}
											}, form);
									}
								},
								icon: Ext.MessageBox.QUESTION
							});
							return false;
						}
						form.toggleDisplay(id, isDisplayed);
						return true;
					}
				},
				saveMorbusTub4: {
					actionType: 'edit', sectionCode: 'MorbusTub', handler: function(e, c, d) {
						form.submitMorbusTubHtmlForm('saveMorbusTub',d);
					}
				},
				inputMorbusTubMDR_RegNumPerson: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('MorbusTubMDR_RegNumPerson', d);
					}
				},
				inputMorbusTubMDR_RegNumCard: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('MorbusTubMDR_RegNumCard', d);
					}
				},
				inputMorbusTubMDR_regDT: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('MorbusTubMDR_regDT', d);
					}
				},
				inputMorbusTubMDR_regdiagDT: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('MorbusTubMDR_regdiagDT', d);
					}
				},
				inputMorbusTubMDR_begDT: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('MorbusTubMDR_begDT', d);
					}
				},
				inputMorbusTubMDR_GroupDisp: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('MorbusTubMDR_GroupDisp', d);
					}
				},
				inputMorbusTubMDR_TubDiag: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('MorbusTubMDR_TubDiag', d);
					}
				},
				inputMorbusTubMDR_TubSickGroupType: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('MorbusTubMDR_TubSickGroupType', d);
					}
				},
				inputMorbusTubMDR_IsPathology: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('MorbusTubMDR_IsPathology', d);
					}
				},
				inputMorbusTubMDR_IsART: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('MorbusTubMDR_IsART', d);
					}
				},
				inputMorbusTubMDR_IsCotrim: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('MorbusTubMDR_IsCotrim', d);
					}
				},
				inputMorbusTubMDR_IsDrugFirst: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('MorbusTubMDR_IsDrugFirst', d);
					}
				},
				inputMorbusTubMDR_IsDrugSecond: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('MorbusTubMDR_IsDrugSecond', d);
					}
				},
				inputMorbusTubMDR_IsDrugResult: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('MorbusTubMDR_IsDrugResult', d);
					}
				},
				inputMorbusTubMDR_IsEmpiric: {
					actionType: 'edit',
					sectionCode: 'MorbusTub',
					handler: function(e, c, d) {
						form.createMorbusTubHtmlForm('MorbusTubMDR_IsEmpiric', d);
					}
				},
				saveMorbusTub5: {
					actionType: 'edit', sectionCode: 'MorbusTub', handler: function(e, c, d) { form.submitMorbusTubHtmlForm('saveMorbusTub',d); }
				},
				inputSopDiag1: {
                    actionType: 'edit',
                    sectionCode: 'MorbusTub',
                    handler: function(e, c, d) {
                        form.createMorbusTubHtmlForm('SopDiag1', d);
                    }
				},
				inputSopDiag2: {
                    actionType: 'edit',
                    sectionCode: 'MorbusTub',
                    handler: function(e, c, d) {
                        form.createMorbusTubHtmlForm('SopDiag2', d);
                    }
				},
				inputSopDiag3: {
                    actionType: 'edit',
                    sectionCode: 'MorbusTub',
                    handler: function(e, c, d) {
                        form.createMorbusTubHtmlForm('SopDiag3', d);
                    }
				},
				inputSopDiag4: {
                    actionType: 'edit',
                    sectionCode: 'MorbusTub',
                    handler: function(e, c, d) {
                        form.createMorbusTubHtmlForm('SopDiag4', d);
                    }
				},
				inputSopDiag5: {
                    actionType: 'edit',
                    sectionCode: 'MorbusTub',
                    handler: function(e, c, d) {
                        form.createMorbusTubHtmlForm('SopDiag5', d);
                    }
				},
				inputSopDiag6: {
                    actionType: 'edit',
                    sectionCode: 'MorbusTub',
                    handler: function(e, c, d) {
                        form.createMorbusTubHtmlForm('SopDiag6', d);
                    }
				},
				inputSopDiag7: {
                    actionType: 'edit',
                    sectionCode: 'MorbusTub',
                    handler: function(e, c, d) {
                        form.createMorbusTubHtmlForm('SopDiag7', d);
                    }
				},
				inputSopDiag8: {
                    actionType: 'edit',
                    sectionCode: 'MorbusTub',
                    handler: function(e, c, d) {
                        form.createMorbusTubHtmlForm('SopDiag8', d);
                    }
				},
				inputSopDiag_Descr: {
                    actionType: 'edit',
                    sectionCode: 'MorbusTub',
                    handler: function(e, c, d) {
                        form.createMorbusTubHtmlForm('SopDiag_Descr', d);
                    }
				},
				saveMorbusTub6: {
					actionType: 'edit', sectionCode: 'MorbusTub', handler: function(e, c, d) { form.submitMorbusTubHtmlForm('saveMorbusTub',d); }
				},
				inputRiskType1: {
                    actionType: 'edit',
                    sectionCode: 'MorbusTub',
                    handler: function(e, c, d) {
                        form.createMorbusTubHtmlForm('RiskType1', d);
                    }
				},
				inputRiskType2: {
                    actionType: 'edit',
                    sectionCode: 'MorbusTub',
                    handler: function(e, c, d) {
                        form.createMorbusTubHtmlForm('RiskType2', d);
                    }
				},
				inputRiskType3: {
                    actionType: 'edit',
                    sectionCode: 'MorbusTub',
                    handler: function(e, c, d) {
                        form.createMorbusTubHtmlForm('RiskType3', d);
                    }
				},
				inputRiskType4: {
                    actionType: 'edit',
                    sectionCode: 'MorbusTub',
                    handler: function(e, c, d) {
                        form.createMorbusTubHtmlForm('RiskType4', d);
                    }
				},
				inputRiskType5: {
                    actionType: 'edit',
                    sectionCode: 'MorbusTub',
                    handler: function(e, c, d) {
                        form.createMorbusTubHtmlForm('RiskType5', d);
                    }
				},
				inputRiskType6: {
                    actionType: 'edit',
                    sectionCode: 'MorbusTub',
                    handler: function(e, c, d) {
                        form.createMorbusTubHtmlForm('RiskType6', d);
                    }
				},
				inputRiskType8: {
                    actionType: 'edit',
                    sectionCode: 'MorbusTub',
                    handler: function(e, c, d) {
                        form.createMorbusTubHtmlForm('RiskType8', d);
                    }
				}
			},
			MorbusTubAdvice: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusTubAdvice',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusTubSpecificForm({action: 'edit',object: 'MorbusTubAdvice', eldata: d});
					}
				}
			},
			MorbusTubDiagSop: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusTubDiagSop',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusTubSpecificForm({action: 'edit',object: 'MorbusTubDiagSop', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusTubDiagSop',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusTubDiagSop',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusTubDiagSopList',
					handler: function(e, c, d) {
						form.openMorbusTubSpecificForm({action: 'add',object: 'MorbusTubDiagSop', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusTubDiagSopList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusTubDiagSopList',
					handler: function(e, c, d) {
						var id = 'MorbusTubDiagSopTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusTubDiagGeneralForm: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusTubDiagGeneralForm',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusTubSpecificForm({action: 'edit',object: 'MorbusTubDiagGeneralForm', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusTubDiagGeneralForm',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusTubDiagGeneralForm',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusTubDiagGeneralFormList',
					handler: function(e, c, d) {
						form.openMorbusTubSpecificForm({action: 'add',object: 'MorbusTubDiagGeneralForm', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusTubDiagGeneralFormList',
					handler: function(e, c, d) {
						form.rightPanel.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusTubDiagGeneralFormList',
					handler: function(e, c, d) {
						var id = 'MorbusTubDiagGeneralFormTable_'+ d.object_id;
						form.rightPanel.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusTubConditChem: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusTubConditChem',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusTubSpecificForm({action: 'edit',object: 'MorbusTubConditChem', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusTubConditChem',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusTubConditChem',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusTubConditChemList',
					handler: function(e, c, d) {
						form.openMorbusTubSpecificForm({action: 'add',object: 'MorbusTubConditChem', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusTubConditChemList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusTubConditChemList',
					handler: function(e, c, d) {
						var id = 'MorbusTubConditChemTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusTubStudyResult: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusTubStudyResult',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusTubSpecificForm({action: 'edit',object: 'MorbusTubStudyResult', eldata: d});
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusTubStudyResultList',
					handler: function(e, c, d) {
						form.openMorbusTubSpecificForm({action: 'add',object: 'MorbusTubStudyResult', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusTubStudyResultList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusTubStudyResultList',
					handler: function(e, c, d) {
						var id = 'MorbusTubStudyResultTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			EvnDirectionTub: {
				edit: {
					actionType: 'edit',
					sectionCode: 'EvnDirectionTub',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusTubSpecificForm({action: 'edit',object: 'EvnDirectionTub', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'EvnDirectionTub',
					handler: function(e, c, d) {
						form.deleteEvent('EvnDirectionTub',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'EvnDirectionTubList',
					handler: function(e, c, d) {
						form.openMorbusTubSpecificForm({action: 'add',object: 'EvnDirectionTub', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'EvnDirectionTubList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'EvnDirectionTubList',
					handler: function(e, c, d) {
						var id = 'EvnDirectionTubTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusTubPrescr: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusTubPrescr',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusTubSpecificForm({action: 'edit',object: 'MorbusTubPrescr', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusTubPrescr',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusTubPrescr',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusTubPrescrList',
					handler: function(e, c, d) {
						form.openMorbusTubSpecificForm({action: 'add',object: 'MorbusTubPrescr', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusTubPrescrList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusTubPrescrList',
					handler: function(e, c, d) {
						var id = 'MorbusTubPrescrTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusTubMDRPrescr: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusTubMDRPrescr',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusTubSpecificForm({action: 'edit',object: 'MorbusTubMDRPrescr', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusTubMDRPrescr',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusTubMDRPrescr',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusTubMDRPrescrList',
					handler: function(e, c, d) {
						form.openMorbusTubSpecificForm({action: 'add',object: 'MorbusTubMDRPrescr', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusTubMDRPrescrList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusTubMDRPrescrList',
					handler: function(e, c, d) {
						var id = 'MorbusTubMDRPrescrTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusTubMDRStudyResult: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusTubMDRStudyResult',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusTubSpecificForm({action: 'edit',object: 'MorbusTubMDRStudyResult', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusTubMDRStudyResult',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusTubMDRStudyResult',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusTubMDRStudyResultList',
					handler: function(e, c, d) {
						form.openMorbusTubSpecificForm({action: 'add',object: 'MorbusTubMDRStudyResult', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusTubMDRStudyResultList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusTubMDRStudyResultList',
					handler: function(e, c, d) {
						var id = 'MorbusTubMDRStudyResultTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},

			MorbusVener: {
				inputMorbusVener_DiagDT: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('MorbusVener_DiagDT', d);
					}
				},
				inputVenerDetectType: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('VenerDetectType', d);
					}
				},
				inputMorbusVener_IsVizitProf: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('MorbusVener_IsVizitProf', d);
					}
				},
				inputMorbusVener_IsPrevent: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('MorbusVener_IsPrevent', d);
					}
				},
				inputMorbusVener_IsAlco: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('MorbusVener_IsAlco', d);
					}
				},
				inputMorbusVener_updDiagDT: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {

						form.createMorbusVenerHtmlForm('MorbusVener_updDiagDT', d);
					}
				},
				inputMorbusVener_HospDT: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {

						form.createMorbusVenerHtmlForm('MorbusVener_HospDT', d);
					}
				},
				inputMorbusVener_BegTretDT: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {

						form.createMorbusVenerHtmlForm('MorbusVener_BegTretDT', d);
					}
				},
				inputLpu_bid: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {

						form.createMorbusVenerHtmlForm('Lpu_bid', d);
					}
				},
				inputMorbusVener_EndTretDT: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('MorbusVener_EndTretDT', d);
					}
				},
				inputLpu_eid: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('Lpu_eid', d);
					}
				},
				inputMorbusVener_DeRegDT: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('MorbusVener_DeRegDT', d);
					}
				},
				inputVenerDeRegCauseType: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('VenerDeRegCauseType', d);
					}
				},
				inputMorbusVener_MensLastDT: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('MorbusVener_MensLastDT', d);
					}
				},
				inputMorbusVener_LiveCondit: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('MorbusVener_LiveCondit', d);
					}
				},
				inputMorbusVener_WorkCondit: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('MorbusVener_WorkCondit', d);
					}
				},
				inputMorbusVener_Heredity: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('MorbusVener_Heredity', d);
					}
				},
				inputMorbusVener_UseAlcoNarc: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('MorbusVener_UseAlcoNarc', d);
					}
				},
				inputMorbusVener_PlaceInfect: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('MorbusVener_PlaceInfect', d);
					}
				},
				inputMorbusVener_MensBeg: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('MorbusVener_MensBeg', d);
					}
				},
				inputMorbusVener_MensEnd: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('MorbusVener_MensEnd', d);
					}
				},
				inputMorbusVener_MensOver: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('MorbusVener_MensOver', d);
					}
				},
				inputMorbusVener_SexualInit: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('MorbusVener_SexualInit', d);
					}
				},
				inputMorbusVener_CountPregnancy: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('MorbusVener_CountPregnancy', d);
					}
				},
				inputMorbusVener_CountBirth: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('MorbusVener_CountBirth', d);
					}
				},
				inputMorbusVener_CountAbort: {
					actionType: 'edit',
					sectionCode: 'MorbusVener',
					dblClick: false,
					handler: function(e, c, d) {
						form.createMorbusVenerHtmlForm('MorbusVener_CountAbort', d);
					}
				},
				saveMorbusVener: {actionType: 'edit', sectionCode: 'MorbusVener', handler: function(e, c, d) {form.submitMorbusVenerHtmlForm('saveMorbusVener',d);}}
			},
			MorbusVenerContact: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusVenerContact',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusVenerSpecificForm({action: 'edit',object: 'MorbusVenerContact', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusVenerContact',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusVenerContact',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusVenerContactList',
					handler: function(e, c, d) {
						form.openMorbusVenerSpecificForm({action: 'add',object: 'MorbusVenerContact', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusVenerContactList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusVenerContactList',
					handler: function(e, c, d) {
						var id = 'MorbusVenerContactTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusVenerTreatSyph: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusVenerTreatSyph',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusVenerSpecificForm({action: 'edit',object: 'MorbusVenerTreatSyph', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusVenerTreatSyph',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusVenerTreatSyph',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusVenerTreatSyphList',
					handler: function(e, c, d) {
						form.openMorbusVenerSpecificForm({action: 'add',object: 'MorbusVenerTreatSyph', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusVenerTreatSyphList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusVenerTreatSyphList',
					handler: function(e, c, d) {
						var id = 'MorbusVenerTreatSyphTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusVenerAccurTreat: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusVenerAccurTreat',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusVenerSpecificForm({action: 'edit',object: 'MorbusVenerAccurTreat', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusVenerAccurTreat',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusVenerAccurTreat',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusVenerAccurTreatList',
					handler: function(e, c, d) {
						form.openMorbusVenerSpecificForm({action: 'add',object: 'MorbusVenerAccurTreat', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusVenerAccurTreatList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusVenerAccurTreatList',
					handler: function(e, c, d) {
						var id = 'MorbusVenerAccurTreatTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			MorbusVenerEndTreat: {
				edit: {
					actionType: 'edit',
					sectionCode: 'MorbusVenerEndTreat',
					dblClick: true,
					handler: function(e, c, d) {
						form.openMorbusVenerSpecificForm({action: 'edit',object: 'MorbusVenerEndTreat', eldata: d});
					}
				},
				'delete': {
					actionType: 'edit',
					sectionCode: 'MorbusVenerEndTreat',
					handler: function(e, c, d) {
						form.deleteEvent('MorbusVenerEndTreat',d);
					}
				},
				add: {
					actionType: 'edit',
					sectionCode: 'MorbusVenerEndTreatList',
					handler: function(e, c, d) {
						form.openMorbusVenerSpecificForm({action: 'add',object: 'MorbusVenerEndTreat', eldata: d});
					}
				},
				print: {
					actionType: 'view',
					sectionCode: 'MorbusVenerEndTreatList',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},
				toggleDisplay: {
					actionType: 'view',
					sectionCode: 'MorbusVenerEndTreatList',
					handler: function(e, c, d) {
						var id = 'MorbusVenerEndTreatTable_'+ d.object_id;
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
					}
				}
			},
			EvnXmlDirectionLink: {
				printdoc:{
					sectionCode: 'EvnXmlDirectionLink',
					actionType: 'view',
					handler: function(e, c, d) {
						var recordData = form.getObjectData('EvnXmlDirectionLink', d.object_id),
							EvnXml_id = recordData.EvnXml_id;

						sw.Promed.EvnXml.doPrintById(EvnXml_id);
					}
				},
				showActions: {
					actionType: 'view',
					sectionCode: 'EvnXmlDirectionLink',
					handler: function(e, c, d) {
						form.showActionsForEvnXmlDirection(e, c, d, 'showActions');
					}
				},
				showDoc: {
					actionType: 'view',
					sectionCode: 'EvnXmlDirectionLink',
					handler: function(e, c, d) {
						// сворачивание / разворачивание документа
						form.toggleDisplayDocument(d.object_id, d.object, d.isReadOnly);
					}
				},
				hideDoc: {
					actionType: 'view',
					sectionCode: 'EvnXmlDirectionLink',
					handler: function(e, c, d) {
						// сворачивание / разворачивание документа
						form.toggleDisplayDocument(d.object_id, d.object, d.isReadOnly);
					}
				}
			},
			FreeDocument: {
				printdoc:{
					sectionCode: 'FreeDocument',
					actionType: 'view',
					handler: function(e, c, d) {
						var EvnXml_id = d.object_id,
							doc = form.listEvnXml[EvnXml_id];
						if (doc) {
							doc.doPrint();
						} else if (EvnXml_id)  {
							sw.Promed.EvnXml.doPrintById(EvnXml_id);
						}
					}
				},
                showActions: {
                    actionType: 'view',
                    sectionCode: 'FreeDocument',
                    handler: function(e, c, d) {
                        form.showActions(e, c, d, 'showActions');
                    }
                },
                showActions2: {
                    actionType: 'view',
                    sectionCode: 'FreeDocument',
                    handler: function(e, c, d) {
                        form.showActions(e, c, d, 'showActions2');
                    }
                },
				adddoc: {
					actionType: 'add',
					sectionCode: 'FreeDocumentList',
					handler: function(e, c, d) {
                        form.addXmlDocument(d, 'FreeDocument', sw.Promed.EvnXml.MULTIPLE_DOCUMENT_TYPE_ID);
					}
				},
				showDoc: {
					actionType: 'view',
					sectionCode: 'FreeDocument',
					handler: function(e, c, d) {
						// сворачивание / разворачивание документа
                        form.toggleDisplayDocument(d.object_id, d.object, d.isReadOnly);
					}
				},
                hideDoc: {
                    actionType: 'view',
                    sectionCode: 'FreeDocument',
                    handler: function(e, c, d) {
                        // сворачивание / разворачивание документа
                        form.toggleDisplayDocument(d.object_id, d.object, d.isReadOnly);
                    }
				}
			},
            EvnXmlOther: {
				printdoc:{
					sectionCode: 'EvnXmlOther',
					actionType: 'view',
					handler: function(e, c, d) {
						var EvnXml_id = d.object_id,
							doc = form.listEvnXml[EvnXml_id];
						if (doc) {
							doc.doPrint();
						} else if (EvnXml_id)  {
							sw.Promed.EvnXml.doPrintById(EvnXml_id);
						}
					}
				},
                showActions: {
                    actionType: 'view',
                    sectionCode: 'EvnXmlOther',
                    handler: function(e, c, d) {
                        form.showActions(e, c, d, 'showActions');
                    }
                },
                showActions2: {
                    actionType: 'view',
                    sectionCode: 'EvnXmlOther',
                    handler: function(e, c, d) {
                        form.showActions(e, c, d, 'showActions2');
                    }
                },
                adddoc: {
                    actionType: 'add',
                    sectionCode: 'EvnXmlOtherList',
                    handler: function(e, c, d) {
                        form.addXmlDocument(d, 'EvnXmlOther', sw.Promed.EvnXml.MULTIPLE_DOCUMENT_TYPE_ID);
                    }
                },
                showDoc: {
                    actionType: 'view',
                    sectionCode: 'EvnXmlOther',
                    handler: function(e, c, d) {
                        // сворачивание / разворачивание документа
                        form.toggleDisplayDocument(d.object_id, d.object, d.isReadOnly);
                    }
                },
                hideDoc: {
                    actionType: 'view',
                    sectionCode: 'EvnXmlOther',
                    handler: function(e, c, d) {
                        // сворачивание / разворачивание документа
                        form.toggleDisplayDocument(d.object_id, d.object, d.isReadOnly);
                    }
                }
            },
            EvnXmlEpikriz: {
				printdoc:{
					sectionCode: 'EvnXmlEpikriz',
					actionType: 'view',
					handler: function(e, c, d) {
						var EvnXml_id = d.object_id,
							doc = form.listEvnXml[EvnXml_id];
						if (doc) {
							doc.doPrint();
						} else if (EvnXml_id)  {
							sw.Promed.EvnXml.doPrintById(EvnXml_id);
						}
					}
				},
                showActions: {
                    actionType: 'view',
                    sectionCode: 'EvnXmlEpikriz',
                    handler: function(e, c, d) {
                        form.showActions(e, c, d, 'showActions');
                    }
                },
                showActions2: {
                    actionType: 'view',
                    sectionCode: 'EvnXmlEpikriz',
                    handler: function(e, c, d) {
                        form.showActions(e, c, d, 'showActions2');
                    }
                },
                adddoc: {
                    actionType: 'add',
                    sectionCode: 'EvnXmlEpikrizList',
                    handler: function(e, c, d) {
                        form.addXmlDocument(d, 'EvnXmlEpikriz', sw.Promed.EvnXml.STAC_EPIKRIZ_TYPE_ID);
                    }
                },
                showDoc: {
                    actionType: 'view',
                    sectionCode: 'EvnXmlEpikriz',
                    handler: function(e, c, d) {
                        // сворачивание / разворачивание документа
                        form.toggleDisplayDocument(d.object_id, d.object, d.isReadOnly);
                    }
                },
                hideDoc: {
                    actionType: 'view',
                    sectionCode: 'EvnXmlEpikriz',
                    handler: function(e, c, d) {
                        // сворачивание / разворачивание документа
                        form.toggleDisplayDocument(d.object_id, d.object, d.isReadOnly);
                    }
                }
            },
            EvnPLDispScreenOnko: {
                adddoc: {
                    actionType: 'add',
                    sectionCode: 'EvnPLDispScreenOnkoList',
                    handler: function(e, c, d) {
						form.addNewEvnPLDispScreenOnko(d.object_id);
                    }
                },
                edit: {
                    sectionCode: 'EvnPLDispScreenOnko',
					actionType: 'edit',
                    handler: function(e, c, d) {
						var EvnPLDispScreenOnko_id = d.object_id;
						if (!EvnPLDispScreenOnko_id) {
							return false;
						}

						var params = {
                            Person_id: form.Person_id,
                            PersonEvn_id: form.PersonEvn_id,
                            Server_id: form.Server_id,
							UserMedStaffFact_id: form.userMedStaffFact.MedStaffFact_id,
							userMedStaffFact: form.userMedStaffFact,
							LpuSection_id: form.userMedStaffFact.LpuSection_id,
							MedPersonal_id: form.userMedStaffFact.MedPersonal_id,
							MedStaffFact_id: form.userMedStaffFact.MedStaffFact_id,
							Person_Firname: form.PersonInfoFrame.getFieldValue('Person_Firname'),
							Person_Surname: form.PersonInfoFrame.getFieldValue('Person_Surname'),
							Person_Secname: form.PersonInfoFrame.getFieldValue('Person_Secname'),
							Person_Birthday: form.PersonInfoFrame.getFieldValue('Person_Birthday'),
							EvnPLDispScreenOnko_id: EvnPLDispScreenOnko_id,
							callback: function() {
								form.loadNodeViewForm(form.Tree.getNodeById(form.node.id));
							}
						}
						getWnd('swEvnPLDispScreenOnkoWindow').show(params);
                    }
				},
                'delete': {
                    sectionCode: 'EvnPLDispScreenOnko',
					actionType: 'edit',
                    handler: function(e, c, d) {
						var EvnPLDispScreenOnko_id = d.object_id;
						if (!EvnPLDispScreenOnko_id) {
							return false;
						}

						var loadMask = new Ext.LoadMask(form.getEl(), {msg: "Удаление..."});
						loadMask.show();

						Ext.Ajax.request({
							callback: function (options, success, response) {
								loadMask.hide();
								if (success) {
									form.loadNodeViewForm(form.Tree.getNodeById(form.node.id));
								} else {
									sw.swMsg.alert('Ошибка', 'При удалении возникли ошибки');
									return false;
								}
							},
							params: {
								Evn_id: EvnPLDispScreenOnko_id
							},
							url: '/?c=Evn&m=deleteEvn'
						});
                    }
				}
            },
            EvnXmlProtokol: {
				printdoc:{
					sectionCode: 'EvnXmlProtokol',
					actionType: 'view',
					handler: function(e, c, d) {
						var EvnXml_id = d.object_id,
							doc = form.listEvnXml[EvnXml_id];
						if (doc) {
							doc.doPrint();
						} else if (EvnXml_id)  {
							sw.Promed.EvnXml.doPrintById(EvnXml_id);
						}
					}
				},
                showActions: {
                    actionType: 'view',
                    sectionCode: 'EvnXmlProtokol',
                    handler: function(e, c, d) {
                        form.showActions(e, c, d, 'showActions');
                    }
                },
                showActions2: {
                    actionType: 'view',
                    sectionCode: 'EvnXmlProtokol',
                    handler: function(e, c, d) {
                        form.showActions(e, c, d, 'showActions2');
                    }
                },
                adddoc: {
                    actionType: 'add',
                    sectionCode: 'EvnXmlProtokolList',
                    handler: function(e, c, d) {
                        form.addXmlDocument(d, 'EvnXmlProtokol', sw.Promed.EvnXml.STAC_PROTOCOL_TYPE_ID);
                    }
                },
                showDoc: {
                    actionType: 'view',
                    sectionCode: 'EvnXmlProtokol',
                    handler: function(e, c, d) {
                        // сворачивание / разворачивание документа
                        form.toggleDisplayDocument(d.object_id, d.object, d.isReadOnly);
                    }
                },
                hideDoc: {
                    actionType: 'view',
                    sectionCode: 'EvnXmlProtokol',
                    handler: function(e, c, d) {
                        // сворачивание / разворачивание документа
                        form.toggleDisplayDocument(d.object_id, d.object, d.isReadOnly);
                    }
                }
            },
            EvnXmlRecord: {
            	printrecordtop: {
            		sectionCode: 'EvnXmlRecord',
            		actionType: 'view',
            		handler: function(e, c, d) {
            			var EvnXml_id = d.object_id,
            				doc = form.listEvnXml[EvnXml_id];
            			if (doc) {
            				doc.doPrintHalf(false);
            			} else if (EvnXml_id)  {
            				sw.Promed.EvnXml.doPrintByIdHalf(EvnXml_id, false);
            			}
            		}
            	},
            	printrecordbot: {
            		sectionCode: 'EvnXmlRecord',
            		actionType: 'view',
            		handler: function(e, c, d) {
            			var EvnXml_id = d.object_id,
            				doc = form.listEvnXml[EvnXml_id];
            			if (doc) {
            				doc.doPrintHalf(true);
            			} else if (EvnXml_id)  {
            				sw.Promed.EvnXml.doPrintByIdHalf(EvnXml_id, true);
            			}
            		}
            	},
				printdoc:{
					sectionCode: 'EvnXmlRecord',
					actionType: 'view',
					handler: function(e, c, d) {
						var EvnXml_id = d.object_id,
							doc = form.listEvnXml[EvnXml_id];
						if (doc) {
							doc.doPrint();
						} else if (EvnXml_id)  {
							sw.Promed.EvnXml.doPrintById(EvnXml_id);
						}
					}
				},
                showActions: {
                    actionType: 'view',
                    sectionCode: 'EvnXmlRecord',
                    handler: function(e, c, d) {
                        form.showActions(e, c, d, 'showActions');
                    }
                },
                showActions2: {
                    actionType: 'view',
                    sectionCode: 'EvnXmlRecord',
                    handler: function(e, c, d) {
                        form.showActions(e, c, d, 'showActions2');
                    }
                },
                adddoc: {
                    actionType: 'add',
                    sectionCode: 'EvnXmlRecordList',
                    handler: function(e, c, d) {
                        form.addXmlDocument(d, 'EvnXmlRecord', sw.Promed.EvnXml.STAC_RECORD_TYPE_ID);
                    }
                },
                showDoc: {
                    actionType: 'view',
                    sectionCode: 'EvnXmlRecord',
                    handler: function(e, c, d) {
                        // сворачивание / разворачивание документа
                        form.toggleDisplayDocument(d.object_id, d.object, d.isReadOnly);
                    }
                },
                hideDoc: {
                    actionType: 'view',
                    sectionCode: 'EvnXmlRecord',
                    handler: function(e, c, d) {
                        // сворачивание / разворачивание документа
                        form.toggleDisplayDocument(d.object_id, d.object, d.isReadOnly);
                    }
                }
            },
			SurgicalList: {
				print: {
					sectionCode: 'SurgicalList',
					handler: function(e, c, d) {
						//log(d);
						this.printHtml(d.section_id);
					}.createDelegate(this)
				}
			},
			DirFailList: {
				print: {
					sectionCode: 'DirFailList',
					handler: function(e, c, d) {
						this.printHtml(d.section_id);
					}.createDelegate(this)
				},
				showAll: {
					sectionCode: 'DirFailList',
					handler: function(e, c, d) {
						var reload_params = {
							section_code: 'DirFailList',
							object_key: 'Person_id',
							object_value: d.object_id,
							parent_object_key: 'Person_id',
							parent_object_value: d.object_id,
							section_id: d.section_id,
							param_name: 'showAll',
							param_value: 2
						};
						form.reloadSection(reload_params);
					}.createDelegate(this)
				}
			},

			// #182475
			// Реакция Манту (регион 'ufa') / Манту/Диаскинтест (регион 'vologda'):
			MantuReaction: {
				// Печать:
				print: {
					sectionCode: 'MantuReaction',
					handler: function(e, c, d) {
						//log(d);
						this.printHtml(d.section_id);
					}.createDelegate(this)
				},

				// Открыть карту профилактических прививок (для региона 'vologda'):
				viewKard063: {
					actionType: 'view',
					sectionCode: 'MantuReaction',
					handler: function(e, c, d) {
						this.open_amm_Kard063(d);
					}.createDelegate(this)
				},

				// Просмотреть (для региона 'vologda'):
				viewMantu: {
					actionType: 'view',
					sectionCode: 'MantuReaction',
					handler: function(e, c, d) {
						getWnd('amm_mantuImplWithoutPurp').show(
							{
								action: 'view',
								add_new_mantu: 0,
								person_id: form.Person_id,
								fix_tub_id: d.object_id,
								source: "TubReaction"
							});
					}.createDelegate(this)
				}
			},

			// #182475
			// Исполненные прививки (регионы 'ufa', 'vologda'):
			Inoculation: {
				// Печать:
				print: {
					sectionCode: 'Inoculation',
					handler: function(e, c, d) {
						//log(d);
						this.printHtml(d.section_id);
					}.createDelegate(this)
				},

				// Открыть карту профилактических прививок (для региона 'vologda'):
				viewKard063: {
					actionType: 'view',
					sectionCode: 'Inoculation',
					handler: function(e, c, d) {
						this.open_amm_Kard063(d);
					}.createDelegate(this)
				}
			},

			// #182475
			// Планируемые прививки (регионы 'ufa', 'vologda'):
			InoculationPlan: {
				// Печать:
				print: {
					sectionCode: 'InoculationPlan',
					handler: function(e, c, d) {
						//log(d);
						this.printHtml(d.section_id);
					}.createDelegate(this)
				},

				// Открыть карту профилактических прививок (для региона 'vologda'):
				viewKard063: {
					actionType: 'view',
					sectionCode: 'InoculationPlan',
					handler: function(e, c, d) {
						this.open_amm_Kard063(d);
					}.createDelegate(this)
				}
			},

			//BOB - 10.05.2017
			EvnReanimatPeriod: {


				//BOB - 04.12.2017
				toggleDisplay: {//ок
					actionType: 'view',
					sectionCode: 'EvnReanimatPeriod',
					handler: function(e, c, d) {

						//console.log('BOB_Object_toggleDisplay_d=',d);  //BOB - 04.12.2017

						var id = 'EvnReanimatPeriod_'+d.object_id+'_Full' ;
						var btn = Ext.get('EvnReanimatPeriod_'+ d.object_id+'_toggleDisplay');
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
						btn.update(Ext.get(id).isDisplayed() ? langs('Скрыть') : langs('Показать'));
					}
				},

				//BOB - 04.12.2017
				ConditionList_toggleDisplay: {//ок
					actionType: 'view',
					sectionCode: 'EvnReanimatPeriod',
					handler: function(e, c, d) {

					//	console.log('BOB_Object_ConditionList_toggleDisplay_d=',d);  //BOB - 04.12.2017

						var id = 'EvnReanimatConditionList_'+d.object_id ;
						var btn = Ext.get('EvnReanimatPeriod_'+ d.object_id+'_ConditionList_toggleDisplay');
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
						btn.update(Ext.get(id).isDisplayed() ? langs('Скрыть') : langs('Показать'));
					}
				},

				//BOB - 09.12.2017
				ActionList_toggleDisplay: {//ок
					actionType: 'view',
					sectionCode: 'EvnReanimatPeriod',
					handler: function(e, c, d) {

						//console.log('BOB_Object_ActionList_toggleDisplayDisplay_d=',d);  //BOB - 04.12.2017

						var id = 'EvnReanimatActionList_'+d.object_id ;
						var btn = Ext.get('EvnReanimatPeriod_'+ d.object_id+'_ActionList_toggleDisplay');
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
						btn.update(Ext.get(id).isDisplayed() ? langs('Скрыть') : langs('Показать'));
					}
				},

				//BOB - 11.12.2017
				EvnScaleList_toggleDisplay: {//ок
					actionType: 'view',
					sectionCode: 'EvnReanimatPeriod',
					handler: function(e, c, d) {

						//console.log('BOB_Object_ActionList_toggleDisplayDisplay_d=',d);  //BOB - 04.12.2017

						var id = 'EvnScaleList_'+d.object_id ;
						var btn = Ext.get('EvnReanimatPeriod_'+ d.object_id+'_EvnScaleList_toggleDisplay');
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
						btn.update(Ext.get(id).isDisplayed() ? langs('Скрыть') : langs('Показать'));
					}
				},

				view: {
					actionType: 'view',
					sectionCode: 'EvnReanimatPeriod',
					handler: function(e, c, d) {
						if (getWnd('swEvnReanimatPeriodEditWindow').isVisible()){
							sw.swMsg.alert(langs('Сообщение'),'Форма реанимационного периода в данный момент открыта!' );
							return false;
						}

						console.log('BOB_Object_d=',d);  //BOB - 10.05.2017
						var action = 'view';
						var erp_data = form.getObjectData('EvnReanimatPeriod',d.object_id)
						if ( erp_data == false ) { return false;}
						console.log('BOB_Object_erp_data=',erp_data);  //BOB - 10.05.2017

						var params = {
								EvnReanimatPeriod_id: erp_data.EvnReanimatPeriod_id,
								ERPEW_title:langs('Редактирование реанимационного периода'),
								from: 'emk'
							};

							var RP_saved = false;
							params.Callback = function(pdata) {
								getWnd('swEvnReanimatPeriodEditWindow').hide();
								RP_saved = pdata;
							//	console.log('BOB_RP_saved=',RP_saved);
							};



						form.openForm('swEvnReanimatPeriodEditWindow','XXX_id',params,action,langs('Редактирование реанимационного периода'));
						//getWnd('swEvnReanimatPeriodEditWindow').show(params);

					}
				},

				edit: {
					actionType: 'edit',
					sectionCode: 'EvnReanimatPeriod',
					handler: function(e, c, d) {
						if (getWnd('swEvnReanimatPeriodEditWindow').isVisible()){
							sw.swMsg.alert(langs('Сообщение'),'Форма реанимационного периода в данный момент открыта!' );
							return false;
						}

						console.log('BOB_Object_d=',d);  //BOB - 10.05.2017
						var action = 'edit';
						var erp_data = form.getObjectData('EvnReanimatPeriod',d.object_id)
						if ( erp_data == false ) { return false;}
						console.log('BOB_Object_erp_data=',erp_data);  //BOB - 10.05.2017


						var params = {
								EvnReanimatPeriod_id: erp_data.EvnReanimatPeriod_id,
								ERPEW_title:langs('Редактирование реанимационного периода'),
								from: 'emk'

							};

							var RP_saved = false;
							params.Callback = function(pdata) {
								getWnd('swEvnReanimatPeriodEditWindow').hide();
								RP_saved = pdata;
							//	console.log('BOB_RP_saved=',RP_saved);
							};

						form.openForm('swEvnReanimatPeriodEditWindow','XXX_id',params,action,langs('Редактирование реанимационного периода'));
						//getWnd('swEvnReanimatPeriodEditWindow').show(params);
					}
				},
				//BOB - 12.05.2018
				'delete': {
					actionType: 'edit',
					sectionCode: 'EvnReanimatPeriod',
					handler: function(e, c, d) {
						form.deleteEvent('EvnReanimatPeriod',d);
//						sw.swMsg.show({
//							buttons: Ext.Msg.YESNO,
//							fn: function( buttonId ){
//								if ( buttonId == 'yes' ) {
//									alert('Охренеть!!!');
//									form.deleteEvent('EvnReanimatPeriod',d);
//								}
//							},
//							msg: 'Вы действительно хотите удалить реанимационный период?', //     langs('Сохранить протокол ВК?'),
//							title: langs('Вопрос')
//						});

					}

				},
				printRankinScale: {
					actionType: 'view',
					sectionCode: 'EvnReanimatPeriod',
					handler: function(e, c, d) {
						var erp_data = form.getObjectData('EvnReanimatPeriod', d.object_id);
						printRankinScale(erp_data.EvnReanimatPeriod_rid);
					}
				}

			},
			EvnReanimatCondition: {

				//BOB - 04.12.2017
				toggleDisplay: {//ок
					actionType: 'view',
					sectionCode: 'EvnReanimatCondition',
					handler: function(e, c, d) {

						//console.log('BOB_Object_toggleDisplay_d=',d);  //BOB - 04.12.2017
						//alert('toggleDisplay');

						var id = 'EvnReanimatCondition_'+d.object_id+'_Full' ;
						var btn = Ext.get('EvnReanimatCondition_'+ d.object_id+'_toggleDisplay');
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
						btn.update(Ext.get(id).isDisplayed() ? langs('Скрыть') : langs('Показать'));
					}
				}

			},
			EvnReanimatAction: {

				//BOB - 04.12.2017
				toggleDisplay: {//ок
					actionType: 'view',
					sectionCode: 'EvnReanimatAction',
					handler: function(e, c, d) {

						//console.log('BOB_Object_toggleDisplay_d=',d);  //BOB - 04.12.2017
						//alert('toggleDisplay');

						var id = 'EvnReanimatAction_'+d.object_id+'_Full' ;
						var btn = Ext.get('EvnReanimatAction_'+ d.object_id+'_toggleDisplay');
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
						btn.update(Ext.get(id).isDisplayed() ? langs('Скрыть') : langs('Показать'));
					}
				}

			},
			EvnScale: {

				//BOB - 04.12.2017
				toggleDisplay: {//ок
					actionType: 'view',
					sectionCode: 'EvnScale',
					handler: function(e, c, d) {

						//console.log('BOB_Object_toggleDisplay_d=',d);  //BOB - 04.12.2017
						//alert('toggleDisplay');

						var id = 'EvnScale_'+d.object_id+'_Full' ;
						var btn = Ext.get('EvnScale_'+ d.object_id+'_toggleDisplay');
						form.toggleDisplay(id,Ext.get(id).isDisplayed());
						btn.update(Ext.get(id).isDisplayed() ? langs('Скрыть') : langs('Показать'));
					}
				}

			},
			PersonQuarantine: {
				// Печать:
				print: {
					sectionCode: 'PersonQuarantine',
					handler: function(e, c, d) {
						form.printHtml(d.section_id);
					}
				},

				add: {
					sectionCode: 'PersonQuarantine',
					handler: function(e, c, d) {
						form.openQuarantineEditWindow({});
					}
				},

				edit: {
					sectionCode: 'PersonQuarantine',
					handler: function(e, c, d) {
						var params = {
							PersonQuarantine_id: d.object_id,
							action: 'edit'
						};
						form.openQuarantineEditWindow(params);
					}
				},

				view: {
					sectionCode: 'PersonQuarantine',
					handler: function(e, c, d) {
						var params = {
							PersonQuarantine_id: d.object_id,
							action: 'view'
						};
						form.openQuarantineEditWindow(params);
					}
				}
			}

			//BOB - 10.05.2017
		};
		// end config_actions для формы просмотра

		var handlers = this.config_actions;

		// для инпутов в профосмотрах сделаю привязку полей ввода по метаданным,
		// чтобы умешить кол-во строк кода в ЭМК
		// todo: сделать для остальных объектов то же самое
		// todo: метаданные полей вынести куда-то надо

		// метаданные объектов
		handlerObjects = [{
			name: 'EvnPLDispTeenInspection',
			sections: [{
				code: 'EvnPLDispTeenInspection_data',
				actionType: 'edit',
				inputs: [
					'PayType',
					'SetDate',
					'ConsDate',
					'AgeGroupDisp',
					'EduDate',
					'EducationInstitutionClass',
					'InstitutionNatureType',
					'InstitutionType',
					'WeightAbnormType',
					'HeightAbnormType',
					'NormaDisturbanceType',
					'NormaDisturbanceTypeU',
					'NormaDisturbanceTypeE',
					'HealthKind',
					'IsFinish',
					'IsTwoStage',
					'AssessmentHealth_Weight',
					'AssessmentHealth_Height',
					'AssessmentHealth_Gnostic',
					'AssessmentHealth_Motion',
					'AssessmentHealth_Social',
					'AssessmentHealth_Speech',
					'AssessmentHealth_P',
					'AssessmentHealth_Ax',
					'AssessmentHealth_Fa',
					'AssessmentHealth_Ma',
					'AssessmentHealth_Me'
				]
			}]
		}];

		// добавляем хэндлеры
		handlerObjects.forEach(function(obj){
			obj.sections.forEach(function(section){
				section.inputs.forEach(function(input){

					var inputName = input.split('_');
					var action = 'input';

					if (inputName[1]) action += inputName[1] // для таких: AssessmentHealth_Weight
					else action += inputName[0] // для таких: IsTwoStage

					handlers[obj.name][action] = {
						actionType: section.actionType,
						sectionCode: section.code,
						handler: function(e, c, d) {
							form.createInputArea(input, obj.name, d);
						}
					}
				})
			})
		})


		//log('handlers', handlers);

	    // действия пунктов меню "Случай другого типа", "Свидетельства"
		Ext.apply(sw.Promed.Actions, {
				New_EvnPLStom: 	{
					tooltip: langs('Создать случай стоматологического лечения'),
					text: langs('Стоматологии'),
					iconCls : 'eph-tooth16',
					disabled: false,
					actionType: 'write',
					handler: function()
					{
					}
				},
				New_EvnPLDispDop: {
					tooltip: langs('Создать случай дополнительной диспансеризации'),
					text: langs('Доп. диспансеризации'),
					iconCls : 'epl-ddisp-new16',
					disabled: false,
					actionType: 'write',
					handler: function()
					{
						form.openForm('swEvnPLDispDopEditWindow', 'EvnPLDispDop_id', {formParams:{}}, 'add');
					}
				},
				New_EvnPLDispWOW: {
					tooltip: langs('Создать случай диспансеризации ВОВ'),
					text: langs('Диспансеризации ВОВ'),
					iconCls : 'epl-ddisp-new16',
					disabled: false,
					actionType: 'write',
					handler: function()
					{

					}
				},
				New_EvnPLDispTeen14: {
					tooltip: langs('Создать случай диспансеризации 14-ти летних'),
					text: langs('Диспансеризации 14-ти летних'),
					iconCls : 'epl-ddisp-new16',
					disabled: false,
					actionType: 'write',
					handler: function()
					{

					}
				},
				New_SvidBirth: {
					tooltip: langs('о рождении'),
					text: langs('о рождении'),
					iconCls : 'svid-birth16',
					disabled: false,
					hidden: getRegionNick() == 'kz',
					actionType: 'write',
					handler: function()
					{
						getWnd('swMedSvidBirthEditWindow').show({
							action: 'add',
							formParams: {Person_id: form.Person_id}
						});
					}
				},
				New_SvidDeath: {
					tooltip: langs('о смерти'),
					text: langs('о смерти'),
					iconCls : 'svid-death16',
					disabled: false,
					actionType: 'write',
					handler: function()
					{
						getWnd('swMedSvidDeathEditWindow').show({
							action: 'add',
							formParams: {Person_id: form.Person_id}
						});
						//form.openForm('swMedSvidDeathEditWindow', 'DeathSvid_id', {formParams:{}}, 'add');
					}
				},
				New_SvidPntDeath: {
					tooltip: langs('о перинатальной смерти'),
					text: langs('о перинатальной смерти'),
					iconCls : 'svid-pdeath16',
					disabled: false,
					actionType: 'write',
					handler: function()
					{
						getWnd('swMedSvidPntDeathEditWindow').show({
							action: 'add',
							formParams: {Person_id: form.Person_id}
						});
					}
				}
		});

		// Конфиги акшенов для кнопок левой панели, пунктов контекстного меню и меню действия
		var configActions =
		{
			action_Open_EvnCostPrint:
			{
				nn: 'action_Open_EvnCostPrint',
				tooltip: langs('Открыть справку о стоимости лечения'),
				text: langs('Открыть справку о стоимости лечения'),
				iconCls : 'evn-open16',
				handler: function()
				{
					form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
					//form.openForm('swEvnPLEditWindow', 'EvnPL_id');
				}
			},
			action_Open_CmpCallCardCostPrint:
			{
				nn: 'action_Open_CmpCallCardCostPrint',
				tooltip: langs('Открыть справку о стоимости лечения'),
				text: langs('Открыть справку о стоимости лечения'),
				iconCls : 'evn-open16',
				handler: function()
				{
					form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
					//form.openForm('swEvnPLEditWindow', 'EvnPL_id');
				}
			},
			action_New_EvnPL:
			{
				nn: 'action_New_EvnPL',
				tooltip: langs('Создать новый случай АПЛ'),
				text: langs('Создать новый случай АПЛ'),
				iconCls : 'visit32',
				menuAlign: 'tr',
				//disabled: !isAdmin && !IS_DEBUG,
				//hidden: !isAdmin && !IS_DEBUG,
				actionType: 'write',
				handler: function()
				{
                    form.addNewEvnPLAndEvnVizitPL({});
				}
			},
			action_New_EvnPLDisp:
			{
				nn: 'action_New_EvnPLDisp',
				tooltip: 'Диспансеризация / Профосмотры',
				text: 'Диспансеризация / Профосмотры',
				iconCls : 'epl-ddisp-new16',
				menuAlign: 'tr',
				menu: form.EvnPLDispMenu,
				actionType: 'write'
			},
			action_New_EvnPLDispMigr:
			{
				nn: 'action_New_EvnPLDispMigr',
				tooltip: 'Создать случай мед. освидетельствования',
				text: 'Создать случай мед. освидетельствования',
				hidden: !isUserGroup('MedOsvMigr'),
				iconCls : 'foreigner32',
				actionType: 'write',
				handler: function() {
					form.addNewEvnPLDisp({
						DispClass_id: 19
					});
				}
			},
			action_New_EvnPLDispDriver:
			{
				nn: 'action_New_EvnPLDispDriver',
				tooltip: 'Создать случай мед. освидетельствования водителя',
				text: 'Создать случай мед. освидетельствования водителя',
				hidden: !isDrivingCommission(),
				iconCls : 'driver32',
				actionType: 'write',
				handler: function() {
					form.addNewEvnPLDisp({
						DispClass_id: 26
					});
				}
			},
			action_New_EvnPLDispScreen:
			{
				nn: 'action_New_EvnPLDispScreen',
				tooltip: langs('Добавить скрининговое исследование'),
				text: langs('Добавить скрининговое исследование'),
				iconCls : 'epl-ddisp-new16',
				menuAlign: 'tr',
				//disabled: !isAdmin && !IS_DEBUG,
				//hidden: !isAdmin && !IS_DEBUG,
				actionType: 'write',
				handler: function()
				{
                    form.addNewEvnPLDispScreen({});
				}
			},
			action_New_EvnUslugaTelemed:
			{
				nn: 'action_New_EvnUslugaTelemed',
				tooltip: langs('Выполнить консультацию'),
				text: langs('Выполнить консультацию'),
				iconCls : 'visit32',
				menuAlign: 'tr',
				disabled: true,
				//hidden: !isAdmin && !IS_DEBUG,
				actionType: 'write',
				handler: function()
				{
                    form.openEvnUslugaTelemedEditWindow('add', null);
				}
			},
			/*action_New_EvnPL_Other: {
				nn: 'action_New_EvnPL',
				tooltip: langs('Случай другого типа'),
				text: langs('<b>Создать случай другого типа</b>'),
				iconCls : 'patient32',
				menuAlign: 'tr',
				actionType: 'write',
				menu: new Ext.menu.Menu({
					items: [
						sw.Promed.Actions.New_EvnPLStom,
						sw.Promed.Actions.New_EvnPLDispDop,
						sw.Promed.Actions.New_EvnPLDispWOW,
						sw.Promed.Actions.New_EvnPLDispTeen14
					]
				})
			},*/
			action_New_EvnPS:
			{
				nn: 'action_New_EvnPS',
				tooltip: langs('Создать новый случай стационарного лечения'),
				text: langs('Создать новый случай стационарного лечения'),
				iconCls : 'visit32',
				actionType: 'write',
				//disabled: form.disAddPS,
				//hidden: !isAdmin && !IS_DEBUG,
				handler: function()
				{
					if(form.disAddPS){
						sw.swMsg.alert(langs('Создание новых КВС недоступно'), langs('У пациента имеются открытые КВС в даннном ЛПУ! Количество открытых КВС: ')+ form.disAddPS);
						return false;
					}
					var d = new Date();

					// Получаем идентификатор вида оплаты
					var index = form.payTypeStore.findBy(function(rec) {
						return (rec.get('PayType_SysNick') == form.getPayTypeSysNickOMS());
					});

					if ( index == -1 ) {
						sw.swMsg.alert(langs('Сообщение'), langs('Ошибка при получении идентификатор виды оплаты!'));
						return false;
					}

					var PayType_id = form.payTypeStore.getAt(index).get('PayType_id');

					var plop = getPolkaOptions();
					var op = getGlobalOptions();
					var formParams = {
						action:'add',
						EvnPS_IsCont: 1,
						EvnPS_IsDiagMismatch:1,
						EvnPS_IsImperHosp: 1,
						EvnPS_IsShortVolume: 1,
						EvnPS_IsWrongCure: 1,
						EvnPS_setDate: op.date,
						EvnPS_setTime: d.format('H:i'),
						LpuSection_id: form.userMedStaffFact.LpuSection_id,
						MedPersonal_id: form.userMedStaffFact.MedPersonal_id,
						MedStaffFact_id: form.userMedStaffFact.MedStaffFact_id,
						PayType_id: PayType_id,
						PrehospType_id: 2,
						PersonEvn_id: form.PersonEvn_id,
						Person_id: form.Person_id,
						Server_id: form.Server_id,
						addEvnSection: true
					};

					var onComplete = function(data) {
						formParams.callback = function(data) {
							var params = {node_lvl: 1, parent_node_id: 'root', node_id: 'EvnPS_'+ data.evnPSData.EvnPS_id};
							if (1 == form.Tree.getLoader().baseParams.type)
							{
								params.parent_node_id = 'EvnPSList_11114';
							}
							form.onCreateObject(params);
						};
						formParams.EvnPS_id = data.EvnPS_id;
						formParams.action = 'edit';
						formParams.deleteOnCancel = true;
						form.openForm('swEvnPSEditWindow',langs('Добавление КВС'),formParams);
					};

					var createNewEvnPS = function(data) {
						formParams.EvnPS_NumCard = data.EvnPS_NumCard;

						var loadMask = new Ext.LoadMask(Ext.get('PersonEmkTree'), {
							msg: "Создание нового случая стационарного лечения..."
						});
						loadMask.show();

						Ext.Ajax.request({
							params: formParams,
							callback: function(options, success, response) {
								loadMask.hide();
								var response_obj = Ext.util.JSON.decode(response.responseText);

								if(response_obj.success && response_obj.EvnPS_id) {
									onComplete(response_obj);
								}
							},
							url: '/?c=EvnPS&m=saveEvnPS'
						});
					};

					Ext.Ajax.request({
						params: {
							useCase: 'create_evnps_from_workplacestac',
							LpuSection_id: formParams.LpuSection_id,
							Person_id: formParams.Person_id
						},
						callback: function(opt, success, response) {
							var response_obj = Ext.util.JSON.decode(response.responseText);
							if ( Ext.isArray(response_obj) ) {
								if ( response_obj.length > 0 ) {
									// выводим список этих направлений с возможностью выбрать одно из них
									getWnd('swEvnDirectionSelectWindow').show({
										useCase: 'create_evnps_from_workplacestac',
										storeData: response_obj,
										formType: 'stac',
										Person_Firname: form.PersonInfoFrame.getFieldValue('Person_Firname'),
										Person_Surname: form.PersonInfoFrame.getFieldValue('Person_Surname'),
										Person_Secname: form.PersonInfoFrame.getFieldValue('Person_Secname'),
										Person_Birthday: form.PersonInfoFrame.getFieldValue('Person_Birthday'),
										Person_id: formParams.Person_id,
										callback: function(evnDirectionData){
											if (evnDirectionData && evnDirectionData.EvnDirection_id){
												// создавать КВС со связью с направлением
												formParams.EvnDirection_id = evnDirectionData.EvnDirection_id;
												formParams.EvnDirection_Num = evnDirectionData.EvnDirection_Num;
												formParams.EvnDirection_setDate = Ext.isDate(evnDirectionData.EvnDirection_setDate) ? Ext.util.Format.date(evnDirectionData.EvnDirection_setDate, 'd.m.Y') : evnDirectionData.EvnDirection_setDate;
												formParams.LpuSection_id = evnDirectionData.LpuSection_did;
												formParams.Org_did = evnDirectionData.Org_did;
												formParams.Lpu_did = evnDirectionData.Lpu_id;
												formParams.PrehospDirect_id = sw.Promed.EvnDirectionAllPanel.calcPrehospDirectId(evnDirectionData.Lpu_sid, evnDirectionData.Org_did, evnDirectionData.LpuSection_id, evnDirectionData.EvnDirection_IsAuto);
												formParams.Diag_did = evnDirectionData.Diag_did;
											}
										},
										onHide: function(){
											// если направление не выбрано, то создавать КВС без связи с направлением
											form.getEvnPSNumber(createNewEvnPS);
										}
									});
								} else {
									// создать КВС без связи с направлением
									form.getEvnPSNumber(createNewEvnPS);
								}
							} else {
								showSysMsg(langs('При получении данных для проверок произошла ошибка! Неправильный ответ сервера.'));
								return false;
							}
						},
						url: '/?c=EvnDirection&m=loadEvnDirectionList'
					});
				}
			},
			// Акшены на талоне
			action_Open_EvnPL:
			{
				nn: 'action_Open_EvnPL',
				tooltip: langs('Открыть случай амбулаторно-поликлинического лечения'),
				text: langs('<b>Открыть случай АПЛ</b>'),
				iconCls : 'evn-open16',
				handler: function()
				{
						form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
						//form.openForm('swEvnPLEditWindow', 'EvnPL_id');
				}
			},
			action_New_EvnVizitPL:
			{
				nn: 'action_New_EvnVizitPL',
				tooltip: langs('Создать посещение'),
				text: langs('Создать посещение'),
				iconCls : 'epl-visit16',
				actionType: 'write',
				handler: function()
				{
					var node = form.Tree.getSelectionModel().selNode;
					if (!node || 'EvnPL' != node.attributes.object || 'EvnPLList_11115' == node.id) {
						sw.swMsg.alert(langs('Сообщение'), langs('Выберите случай АПЛ.'));
						return false;
					}
					if (!node.attributes.accessType || 'view' == node.attributes.accessType || form.isReadonly) {
						sw.swMsg.alert(langs('Сообщение'), langs('Случай АПЛ доступен только на чтение!'));
						return false;
					}

					var callback = function() {
						// to do добавить проверку на число посещений (не ноль)
						form.addEvnVizitPL({'EvnPL_id': node.attributes.object_value});
					};
					if (!form.node || !form.node.id || form.node.id != node.id) {
						//form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
						form.requireCheckChange = false;
						form.loadTreeNode({
							node: node,
							callback: function() {
								form.Tree.fireEvent('click', node, false, callback);
								form.isFirstAdminCheck = false;
								form.requireCheckChange = true;
							}
						});
					} else {
						callback();
					}
				}
			},
			action_Open_EvnPS:
			{
				nn: 'action_Open_EvnPS',
				tooltip: langs('Открыть карту выбывшего из стационара'),
				text: langs('<b>Открыть КВС</b>'),
				iconCls : 'emc-evnps32',
				handler: function()
				{
					//form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
					form.openForm('swEvnPSEditWindow', 'EvnPS_id',{onHide: Ext.emptyFn},'view');
				}
			},
			action_Delete_EvnPS:
			{
				nn: 'action_Delete_EvnPS',
				tooltip: 'Удалить карту выбывшего из стационара',
				text: 'Удалить КВС',
				iconCls : 'delete16',
				actionType: 'write',
				handler: function()
				{
					var node = form.Tree.getSelectionModel().selNode;
					form.deleteEvent(node.attributes.object, {object: node.attributes.object, object_id: node.attributes.object_value});
				}
			},
			action_Print_EvnPS:
			{
				nn: 'action_Print_EvnPS',
				tooltip: langs('Печать'),
				text: langs('Печать'),
				iconCls : 'print16',
				menu: new Ext.menu.Menu([{
					text: langs('003/у - Медицинская карта больного'),
					handler: function () {
						var object_value = form.Tree.getSelectionModel().selNode.attributes.object_value;
						printEvnPS003({
							EvnPS_id: object_value
						});
					}
				}, {
					text: langs('Справка о стоимости лечения'),
					hidden: !getRegionNick().inlist([ 'kz', 'perm', 'ufa' ]),
					handler: function(){
						var object_value = form.Tree.getSelectionModel().selNode.attributes.object_value;
						sw.Promed.CostPrint.print({
							Evn_id: object_value,
							type: 'EvnPS'
						});
					}
				}, {
					text: langs('003-1/у - Медицинская карта прерывания беременности'),
					handler: function () {
						var object_value = form.Tree.getSelectionModel().selNode.attributes.object_value;
						printBirt({
							'Report_FileName': 'han_EvnPS_Abort.rptdesign',
							'Report_Params': '&paramEvnPS=' + object_value,
							'Report_Format': 'pdf'
						});
					}
				}, {
					text: langs('097/у - История развития новорожденного'),
					handler: function () {

						var object_value = form.Tree.getSelectionModel().selNode.attributes.object_value;
						if(getRegionNick() == 'kz'){
							Ext.Ajax.request({ //https://redmine.swan.perm.ru/issues/36513
								url: '/?c=EvnPS&m=checkEvnPSChild',
								callback: function(options, success, response)
								{
									if (success)
									{
										var response_obj = Ext.util.JSON.decode(response.responseText);

										if(response_obj[0]){
											printBirt({
												'Report_FileName': 'EvnPS_Child.rptdesign',
												'Report_Params': '&paramEvnPS=' + object_value,
												'Report_Format': 'pdf'
											});
										}
										else
											alert(langs('Доступно только для КВС ребенка'));
									}
								},
								params: {
									Person_id: form.Person_id
								}
							});
						}else{
							printBirt({
								'Report_FileName': 'EvnPS_Child.rptdesign',
								'Report_Params': '&paramEvnPS=' + object_value,
								'Report_Format': 'pdf'
							});
						}
					}
				}, {
					text: langs('096/у - История родов'),
					handler: function () {
						var object_value = form.Tree.getSelectionModel().selNode.attributes.object_value;
						if(getRegionNick() == 'kz'){
							Ext.Ajax.request({ //https://redmine.swan.perm.ru/issues/36513
								url: '/?c=EvnPS&m=checkEvnPSBirth',
								callback: function(options, success, response)
								{
									if (success)
									{
										var response_obj = Ext.util.JSON.decode(response.responseText);

										if(response_obj[0]){
											if (getRegionNick() == 'kz') {
												printBirt({
													'Report_FileName': 'EvnPS_Birth.rptdesign',
													'Report_Params': '&paramEvnPS=' + object_value,
													'Report_Format': 'pdf'
												});
											}
											else {
												printBirt({
													'Report_FileName': 'EvnPS_Birth_2016.rptdesign',
													'Report_Params': '&paramEvnPS=' + object_value,
													'Report_Format': 'pdf'
												});
											}
										}
										else
											alert(langs('Доступно только для КВС матери'));
									}
								},
								params: {
									EvnPS_id: object_value
								}
							});
						}else{
							if (getRegionNick() == 'kz') {
								printBirt({
									'Report_FileName': 'EvnPS_Birth.rptdesign',
									'Report_Params': '&paramEvnPS=' + object_value,
									'Report_Format': 'pdf'
								});
							}
							else {
								printBirt({
									'Report_FileName': 'EvnPS_Birth_2016.rptdesign',
									'Report_Params': '&paramEvnPS=' + object_value,
									'Report_Format': 'pdf'
								});
							}
						}
					}
				}, {
					text: (getRegionNick() == 'kz' ? langs('066-3/у - Статкарта выбывшего из психиатрического стационара') : langs('066-1/у - Статкарта выбывшего из псих/нарко-стационара')),
					handler: function () {
						var object_value = form.Tree.getSelectionModel().selNode.attributes.object_value;
                        Ext.Ajax.request({ //https://redmine.swan.perm.ru/issues/36513
                            url: '/?c=EvnPS&m=getMorbusCrazy',
                            callback: function(options, success, response)
                            {
                                if (success)
                                {
                                    var response_obj = Ext.util.JSON.decode(response.responseText);

                                    if(response_obj[0]){
                                        var paramEvnPS = object_value;
                                        var paramMorbus = response_obj[0].Morbus_id;
                                        var paramEvnsection = response_obj[0].EvnSection_id;
                                        if(getRegionNick() == 'kz'){
											printBirt({
												'Report_FileName': 'han_EvnPS_f066_3u.rptdesign',
												'Report_Params': '&paramEvnPS=' + paramEvnPS + '&paramMorbus=' + paramMorbus + '&paramEvnSection=' + paramEvnsection,
												'Report_Format': 'pdf'
											});
										} else {
											printBirt({
												'Report_FileName': 'hosp_f661u2.rptdesign',
												'Report_Params': '&paramEvnPS=' + paramEvnPS + '&paramMorbus=' + paramMorbus + '&paramEvnSection=' + paramEvnsection,
												'Report_Format': 'pdf'
											});
										}
                                    }
                                    else
                                        alert(langs('Отсутствует специфика по психиатрии/наркологии'));
                                }
                            },
                            params: {
                                EvnPS_id: object_value
                            }
                        });
					}
				}, {
					text: langs('066-1/у - Статкарта выбывшего из наркологического стационара'),
					hidden: (getRegionNick() != 'kz'),
					handler: function () {
						var object_value = form.Tree.getSelectionModel().selNode.attributes.object_value;
                        Ext.Ajax.request({ //https://redmine.swan.perm.ru/issues/36513
                            url: '/?c=EvnPS&m=getMorbusCrazy',
                            callback: function(options, success, response)
                            {
                                if (success)
                                {
                                    var response_obj = Ext.util.JSON.decode(response.responseText);

                                    if(response_obj[0]){
                                        var paramEvnPS = object_value;
                                        var paramMorbus = response_obj[0].Morbus_id;
                                        var paramEvnsection = response_obj[0].EvnSection_id;
										printBirt({
											'Report_FileName': 'han_EvnPS_f066_1u.rptdesign',
											'Report_Params': '&paramEvnPS=' + paramEvnPS + '&paramMorbus=' + paramMorbus + '&paramEvnSection=' + paramEvnsection,
											'Report_Format': 'pdf'
										});
                                    }
                                    else
                                        alert(langs('Отсутствует специфика по психиатрии/наркологии'));
                                }
                            },
                            params: {
                                EvnPS_id: object_value
                            }
                        });
					}
				}, {
					text: ((getRegionNick() == 'kz') ? langs('066-4/у Статистическая карта прошедшего лечение в дневном стационаре и стационаре на дому') : langs('003-2/у-88 Карта больного дневного стационара (поликлиники, больнице), стационара на дому, стационара дневного пребывания в больнице')),
					handler: function() {
						var object_value = form.Tree.getSelectionModel().selNode.attributes.object_value;
						if(getRegionNick() == 'kz'){
							printBirt({
								'Report_FileName': 'han_EvnPS_f066_4u.rptdesign',
								'Report_Params': '&paramEvnPS=' + object_value,
								'Report_Format': 'pdf'
							});
						} else {
							printBirt({
								'Report_FileName': 'han_EvnPS_Card.rptdesign',
								'Report_Params': '&paramEvnPS=' + object_value,
								'Report_Format': 'pdf'
							});
							printBirt({
								'Report_FileName': 'han_EvnPS_Card_oborot.rptdesign',
								'Report_Params': '&paramEvnPS=' + object_value,
								'Report_Format': 'pdf'
							});
						}
					}
				},{
					text: langs('003-2/у - КАРТА больного дневного стационара (поликлиники, больницы), стационара на дому'),
					hidden: true,//getRegionNick() != 'kz',
					handler: function () {
						var object_value = form.Tree.getSelectionModel().selNode.attributes.object_value;
						printBirt({
							'Report_FileName': 'han_EvnPS_f003u2.rptdesign',
							'Report_Params': '&paramEvnPS=' + object_value,
							'Report_Format': 'pdf'
						});
					}
				}, {
					text: langs('066/у - Статистическая карта выбывшего из стационара'),
					hidden: getRegionNick() != 'kz',
					handler: function () {
						var object_value = form.Tree.getSelectionModel().selNode.attributes.object_value;
						printBirt({
							'Report_FileName': 'han_EvnPS_f066u.rptdesign',
							'Report_Params': '&paramEvnPS=' + object_value,
							'Report_Format': 'pdf'
						});
					}
				},{
					text: langs('114/у - Сопроводительный лист и талон к нему'),
					hidden: false,
					handler: function () {
						var object_value = form.Tree.getSelectionModel().selNode.attributes.object_value;
						printBirt({
							'Report_FileName': 'cmp_f114u.rptdesign',
							'Report_Params': '&paramEvnPS=' + object_value,
							'Report_Format': 'pdf'
						});
					}
				},{
					text: langs('Печать шкалы Рэнкина'),
					id: 'action_Print_EvnPS_RankinScale',
					hidden: false,
					handler: function () {
						var object_value = form.Tree.getSelectionModel().selNode.attributes.object_value;
						printRankinScale(object_value);
					}
				}]
				)/*,
				handler: function()
				{
					//form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
					form.openForm('swEvnPSEditWindow', 'EvnPS_id',{onHide: Ext.emptyFn},'view');
				}*/
			},
			action_Open_EvnSection:
			{
				nn: 'action_Open_EvnSection',
				tooltip: langs('Открыть форму "Движение по отделениям" чтобы перевести в другое отделение/палату'),
				text: langs('<b>Открыть случай движения в отделении</b>'),
				iconCls : 'sections-move32',
				disabled: true,
				handler: function()
				{
					//form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
					form.openForm('swEvnSectionEditWindow', 'EvnSection_id',{onHide: Ext.emptyFn, formParams:{EvnSection_id: form.Tree.getSelectionModel().selNode.attributes.object_value}},'view');
				}
			},
			action_print_Discharge: //https://redmine.swan.perm.ru/issues/28138
			{
				nn: 'action_print_Discharge',
				tooltip: langs('Печать выписки из истории болезни'),
				text: langs('Печать выписки из истории болезни'),
				iconCls : 'print16',
				disabled: false,
				handler: function()
				{
					var object_value = form.Tree.getSelectionModel().selNode.attributes.object_value;
					if (getRegionNick() == 'kz') {
						object_value = form.Tree.getSelectionModel().selNode.parentNode.attributes.object_value;
						printBirt({
							'Report_FileName': 'f027u_Evn.rptdesign',
							'Report_Params': '&paramEvn=' + object_value,
							'Report_Format': 'pdf'
						});
					} else if (isEncrypHIVRegion()) {
						printBirt({
							'Report_FileName': 'han_EvnPS_Discharge.rptdesign',
							'Report_Params': '&paramEvnSection=' + object_value + '&paramLpu=' + getGlobalOptions().lpu_id,
							'Report_Format': (getRegionNick() == 'vologda') ? 'pdf' : 'doc'
						});
					} else {
						printBirt({
							'Report_FileName': 'han_EvnPS_Discharge.rptdesign',
							'Report_Params': '&paramEvnSection=' + object_value,
							'Report_Format': (getRegionNick() == 'vologda') ? 'pdf' : 'doc'
						});
					}
				}
			},
			action_print_Interim: //https://redmine.swan.perm.ru/issues/28940
			{
				nn: 'action_print_Interim',
				tooltip: langs('Печать этапного эпикриза'),
				text: langs('Печать этапного эпикриза'),
				iconCls : 'print16',
				disabled: false,
				handler: function()
				{
					var object_value = form.Tree.getSelectionModel().selNode.attributes.object_value;
					if (isEncrypHIVRegion()) {
						printBirt({
							'Report_FileName': 'han_EvnPS_Interim.rptdesign',
							'Report_Params': '&paramEvnSection=' + object_value + '&paramLpu=' + getGlobalOptions().lpu_id,
							'Report_Format': 'doc'
						});
					} else {
						printBirt({
							'Report_FileName': 'han_EvnPS_Interim.rptdesign',
							'Report_Params': '&paramEvnSection=' + object_value,
							'Report_Format': 'doc'
						});
					}
				}
			},
		    //Artamonov 19.06.2018
			action_print_EpicrisReab: //https://redmine.swan.perm.ru/issues/29573
			{
				nn: 'action_print_EpicrisReab',
				tooltip: langs('Печать реабилитационного эпикриза'),
				text: langs('Печать реабилитационного эпикриза'),
				iconCls : 'print16',
				disabled: false,
				handler: function()
				{
					if (getRegionNick() == 'ufa') {
						alert('fffffffffffffff');
						var object_value = form.Tree.getSelectionModel().selNode.attributes.object_value;
						console.log('object_value=',object_value);

						var url = '&titleScale=' + "glasgow";
						url += '&scaleSysnick=' + 10;
						url += '&StageName=' + 'ddddd';
										url += '&DateScale=' + '25.10.2018';
										url += '&TimeScale=' + '10:47';
						url += '&MedPersonal=' + 8;
												url += '&LpuId=' + 35;
												url += '&ScaleId=' + 16;

						printBirt({
							'Report_FileName': 'formScales.rptdesign',
							'Report_Params': url,
							'Report_Format': 'doc'
						});



						//window.open('/?c=ReportRun&m=RunByFileName&Report_FileName='+'han_EvnPS_Interim.rptdesign'+'&Report_Params='+encodeURIComponent('&paramEvnSection=' + object_value)+'&Report_Format='+'doc', '_blank');
						//window.open('/?c=ReportRun&m=RunByFileName&Report_FileName='+'formScales.rptdesign'+'&Report_Params='+encodeURIComponent(url)+'&Report_Format='+'doc', '_blank');
						//window.open(url + '&Report_Format='+'doc', '_blank');
					}


//
//					if (getRegionNick() == 'kz') {
//						printBirt({
//							'Report_FileName': 'f0041u.rptdesign',
//							'Report_Params': '&paramEvnSection=' + object_value,
//							'Report_Format': 'pdf'
//						});
//					} else if(isEncrypHIVRegion()) {
//						printBirt({
//							'Report_FileName': 'han_EvnPrescrTreatr_List.rptdesign',
//							'Report_Params': '&paramEvnSection=' + object_value + '&paramLpu=' + getGlobalOptions().lpu_id,
//							'Report_Format': 'doc'
//						});
//					} else {
//						printBirt({
//							'Report_FileName': 'han_EvnPrescrTreatr_List.rptdesign',
//							'Report_Params': '&paramEvnSection=' + object_value,
//							'Report_Format': 'doc'
//						});
//					}
				}
			},
			///////////////////////////////////////////
			action_print_TreatrList: //https://redmine.swan.perm.ru/issues/29573
			{
				nn: 'action_print_TreatrList',
				tooltip: langs('Печать листа назначений'),
				text: langs('Печать листа назначений'),
				iconCls : 'print16',
				disabled: false,
				handler: function()
				{
					var object_value = form.Tree.getSelectionModel().selNode.attributes.object_value;
					if (getRegionNick() == 'kz') {
						printBirt({
							'Report_FileName': 'f0041u.rptdesign',
							'Report_Params': '&paramEvnSection=' + object_value,
							'Report_Format': 'pdf'
						});
					} else if(isEncrypHIVRegion()) {
						printBirt({
							'Report_FileName': 'han_EvnPrescrTreatr_List.rptdesign',
							'Report_Params': '&paramEvnSection=' + object_value + '&paramLpu=' + getGlobalOptions().lpu_id,
							'Report_Format': 'doc'
						});
					} else {
						printBirt({
							'Report_FileName': 'han_EvnPrescrTreatr_List.rptdesign',
							'Report_Params': '&paramEvnSection=' + object_value,
							'Report_Format': 'doc'
						});
					}
				}
			},
			action_print_List: //https://redmine.swan.perm.ru/issues/29573
			{
				nn: 'action_print_List',
				tooltip: langs('Листок назначений'),
				text: langs('Листок назначений'),
				iconCls : 'print16',
				disabled: false,
				handler: function()
				{
					var object_value = form.Tree.getSelectionModel().selNode.attributes.object_value;
					if (isEncrypHIVRegion()) {
						printBirt({
							'Report_FileName': 'han_EvnPrescr_List.rptdesign',
							'Report_Params': '&paramEvnSection=' + object_value + '&paramLpu=' + getGlobalOptions().lpu_id,
							'Report_Format': 'doc'
						});
					} else {
						printBirt({
							'Report_FileName': 'han_EvnPrescr_List.rptdesign',
							'Report_Params': '&paramEvnSection=' + object_value,
							'Report_Format': 'doc'
						});
					}
				}
			},
			action_print_Obs_List: //https://redmine.swan.perm.ru/issues/29607
			{
				nn: 'action_print_Obs_List',
				tooltip: langs('Печать листа обследования'),
				text: langs('Печать листа обследования'),
				iconCls : 'print16',
				disabled: false,
				handler: function()
				{
					var object_value = form.Tree.getSelectionModel().selNode.attributes.object_value;
					printBirt({
						'Report_FileName': 'han_EvnPrescrObs_List.rptdesign',
						'Report_Params': '&paramEvnSection=' + object_value,
						'Report_Format': 'doc'
					});
				}
			},
            action_print_PersonSoglasieStac:
            {
                nn: 'action_print_PersonSoglasieStac',
                tooltip: langs('Печать согласия на мед.вмешательство'),
                text: langs('Печать согласия на мед.вмешательство'),
                iconCls : 'print16',
                disabled: false,
                handler: function()
                {
					//PersonCardInfoPerson
                    var Person_id = form.PersonInfoFrame.getFieldValue('Person_id');
                    var node = form.Tree.getSelectionModel().selNode;
					var nodeData = form.getObjectData('EvnSection', node.attributes.object_value);
					var MedPersonal_id = nodeData.MedPersonal_id;
					if(getRegionNick() == 'krym'){ //https://redmine.swan.perm.ru/issues/93026
						printBirt({
							'Report_FileName': 'PersonCardInfoConsent.rptdesign',
							'Report_Params': '&paramPerson=' + Person_id + '&paramMedPersonal=' + MedPersonal_id,
							'Report_Format': 'pdf'
						});
					}
					else {
						if(nodeData.EvnSection_id){
							Ext.Msg.show({
								title:'Информированное добровольное согласие на мед.вмешательство',
								msg: 'Выберите вариант печати Информированного добровольного согласия на мед.вмешательство.',
								buttons: {
									yes: 'Лично',
									no: 'Представитель',
									cancel: 'Отмена'
								},
								fn: function(btn) {

									var paramDeputy = null;
									if ( btn != 'cancel' ) {
										if ( btn == 'yes' ) {
											paramDeputy = 1;
										}
										if ( btn == 'no' ) {
											paramDeputy = 2;
										}
										printBirt({
											'Report_FileName': 'Person_soglasie_stac.rptdesign',
											'Report_Params': '&paramPerson=' + Person_id + '&paramEvnSection=' + nodeData.EvnSection_id + '&paramDeputy=' + paramDeputy,
											'Report_Format': 'pdf'
										})
									}
								},
								icon: Ext.Msg.QUESTION,
							});
						}
						else{
							sw.swMsg.alert(lang['oshibka'], 'Отсутствует ID движения');
						}
					}
                }
            },
            action_print_PersonSoglasieAnst:
            {
                nn: 'action_print_PersonSoglasieAnst',
                tooltip: (getRegionNick() == 'kz' ? langs('Печать информированного согласия пациента на проведение анестезии') :langs('Печать согласия на анестезиологическое обеспечение мед.вмешательства')),
                text: (getRegionNick() == 'kz' ? langs('Печать информированного согласия пациента на проведение анестезии') : langs('Печать согласия на анестезиологическое обеспечение мед.вмешательства')),
                iconCls : 'print16',
                disabled: false,
                handler: function()
                {
                    var Person_id = form.PersonInfoFrame.getFieldValue('Person_id');
					var node = form.Tree.getSelectionModel().selNode;
					var nodeData = form.getObjectData('EvnSection', node.attributes.object_value);
                    var paramLpu = getGlobalOptions().lpu_id;
                    if(getRegionNick() == 'kz'){
                    	printBirt({
							'Report_FileName': 'Person_soglasie_stac_anst.rptdesign',
							'Report_Params': '&paramPerson=' + Person_id + '&paramLpu=' + paramLpu,
							'Report_Format': 'pdf'
						});
                    } else {
						printBirt({
							'Report_FileName': 'Person_soglasie_stac_anst.rptdesign',
							'Report_Params': '&paramPerson=' + Person_id + '&paramEvnSection=' + nodeData.EvnSection_id,
							'Report_Format': 'pdf'
						});
					}
                }
            },
            action_print_PersonSoglasieOperStac:
            {
                nn: 'action_print_PersonSoglasieOperStac',
                tooltip: (getRegionNick() == 'kz' ? langs('Печать согласия на оперативное лечение') :langs('Печать согласия на оперативное вмешательство')),
                text: (getRegionNick() == 'kz' ? langs('Печать согласия на оперативное лечение') : langs('Печать согласия на оперативное вмешательство')),
                iconCls : 'print16',
                disabled: false,
                handler: function()
                {
                    var Person_id = form.PersonInfoFrame.getFieldValue('Person_id');
					var node = form.Tree.getSelectionModel().selNode;
					var nodeData = form.getObjectData('EvnSection', node.attributes.object_value);
                    var paramLpu = getGlobalOptions().lpu_id;
                    if(getRegionNick() == 'kz'){
                    	printBirt({
							'Report_FileName': 'PersonInfoSoglasie_OperStac.rptdesign',
							'Report_Params': '&paramPerson=' + Person_id + '&paramLpu=' + paramLpu,
							'Report_Format': 'pdf'
						});
                    } else {
                    	var reportFileName = 'PersonInfoSoglasie_OperWard.rptdesign'; //'PersonInfoSoglasie_OperStac.rptdesign'
						printBirt({
							'Report_FileName': reportFileName,
							'Report_Params': '&paramPerson=' + Person_id + '&paramEvnSection=' + nodeData.EvnSection_id,
							'Report_Format': 'pdf'
						});
					}
                }
            },
            action_print_PersonInfoOtkaz:
            {
                nn: 'action_print_PersonInfoOtkaz',
                tooltip: langs('Печать отказа от проведения медицинского вмешательства'),
                text: langs('Печать отказа от проведения медицинского вмешательства'),
                iconCls : 'print16',
                disabled: false,
                handler: function()
                {
                    var Person_id = form.PersonInfoFrame.getFieldValue('Person_id');
                    var paramLpu = getGlobalOptions().lpu_id;
					var node = form.Tree.getSelectionModel().selNode;
					var nodeData = form.getObjectData('EvnSection', node.attributes.object_value);
					var MedPersonal_id = nodeData.MedPersonal_id;
					var paramEvnSection = ( nodeData.EvnSection_id ) ? '&paramEvnSection=' + nodeData.EvnSection_id : '';

                    if(getRegionNick() == 'kz'){
                    	printBirt({
							'Report_FileName': 'PersonInfoOtkaz.rptdesign',
							'Report_Params': '&paramPerson=' + Person_id + '&paramLpu=' + paramLpu + paramEvnSection,
							'Report_Format': 'pdf'
						});
                    }
					else if(getRegionNick() == 'krym'){ //https://redmine.swan.perm.ru/issues/93026
						printBirt({
							'Report_FileName': 'PersonCardMedicalIntervent.rptdesign',
							'Report_Params': '&paramPerson=' + Person_id + '&paramMedPersonal=' + MedPersonal_id,
							'Report_Format': 'pdf'
						});
					}
					else {
						printBirt({
							'Report_FileName': 'PersonInfoOtkaz.rptdesign',
							'Report_Params': '&paramPerson=' + Person_id + paramEvnSection,
							'Report_Format': 'pdf'
						});
					}
                }
            },
			action_Open_EvnVK:
			{
				nn: 'action_Open_EvnVK',
				tooltip: langs('Открыть протокол ВК'),
				text: langs('Открыть протокол ВК'),
				iconCls : '',
				handler: function()
				{
					/*var params = {
						showtype: 'view',
						onHide: Ext.emptyFn
					};
					form.openForm('swClinExWorkEditWindow', 'EvnVK_id',params,'view');*/
					form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
				}
			},
			action_Open_EvnPrescrMse:
			{
				nn: 'action_Open_EvnPrescrMse',
				tooltip: langs('Открыть направление на МСЭ'),
				text: langs('Открыть направление на МСЭ'),
				iconCls : '',
				handler: function()
				{
					var sel_node_attr = form.Tree.getSelectionModel().selNode.attributes;
					var action = (sel_node_attr.Lpu_gid == getGlobalOptions().lpu_id) ? 'edit' : 'view';
					var params = {
						EvnVK_id: sel_node_attr.EvnVK_id,
						EvnPrescrMse_id: sel_node_attr.EvnPrescrMse_id,
						MedService_id: sel_node_attr.MedService_id,
						TimetableMedService_id: sel_node_attr.TimetableMedService_id,
						onHide: Ext.emptyFn
					};
					form.openForm('swDirectionOnMseEditForm', 'EvnPrescrMse_id',params,action);
				}
			},
			action_Open_EvnMse:
			{
				nn: 'action_Open_EvnMse',
				tooltip: langs('Открыть протокол МСЭ'),
				text: langs('Открыть протокол МСЭ'),
				iconCls : '',
				handler: function()
				{
					var sel_node_attr = form.Tree.getSelectionModel().selNode.attributes;
					var params = {
						EvnPrescrMse_id: sel_node_attr.EvnPrescrMse_id,
						MedService_id: sel_node_attr.MedService_id,
						onHide: Ext.emptyFn
					};
					form.openForm('swProtocolMseEditForm', 'EvnMse_id',params,'view');
				}
			},
			action_Open_Form:
			{
				nn: 'action_Open_Form',
				tooltip: langs('Открыть форму выбранного пункта'),
				text: langs('Открыть'),
				iconCls : 'form32',
				disabled: true,
				handler: function()
				{
					return false;
				}
			},
			action_Open_TherapyPlan:
			{
				nn: 'action_Open_TherapyPlan',
				tooltip: langs('Открыть форму ввода и редактирования плана лечебно-диагностического процесса выбранной нозологии'),
				text: '<b>План лечения и ' + getMESAlias() + '</b>',
				iconCls : 'therapy-plan32',
				disabled: true,
				actionType: 'write',
				handler: function()
				{
					return false;
				}
			},
			action_Open_Appointment:
			{
				nn: 'action_Open_Appointment',
				tooltip: langs('Открыть форму "Лист назначений"'),
				text: langs('<b>Назначения</b>'),
				iconCls : 'appointments32',
				disabled: true,
				actionType: 'write',
				handler: function()
				{
					return false;
				}
			},
			action_Send:
			{
				nn: 'action_Send',
				tooltip: langs('Записать больного на исследование или консультацию'),
				text: langs('Направить'),
				iconCls : 'eph-record16',
				actionType: 'write',
				handler: function()
				{
					var form = Ext.getCmp('PersonEmkForm');
					// если не выбрано в дереве посещение
					var node = Ext.getCmp('PersonEmkTree').getSelectionModel().selNode;
					if (!node || 'EvnVizitPL' != node.attributes.object)
					{
						sw.swMsg.alert(langs('Выберите посещение'), form.notSelectEvnVizitMsg);
						return false;
					}

					if (!node.attributes.accessType || 'view' == node.attributes.accessType)
					{
						sw.swMsg.alert(langs('Сообщение'), langs('Посещение доступно только на просмотр!'));
						return false;
					}

					//проверяем жив ли человек
					var personpanel = Ext.getCmp('PEMK_PersonInfoFrame');

					if (personpanel && (personpanel.getFieldValue('Person_deadDT')) && personpanel.getFieldValue('Person_deadDT') != '') {
						sw.swMsg.alert(langs('Ошибка'), langs('Направление невозможно в связи со смертью пациента'));
					} else {
						// направление пациента к другому врачу
						var params = {
							Person_id:form.Person_id,
							PersonEvn_id:form.PersonEvn_id,
							Server_id:form.Server_id,
							EvnDirection_pid: node.attributes.object_value,
							Diag_id: node.attributes.Diag_id,
							UserMedStaffFact_id: form.userMedStaffFact.MedStaffFact_id,
							userMedStaffFact: form.userMedStaffFact,
							Person_Firname: form.PersonInfoFrame.getFieldValue('Person_Firname'),
							Person_Surname: form.PersonInfoFrame.getFieldValue('Person_Surname'),
							Person_Secname: form.PersonInfoFrame.getFieldValue('Person_Secname'),
							Person_Birthday: form.PersonInfoFrame.getFieldValue('Person_Birthday'),
							formMode:'send'
						}
						getWnd('swMPRecordWindow').show(params);
					}
				}
			},
			action_Open_DirectMedCommission:
			{
				nn: 'action_Open_DirectMedCommission',
				tooltip: langs('Открыть форму представления на ВК'),
				text: langs('<b>Направить на ВК</b>'),
				iconCls : 'med-commission32',
				disabled: true,
				actionType: 'write',
				handler: function()
				{
					return false;
				}
			},
			action_Open_EvnStick:
			{
				nn: 'action_Open_EvnStick',
				tooltip: langs('Открыть форму поиска незакрытых листков нетрудоспособности'),
				text: langs('ЛВН'),
				iconCls : 'lvn-open32',
				disabled: true,
				handler: function()
				{
					return false;
				}
			},
			action_Open_JourOperation:
			{
				nn: 'action_Open_JourOperation',
				tooltip: langs('Открыть форму "Журнал оперативных вмешательств"'),
				text: langs('<b>Протокол операции</b>'),
				iconCls : 'surgery32',
				disabled: true,
				handler: function()
				{
					return false;
				}
			},
			action_Open_CardObservation:
			{
				nn: 'action_Open_CardObservation',
				tooltip: langs('Открыть форму "Карта наблюдений"'),
				text: langs('<b>Карта наблюдений</b>'),
				iconCls : 'monitoring32',
				disabled: true,
				handler: function()
				{
					return false;
				}
			},
			action_Open_DiaryEntrie:
			{
				nn: 'action_Open_DiaryEntrie',
				tooltip: langs('Открыть форму ежедневного врачебного дневника для добавления дневниковой записи'),
				text: langs('<b>Осмотр / Дневник</b>'),
				iconCls : 'diary-entry32',
				disabled: true,
				handler: function()
				{
					return false;
				}
			},
			action_Open_Epicrisis:
			{
				nn: 'action_Open_Epicrisis',
				tooltip: langs('Открыть форму для оформления эпикриза'),
				text: langs('<b>Эпикриз</b>'),
				iconCls : 'epicrisis32',
				disabled: true,
				handler: function()
				{
					return false;
				}
			},
			action_Open_Notice:
			{
				nn: 'action_Open_Notice',
				tooltip: langs('Открыть форму ввода извещения о случае внутрибольничной инфекции, травме на производстве и др.'),
				text: langs('Извещение'),
				iconCls : 'notice32',
				disabled: true,
				handler: function()
				{
					return false;
				}
			},
			action_Open_Document:
			{
				nn: 'action_Open_Document',
				tooltip: langs('Открыть форму ввода документа в свободной форме с возможностью выбора шаблона'),
				text: langs('Документ'),
				iconCls : 'document-template32',
				disabled: true,
				handler: function()
				{
					return false;
				}
			},
			action_New_EvnPLStom:
			{
                nn: 'action_New_EvnPLStom',
                tooltip: langs('Создать случай стоматологического лечения'),
                text: langs('Создать случай стоматологического лечения'),
                iconCls: 'eph-tooth16', // 'visit32',
                actionType: 'write',
                handler: function()
                {
                    form.addNewEvnPLAndEvnVizitPL({isStom: true});
                }
			},
			action_New_EvnPLDispDop:
			{
				nn: 'action_New_EvnPLDispDop',
				tooltip: langs('Создать случай дополнительной диспансеризации'),
				text: langs('Добавить случай ДД'),
				iconCls : 'epl-ddisp-new16',
				disabled: false,
				actionType: 'write',
				handler: function()
				{
					// Добавление талона ДД
					form.openForm('swEvnPLDispDopEditWindow', 'EvnPLDispDop_id', {formParams:{}}, 'add');
				}
			},
			action_New_PersonPrivilege:
			{
				nn: 'action_New_PersonPrivilege',
				tooltip: langs('Открыть льготу пациенту'),
				text: langs('Открыть льготу пациенту'),
				iconCls : 'priv-new16',
				disabled: false,
				actionType: 'write',
				handler: function()
				{
					form.openForm('swPrivilegeEditWindow', 'PersonPrivilege_id', {}, 'add');
				}
			},
			action_New_PersonCard:
			{
				nn: 'action_New_PersonCard',
				tooltip: langs('Прикрепить пациента к ЛПУ'),
				text: langs('Прикрепить пациента'),
				iconCls : 'pcard-new16',
				disabled: false,
				actionType: 'write',
				handler: function()
				{
                    Ext.Ajax.request({
                        url: '/?c=LpuRegion&m=getMedPersLpuRegionList',
                        callback: function(options, success, response)
                        {
                            if (success)
                            {
                                var response_obj = Ext.util.JSON.decode(response.responseText);
                                var params = {};
                                if (response_obj[0]) {
                                    params = response_obj[0];
                                    switch (parseInt(response_obj[0].LpuAttachType_id)) {
                                        case 1:params.attachType = 'common_region';break;
                                        case 2:params.attachType = 'ginecol_region';break;
                                        case 3:params.attachType = 'stomat_region';break;
                                        case 4:params.attachType = 'service_region';break;
                                        case 5:params.attachType = 'dms_region';break;
                                    }
                                }
                                form.openForm('swPersonCardEditWindow', 'PersonCard_id', params, 'add');
                            }
                        },
                        params: {
                            LpuSectionProfile_Code: form.userMedStaffFact.LpuSectionProfile_Code,
                            MedPersonal_id: form.userMedStaffFact.MedPersonal_id,
                            Lpu_id: form.userMedStaffFact.Lpu_id
                        }
                    });
				}
			},
			action_New_EvnUslugaPar:
			{
				nn: 'action_New_EvnUslugaPar',
				tooltip: langs('Создать простую параклиническую услугу'),
				text: langs('Добавить простую параклиническую услугу'),
				iconCls : 'para-service16',
				disabled: false,
				actionType: 'write',
				handler: function()
				{
					var params =
					{
						addProtocolAfterSaveUsluga: true
					};
					form.openForm('swEvnUslugaParEditWindow', 'EvnUslugaPar_id', params, 'add');
				}
			},
			action_New_ComplexUsluga:
			{
				nn: 'action_New_ComplexUsluga',
				tooltip: 'Создать сложную параклиническую услугу',// она создается при заказе услуги, после записи пациента или без записи
				text: langs('Добавить сложную параклиническую услугу'),
				iconCls : 'para-service-complex16',
				disabled: true,
				actionType: 'write',
				handler: function()
				{
					var params =
					{
						Person_id: form.PersonInfoFrame.getFieldValue('Person_id'),
						Person_Firname: form.PersonInfoFrame.getFieldValue('Person_Firname'),
						Person_Surname: form.PersonInfoFrame.getFieldValue('Person_Surname'),
						Person_Secname: form.PersonInfoFrame.getFieldValue('Person_Secname'),
						Person_Birthday: form.PersonInfoFrame.getFieldValue('Person_Birthday')
					};
					/*
					Должна вызываться форма выбора комплексной услуги (делает Андрей Марков) => вызывается форма редактирования комплексной услуги с возможностью получения данных с анализаторов.
					form.openForm('swEvnUslugaParEditWindow', 'EvnUslugaPar_id', params, 'add');
					*/
				}
			},
			action_Open_EvnUslugaPar:
			{
				nn: 'action_Open_EvnUslugaPar',
				tooltip: langs('Открыть параклиническую услугу'),
				text: langs('Открыть параклиническую услугу'),
				iconCls : 'para-service-open16',
				disabled: false,
				handler: function()
				{
					if (!form.Tree.getSelectionModel().selNode || form.Tree.getSelectionModel().selNode.attributes.object_id != 'EvnUslugaPar_id' )
					{
						sw.swMsg.alert(langs('Сообщение'), langs('Вы не выбрали параклиническую услугу!'));
						return false;
					}
					if(form.ARMType == 'common')
					{
						form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
					}
					else
					{
						var params =
						{
							Person_id: form.PersonInfoFrame.getFieldValue('Person_id'),
							Person_Firname: form.PersonInfoFrame.getFieldValue('Person_Firname'),
							Person_Surname: form.PersonInfoFrame.getFieldValue('Person_Surname'),
							Person_Secname: form.PersonInfoFrame.getFieldValue('Person_Secname'),
							Person_Birthday: form.PersonInfoFrame.getFieldValue('Person_Birthday')
						};
						form.openForm('swEvnUslugaParEditWindow', 'EvnUslugaPar_id', params,form.Tree.getSelectionModel().selNode.attributes.accessType);
					}
				}
			},
			// Акшены на талоне
			action_Open_EvnPLStom:
			{
				nn: 'action_Open_EvnPLStom',
				tooltip: langs('Открыть случай стоматологического лечения'),
				text: langs('<b>Открыть стомат.случай АПЛ</b>'),
				iconCls : 'evn-open16',
				disabled: false,
				handler: function()
				{
					form.openForm('swEvnPLStomEditWindow', 'EvnPLStom_id');
				}
			},
			action_Open_EvnVizitPLStom:
			{
				nn: 'action_Open_EvnVizitPLStom',
				tooltip: langs('Открыть посещение по стоматологии'),
				text: langs('Открыть посещение по стоматологии'),
				iconCls : 'visit-open16',
				disabled: false,
				handler: function()
				{
					var node = form.Tree.getSelectionModel().selNode;
					if (node) {
						form.openFormEvnVizitPLStom((form.isReadOnly?'view':'edit'), node.parentNode.attributes.object_value, node.attributes.object_value);
					}
				}
			},
			action_Close_EvnVizitPLStom:
			{
				nn: 'action_Close_EvnVizitPLStom',
				tooltip: langs('Удалить посещение по стоматологии'),
				text: langs('Удалить посещение по стоматологии'),
				iconCls : 'visit-open16',
				disabled: false,
				handler: function()
                {
				    var node = form.Tree.getSelectionModel().selNode;
                    log(node);
					form.deleteEvent(node.attributes.object, {
						parent_object: node.parentNode.attributes.object,
						parent_object_id: node.parentNode.attributes.object_value,
						object: node.attributes.object,
						object_id: node.attributes.object_value
					});
                }
			},
			action_New_EvnVizitPLStom:
			{
				nn: 'action_New_EvnVizitPLStom',
				tooltip: langs('Создать посещение по стоматологии'),
				text: langs('Добавить посещение по стоматологии'),
				iconCls : 'visit-new16',
				disabled: false,
				actionType: 'write',
				handler: function()
				{
					var node = form.Tree.getSelectionModel().selNode;
					if (node) {
						form.openFormEvnVizitPLStom('add', node.attributes.object_value, 0);
					}
				}
			},
            action_Print_Stom:
            {
                nn: 'action_Print_Stom',
                tooltip: langs('Печать'),
                text: langs('Печать'),
                iconCls : 'print16',
				menu: sw.Promed.StomHelper.Report.getPrintMenu(function(callback){
					var Person_id = form.PersonInfoFrame.getFieldValue('Person_id') || form.Person_id,
						me = this;
					if (!me.Person_id || me.Person_id != Person_id) {
						me.Person_id = Person_id;
						me.lastEvnPLStomData = null;
					}
					if (!me.lastEvnPLStomData) {
						sw.Promed.StomHelper.loadLastEvnPLStomData(Person_id, function(data) {
							me.lastEvnPLStomData = data;
							callback(Person_id, data);
						});
					} else {
						callback(Person_id, me.lastEvnPLStomData);
					}
				})
            },
			action_New_EvnDiagPLStom:
			{
				nn: 'action_New_EvnDiagPLStom',
				tooltip: langs('Создать стоматологический диагноз'),
				text: langs('Добавить диагноз'),
				iconCls : 'lvn-new16',
				disabled: false,
				actionType: 'write',
				handler: function()
				{
					var params =
					{
						Person_id: form.PersonInfoFrame.getFieldValue('Person_id'),
						Person_Firname: form.PersonInfoFrame.getFieldValue('Person_Firname'),
						Person_Surname: form.PersonInfoFrame.getFieldValue('Person_Surname'),
						Person_Secname: form.PersonInfoFrame.getFieldValue('Person_Secname'),
						Person_Birthday: form.PersonInfoFrame.getFieldValue('Person_Birthday'),
						formParams: {
							Person_id: form.Person_id,
							PersonEvn_id: form.PersonEvn_id,
							Server_id: form.Server_id,
							EvnDiagPLStom_id: 0,
							EvnDiagPLStom_setDate: form.Tree.getSelectionModel().selNode.attributes.date,
							EvnDiagPLStom_pid: form.Tree.getSelectionModel().selNode.attributes.object_value
						}
					}
					form.openForm('swEvnDiagPLStomEditWindow', 'EvnDiagPLStom_id', params, 'add');
				}
			},
			action_New_EvnUslugaPL: // на талоне
			{
				nn: 'action_New_EvnUslugaPL',
				tooltip: langs('Создать услугу '),
				text: langs('Добавить услугу'),
				iconCls : 'usluga-new16',
				disabled: false,
				actionType: 'write',
				handler: function()
				{
					var node = form.Tree.getSelectionModel().selNode;
					if (!node || 'EvnVizitPL' != node.attributes.object)
					{
						sw.swMsg.alert(langs('Сообщение'), langs('Выберите посещение'));
						return false;
					}

					if (!node.attributes.accessType || 'view' == node.attributes.accessType)
					{
						sw.swMsg.alert(langs('Сообщение'), langs('Посещение доступно только на просмотр!'));
						return false;
					}

					/*
					var node_attr = node.attributes;
					form.openForm('swEvnUslugaCommonEditWindow', 'EvnUsluga_id', {
						Person_id: form.PersonInfoFrame.getFieldValue('Person_id'),
						Person_Firname: form.PersonInfoFrame.getFieldValue('Person_Firname'),
						Person_Surname: form.PersonInfoFrame.getFieldValue('Person_Surname'),
						Person_Secname: form.PersonInfoFrame.getFieldValue('Person_Secname'),
						Person_Birthday: form.PersonInfoFrame.getFieldValue('Person_Birthday'),
						formParams: {
							EvnUsluga_id: 0,
							EvnUslugaCommon_rid: node_attr.object_value,
							Person_id:form.Person_id,
							PersonEvn_id:form.PersonEvn_id,
							Server_id:form.Server_id
						}
					}, 'add');
					*/
				}
			},
			action_New_EvnUslugaPLStom:
			{
				nn: 'action_New_EvnUslugaPLStom',
				tooltip: langs('Создать услугу '),
				text: langs('Добавить услугу'),
				iconCls : 'usluga-new16',
				disabled: false,
				actionType: 'write',
				handler: function()
				{
					form.openForm('swEvnUslugaStomEditWindow', 'EvnUslugaStom_id', {
						Person_Firname: form.PersonInfoFrame.getFieldValue('Person_Firname'),
						Person_Surname: form.PersonInfoFrame.getFieldValue('Person_Surname'),
						Person_Secname: form.PersonInfoFrame.getFieldValue('Person_Secname'),
						Person_Birthday: form.PersonInfoFrame.getFieldValue('Person_Birthday'),
						formParams: {
							Person_id:form.Person_id,
							PersonEvn_id:form.PersonEvn_id,
							Server_id:form.Server_id,
							EvnUslugaStom_id: 0,
							EvnUslugaStom_setDate: form.Tree.getSelectionModel().selNode.attributes.date,
							EvnUslugaStom_pid: form.Tree.getSelectionModel().selNode.attributes.object_value,
							EvnUslugaStom_rid: form.Tree.getSelectionModel().selNode.parentNode.attributes.object_value
						}
					}, 'add');
				}
			},
			action_New_EvnStick:
			{
				nn: 'action_New_EvnStick',
				tooltip: langs('Добавить ЛВН'),
				text: langs('Добавить ЛВН'),
				iconCls : 'lvn-new16',
				disabled: false,
				actionType: 'write',
				handler: function()
				{
					var evnpl_node = form.Tree.getSelectionModel().selNode;
					var evnstick_pid = evnpl_node.attributes.object_value;
					var evnclass = evnpl_node.attributes.object;
					var my_params = new Object();
					var formParams = {
						EvnStick_mid: evnstick_pid
					};
					formParams.EvnStick_pid = evnstick_pid;
					formParams.Person_id = form.Person_id;
					formParams.PersonEvn_id = form.PersonEvn_id;
					formParams.Server_id = form.Server_id;
					my_params.onHide = Ext.emptyFn;
					my_params.JobOrg_id = form.PersonInfoFrame.getFieldValue('JobOrg_id');
					my_params.Person_Post = form.PersonInfoFrame.getFieldValue('Person_Post');
					my_params.parentClass = evnclass.inlist(['EvnPL','EvnPLStom','EvnPS']) ? evnclass : 'EvnPL';
					my_params.callback = function(data) {
						if ( !data || !data.evnStickData || !this.data || 'EvnPL' != this.data.Code || evnstick_pid != this.data.id ) {
							evnpl_node.reload();
							return false;
						}

						var reload_params = {
							section_code: 'EvnStick',
							object_key: 'EvnStick_id',
							object_value: data.evnStickData[0].EvnStick_id,
							parent_object_key: 'EvnPL_id',
							parent_object_value: this.data.id,
							section_id: 'EvnStickList_'+ this.data.id
						};
						this.reloadViewForm(reload_params);
						evnpl_node.reload();
					}.createDelegate(form);

					form.getEvnStickSetdate(
					{
						EvnStick_mid: evnstick_pid
					},
					function(data){
						formParams.EvnStick_begDate = Date.parseDate(data[0].EvnStick_setDate, 'd.m.Y');
						formParams.EvnStick_setDate = Date.parseDate(data[0].EvnStick_setDate, 'd.m.Y');
						my_params.formParams = formParams;
						form.openForm('swEvnStickChangeWindow','XXX_id',my_params,'add',langs('Выбор документа нетрудоспособности'));
					});
				}
			},
            //this.Actions..show();
			action_Delete_EvnPL:
			{
				nn: 'action_Delete_EvnPL',
				tooltip: langs('Удалить случай АПЛ'),
				text: langs('Удалить случай АПЛ'),
				iconCls : 'delete16',
				actionType: 'write',
				handler: function()
				{
					var node = form.Tree.getSelectionModel().selNode;
					form.deleteEvent(node.attributes.object, {object: node.attributes.object, object_id: node.attributes.object_value});
				}
			},
            action_Delete_EvnPLStom:
            {
                nn: 'action_Delete_EvnPLStom',
                tooltip: 'Удалить случай стоматологического лечения',
                text: 'Удалить случай стоматологического лечения',
                iconCls : 'delete16',
                actionType: 'write',
                handler: function()
                {
                    var node = form.Tree.getSelectionModel().selNode;
                    form.deleteEvent(node.attributes.object, {object: node.attributes.object, object_id: node.attributes.object_value});
                }
            },
			action_Print_EvnPL: {
				nn: 'action_Print_EvnPL',
				tooltip: langs('Печать'),
				text: langs('Печать'),
				iconCls : 'print16',
				menu: new Ext.menu.Menu([{
					text: langs('Печать выписки из мед.карты'),
					handler: function () {
						var object_value = form.Tree.getSelectionModel().selNode.attributes.object_value;
						if (getRegionNick() == 'kz') {
							printBirt({
								'Report_FileName': 'f027u_Evn.rptdesign',
								'Report_Params': '&paramEvn=' + object_value,
								'Report_Format': 'pdf'
							});
						} else {
							printBirt({
								'Report_FileName': 'f027u_EvnPL.rptdesign',
								'Report_Params': '&paramEvnPL=' + object_value,
								'Report_Format': 'doc'
							});
						}
					}
				},
                    {
                        text: langs('Справка о стоимости лечения'),
						hidden: !getRegionNick().inlist([ 'kz', 'perm', 'ufa' ]),
                        handler: function(){
							var object_value = form.Tree.getSelectionModel().selNode.attributes.object_value;
							sw.Promed.CostPrint.print({
								Evn_id: object_value,
								type: 'EvnPL'
							});
                        }
                    },
					{
                        text: langs('Печать согласия на мед.вмешательство'),
                        hidden: !(getRegionNick()=='pskov'),
                        handler: function(){
                            var Person_id = form.PersonInfoFrame.getFieldValue('Person_id')
							printBirt({
								'Report_FileName': 'Person_soglasie.rptdesign',
								'Report_Params': '&paramPerson=' + Person_id,
								'Report_Format': 'pdf'
							});
                        }
                    },
					{
                        text: langs('Печать отказа от мед. вмешательства'),
                        hidden: !(getRegionNick()=='pskov'),
                        handler: function(){
                            var PersonCard_id = form.PersonInfoFrame.getFieldValue('PersonCard_id');

							if (Ext.isEmpty(PersonCard_id)) {
								sw.swMsg.alert(langs('Ошибка'), langs('Невозможно напечатать документ. Проверьте прикрепление пациента.'));
								return false;
							}

							printBirt({
								'Report_FileName': 'PersonCardMedicalIntervent.rptdesign',
								'Report_Params': '&paramPersonCard=' + PersonCard_id + '&paramMedPersonal='+form.userMedStaffFact.MedPersonal_id,
								'Report_Format': 'pdf'
							});
                        }
                    },
                    {
                        text: langs('Печать согласия на вакцинацию'),
                        hidden: !(getRegionNick()=='pskov'),
                        handler: function(){
                            var Person_id = form.PersonInfoFrame.getFieldValue('Person_id')
							printBirt({
								'Report_FileName': 'PersonInfoSoglasie_Vac.rptdesign',
								'Report_Params': '&paramPerson=' + Person_id,
								'Report_Format': 'pdf'
							});
                        }
                    }
                ])
			},
			// На посещении
			action_Open_EvnVizitPL:
			{
				nn: 'action_Open_EvnVizitPL',
				tooltip: langs('Открыть посещение'),
				text: langs('Открыть посещение'),
				iconCls : 'visit-open16',
				disabled: false,
				handler: function()
				{
					var node = form.Tree.getSelectionModel().selNode;
					if (!node || node.attributes.object_id != 'EvnVizitPL_id' )
					{
						sw.swMsg.alert(langs('Сообщение'), langs('Вы не выбрали посещение!'));
						return false;
					}
					form.loadNodeViewForm(node);
				}
			},
			action_Copy_EvnVizitPL:
			{
				nn: 'action_Copy_EvnVizitPL',
				tooltip: langs('Скопировать посещение в новый случай'),
				text: langs('Скопировать в новый случай'),
				iconCls: '',
				disabled: false,
				actionType: 'write',
				handler: function(){
					var node = form.Tree.getSelectionModel().selNode;
					if (!node) {
						sw.swMsg.alert(langs('Сообщение'), langs('Вы не выбрали посещение!'));
						return false;
					}
					if(node.attributes.object != 'EvnVizitPL'){
						sw.swMsg.alert(langs('Ошибка'), langs('Копировать можно только посещения поликлиники!'));
						return false;
					}
					if(form.userMedStaffFact.ARMType != 'common'){
						//sw.swMsg.alert('Ошибка', 'Копировать можно только посещения поликлиники!');
						return false;
					}
					var params = {
						EvnPL_id: node.parentNode.attributes.object_value,
						EvnVizitPL_id: node.attributes.object_value
					};
					form.copyEvnVizitPL(params);
				}
			},
			action_Copy_EvnVizitPLStom:
			{
				nn: 'action_Copy_EvnVizitPLStom',
				tooltip: langs('Скопировать посещение в новый случай'),
				text: langs('Скопировать в новый случай'),
				iconCls: '',
				disabled: false,
				actionType: 'write',
				handler: function(){
					var node = form.Tree.getSelectionModel().selNode;
					if (!node) {
						sw.swMsg.alert(langs('Сообщение'), langs('Вы не выбрали посещение!'));
						return false;
					}
					if(node.attributes.object != 'EvnVizitPLStom'){
						sw.swMsg.alert(langs('Ошибка'), langs('Копировать можно только стоматологические посещения!'));
						return false;
					}
					var params = {
						EvnPLStom_id: node.parentNode.attributes.object_value,
						EvnVizitPLStom_id: node.attributes.object_value
					};
					form.copyEvnVizitPLStom(params);
				}
			},
			action_Open_EvnDiagPLStom:
			{
				nn: 'action_Open_EvnDiagPLStom',
				tooltip: langs('Открыть стоматологический диагноз'),
				text: langs('Открыть стоматологический диагноз'),
				iconCls : 'visit-open16',
				disabled: false,
				handler: function()
				{
					var formParams =
					{
						Person_id: form.Person_id,
						Server_id: form.Server_id,
						EvnDiagPLStom_id: form.Tree.getSelectionModel().selNode.attributes.object_value
					};

					var params =
					{
						Person_id: form.PersonInfoFrame.getFieldValue('Person_id'),
						Person_Firname: form.PersonInfoFrame.getFieldValue('Person_Firname'),
						Person_Surname: form.PersonInfoFrame.getFieldValue('Person_Surname'),
						Person_Secname: form.PersonInfoFrame.getFieldValue('Person_Secname'),
						Person_Birthday: form.PersonInfoFrame.getFieldValue('Person_Birthday')
					};
					params.formParams = formParams;
					//log(params);
					form.openForm('swEvnDiagPLStomEditWindow', 'EvnDiagPLStom_id', params);
				}
			},
			action_New_PersonDisp:
			{
				nn: 'action_New_PersonDisp',
				tooltip: langs('Поставить на диспансерный учет'),
				text: langs('Поставить на диспансерный учет'),
				iconCls : 'persdisp-new16',
				disabled: false,
				actionType: 'write',
				handler: function()
				{
					// Проверяем, может ли текущий пользователь добавлять данные по дисп. учету
					// https://redmine.swan.perm.ru/issues/110660
					// Доработал вывод сообщения об ошибке
					var errorText,
						msfFilter = {
							id: form.userMedStaffFact.MedStaffFact_id,
							isDisp: true,
							isPolka: true
						};

					if ( getGlobalOptions().allowed_disp_med_staff_fact_group == 2 ) {
						msfFilter.isDoctorOrMidMedPersonal = true;
					}

					setMedStaffFactGlobalStoreFilter(msfFilter);

					if ( swMedStaffFactGlobalStore.getCount() == 0 ) {
						errorText = 'Добавление контрольных карт диспансерного наблюдения доступно для '
							+ (getGlobalOptions().allowed_disp_med_staff_fact_group == 2 ? 'врачей и среднего мед. персонала' : 'сотрудников')
							+ ' из групп отделений с типами "Поликлиника", "Городской центр", "Травматологический пункт", "Фельдшерско-акушерский пункт"';

						sw.swMsg.alert(langs('Ошибка'), errorText);
						return false;
					}

					var params = {
						formParams: {
							Person_id: form.Person_id,
							Server_id: form.Server_id
						}
					}

					form.openForm('swPersonDispEditWindow', 'PersonDisp_id', params, 'add');
				}
			},
			action_New_EvnRecept:
			{
				nn: 'action_New_EvnRecept',
				tooltip: langs('Создать рецепт'),
				text: langs('Добавить рецепт'),
				iconCls : 'receipt-new16',
				disabled: false,
				actionType: 'write',
				handler: function()
				{
					// Проверяем для врача возможность выписывать рецепты
					setMedStaffFactGlobalStoreFilter({
						id: form.userMedStaffFact.MedStaffFact_id,
						isDlo: true
					});

					if ( swMedStaffFactGlobalStore.getCount() == 0 ) {
						sw.swMsg.alert(langs('Ошибка'), langs('Вы не внесены в список врачей, работающих с ЛЛО.'));
						return false;
					}

					var Diag_id = null;
					var node = form.Tree.getSelectionModel().selNode;
					if (!node || 'EvnVizitPL' != node.attributes.object)
					{
						sw.swMsg.alert(langs('Сообщение'), langs('Выберите посещение'));
						return false;
					}

					if (!node.attributes.accessType || 'view' == node.attributes.accessType)
					{
						sw.swMsg.alert(langs('Сообщение'), langs('Посещение доступно только на просмотр!'));
						return false;
					}
					if (node.attributes.Diag_id)
						Diag_id = node.attributes.Diag_id;
					/*if (getRegionNick().inlist(['buryatiya', 'khak', 'pskov', 'saratov', 'krym'])) {
						form.openForm('swEvnReceptRlsEditWindow', 'EvnRecept_id', {formParams:{}, Diag_id: Diag_id}, 'add');
					} else {
						form.openForm('swEvnReceptEditWindow', 'EvnRecept_id', {formParams:{}, Diag_id: Diag_id}, 'add');
					}*/
					if(getGlobalOptions().drug_spr_using == 'dbo')
						form.openForm('swEvnReceptEditWindow', 'EvnRecept_id', {formParams:{}, Diag_id: Diag_id}, 'add');
					else
						form.openForm('swEvnReceptRlsEditWindow', 'EvnRecept_id', {formParams:{}, Diag_id: Diag_id}, 'add');
				}.createDelegate(this)
			},
			action_New_EvnDirection:
			{
				nn: 'action_New_EvnDirection',
				tooltip: langs('Создать электронное направление'),
				text: langs('Добавить электронное направление'),
				iconCls : 'direction-new16',
				disabled: true,
				actionType: 'write',
				handler: function()
				{
					form.openForm('swEvnDirectionEditWindow', 'EvnDirection_id', {formParams:{}}, 'add');
				}
			},
			action_New_EvnVizitUsluga:
			{
				nn: 'action_New_EvnVizitUsluga',
				tooltip: langs('Создать услугу '),
				text: langs('Добавить услугу'),
				iconCls : 'usluga-new16',
				disabled: false,
				actionType: 'write',
				handler: function()
				{
					var node = form.Tree.getSelectionModel().selNode;
					if (!node || 'EvnVizitPL' != node.attributes.object)
					{
						sw.swMsg.alert(langs('Сообщение'), langs('Выберите посещение'));
						return false;
					}

					if (!node.attributes.accessType || 'view' == node.attributes.accessType)
					{
						sw.swMsg.alert(langs('Сообщение'), langs('Посещение доступно только на просмотр!'));
						return false;
					}

					var node_attr = node.attributes;
					form.openForm('swEvnUslugaEditWindow', 'xxx_id', {
						Person_id: form.PersonInfoFrame.getFieldValue('Person_id'),
						Person_Firname: form.PersonInfoFrame.getFieldValue('Person_Firname'),
						Person_Surname: form.PersonInfoFrame.getFieldValue('Person_Surname'),
						Person_Secname: form.PersonInfoFrame.getFieldValue('Person_Secname'),
						Person_Birthday: form.PersonInfoFrame.getFieldValue('Person_Birthday'),
						parentEvnComboData: [{
							Evn_id: node_attr.object_value,
							MedStaffFact_id: node_attr.MedStaffFact_id,
							LpuSection_id: node_attr.LpuSection_id,
							LpuSectionProfile_id: node_attr.LpuSectionProfile_id,
							MedPersonal_id: node_attr.MedPersonal_id,
							Evn_Name: node_attr.Evn_Name,
							Evn_setDate: Date.parseDate(node_attr.Evn_setDate, 'd.m.Y'),
							Evn_setTime: node_attr.Evn_setTime
						}],
						parentClass: 'EvnVizit',
						formParams: {
							EvnUslugaCommon_id: 0,
							EvnUslugaCommon_rid: node_attr.object_value,
							Person_id:form.Person_id,
							PersonEvn_id:form.PersonEvn_id,
							Server_id:form.Server_id
						}
					}, 'add');
				}
			},
			action_Delete_EvnVizitPL:
			{
				nn: 'action_Delete_EvnVizitPL',
				tooltip: 'Удалить посещение',
				text: 'Удалить посещение',
				iconCls : 'delete16',
				actionType: 'write',
				handler: function()
				{
					var node = form.Tree.getSelectionModel().selNode;

					var nodeData = form.getObjectData('EvnPL', node.parentNode.attributes.object_value);
					if (nodeData.EvnPL_IsFinish == 2) {
						sw.swMsg.alert(langs('Сообщение'), langs('Случай АПЛ закрыт!'));
						return false;
					}

					form.deleteEvent(node.attributes.object, {
						parent_object: node.parentNode.attributes.object,
						parent_object_id: node.parentNode.attributes.object_value,
						object: node.attributes.object,
						object_id: node.attributes.object_value
					});
				}
			},
			// Далее идут акшены на открытие по одному без групп
			action_Open_EvnRecept:
			{
				nn: 'action_Open_EvnRecept',
				tooltip: langs('Открыть рецепт'),
				text: langs('Открыть рецепт'),
				iconCls : 'receipt-open16',
				disabled: false,
				handler: function()
				{
					form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
					//form.openForm('swEvnReceptEditWindow', 'EvnRecept_id');
				}
			},
			action_Open_FreeDocument:
			{
				nn: 'action_Open_FreeDocument',
				tooltip: langs('Открыть документ'),
				text: langs('Открыть документ'),
				iconCls : 'receipt-open16',
				disabled: false,
				handler: function()
				{
					form.loadNodeViewForm(form.Tree.getSelectionModel().selNode);
				}
			},
			action_Open_EvnDirection:
			{
				nn: 'action_Open_EvnDirection',
				tooltip: langs('Открыть электронное направление'),
				text: langs('Открыть электронное направление'),
				iconCls : 'direction-open16',
				disabled: false,
				handler: function()
				{
					if ('EvnDirection' == form.Tree.getSelectionModel().selNode.attributes.object) {
						form.openForm('swEvnDirectionEditWindow', 'EvnDirection_id', {
							action: 'view',
							formParams: {},
							EvnDirection_id: form.Tree.getSelectionModel().selNode.attributes.object_value
						});
					}
				}
			},
			action_Open_EvnPLDispScreen:
			{
				nn: 'action_Open_EvnPLDispScreen',
				tooltip: langs('Открыть скрининговое исследование'),
				text: langs('Открыть скрининговое исследование'),
				iconCls : 'direction-open16',
				disabled: false,
				handler: function()
				{
					if ('EvnPLDispScreen' == form.Tree.getSelectionModel().selNode.attributes.object) {
						form.openForm('swEvnPLDispScreenEditWindow', 'EvnPLDispScreen_id', {
							action: 'edit',
							formParams: {},
							EvnPLDispScreen_id: form.Tree.getSelectionModel().selNode.attributes.object_value
						});
					}
				}
			},
			action_Open_EvnPLDispScreenChild:
			{
				nn: 'action_Open_EvnPLDispScreenChild',
				tooltip: langs('Открыть скрининговое исследование детей'),
				text: langs('Открыть скрининговое исследование детей'),
				iconCls : 'direction-open16',
				disabled: false,
				handler: function()
				{
					if ('EvnPLDispScreenChild' == form.Tree.getSelectionModel().selNode.attributes.object) {
						form.openForm('swEvnPLDispScreenChildEditWindow', 'EvnPLDispScreenChild_id', {
							action: 'edit',
							formParams: {},
							EvnPLDispScreenChild_id: form.Tree.getSelectionModel().selNode.attributes.object_value
						});
					}
				}
			},
			action_Open_EvnUsluga:
			{
				nn: 'action_Open_EvnUsluga',
				tooltip: langs('Открыть услугу'),
				text: langs('Открыть услугу'),
				iconCls : 'usluga-open16',
				disabled: false,
				handler: function()
				{
                    form.openEvnUslugaEditWindowByNode(form.Tree.getSelectionModel().selNode);
				}
			},
			action_Open_EvnUslugaStom:
			{
				nn: 'action_Open_EvnUslugaStom',
				tooltip: langs('Открыть стомат.услугу'),
				text: langs('Открыть услугу'),
				iconCls : 'usluga-open16',
				disabled: false,
				handler: function()
				{
                    form.openEvnUslugaEditWindowByNode(form.Tree.getSelectionModel().selNode);
				}
			},
			action_Open_PersonDisp:
			{
				nn: 'action_Open_PersonDisp',
				tooltip: langs('Открыть карту диспансерного учета'),
				text: langs('Открыть карту диспансерного учета'),
				iconCls : 'disp-open16',
				disabled: false,
				handler: function()
				{
					form.openForm('swPersonDispEditWindow', 'PersonDisp_id', {
						formParams: {
							Person_id: form.Person_id,
							Server_id: form.Server_id,
							PersonDisp_id: form.Tree.getSelectionModel().selNode.attributes.object_value
						}
					}, 'edit');
				}
			},
			action_Add_EvnStick:
			{
				nn: 'action_Add_EvnStick',
				tooltip: langs('Добавить ЛВН'),
				text: langs('Добавить ЛВН'),
				iconCls : 'add16',
				actionType: 'write',
				handler: function()
				{
					form.openEvnStickEditWindow2('add');
				}
			},
			action_Edit_EvnStick:
			{
				nn: 'action_Print_EvnStick',
				tooltip: langs('Изменить лист временной нетрудоспособности'),
				text: langs('Изменить ЛВН'),
				iconCls : 'edit16',
				actionType: 'write',
				handler: function()
				{
					form.openEvnStickEditWindow2('edit');
				}
			},
			action_View_EvnStick:
			{
				nn: 'action_View_EvnStick',
				tooltip: langs('Просмотреть ЛВН'),
				text: langs('Просмотреть ЛВН'),
				iconCls : 'view16',
				handler: function()
				{
					form.openEvnStickEditWindow2('view');
				}
			},
			action_Del_EvnStick:
			{
				nn: 'action_Del_EvnStick',
				tooltip: 'Удалить ЛВН',
				text: 'Удалить ЛВН',
				iconCls : 'delete16',
				actionType: 'write',
				handler: function()
				{
					form.deleteEvnStick(form.Tree.getSelectionModel().selNode);
				}
			},
			action_Print_EvnStick:
			{
				nn: 'action_Print_EvnStick',
				tooltip: langs('Печать ЛВН'),
				text: langs('Печать ЛВН'),
				iconCls : 'print16',
				handler: function()
				{
					var node = form.Tree.getSelectionModel().selNode;

					// открыть форму печати.
					var params = new Object();
					params.EvnStick_id = node.attributes.object_value;
					params.evnStickType = node.attributes.evnStickType;
					getWnd('swEvnStickPrintWindow').show(params);
				}
			},
			action_Open_EvnStick:
			{
				nn: 'action_Open_EvnStick',
				tooltip: langs('Открыть лист временной нетрудоспособности'),
				text: langs('Открыть ЛВН'),
				iconCls : 'lvn-open16',
				disabled: false,
				handler: function(params)
				{
					var action = 'edit';
					if (params && params.action == 'view') {
						action = 'view'
					}
					form.openEvnStickEditWindow2(action);
				}
			},
			action_Open_EvnStickDop:
			{
				nn: 'action_Open_EvnStickDop',
				tooltip: langs('Открыть дополнительный лист временной нетрудоспособности'),
				text: langs('<b>Открыть дополнительный ЛВН</b>'),
				iconCls : 'lvn-open16',
				disabled: false,
				handler: function()
				{
					form.openEvnStickEditWindow2('edit');
				}
			},
			action_Open_EvnStickStudent:
			{
				nn: 'action_Open_EvnStickStudent',
				tooltip: langs('Открыть справку учащегося'),
				text: langs('Открыть справку учащегося'),
				iconCls : 'lvn-open16',
				disabled: false,
				handler: function()
				{
					form.openEvnStickEditWindow2('edit');
				}
			},
			action_Print_EvnOnkoNotify:
			{
				nn: 'action_Print_EvnOnkoNotify',
				tooltip: langs('Печать'),
				text: langs('Печать'),
				iconCls : 'print16',
				handler: function() {
					var node = form.Tree.getSelectionModel().selNode;
					var object_value = node.attributes.object_value;
					printBirt({
						'Report_FileName': 'OnkoNotify.rptdesign',
						'Report_Params': '&paramEvnOnkoNotify=' + object_value,
						'Report_Format': 'pdf'
					});
				}
			},
			action_Open_EvnOnkoNotify:
			{
				nn: 'action_Open_EvnOnkoNotify',
				tooltip: langs('Открыть'),
				text: langs('Открыть'),
				iconCls : 'edit16',
				handler: function() {
					var node = form.Tree.getSelectionModel().selNode;
					var object_value = node.attributes.object_value;
					printBirt({
						'Report_FileName': 'OnkoNotify.rptdesign',
						'Report_Params': '&paramEvnOnkoNotify=' + object_value,
						'Report_Format': 'pdf'
					});
				}
			},
			action_Print_EvnOnkoNotifyNeglected:
			{
				nn: 'action_Print_EvnOnkoNotifyNeglected',
				tooltip: langs('Печать'),
				text: langs('Печать'),
				iconCls : 'print16',
				handler: function() {
					var node = form.Tree.getSelectionModel().selNode;
					var object_value = node.attributes.object_value;
					printBirt({
						'Report_FileName': 'OnkoNotifyNeglected.rptdesign',
						'Report_Params': '&paramEvnOnkoNotifyNeglected=' + object_value,
						'Report_Format': 'pdf'
					});
				}
			},
			action_Open_EvnOnkoNotifyNeglected:
			{
				nn: 'action_Open_EvnOnkoNotifyNeglected',
				tooltip: langs('Открыть'),
				text: langs('Открыть'),
				iconCls : 'edit16',
				handler: function() {
					var node = form.Tree.getSelectionModel().selNode;
					var object_value = node.attributes.object_value;
					form.openForm('swEvnOnkoNotifyNeglectedEditWindow', 'EvnOnkoNotifyNeglected_id', {
						action: 'edit',
						formParams: {},
						EvnOnkoNotifyNeglected_id: object_value
					});
				}
			},
			action_Open_EvnPLDispDop:
			{
				nn: 'action_Open_EvnPLDispDop',
				tooltip: langs('Открыть случай дополнительной диспансеризации'),
				text: langs('<b>Открыть случай ДД<b>'),
				iconCls : 'evn-ddisp-open16',
				disabled: false,
				handler: function()
				{
					form.openForm('swEvnPLDispDopEditWindow', 'EvnPLDispDop_id');
				}
			},
			action_Open_EvnVizitDispDop:
			{
				nn: 'action_Open_EvnVizitDispDop',
				tooltip: langs('Открыть посещение по дополнительной диспансеризации'),
				text: langs('<b>Открыть посещение по ДД</b>'),
				iconCls : 'evnvisit-ddisp-open16',
				disabled: false,
				handler: function()
				{
					// Ждем - с
					form.openForm('swEvnVizitDispDopEditWindow', 'EvnVizitDispDop_id', {formParams:{}, ownerWindow: form});
				}
			},
			action_Open_EvnUslugaDispDop:
			{
				nn: 'action_Open_EvnUslugaDispDop',
				tooltip: langs('ДД: Лабораторное исследование'),
				text: langs('<b>Открыть лабораторное исследование по ДД</b>'),
				iconCls : 'ddisp-usluga-open16',
				disabled: false,
				handler: function()
				{
					// Ждем - с
					form.openForm('swEvnUslugaDispDopEditWindow', 'EvnUslugaDispDop_id', {formParams:{}, ownerWindow: form});
				}
			},
			action_Open_PersonPrivilege:
			{
				nn: 'action_Open_PersonPrivilege',
				tooltip: langs('Открыть форму редактирования льготы'),
				text: langs('Открыть форму редактирования льготы'),
				iconCls : 'priv-open16',
				disabled: false,
				handler: function()
				{
					form.openForm('swPrivilegeEditWindow', 'PersonPrivilege_id');
				}
			},
			action_Open_PersonCard:
			{
				nn: 'action_Open_PersonCard',
				tooltip: langs('Открыть форму прикрепления'),
				text: langs('Открыть форму прикрепления'),
				iconCls : 'pcard-open16',
				disabled: false,
				handler: function()
				{
					form.openForm('swPersonCardEditWindow', 'PersonCard_id');
				}
			},
			action_NoAction:
			{
				nn: 'action_NoAction',
				tooltip: langs('Данный элемент не имеет событий'),
				text: langs('Не имеет события'),
				iconCls : 'x-btn-text',
				disabled: true,
				handler: function()
				{
					alert(langs('Нет события'));
				}
			},
			action_PersonNewBorn:
			{
				nn: 'action_PersonNewBorn',
				tooltip: langs('Сведения о новорожденном'),
				text: langs('Сведения о новорожденном'),
				id: 'PersonEmkF_PersonNewBorn_btn',
				iconCls : 'newborn32',
				actionType: 'write',
				handler: function()
				{
					getWnd('swPersonBirthSpecific').show({action:'view',Person_id:form.Person_id})
				}
			},
			action_TopTimetable:
			{
				nn: 'action_TopTimetable',
				tooltip: langs('Открыть часто используемое расписание'),
				text: langs('Экспресс запись пациента к врачу'),
				id: 'PersonEmkF_TopTimetable_btn',
				iconCls : 'eph-timetable-top16',
				actionType: 'write',
				handler: function()
				{
					//проверяем жив ли человек
					var personpanel = Ext.getCmp('PEMK_PersonInfoFrame');

					if (personpanel && personpanel.getFieldValue('Person_deadDT') != '') {
						sw.swMsg.alert(langs('Ошибка'), langs('Направление невозможно в связи со смертью пациента'));
					} else {
						// отображаем список часто используемых расписаний
						form.getTopTimetable(this);
					}
				}
			},
			// Открыть карту профилактических прививок.
			// Кнопка доступна, если форма ЭМК вызвана из:
			//  - АРМ врача поликлиники
			//  - АРМ главной медсестры
			//  - АРМ врача стационара, регион Вологда
			//    (#182475, добавляется в конфигурацию в swMPWorkPlaceStacWindow)
			// Кнопка недоступна, если форма ЭМК вызвана из АРМ врача МСЭ.
			// Кнопка не отображается в регионе Пермь.
			action_Kard063:
			{
				nn: 'action_Kard063',
				tooltip: langs('Открыть карту профилактических прививок'),
				text: langs('Иммунопрофилактика'),
				iconCls : 'vac-plan32',
				//hidden: (!getGlobalOptions().region || getGlobalOptions().region.nick != 'ufa'),
				hidden: false, //(getRegionNick() == 'perm'),
				actionType: 'write',
				handler: function()
				{
					getWnd('amm_Kard063').show({person_id:form.Person_id})
				}
			},
			action_EvnPrescrVK:
			{
				nn: 'action_EvnPrescrVK',
				text: langs('Выписать направление на ВК'),
				tooltip: langs('Выписать направление на ВК'),
				//disabled: true,
				hidden: false,// !isAdmin,(IS_DEBUG != 1),
				iconCls: 'vk-prescr32',
				actionType: 'write',
				handler: function()
				{
					var createDirection = function(el_data) {
						form.createDirection(el_data, new Ext.data.Record({
							DirType_Name: langs('Направление на ВК или МСЭ'),
							DirType_Code: 8,
							DirType_id: 9
						}), []);
					};

					if (form.userMedStaffFact.ARMType == 'stac') {
						Ext.Ajax.request({
							params: {
								Person_id: form.Person_id,
								LpuSection_id: form.userMedStaffFact.LpuSection_id
							},
							// @task https://redmine.swan.perm.ru/issues/76144
							// url: '/?c=EvnPS&m=getLastEvnPS',
							// Заменил на
							url: '/?c=EvnSection&m=getLastEvnSection',
							success: function(response) {
								var response_obj = Ext.util.JSON.decode(response.responseText);

								if (response_obj[0] && response_obj[0].EvnSection_id) {
									createDirection({object: 'EvnSection', object_id: response_obj[0].EvnSection_id});
								}
							}
						});
					} else if (form.userMedStaffFact.ARMType == 'common') {
						Ext.Ajax.request({
							params: {
								Person_id: form.Person_id,
								LpuSection_id: form.userMedStaffFact.LpuSection_id
							},
							url: '/?c=EvnVizit&m=getLastEvnVizitPL',
							success: function(response) {
								var response_obj = Ext.util.JSON.decode(response.responseText);

								if (response_obj[0] && response_obj[0].EvnVizitPL_id) {
									createDirection({object: 'EvnVizitPL', object_id: response_obj[0].EvnVizitPL_id});
								}
							}
						});
					} else {
						createDirection({object: '', object_id: null});
					}
				}
			},
			action_New_MedSvidDeath:
			{
				nn: 'action_New_MedSvidDeath',
				tooltip: langs('Выписать свидетельство о смерти'),
				text: langs('Выписать свидетельство о смерти'),
				iconCls : 'eph-death16',
				disabled: false,
				actionType: 'write',
				handler: function()
				{
					form.openForm('swMedSvidDeathEditWindow', 'DeathSvid_id', {formParams:{}}, 'add');
				}
			},
			// Антропометрические данные
			action_Open_Anthropometry:
			{
				nn: 'action_Open_Anthropometry',
				tooltip: langs('Антропометрические данные'),
				text: langs('<b>Просмотр/редактирование антропометрических данных</b>'),
				iconCls : 'evn-open16',
				disabled: false,
				handler: function()
				{
					//log(form.Tree.getSelectionModel().selNode);
					form.openEmkEditWindow('Person_id', form.Tree.getSelectionModel().selNode);
				}
			},
			action_Open_PersonMedHistory:
			{
				nn: 'action_Open_PersonMedHistory',
				tooltip: langs('Анамнез жизни'),
				text: langs('<b>Просмотр/редактирование анамнеза жизни</b>'),
				iconCls : 'evn-open16',
				disabled: false,
				handler: function()
				{
					form.openEmkEditWindow('Person_id', form.Tree.getSelectionModel().selNode);
				}
			},
			// Группа крови и резус-фактор
			action_Open_BloodData:
			{
				nn: 'action_Open_BloodData',
				tooltip: langs('Группа крови и резус-фактор'),
				text: langs('<b>Просмотр/редактирование группы крови и резус-фактора</b>'),
				iconCls : 'evn-open16',
				disabled: false,
				handler: function()
				{
					//log(form.Tree.getSelectionModel().selNode);
					form.openEmkEditWindow('Person_id', form.Tree.getSelectionModel().selNode);
				}
			},
			// Аллергологический анамнез
			action_Open_AllergHistory:
			{
				nn: 'action_Open_AllergHistory',
				tooltip: langs('Аллергологический анамнез'),
				text: langs('<b>Просмотр/редактирование аллергологического анамнеза</b>'),
				iconCls : 'evn-open16',
				disabled: false,
				handler: function()
				{
					//log(form.Tree.getSelectionModel().selNode);
					form.openEmkEditWindow('Person_id', form.Tree.getSelectionModel().selNode);
				}
			},
			action_Open_FeedingType:
				{
					nn: 'action_Open_FeedingType',
					tooltip: langs('Способ вскармливания'),
					text: langs('<b>Просмотр/редактирование способа вскармливания</b>'),
					iconCls: 'evn-open16',
					disabled: false,
					handler: function () {
						//log(form.Tree.getSelectionModel().selNode);
						form.openEmkEditWindow('Person_id', form.Tree.getSelectionModel().selNode);
					}
				},
			// Экспертный анамнез и льготы
			action_Open_ExpertHistory:
			{
				nn: 'action_Open_ExpertHistory',
				tooltip: langs('Экспертный анамнез и льготы'),
				text: langs('<b>Просмотр/редактирование экспертного анамнеза и льгот</b>'),
				iconCls : 'evn-open16',
				disabled: false,
				handler: function()
				{
					//log(form.Tree.getSelectionModel().selNode);
					form.openEmkEditWindow('Person_id', form.Tree.getSelectionModel().selNode);
				}
			},
			// Список оперативных вмешательств
			action_Open_SurgicalList:
			{
				nn: 'action_Open_SurgicalList',
				tooltip: langs('Список оперативных вмешательств'),
				text: langs('<b>Просмотр списка оперативных вмешательств</b>'),
				iconCls : 'evn-open16',
				disabled: false,
				handler: function()
				{
					//log(form.Tree.getSelectionModel().selNode);
					form.openEmkEditWindow('Person_id', form.Tree.getSelectionModel().selNode);
				}
			},
			// Список утчоненных диагнозов
			action_Open_DiagList:
			{
				nn: 'action_Open_DiagList',
				tooltip: langs('Список утчоненных диагнозов'),
				text: langs('<b>Просмотр списка утчоненных диагнозов</b>'),
				iconCls : 'evn-open16',
				disabled: false,
				handler: function()
				{
					//log(form.Tree.getSelectionModel().selNode);
					form.openEmkEditWindow('Person_id', form.Tree.getSelectionModel().selNode);
				}
			},
			action_StacSvid:
			{
				nn: 'action_StacSvid',
				tooltip: langs('Свидетельство'),
				text: langs('Свидетельство'),
				iconCls : 'medsvid16',
				//disabled: !isAdmin && !IS_DEBUG,
				//hidden: !isAdmin && !IS_DEBUG,
				menuAlign: 'tr',
				menu: new Ext.menu.Menu({
					items: [
						sw.Promed.Actions.New_SvidBirth,
						sw.Promed.Actions.New_SvidDeath,
						sw.Promed.Actions.New_SvidPntDeath
					]
				})
			},
			action_CommonSvid:
			{
				nn: 'action_CommonSvid',
				tooltip: langs('Свидетельство'),
				text: langs('Свидетельство'),
				iconCls : 'medsvid16',
				actionType: 'write',
				menuAlign: 'tr',
				menu: new Ext.menu.Menu({
					items: [
						sw.Promed.Actions.New_SvidDeath
					]
				})
			},
			action_EvnJournal:
			{
				nn: 'action_EvnJournal',
				tooltip: langs('Журнал событий пациента'),
				text: langs('Журнал событий пациента'),
				iconCls : 'book32',
				handler: function() {
					this.openPersonEvnJournalWindow();
				}.createDelegate(this)
			},
			action_EvnVK:
			{
				nn: 'action_EvnVK',
				tooltip: langs('Создать протокол ВК'),
				text: langs('Создать протокол ВК'),
				iconCls : 'book32',
				handler: function() {
					this.addEvnVK();
				}.createDelegate(this)
			},
			action_Newslatter:
			{
				nn: 'action_Newslatter',
				tooltip: langs('Создать СМС/e-mail уведомление'),
				text: langs('Создать СМС/e-mail уведомление'),
				iconCls : 'mail32',
				hidden: !isUserGroup('Newslatter'),
				handler: function() {
					this.addNewslatter();
				}.createDelegate(this)
			},
			action_PersonQuarantine:
			{
					nn: 'action_PersonQuarantine',
					tooltip: langs('Открыть контрольную карту пациента на карантине'),
					text: langs('Открыть контрольную карту пациента на карантине'),
					iconCls : 'personquarantine32',
					menuAlign: 'tr',
					actionType: 'write',
					handler: function()
					{
						form.openQuarantineEditWindow({ action: 'edit' });
					}
				},
		} ;// end configActions
		
		// События меню
		this.Actions = {};
		// действия для создания панели кнопок
		form.PanelActions = {};
		this.GroupActions = {};
		this.allActionObjectList = [];
		this.allActionKeyList = [];
		for(var key in configActions)
		{
			this.Actions[key] = new Ext.Action(configActions[key]);
			if(!key.inlist(['action_Print_EvnPL','action_Print_EvnPS'])){
				this.allActionObjectList.push(this.Actions[key]);
				this.allActionKeyList.push(key);
			}
			// копирование для создания кнопок
			// width:'265',minWidth:'265', style: {width: '100%'},
			var iconCls = configActions[key].iconCls.replace(/16/g, '32');
			var z = Ext.applyIf({cls: 'x-btn-large', iconCls: iconCls, text: ''}, configActions[key]);

			this.PanelActions[key] = new Ext.Action(z);
		}

		// Группа акшенов уровней
		this.GroupActions['actions'] = new Ext.Action(
		{
			text:langs('Действия'),
			iconCls : 'actions16',
			menu: this.allActionObjectList
		});

		for (key in this.Actions)
		{
			if ( typeof this.Actions[key] == 'object' ) {
				this.Actions[key].hide();
			}
		}
		this.Actions.action_NoAction.show();

		/*this.SettingsActions =
		{
			action_check_setDate: new Ext.Action(
			{
				pressed: true,
				text: langs('Выводить события по дате'),
				group: 'group',
				id: 'checkbox_setDate',
				checkHandler: function ()
				{
					if (this.checked)
					{
						var tree = Ext.getCmp('PersonEmkTree');
						var root = tree.getRootNode();
						this.disable();
						tree.ownerCt.ownerCt.SettingsActions.action_check_setType.disable();
						tree.getLoader().baseParams.type = 0;
						root.select();
						tree.fireEvent('click', root);
						tree.getLoader().load(root);
						root.expand();
					}
				},
				enableToggle: true,
				xtype: 'button'
			}),
			action_check_setType: new Ext.Action(
			{
				pressed: false,
				text: langs('Группировать события по типам'),
				group: 'group',
				id: 'checkbox_setType',
				checkHandler: function ()
				{
					if (this.checked)
					{
						var tree = Ext.getCmp('PersonEmkTree');
						var root = tree.getRootNode();
						this.disable();
						tree.ownerCt.ownerCt.SettingsActions.action_check_setDate.disable();
						tree.getLoader().baseParams.type = 1;
						root.select();
						tree.fireEvent('click', root);
						tree.getLoader().load(root);
						root.expand();
					}
				},
				enableToggle: true,
				xtype: 'button'
			})
		}

		this.SettingsMenu = new Ext.menu.Menu();
		var CheckItem = new Ext.menu.CheckItem(form.SettingsActions.action_check_setDate);
		this.SettingsMenu.add(CheckItem);
		var CheckItem = new Ext.menu.CheckItem(form.SettingsActions.action_check_setType);
		this.SettingsMenu.addMenuItem(CheckItem);
		delete CheckItem;

		this.GroupActions['settings'] = new Ext.Action(
		{
			text:langs('Настройки'),
			iconCls : 'settings16',
			menu:
			[
				new Ext.menu.CheckItem(form.SettingsActions.action_check_setDate),
				new Ext.menu.CheckItem(form.SettingsActions.action_check_setType)
			]
		});
		*/
		this.TreeToolbar = new Ext.Toolbar(
		{
			id : form.id+'Toolbar',
			items:
			[
				new Ext.Action(
				{
					text: langs('Фильтры'),
					disabled: true,
					xtype: 'button',
					handler: function()
					{
						return false;
					}.createDelegate(this)
				}),
				form.Actions.action_Print_EvnPL,
				form.Actions.action_Print_EvnPS,
				form.GroupActions.actions,
				{
					xtype : "tbseparator"
				},
				{
					enableToggle: true,
					pressed: true, // группировка по хронологии
					xtype: 'button',
					name: 'GroupTypeToogle',
					id: 'PEMK_GroupTypeToogle',
					text: langs('По событиям'),
					listeners:
					{
						toggle: function(button, check)
						{
							var cur_node = form.Tree.getSelectionModel().getSelectedNode(),
								yes_handler = function() {
									form.toggleGroupType(button, check);
								};
							if (cur_node && cur_node.attributes.object) {
								if (form.checkChange(cur_node.attributes.object, cur_node.attributes.object_id, cur_node.attributes.object_value, yes_handler)) {
									form.toggleGroupType(button, check);
								} else {
									// нельзя уйти из режима редактирования
								}
							} else {
								form.toggleGroupType(button, check);
							}
						}
					}
				},
				{
					allowDepress: false,
					pressed: true,
					text: langs('ЭИБ'),
					toggleGroup: 'ARMType_group',
					id: 'PEMK_setStac',
					listeners:
					{
						toggle: function(button, check)
						{
							if (check)
							{
								form.changeARMType('stac');
							}
						}
					},
					enableToggle: true,
					xtype: 'button'
				},
				{
					allowDepress: false,
					pressed: false,
					text: langs('ЭМК'),
					toggleGroup: 'ARMType_group',
					id: 'PEMK_setCommon',
					listeners:
					{
						toggle: function(button, check)
						{
							if (check)
							{
								form.changeARMType('common');
							}
						}
					},
					enableToggle: true,
					xtype: 'button'
				},
				{
					id: 'EvnDate_Range',
					name : "EvnDate_Range",
					xtype : "daterangefield",
					width : 170,
					fieldLabel : langs('Период'),
					plugins: [new Ext.ux.InputTextMask('99.99.9999 - 99.99.9999', false)],
					listeners: {
						'keydown': function (inp, e)
						{
							if (e.getKey() == Ext.EventObject.ENTER)
							{
								form.loadTree();
							}
						}
					}
				},
				{
					id: 'PEMK_MedStaffFactCombo',
					parentElementId: 'PEMK_LpuSectionCombo',
					emptyText: langs('Врач'),
					hiddenName: 'MedStaffFact_id',
					lastQuery: '',
					listWidth: 350,
					width: 250,
					xtype: 'swmedstafffactglobalcombo',
					tpl: new Ext.XTemplate(
						'<tpl for="."><div class="x-combo-list-item">',
						'<table style="border: 0;">',
						'<td style="width: 45px;"><font color="red">{MedPersonal_TabCode}&nbsp;</font></td>',
						'<td><span style="font-weight: bold;">{MedPersonal_Fio}</span></td>',
						'</tr></table>',
						'</div></tpl>'
					),
					listeners:
					{
						'keydown': function (inp, e)
						{
							if (e.getKey() == Ext.EventObject.ENTER)
							{
								form.loadTree();
							}
						}
					}
				},
				{
					hiddenName: 'LpuSection_id',
					id: 'PEMK_LpuSectionCombo',
					emptyText: langs('Отделение'),
					lastQuery: '',
					linkedElements: [
						'PEMK_MedStaffFactCombo'
					],
					listWidth: 380,
					width: 210,
					xtype: 'swlpusectionglobalcombo',
					listeners:
					{
						'keydown': function (inp, e)
						{
							if (e.getKey() == Ext.EventObject.ENTER)
							{
								form.loadTree();
							}
						}
					}
				},
				{
					xtype : "tbseparator"
				},
				{
					disabled: false,
					text : BTN_GRIDREFR,
					handler : function(button, event) {
						form.reloadTree({reset: true});
					},
					id: 'PEMK_RefreshBtn',
					tooltip : "Обновление списка с сервера <b>(F5)</b>",
					iconCls: 'refresh16'
				},
				{
					xtype : "tbseparator"
				},
				{
					disabled: true,
					text : langs('Назад'),
					handler : function(button, event) {
						form.gobackward();
					},
					id: 'PEMK_gobackwardBtn',
					tooltip : langs('Вернуть предыдущее состояние'),
					iconCls: 'back16'
				},
				{
					xtype : "tbseparator"
				},
				{
					disabled: true,
					text : langs('Домой'),
					handler : function(button, event) {
						form.goHome();
					},
					id: 'PEMK_goHomeBtn',
					tooltip : langs('Вернуть первоначальное состояние'),
					iconCls: 'home16'
				},
				{
					xtype : "tbseparator"
				},
				{
					disabled: true,
					text : langs('Вперед'),
					handler : function(button, event) {
						form.goforward();
					},
					id: 'PEMK_goforwardBtn',
					tooltip : langs('Отменить возврат к предыдущему состоянию'),
					iconCls: 'forward16'
				},
				{
					text : langs('Групповая печать'),
					handler : function(button, event) {
						form.getPrintPanel();
					},
					id: 'PEMK_groupPrint',
					tooltip : langs('Открыть панель для работы с групповой печатью'),
					iconCls: 'print16'
                }
			]
		});

		// Формируем меню по правой кнопке
		this.ContextMenu = new Ext.menu.Menu();
		for (key in this.Actions)
		{
			this.ContextMenu.add(this.Actions[key]);
		}

		this.tree_was_loaded = false;
		this.Tree = new Ext.tree.TreePanel(
		{
			plugins: new NodeMouseoverPlugin(),
			//title: 'События',
			title: ' ',
			id: 'PersonEmkTree',
			region: 'west',
			animate:false,
			width: 800,
			enableDD: false,
			autoScroll: true,
			autoLoad:false,
			clearOnLoad:false,
			border: true,
			//rootVisible: false,
			collapsible: true,
			split: true,
			//tbar: form.TreeToolbar,
			contextMenu: form.ContextMenu,
			listeners:
			{
				render: function(p) {
					var body_width = Ext.getBody().getViewSize().width;
					p.setWidth(body_width * (1/3));
				},
				mouseover: function (node) {
					var el = Ext.get(node.getUI().getEl());
					if(node.attributes.title)
					{
						new Ext.ToolTip({
							target: node.ui.elNode.id,
							maxWidth: 500,
							showDelay: 0,
							html: node.attributes.title
						});
					}
					else
					{
						if (el.getTextWidth() > this.getInnerWidth())
						{
							new Ext.ToolTip({
								maxWidth: 500,
								showDelay: 0,
								target: node.ui.elNode.id,
								html: node.attributes.text
							});
						}
					}
				},
				beforeexpandnode: function(node, deep, anim) {
					var cur_node = form.Tree.getSelectionModel().getSelectedNode(),
						yes_handler = function() {
							if (!node.firstChild) {
								form.processLoad = true;
								form.Tree.getLoader().load(node, function(tl,n){
									form.processLoad = false;
									n.expand();
								});
							} else {
								node.expand(false, false, function(n){});
							}
						};
					//log('beforeexpandnode before checkChange', node, cur_node);
					if (cur_node && cur_node.attributes.object && !form.checkChange(cur_node.attributes.object, cur_node.attributes.object_id, cur_node.attributes.object_value, yes_handler)) {
						return false;
					}
					//log('beforeexpandnode', true);
					return true;
				},
				beforeappend: function(tree, parent, node){

					if( ! Ext.isEmpty(this.showOnlyId) && parent.id == 'root'){
						if(node.id != this.showOnlyId){

							if(node.id == 'SignalInformationAll_9999999999'){
								return true;
							}

							return false;
						}
					}
					return true;
				}.createDelegate(this)
			},
			root:
			{
				nodeType: 'async',
				text: langs('Электронная медицинская карта'),
				id:'root',
				expanded: false
			},
			rootVisible: false,
			loader: new Ext.tree.TreeLoader(
			{
				listeners:
				{
					load: function(tr, node, response)
					{
						callback:
						{

							if (getRegionNick() == 'ufa' && response.responseText && !form.IsShowNewBornRisk) {
								form.IsShowNewBornRisk = true;
								var data = Ext.util.JSON.decode(response.responseText);
								if (data && !Ext.isEmpty(data[0]) && !Ext.isEmpty(data[0]['newbornrisk'])) {
									sw.swMsg.show({
										buttons: Ext.Msg.OK,
										fn: Ext.emptyFn,
										icon: Ext.Msg.WARNING,
										msg: '<br>Пациент высокой группы риска по следующим критериям:<br><br><p align="center">' + data[0]['newbornrisk'] + '</p>',
										title: langs('Сообщение'),
										width: 450
									});
								}
							}

							form.Tree.getLoader().baseParams.useArchive = 0;
							this.loadMask.hide();
							form.saveFiltersState();
							if (!form.tree_was_loaded && node.id == 'root' && form.ARMType.inlist(['common']))// ,'stac'
							{
								// выделяю ноду сигнальной информации
								node.firstChild.select();
								form.Tree.fireEvent('select', node.firstChild);
								if ( form.allowLoadSignInfo )
								{
									// загружаем форму просмотра сигнальной информации
									form.Tree.fireEvent('click', node.firstChild);
								}
							}
							form.tree_was_loaded = true;

							if ( getGlobalOptions().archive_database_enable ) {
								form.refreshArchiveElement();
							}
							form.addEMDOuterButtonLink();
						}
					},
					loadexception: function(node)
					{
						this.loadMask.hide();
					},
					beforeload: function (tl, node)
					{
						//log(['TreeLoader beforeload', node, form.ARMType, form.Person_id, form.Tree.getSelectionModel().getSelectedNode()]);
						// запрещаю загрузку при инициализации
						if (!form.ARMType || !form.Person_id)
						{
							return false;
						}
                        if (!form.Tree.getSelectionModel().isSelected(node))
                        {
                            form.Tree.getSelectionModel().select(node);
                        }
                        var selNode = form.Tree.getSelectionModel().getSelectedNode();
                        if (selNode && selNode.id != node.id)
                        {
                            return false;
                        }
						if ( getGlobalOptions().archive_database_enable && node.getDepth() != 0 ) {
							if (node.attributes && node.attributes.archiveRecord) {
								tl.baseParams.useArchive = 1;
							} else {
								tl.baseParams.useArchive = 0;
							}
						}
						this.loadMask = new Ext.LoadMask(Ext.get('PersonEmkTree'), {msg: LOAD_WAIT});
						this.loadMask.show();
						tl.baseParams.level = node.getDepth();
						if (node.getDepth()==0)
						{
							tl.baseParams.object = 'Person';
							if (form.Person_id)
								tl.baseParams.object_id = form.Person_id;
							else
								tl.baseParams.object_id = 0;
						}
						else
						{
							tl.baseParams.object = node.attributes.object;
							tl.baseParams.object_id = node.attributes.object_value;
							if (!Ext.isEmpty(tl.baseParams.object_id) && typeof tl.baseParams.object_id.replace == 'function') {
								tl.baseParams.object_id = tl.baseParams.object_id.replace(/_arch/g,'');
							}
						}
						tl.baseParams.Person_id = form.Person_id;
						tl.baseParams.ARMType = form.ARMType; // form.userMedStaffFact.ARMType;
						tl.baseParams.user_LpuUnitType_SysNick = form.userMedStaffFact.LpuUnitType_SysNick || null;
						tl.baseParams.user_MedStaffFact_id = form.userMedStaffFact.MedStaffFact_id || null;
						tl.baseParams.EvnDate_Range = (Ext.getCmp('EvnDate_Range').value != undefined) ? Ext.getCmp('EvnDate_Range').value : '';
						tl.baseParams.MedStaffFact_id = Ext.getCmp('PEMK_MedStaffFactCombo').getValue() || 0;
						tl.baseParams.LpuSection_id = Ext.getCmp('PEMK_LpuSectionCombo').getValue() || 0;
						tl.baseParams.from_MZ = getWnd('swWorkPlaceMZSpecWindow').isVisible()?2:1; //https://redmine.swan.perm.ru/issues/104824
					}
				},
				dataUrl:'/?c=EMK&m=getPersonEmkData'
			}),
			selModel: new Ext.tree.KeyHandleTreeSelectionModel()
		});

		this.Tree.addListener('contextmenu', onMessageContextMenu,this);

		/*
		this.Tree.on('contextmenu', function(node, e)
		{
			e.stopEvent();
			e.browserEvent.returnValue = false;
			e.returnValue = false;
			if (Ext.isIE)
			{
				e.browserEvent.keyCode = 0;
				e.browserEvent.which = 0;
			}
		});
		*/
		this.Tree.getSelectionModel().on('beforeselect', function(sm, newNode, oldNode)
		{
			//log('on beforeselect', newNode, form.requireCheckChange);
			if (form.ignoreOnBeforeSelectCheckChange) {
				// был произведен клик
				form.ignoreOnBeforeSelectCheckChange = false;
				//log('beforeselect', true);
				return true;
			}
			var yes_handler = function() {
				var sm = form.Tree.getSelectionModel();
				sm.select(newNode);
				sm.fireEvent('selectionchange', sm, newNode);
			};
			if (form.data && !form.checkChange(form.data.Code, form.data.key, form.data.id, yes_handler)) {
				return false;
			}
			//log('beforeselect', true);
			return true;
		});
		this.Tree.getSelectionModel().on('selectionchange', function(sm, node)
		{
			//log('on selectionchange', node, form.requireCheckChange);
			if (node) {
				form.OnTreeClick(node, {});
			}
		});

		// Функция вывода меню по клику правой клавиши
		function onMessageContextMenu(node, e)
		{
			if (!form.Tree.getSelectionModel().isSelected(node)) {
				form.Tree.getSelectionModel().select(node);
			}
			if (form.Tree.getSelectionModel().getSelectedNode().id != node.id) {
				return false;
			}
			var c = node.getOwnerTree().contextMenu;
			c.contextNode = node;
			c.showAt(e.getXY());
		}

		this.Tree.on('beforeload', function(node)
		{
			//log('on beforeload', node, form.requireCheckChange);
			//form.ignoreOnBeforeSelectCheckChange = true;
			return true;
		});

		var wnd = this;
		var loader = this.Tree.getLoader();
		loader.on ("load", function (a,b,c){
			setTimeout(function() {
				var treepanel1 = Ext.getCmp('PersonEmkForm').Tree;
				var node1 = treepanel1.getNodeById('EvnPL_'+form.EvnPl_id);
				if (node1)
					if (!node1.expanded) {
						//PROMEDWEB-8699
						//Исправление ошибки в стомат случаях
						treepanel1.fireEvent('click', node1);
					}
			}, 1000);
		});

		this.Tree.on('click', function(node, event, callback)
		{
			//log('on click', node, form.requireCheckChange, form.Tree.getSelectionModel().getSelectedNode());
			form.isFirstAdminCheck = false;
			form.requireCheckChange = true;
			form.ignoreOnBeforeSelectCheckChange = true;
			var yes_handler = function()
			{
				if (!form.Tree.getSelectionModel().isSelected(node))
				{
					form.Tree.getSelectionModel().select(node);
				}
				//log('allow click node', node, form.Tree.getSelectionModel().getSelectedNode());
				node.toggle();

				var is_bug_group_node = node.attributes.id.inlist(['EvnPLList_11115','EvnStick_34','EvnPLDispDop_11121']);
				//log(node.attributes.id);
				//log(is_bug_group_node);
				if (node.attributes.object && form.isForbiddenCode(node.attributes.object))
				{
					form.clearNodeViewForm();
					// Двойной клик на ноде выполняет соответствующий акшен
					// Из объекта делаем событие на открытие
					if (form.Actions['action_Open_'+node.attributes.object] && (!form.Actions['action_Open_'+node.attributes.object].isDisabled()) && node.attributes.object_id!="person_id" && !is_bug_group_node)
					{
						//log(node.attributes);
						var params = {};
						if ( // определяем права доступа для ЛВН
							node.attributes.object == 'EvnStick' && node.parentNode
							&& node.parentNode.attributes.accessType == 'view' // если случай закрыт для редактирования, то не должно быть доступа к ЛВН
							&& !(// регистратор ЛВН может редактировать ЛВН в закрытых случаях если они из текущей МО
								node.parentNode.attributes.Lpu_id == getGlobalOptions().lpu_id
								&& isUserGroup('lvn')
							)
						) {
							params.action = 'view';
						}
						form.Actions['action_Open_'+node.attributes.object].execute(params);
					}
				}
				else
				{
					if(!is_bug_group_node)
					{
						form.loadNodeViewForm(node, callback);
					}
				}
				//log('click', true);
			};
			if (!form.data || form.checkChange(form.data.Code, form.data.key, form.data.id, yes_handler)){
				yes_handler();
			}
		});

		// функция выбора элемента дерева
		this.OnTreeSelect = function(sm, node)
		{
			if ( !node )
				return;
			var view_panel = Ext.getCmp('rightEmkPanel');
			//Ext.getCmp('rightEmkPanelButtonPrint').disable();
			var tpl = new Ext.XTemplate('');
			tpl.overwrite(view_panel.body, {});
			var lvl = node.getDepth();
			var type = this.Tree.getLoader().baseParams.type;
			var template_text = "<div>Не найден шаблон отображения документа.</div>";
			var template_load_object = false;
			var template_load_controller = false;
			var evn_stick_type = null;
			var Research_type = null;

			switch (lvl)
			{
				case 0:
					template_text = "<div>Верхний уровень дерева событий</div>";
				break;
				case 1:
					switch (node.attributes.object)
					{
						case 'MedHisRecordReceptionist':
							template_load_object = node.attributes.object;
						break;
						case 'EvnDocument':
						case 'Research':
						case 'MedicalCheckup':
						case 'ProtocolSurgery':
						case 'Epicrisis':
						case 'EvnPL':
						case 'EvnDirection':
						case 'EvnUslugaPar':
						case 'EvnRecept':
						case 'EvnReceptGeneral':
							if ( type == '0' )
								template_load_object = node.attributes.object;
						break;
						default:
							template_text = "<div>Не найден шаблон отображения документа.</div>";
					}
				break;
				case 2:
					switch (node.attributes.object)
					{
						case 'EvnDocument':
						case 'MedicalCheckup':
						case 'ProtocolSurgery':
						case 'Epicrisis':
						// case 'Anthropometry':
						// case 'AllergHistory':
						// case 'BloodData':
							template_load_object = node.attributes.object;
						break;
						case 'EvnUslugaPar':
							template_load_object = 'EvnUslugaPar';
						break;
						case 'EvnRecept':
							template_load_object = 'EvnRecept';
						break;
						case 'EvnReceptGeneral':
							template_load_object = 'EvnReceptGeneral';
						break;
						case 'EvnDirection':
							template_load_object = 'EvnDirection';
						break;
						case 'EvnStick':
							template_load_object = 'Stick';
							evn_stick_type = 1;
						break;
						case 'EvnStickDop':
							template_load_object = 'Stick';
							evn_stick_type = 2;
						break;
						case 'EvnStickStudent':
							template_load_object = 'Stick';
							evn_stick_type = 3;
						break;
						case 'EvnVizitPL':
							template_load_object = 'EvnVizitPL';
						break;
						case 'EvnPL':
							if ( type == '1' )
								template_load_object = 'EvnPL';
						break;
						default:
							template_text = "<div>Не найден шаблон отображения документа.</div>";
					}
				break;
				case 3: // самый нижний уровень при type == '0', при type == '1' - уровень посещений
					switch (node.attributes.object)
					{
						case 'MedHisRecordReceptionist':
						case 'Research':
							template_load_object = node.attributes.object;
						break;
						/*
						case 'InstrDiagnostic':
							template_load_object = 'Research';
							Research_type = 1;
						break;
						case 'LabDiagnostic':
							template_load_object = 'Research';
							Research_type = 3;
						break;
						case 'RadioDiagnostic':
							template_load_object = 'Research';
							Research_type = 2;
						break;*/
						case 'EvnRecept': //
							template_load_object = 'EvnRecept';
						break;
						case 'EvnReceptGeneral': //
							template_load_object = 'EvnReceptGeneral';
						break;
						case 'EvnDirection':
							template_load_object = 'EvnDirection';
						break;
						case 'EvnStick':
							template_load_object = 'Stick';
							evn_stick_type = 1;
						break;
						case 'EvnStickDop':
							template_load_object = 'Stick';
							evn_stick_type = 2;
						break;
						case 'EvnStickStudent':
							template_load_object = 'Stick';
							evn_stick_type = 3;
						break;
						case 'EvnVizitPL':
							template_load_object = 'EvnVizitPL';
						break;
						default:
							template_text = "<div>Не найден шаблон отображения документа.</div>";
					}
				break;
				case 4:
					switch (node.attributes.object)
					{
						case 'EvnRecept':
						case 'EvnReceptGeneral':
						case 'EvnDirection':
						case 'MedHisRecordReceptionist':
							template_load_object = node.attributes.object;
						break;
						case 'EvnStick':
							template_load_object = 'Stick';
							evn_stick_type = 1;
						break;
						case 'EvnStickDop':
							template_load_object = 'Stick';
							evn_stick_type = 2;
						break;
						case 'EvnStickStudent':
							template_load_object = 'Stick';
							evn_stick_type = 3;
						break;
						default:
							template_text = "<div>Не найден шаблон отображения документа.</div>";
					}
				break;
				case 5:
					switch (node.attributes.object)
					{
						case 'EvnDocument':
						case 'MedicalCheckup':
						case 'ProtocolSurgery':
						case 'Epicrisis':
							template_load_object = node.attributes.object;
						break;
						default:
							template_text = "<div>Не найден шаблон отображения документа.</div>";
					}
				break;
				case 6:
					switch (node.attributes.object)
					{
						case 'Research':
							template_load_object = node.attributes.object;
						break;
						default:
							template_text = "<div>Не найден шаблон отображения документа.</div>";
					}
				break;
				default:
					template_text = "<div>Не найден шаблон отображения документа.</div>";
			}

			template_load_controller = template_load_object;
			if (template_load_object == 'EvnVizitPL') {
				template_load_controller = 'EvnPL';
			}

			if ( node.attributes.object == 'DeathSvid' )
			{
				template_load_object = 'DeathSvid';
				template_load_controller = 'MedSvid';
			}
			if ( node.attributes.object == 'BirthSvid' )
			{
				template_load_object = 'BirthSvid';
				template_load_controller = 'MedSvid';
			}

			// загружаем шаблон
			if (template_load_object)
			{
				if (template_load_object == 'EvnPL') { //печатная форма талона амбулаторного посещения закрыта по умолчанию
					view_panel.collapse();
				} else {
					view_panel.expand();
				}

				var params = {};
				params[template_load_object+'_id'] = node.attributes.object_value;

				if ( evn_stick_type ) {
					params.evnStickType = evn_stick_type;
				}
				if ( Research_type ) {
					params.ResearchType_id = Research_type;
				}

				Ext.Ajax.request({
					url: '/?c='+template_load_controller+'&m=load'+template_load_object+'ViewForm',
					callback: function(opt, success, response) {
						if (success && response.responseText != '')
						{
							var response_obj = Ext.util.JSON.decode(response.responseText);
							if ( response_obj.success && response_obj.success === true )
							{
								if ( response_obj['html'] )
								{
									template_text = response_obj.html;
									var view_panel = Ext.getCmp('rightEmkPanel');
									//Часть печатных форм просто берем существующую
									if ( template_load_object.inlist(['EvnRecept','EvnReceptGeneral', 'EvnPL', 'Stick', 'EvnDirection', 'DeathSvid', 'BirthSvid']) ) {
										var tpl = new Ext.XTemplate( "<iframe height='100%' width='100%' frameborder='0' src='" + template_text + "'></iframe>"/*template_text*/ );
									} else {
										var tpl = new Ext.XTemplate( template_text );
									}

									tpl.overwrite(view_panel.body, {});
									//Ext.getCmp('rightEmkPanelButtonPrint').enable();
								}
							}
							else
							{

							}
						}
					},
					params: params
				});
			}
			else
			{
				var view_panel = Ext.getCmp('rightEmkPanel');
				view_panel.collapse();
				var tpl = new Ext.XTemplate(template_text);
				tpl.overwrite(view_panel.body, {});
			}
		}

		// функция выбора элемента дерева
		this.OnTreeClick = function(node, e)
		{
			var pnode = node;
			var readOnlyNode = false;
			if ( getGlobalOptions().archive_database_enable ) {
				while(!Ext.isEmpty(pnode)) {
					if (pnode.attributes && pnode.attributes.archiveRecord) {
						readOnlyNode = true;
					}
					pnode = pnode.parentNode;
				}
			}
			this.groupPrint=false;
			if (this.isReadOnly) {
				readOnlyNode = true;
			}

			var lvl = node.getDepth();
			//var form = this;
			for (key in this.Actions)
			{
				if ( typeof this.Actions[key] == 'object' ) {
					this.Actions[key].hide();
				}
			}
			var type = this.Tree.getLoader().baseParams.type;

			switch (lvl)
			{
				case 0:
					if (!readOnlyNode) {
						if ('stom' == form.userMedStaffFact.ARMType) {
							this.Actions.action_New_EvnPLStom.show();
							this.Actions.action_New_PersonPrivilege.show();
							this.Actions.action_New_PersonDisp.show();
							this.Actions.action_New_PersonCard.show();
						} else {
							this.Actions.action_New_EvnPL.show();
							//this.Actions.action_New_EvnPLDisp.show();
							this.Actions.action_New_PersonPrivilege.show();
							this.Actions.action_New_PersonDisp.show();
							this.Actions.action_New_PersonCard.show();
							this.Actions.action_New_EvnUslugaPar.show();
							this.Actions.action_New_ComplexUsluga.show();
							this.Actions.action_New_EvnRecept.show();
						}
					}
					break;
				case 1:
						if ((node.attributes.object == 'EvnPL')  && (type==0)) // (node.attributes.object_id!='person_id')
						{	this.groupPrint=true;
							this.Actions.action_Open_EvnPL.show();
							if (!readOnlyNode && node.attributes.accessType == 'edit')
							{
								this.Actions.action_New_EvnVizitPL.show();
								//this.Actions.action_New_EvnUslugaPL.show();
								this.Actions.action_New_EvnStick.show();
								this.Actions.action_Delete_EvnPL.show();
							}
							if (!form.isMseDepers) {
								this.Actions.action_Print_EvnPL.show();
							}
						}
						else if ((node.attributes.object == 'EvnPLStom')  && (type==0)) // (node.attributes.object_id!='person_id')
						{
							this.groupPrint=true;
							this.Actions.action_Open_EvnPLStom.show();

							if (!readOnlyNode) {
								this.Actions.action_New_EvnVizitPLStom.show();
								//this.Actions.action_New_EvnDiagPLStom.show();
                                this.Actions.action_Print_Stom.show();
								this.Actions.action_New_EvnStick.show();
                                this.Actions.action_Delete_EvnPLStom.show();
							}
						}
						else if ((node.attributes.object == 'EvnPS')  && (type==0)) // (node.attributes.object_id!='person_id')
						{
							this.groupPrint=true;
							this.Actions.action_Open_EvnPS.show();
							if (!readOnlyNode && node.attributes.deleteAccess && node.attributes.deleteAccess == 'enabled') {
								this.Actions.action_Delete_EvnPS.show();

							}
							if (!form.isMseDepers) {
								this.Actions.action_Print_EvnPS.show();
								
								var actionPrintRankinScale = Ext.getCmp('action_Print_EvnPS_RankinScale');
								if (actionPrintRankinScale) {
									actionPrintRankinScale.setVisible(node.attributes.isRankin == 2);
								}
							}

						}
						else
							/*
							// Для другого уровня
							if ((type==1) && (node.attributes.object.inlist(['EvnPL','EvnPLDispDop', 'EvnRecept', 'PersonPrivilege','PersonDisp','PersonCard','EvnUslugaPar'])))
							{
								this.Actions['action_New_'+node.attributes.object].show();
							}
							else
							*/
							if ((node.attributes.object != 'EvnUslugaPar') && (type!=1))
							{
								if (node.attributes.object && this.Actions['action_Open_'+node.attributes.object] && (node.attributes.object_id!='person_id'))
								{
									this.Actions['action_Open_'+node.attributes.object].show();
								}
								else
								{
									this.Actions.action_NoAction.show();
								}
							}
							else
							{
								this.Actions.action_NoAction.show();
							}
					break;
				case 2:
					if (node.attributes.object == 'EvnVizitPL')
					{
						this.groupPrint=true;
						this.Actions.action_Open_EvnVizitPL.show();
						if(!readOnlyNode && this.userMedStaffFact.ARMType == 'common')
							this.Actions.action_Copy_EvnVizitPL.show();
						if (!readOnlyNode && node.attributes.accessType == 'edit')
						{
							this.Actions.action_New_EvnRecept.show();
							this.Actions.action_New_EvnDirection.show();
							this.Actions.action_New_EvnVizitUsluga.show();
							this.Actions.action_New_PersonDisp.show();
							this.Actions.action_Delete_EvnVizitPL.show();
						}

						if (!readOnlyNode && node.attributes.accessForDel == 'yes' && getRegionNick() == 'vologda')
						{
							this.Actions.action_Delete_EvnVizitPL.show();
						}
					}
					else if (node.attributes.object == 'EvnVizitPLStom')
					{
						this.groupPrint=true;
						this.Actions.action_Open_EvnVizitPLStom.show();
						if (!readOnlyNode) {
							if (
								getRegionNick() != 'perm' || typeof node.parentNode != 'object' || typeof node.parentNode.attributes != 'object'
								|| Ext.isEmpty(node.parentNode.attributes.date) || node.parentNode.attributes.object != 'EvnPLStom'
								|| getValidDT(node.parentNode.attributes.date.toString().substr(0, 10), '') < getValidDT('01.11.2015', '')
							) {
								this.Actions.action_New_EvnUslugaPLStom.show();
							}
							this.Actions.action_Close_EvnVizitPLStom.show();
							this.Actions.action_New_EvnDiagPLStom.show();
							this.Actions.action_New_EvnDirection.show();
							this.Actions.action_Copy_EvnVizitPLStom.show();
						}
					}
					else if ((node.attributes.object == 'EvnStick')  && (type==0))
					{
						this.Actions.action_View_EvnStick.show();
						this.Actions.action_Print_EvnStick.show();
						if (!readOnlyNode && node.attributes.accessType == 'edit')
						{
							this.Actions.action_Add_EvnStick.show();
							this.Actions.action_Del_EvnStick.show();
							this.Actions.action_Edit_EvnStick.show();
						}
					}
					else if ((node.attributes.object == 'EvnStickDop')  && (type==0))
					{
						this.Actions.action_View_EvnStick.show();
						this.Actions.action_Print_EvnStick.show();
						if (!readOnlyNode && node.attributes.accessType == 'edit')
						{
							this.Actions.action_Add_EvnStick.show();
							this.Actions.action_Del_EvnStick.show();
							this.Actions.action_Edit_EvnStick.show();
						}
					}
					else if ((node.attributes.object == 'EvnStickStudent')  && (type==0))
					{
						this.Actions.action_View_EvnStick.show();
						this.Actions.action_Print_EvnStick.show();
						if (!readOnlyNode && node.attributes.accessType == 'edit')
						{
							this.Actions.action_Add_EvnStick.show();
							this.Actions.action_Del_EvnStick.show();
							this.Actions.action_Edit_EvnStick.show();
						}
					}
					else if ((node.attributes.object == 'EvnOnkoNotify') && (type==0))
					{
						this.Actions.action_Print_EvnOnkoNotify.show();
					}
					else if ((node.attributes.object == 'EvnOnkoNotifyNeglected') && (type==0))
					{
						this.Actions.action_Print_EvnOnkoNotifyNeglected.show();
					}
					else
					{
						if ((node.attributes.object == 'EvnPL')  && (type==1))
						{
							this.groupPrint=true;
							this.Actions.action_Open_EvnPL.show();
							if (!readOnlyNode && node.attributes.accessType == 'edit')
							{
								this.Actions.action_New_EvnVizitPL.show();
								//this.Actions.action_New_EvnUslugaPL.show();
								this.Actions.action_New_EvnStick.show();
								this.Actions.action_Delete_EvnPL.show();
							}
							this.Actions.action_Print_EvnPL.show();
						}
						else if ((node.attributes.object == 'EvnPLStom')  && (type==1))
						{
							this.groupPrint=true;
							this.Actions.action_Open_EvnPLStom.show();
							if (!readOnlyNode) {
								this.Actions.action_New_EvnVizitPLStom.show();
                                this.Actions.action_Print_Stom.show();
								//this.Actions.action_New_EvnUslugaPLStom.show();
								this.Actions.action_New_EvnStick.show();
                                this.Actions.action_Delete_EvnPLStom.show();
							}
						}
						else
						if (node.attributes.object && this.Actions['action_Open_'+node.attributes.object] && (node.attributes.object_id!='person_id'))
						{
							if(node.attributes.object == 'EvnSection'){
								//https://redmine.swan.perm.ru/issues/28138
								this.groupPrint=true;
								this.Actions['action_print_Discharge'].show();
								this.Actions['action_print_Interim'].show();
								this.Actions['action_print_EpicrisReab'].show();
								this.Actions['action_print_TreatrList'].show();
								this.Actions['action_print_List'].show();
								this.Actions['action_print_Obs_List'].show();
								if (Ext.isEmpty(this.PersonInfoFrame.getFieldValue('PersonEncrypHIV_Encryp'))) {
									this.Actions['action_print_PersonSoglasieStac'].show();
									this.Actions['action_print_PersonSoglasieAnst'].show();
									this.Actions['action_print_PersonSoglasieOperStac'].show();
									this.Actions['action_print_PersonInfoOtkaz'].show();
								}
							}
							this.Actions['action_Open_'+node.attributes.object].show();
						}
						else
						{
							this.Actions.action_NoAction.show();
						}
					}

					break;
				case 3:
					if ((node.attributes.object == 'EvnVizitPL') && (type==1))
					{
						this.groupPrint=true;
						this.Actions.action_Open_EvnVizitPL.show();
						if(!readOnlyNode && this.userMedStaffFact.ARMType == 'common')
							this.Actions.action_Copy_EvnVizitPL.show();
						if (!readOnlyNode && node.attributes.accessType == 'edit')
						{
							this.Actions.action_New_EvnRecept.show();
							this.Actions.action_New_EvnDirection.show();
							this.Actions.action_New_EvnVizitUsluga.show();
							this.Actions.action_New_PersonDisp.show();
							this.Actions.action_Delete_EvnVizitPL.show();
						}
					}
					else if ((node.attributes.object == 'EvnStick')  && (type==1))
					{
						this.Actions.action_View_EvnStick.show();
						this.Actions.action_Print_EvnStick.show();
						if (!readOnlyNode && node.attributes.accessType == 'edit')
						{
							this.Actions.action_Add_EvnStick.show();
							this.Actions.action_Del_EvnStick.show();
							this.Actions.action_Edit_EvnStick.show();
						}
					}
					else if ((node.attributes.object == 'EvnStickDop')  && (type==1))
					{
						this.Actions.action_View_EvnStick.show();
						this.Actions.action_Print_EvnStick.show();
						if (!readOnlyNode && node.attributes.accessType == 'edit')
						{
							this.Actions.action_Add_EvnStick.show();
							this.Actions.action_Del_EvnStick.show();
							this.Actions.action_Edit_EvnStick.show();
						}
					}
					else if ((node.attributes.object == 'EvnStickStudent')  && (type==1))
					{
						this.Actions.action_View_EvnStick.show();
						this.Actions.action_Print_EvnStick.show();
						if (!readOnlyNode && node.attributes.accessType == 'edit')
						{
							this.Actions.action_Add_EvnStick.show();
							this.Actions.action_Del_EvnStick.show();
							this.Actions.action_Edit_EvnStick.show();
						}
					}
					else if ((node.attributes.object == 'EvnVizitPLStom') && (type==1))
					{
						this.groupPrint=true;
						this.Actions.action_Open_EvnVizitPLStom.show();
						if (!readOnlyNode) {
							this.Actions.action_New_EvnUslugaPLStom.show();
							this.Actions.action_New_EvnDiagPLStom.show();
							this.Actions.action_New_EvnDirection.show();
							this.Actions.action_Copy_EvnVizitPLStom.show();
						}
					}
					else
						if (node.attributes.object && this.Actions['action_Open_'+node.attributes.object] && (node.attributes.object_id!='person_id'))
						{
							this.Actions['action_Open_'+node.attributes.object].show();
						}
						else
						{
							this.Actions.action_NoAction.show();
						}
					break;
				default:
					if (node.attributes.object && this.Actions['action_Open_'+node.attributes.object] && (node.attributes.object_id!='person_id'))
					{
						this.Actions['action_Open_'+node.attributes.object].show();
					}
					else
					{
						this.Actions.action_NoAction.show();
					}
					break;
			}
			if (Ext.get('printPanel')!=null) {
				this.printPanel.getEl().remove();
				Ext.select('.vPrint').addClass('vPrint-none');
				this.setHeightViewPanel();
			}
		};

		this.Tree.getSelectionModel().on('keydown', function (inp, e)
		{
			var params = new Object({
				Person_id: this.Person_id,
				Server_id: this.Server_id,
				Person_Firname: this.PersonInfoFrame.getFieldValue('Person_Firname'),
				Person_Surname: this.PersonInfoFrame.getFieldValue('Person_Surname'),
				Person_Secname: this.PersonInfoFrame.getFieldValue('Person_Secname'),
				Person_Birthday: this.PersonInfoFrame.getFieldValue('Person_Birthday')
			});
			if (e.getKey() == Ext.EventObject.F6)
			{
				if (!e.altKey) {
					ShowWindow('swPersonCardHistoryWindow', params);
				}
				return false;
			}

			if (e.getKey() == Ext.EventObject.F10)
			{
				ShowWindow('swPersonEditWindow', params);
				return false;
			}

			if (e.getKey() == Ext.EventObject.F11)
			{
				ShowWindow('swPersonCureHistoryWindow', params);
				return false;
			}

			if (e.getKey() == Ext.EventObject.F12)
			{
				if (e.ctrlKey)
				{
					ShowWindow('swPersonDispHistoryWindow', params);
				}
				else
				{
					ShowWindow('swPersonPrivilegeViewWindow', params);
				}
				return false;
			}
		}.createDelegate(this));

		var all_actions_list = this.allActionKeyList;

		// Создание кнопок для панели
		form.BtnActions = new Array();
		var i = 0;
		for(var key in form.PanelActions)
		{
			if (key.inlist(all_actions_list))
			{
				form.BtnActions.push(new Ext.Button(form.PanelActions[key]));
				i++;
			}
		}

		form.printPanel = new Ext.Panel(
		{
			id:'printPanel',
			layout:'column',
			border:false,
			height:50,
			bodyStyle:'background-color:#dfe8f6;padding:15px 30px;',

			items:[
				{
					xtype:'checkbox',
					value:false,
					id:'printCheckAll',
					listeners:
					{
						'check':function(box,check){
							var fields = Ext.DomQuery.select('.checkPrint');
							fields.forEach(function(s){s.checked = check});
							var mains =Ext.DomQuery.select('.checkMain');
							mains.forEach(function(s){s.checked = check});
							form.changeCountPrint();
						}
					}
				},{
					xtype:'label',
					style:'margin-left:5px',
					html:langs('Выбрать / Снять все')
				},{
					id:'rightPrintPart',
					bodyStyle:'background-color:#dfe8f6;float: right;',
					//style:'background-color:#dfe8f6;float:right!important',
					border:false,
					layout:'column',
					items:[{
					xtype:'label',
					id:'cntPrint',
					style:'margin-right:10px',
					html:langs('Выбрано документов:3')
				},{
					xtype:'checkbox',
					value:false,
					id:'printOtherPage'
				},{
					xtype:'label',
					style:'margin-left:5px; margin-right:10px;',
					html:langs('на отдельных листах')
				},{
					layout:'form',
					border:false,
					width:167,
					bodyStyle:'background-color:#dfe8f6;',
					items:[
						{
							xtype:'button',
							text:langs('Предварительный просмотр'),
							tooltip:langs('Предварительный просмотр'),
							handler:function () {
								form.printAll()
							}
						}
					]
				}]}
			]
		});
		this.leftMenu = new Ext.Panel(
		{
			region: 'west',
			border: false,
			//frame: true,
			layout:'form',
			layoutConfig:
			{
				titleCollapse: true,
				animate: true,
				activeOnTop: false
			},
			items: form.BtnActions
		});

		this.leftPanel =
		{
			animCollapse: false,
			bodyStyle: 'padding: 5px',
			//cmargins: '5 5 5 5',
			//margins: '0 0 0 0',
			width: 60,
			minSize: 60,
			maxSize: 120,
			id: 'leftEPHPanel',
			region: 'west',
			floatable: false,
			collapsible: true,
			layoutConfig:
			{
				titleCollapse: true,
				animate: true,
				activeOnTop: false
			},
			listeners:
			{
				collapse: function()
				{
					// Че то здесь
					//log('resize');
				},
				resize: function (p,nW, nH, oW, oH)
				{
					//log('resize');
				},
				render: function(p) {
					/*
					if (Ext.getBody().getViewSize().height < 800) {
						p.setWidth(120);
					}
					*/
				}
			},
			border: true,
			title: ' ',
			split: true,
			items: [this.leftMenu]
		};

		this.rightPanelToolbar = new Ext.Toolbar(
		{
			id : 'rightEmkPanelToolbar',
			items:
			[{
				handler: function() {
					var view_panel = Ext.getCmp('rightEmkPanel');
					var id_salt = Math.random();
					var win_id = 'printEPHdoc' + Math.floor(id_salt*10000);
					//Для рецептов используем другую логику
					if (this.Tree.getSelectionModel().selNode.attributes.object != 'EvnRecept') {
						var win = window.open('', win_id);
						win.document.write(view_panel.body.dom.innerHTML);
						win.document.close();
						win.print();
					} else {
                        var evn_recept = new sw.Promed.EvnRecept({EvnRecept_id: this.Tree.getSelectionModel().selNode.attributes.object_value});
                        evn_recept.print();
					}
				}.createDelegate(this),
				id : 'rightEmkPanelButtonPrint',
				iconCls: 'print16',
				disabled: true,
				text: BTN_FRMPRINT
			}]
		});

		this.rightPanel = new Ext.Panel(
		{
			collapsed: true,
			region: 'center',
			//title: ' ',
			//tbar: form.rightPanelToolbar,
			autoScroll: true,
			animCollapse: false,
			bodyStyle: 'background-color: #e3e3e3',
			minSize: 400,
			//maxSize: 600,
			id: 'rightEmkPanel',
			floatable: false,
			collapsible: false,
			split: true,
			listeners:
			{
				render: function(p) {
					var body_width = Ext.getBody().getViewSize().width;
					p.setWidth(body_width * (2/3));

					p.body.on('scroll', function () {

						var topY = p.getEl().getY();
						// для каждой панели .sw-nicEdit-tb указываем положение (relative или fixed) и позицию
						//var toolbars = p.getEl().query('.sw-nicEdit-tb');
						var toolbars = p.getEl().query('.mce-toolbar-grp');
						toolbars.forEach(function(panel) {

							var panelElWrap = false;

							var panelEl = Ext.get(panel);

							if (panelEl) {
								//panelElWrap = panelEl.up('.sw-nicEdit-wrap', 1);
								panelElWrap = panelEl.parent('.sw-nicEdit-wrap', 1);
								panelElWrap = Ext.get(panelElWrap);
							}

							if (panelElWrap && panelElWrap.getY() < topY && (panelElWrap.getY() + panelElWrap.getHeight()) > topY) {
								// если панелька ушла за видимую область, но не полностью, то показываем плавающий тулбар
								panel.style.position = 'fixed';
								panel.style.top = topY + 'px';
							} else {
								// иначе возвращаем как было
								panel.style.position = 'relative';
								panel.style.top = '0px';
							}
						});
					}, p);
				}
			},
			layoutConfig:
			{
				titleCollapse: true,
				animate: true,
				activeOnTop: false,
				style: 'border 0px'
			},
			items:
			[{
				html: ''
			}]
		});

		Ext.apply(this, sw.Promed.ViewPanelMsgMixin);
		this.viewPanel = this.rightPanel;

		this.ElectronicQueuePanel = new sw.Promed.ElectronicQueuePanel({
			ownerWindow: form,
			panelType: 2,
			region: 'south',

			// функция выполняющаяся при нажатии на кнопку завершить прием
			completeServiceActionFn: function(params){

				var wnd = form,
					sender = wnd.ElectronicQueuePanel.senderData;

				// если ЭО связана с диспанcеризацией
				if (sender.DispClass_id && sender.DispClass_id > 0) {
					// если пункт в цепочке первый сохраняем согласия (если не сохранены)
					if (sender.electronicServiceNum && sender.electronicServiceNum == 1) {
						if (sender.EvnPLObjectId) wnd.saveDopDispInfoConsentList(sender.EvnPLObjectId)
					}
				}

				if (params.callback && typeof params.callback === 'function') {
					params.callback({hideForm:form});
				}
			}
		});

		this.btnsPanel = new sw.Promed.Panel({
			region: 'south',
			buttons: [
				{
					text: '-'
				},
				HelpButton(this, -1),
				{
					iconCls: 'cancel16',
					text: BTN_FRMCLOSE,
					handler: function() {this.hide();}.createDelegate(this)
				}
			],
			border: false,
			layout: 'border',
			items: []
		});

		Ext.apply(this, {
			buttons:[],
			items:[
				form.PersonInfoFrame,
				{
					autoScroll: false,
					bodyBorder: false,
					frame: false,
					xtype: 'form',
					region: 'center',
					layout: 'border',
					id: 'mainEPHPanel',
					tbar: form.TreeToolbar,
					border: false,
					items:
						[
							form.leftPanel,
							{
								region: 'center',
								layout: 'border',
								items: [
									form.Tree,
									form.rightPanel
								]
							},
							form.ElectronicQueuePanel
						]
				},
				form.btnsPanel
			]
		});

		sw.Promed.swPersonEmkWindow.superclass.initComponent.apply(this, arguments);
	},
});
