/**
* swComponentLibComboboxes - классы ниспадающих списков выбора.
*
* PromedWeb - The New Generation of Medical Statistic Software
* http://swan.perm.ru/PromedWeb
*
*
* @package	  libsswusersgroupscomboswmedstafffactglobalcombo
* @access	   public
* @copyright	Copyright (c) 2009 Swan Ltd.
* @author	   Pshenicyn Ivan aka IVP (ipshon@rambler.ru)
* @version	  24.02.2009
*/


/**
 *  Комбо для человека.
 */
sw.Promed.SwPersonComboEx = Ext.extend(Ext.form.ComboBox, {
	width        : 300,
	editable     : true,
	hiddenName   : 'Person_id',
	displayField : 'Person_Name',
	valueField   : 'Person_id',
	fieldLabel   : langs('Человек'),
	enableKeyEvents: true,
	selectOnFocus  : true,
	// when editable
	emptyText    : langs('Нажмите на кнопку справа для поиска человека'),
	mode         : 'local',

	initComponent: function() {
		Ext.form.ComboBox.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.SimpleStore({
			data    : [],
			editable: false,
			key     : 'Person_id',
			autoLoad: false,
			fields: [
				{
					name: 'Person_id',
					type:'int'
				},
				{
					name: 'Person_Name',
					type:'string'
				}
			],
			sortInfo: {
				field: 'Person_Name'
			}
		})
	},
	listeners : {
		'select'  : function(combo, record, index) {
			combo.setRawValue(record.get('Person_Name'));
		},
		'keydown' : function(inp, e) {
			if ( e.getKey() == e.DELETE)
			{
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if (inp.onClearValue)
					this.onClearValue();
				e.stopEvent();
				return true;
			}

			if (e.getKey() == e.F4)
			{
				this.onTriggerClick();
			}
		}
	},
	onSelectPerson: function(data) {
	},
	onTriggerClick: function() {
		if (this.disabled) return false;
		var combo = this;
		getWnd('swPersonSearchWindow').show({
			onHide: function() {
				combo.focus(false);
			},
			onSelect: function(personData) {
				var store = combo.getStore();
				combo.setValue(personData[combo.valueField]);
				combo.hiddenValue = personData[combo.valueField];
				combo.setRawValue(
					personData.PersonSurName_SurName.trim() + " " +
					personData.PersonFirName_FirName.trim() + " " +
					personData.PersonSecName_SecName.trim()
					);
				getWnd('swPersonSearchWindow').hide();
				combo.onSelectPerson(personData);
			}
		});
	}
});
sw.Promed.SwPersonComboEx.prototype.triggerClass = 'x-form-search-trigger';
Ext.reg('swpersoncomboex', sw.Promed.SwPersonComboEx);






sw.Promed.SwBaseLocalCombo = Ext.extend(Ext.form.ComboBox, {
	allowTextInput: false,
		beforeBlur: function() {
		// медитируем
		return true;
	},
	triggerAction: 'all',
	minChars: 1,
	maxCount:null,
	forceSelection: true,
	mode: 'local',
	resizable: true,
	ctxSerach:false,
	selectOnFocus: true,
	enableKeyEvents: true,
	selectIndex: -1,
	codeAlthoughNotEditable: false,
	ignoreCodeField: false,
	setSelectIndex: function(idx)
	{
		this.selectIndex = idx;
	},
	getSelectedRecordData: function() {
		var combo = this;
		var value = combo.getValue();
		var data = new Object();
		if (value > 0) {
			var idx = this.getStore().findBy(function(record) {
				return (record.get(combo.valueField) == value);
			})
			if (idx > -1) {
				Ext.apply(data, this.getStore().getAt(idx).data);
			}
		}
		return data;
	},
	setValue: function(v) {
		sw.Promed.SwBaseLocalCombo.superclass.setValue.apply(this, arguments);
		if ( (this.codeField) && (this.editable == false || this.codeAlthoughNotEditable) ) {
			var r = this.findRecord(this.valueField, v);

			if ( r ) {
				if ( !this.ignoreCodeField && !Ext.isEmpty(r.get(this.codeField)) && r.get(this.codeField).toString().length > 0 && r.get(this.codeField) != -1 ) {
					var text = r.get(this.codeField).toString() + '. ' + r.get(this.displayField);
				}
				else {
					var text = r.get(this.displayField);
				}

				if ( !Ext.isEmpty(r.get(this.valueField)) && r.get(this.valueField).toString().length > 0 && this.el) {
					Ext.form.ComboBox.superclass.setRawValue.call(this, text);
				}
			}
		}
	},
	getCode: function() {
		var me = this,
			value = me.getValue(),
			rec = me.getSelectedRecordData();
		return value ? rec[me.codeField] : '';
	},
	initComponent: function() {
		sw.Promed.SwBaseLocalCombo.superclass.initComponent.apply(this, arguments);

		this.clearBaseFilter = function() {
			this.baseFilterFn = null;
			this.baseFilterScope = null;
		}

		this.setBaseFilter = function(fn, scope) {
			this.baseFilterFn = fn;
			this.baseFilterScope = scope || this;
			this.store.filterBy(fn, scope);
		}

		// поиск по коду и контекстный поиск
		if ( this.editable === true )
		{
			this.baseFilterFn = null;
			this.baseFilterScope = null;
			this.doQuery = function(q, forceAll) {
				if (q === undefined || q === null)
				{
					q = '';
				}

				var qe = {
					query: q,
					forceAll: forceAll,
					combo: this,
					cancel: false
				};

				if (this.fireEvent('beforequery', qe) === false || qe.cancel)
				{
					return false;
				}

				q = qe.query;
				forceAll = qe.forceAll;

				if (q.length >= this.minChars)
				{
					if (this.lastQuery != q)
					{
						this.lastQuery = q;
						this.selectedIndex = -1;
						var cnt = 0;
						this.getStore().filterBy(function(record, id) {
							var result = true;
							if(this.maxCount!=null&&cnt>this.maxCount){
								return false;
							}
							if (typeof this.baseFilterFn == 'function')
							{
								result = this.baseFilterFn.call(this.baseFilterScope, record, id);
							}

							if (result)
							{
								if(this.ctxSerach){
									var patt = new RegExp(String(q).toLowerCase());
								}else{
									var patt = new RegExp('^' + String(q).toLowerCase());
								}
								
								result = patt.test(String(record.get(this.displayField)).toLowerCase());

								if (!result && !Ext.isEmpty(this.codeField))
								{
									result = patt.test(String(record.get(this.codeField)).toLowerCase());
								}
							}
							if(result)cnt++;
							return result;
						}, this);

						this.onLoad();
					}
					else
					{
						this.selectedIndex = -1;
						this.onLoad();
					}
				}
			}
/*
			this.setValue = function(v) {
				sw.Promed.SwBaseLocalCombo.superclass.setValue.apply(this, arguments);

				var r = this.findRecord(this.valueField, v);
				if (r)
				{
					if (r.data[this.codeField] != "" && r.data[this.codeField] != -1 )
						var text = r.data[this.codeField] + '. ' + r.data[this.displayField];
					else
						var text = r.data[this.displayField];
					if (r.data[this.valueField] != "")
						Ext.form.ComboBox.superclass.setRawValue.call(this, text);
				}
			}
*/
			
			if ( this.allowTextInput != true ) {
				this.addListener('blur', function(combo) {
						if (combo.getValue() == null || combo.getValue().toString().length == 0 || combo.getRawValue().toString().length == 0)
						{
								combo.setRawValue(null);
								combo.setValue('');
								combo.fireEvent('change', combo, 0, 1);
						}
				});
			}

			this.addListener('select', function(combo, record, index) {
				if ( typeof record == 'object' ) {
					if ( !combo.ignoreCodeField && record.get(combo.valueField).toString().length > 0 && record.get(combo.valueField) != -1 ) {
						if ( !Ext.isEmpty(combo.codeField) && record.get(combo.codeField) && record.get(combo.codeField).toString().length > 0 ) {
							combo.setRawValue(record.get(combo.codeField) + ". " + record.get(combo.displayField));
						}
						else {
							combo.setRawValue(record.get(combo.displayField));
						}
					}
				}
			});
		}
		else {
	//		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);
			this.addListener('blur', function(inp) {
				if ( inp.getRawValue() == '' ) {
					inp.setValue('');
					inp.setSelectIndex(-1);
					if (inp.onClearValue)
						this.onClearValue();
				}
				inp.setSelectIndex(-1);
				return false;
			});
			this.addListener('select', function(inp, record, index) {
				if ( (inp.codeField != undefined ) && ( inp.editable == false ) && (typeof record == 'object') )
				{
					inp.setValue(record.data[inp.valueField]);
					if (record.data[inp.valueField] != "")
					{
						if (record.data[inp.valueField] != "")
							if (!inp.ignoreCodeField && record.data[inp.codeField] != "" && record.data[inp.codeField] != -1 )
								inp.setRawValue(record.data[inp.codeField] + ". " + record.data[inp.displayField]);
							else
								inp.setRawValue(record.data[inp.displayField]);
					}
				}
			});
		}

		this.addListener('keydown', function(inp, e) {
			if ( e.getKey() == e.END) {
				this.inKeyMode = true;
				this.select(this.store.getCount() - 1);
			}
			if ( e.getKey() == e.HOME) {
				this.inKeyMode = true;
				this.select(0);
			}
			if ( e.getKey() == e.PAGE_UP) {
				this.inKeyMode = true;
				var ct = this.store.getCount();
				if(ct > 0){
					if(this.selectedIndex == -1){
						this.select(0);
					}else if(this.selectedIndex != 0){
						if (this.selectedIndex-10>=0)
								this.select(this.selectedIndex-10);
							else
								this.select(0);
					}
				}
			}
			if ( e.getKey() == e.PAGE_DOWN) {
				if(!this.isExpanded()){
					this.onTriggerClick();
				}else{
					this.inKeyMode = true;
					var ct = this.store.getCount();
					if(ct > 0){
						if(this.selectedIndex == -1){
							this.select(0);
						}else if(this.selectedIndex != ct-1){
							if (this.selectedIndex+10<ct-1)
								this.select(this.selectedIndex+10);
							else
								this.select(ct-1);
						}
					}
				}
			}
			if (e.editable ==false && e.getKey() == e.DELETE)
			{
				inp.setValue('');
				inp.setRawValue("");
				inp.setSelectIndex(-1);
				if (inp.onClearValue)
					this.onClearValue();
				e.stopEvent();
				return true;
			}
			if ( (inp.codeField == undefined ) || ( inp.editable !== false ) )
				return true;
			if (e.altKey || e.ctrlKey || e.shiftKey)
				return true;
			if ( e.getKey() == e.BACKSPACE)
			{
				e.stopEvent();
				if ( inp.selectIndex == 0 )
				{
					inp.setValue('');
					inp.setRawValue("");
					inp.setSelectIndex(-1);
					if (inp.onClearValue)
						this.onClearValue();
				}
				var reg = /^(\d+)[.]+/;
				var numbers = String(inp.getRawValue()).match(reg);
				if ( numbers != null)
					var first = numbers[1];
				else
					var first = -1;
				if ( first >= 10 )
				{
					if ( String(first).length > inp.selectIndex && inp.selectIndex > 0 )
						first = String(first).substring(0, inp.selectIndex);
					var number = String(first).substring(0, String(first).length - 1);

					var idx = -1;
					var findIndex = 0;
					inp.getStore().findBy(function(r) {
						if ( r.data[inp.codeField] == number )
						{
							idx = findIndex;
							return true;
						}
						findIndex++;
					});
					if ( idx == -1 )
					{
						findIndex = 0;
						inp.getStore().findBy(function(r) {
							if ( String(number) == String(r.data[inp.codeField]).substring(0, String(number).length) )
							{
								idx = findIndex;
								return true;
							}
							findIndex++;
						});
					}

					if (idx>=0)
					{
						inp.setSelectIndex(String(number).length);
						inp.setValue(inp.getStore().getAt(idx).data[inp.valueField]);
						inp.setRawValue(inp.getStore().getAt(idx).data[inp.codeField] + '. ' + inp.getStore().getAt(idx).data[inp.displayField]);
						inp.selectText(String(number).length, inp.getRawValue().length);
						inp.fireEvent('beforeselect', inp, inp.getStore().getAt(idx));
					}
				}
				else
				{
					if (first >= 0)
					{
						inp.setValue('');
						inp.setRawValue("");
						inp.setSelectIndex(-1);
						if (inp.onClearValue)
							this.onClearValue();
					}
				}
				return true;
			}
			if ( e.getKey() < 95 )
				var number = e.getKey() - 48;
			else
				var number = e.getKey() - 96;
			if ( (number <= 9) && (number >= 0 ) )
			{
				var reg = /^(\d+)[.]+/;
				var numbers = String(inp.getRawValue()).match(reg);
				if ( numbers != null)
					var first = numbers[1];
				else
					var first = -1;
					if ( first >= 0 && inp.selectIndex > 0 )
					{
						first = String(first).substring(0, inp.selectIndex);
						number = String(first) + String(number);
					}
				var idx = -1;
					findIndex = 0;
					inp.getStore().findBy(function(r) {
						if ( String(number) == String(r.data[inp.codeField]).substring(0, String(number).length) )
						{
							idx = findIndex;
							return true;
						}
						findIndex++;
					});
				if ( idx == -1 )
				{

				var findIndex = 0;
				inp.getStore().findBy(function(r) {
					if ( r.data[inp.codeField] == number )
					{
						idx = findIndex;
						return true;
					}
					findIndex++;
				});
				}

				if ( idx>=0 )
				{
					if (inp.isExpanded)
						inp.collapse();
					inp.selectIndex = String(number).length;
					inp.setValue(inp.getStore().getAt(idx).data[inp.valueField]);
					if (inp.getStore().getAt(idx).data[inp.codeField] != "")
						inp.setRawValue(inp.getStore().getAt(idx).data[inp.codeField] + '. ' + inp.getStore().getAt(idx).data[inp.displayField]);
					else
						inp.setRawValue(inp.getStore().getAt(idx).data[inp.displayField]);
					inp.selectText(String(number).length, inp.getRawValue().length);
					inp.fireEvent('beforeselect', inp, inp.getStore().getAt(idx));
				}
			}
		});
	}//,

	/**
	 * Добавление пустой записи в комбобокс
	 */
	/*insertEmptyRecord: function () {
		var data = {};
		data[this.valueField] = "";
		data[this.displayField] = "";
		var record = new Ext.data.Record(data);
		this.store.insert(0,[record]);
	},*/

	/**
	 * Вызывается при загрузке значений в списк
	 */
	/*onLoad : function(){
		if ( (( this.store.getCount() > 0 && this.store.getAt(0).data[this.valueField] != "" ) || ( this.store.getCount() == 0 )) && this.allowBlank == true )
		{
			this.insertEmptyRecord();
		}
		if(!this.hasFocus){
			return;
		}
		if(this.store.getCount() > 0){
			this.expand();
			this.restrictHeight();
			if(this.lastQuery == this.allQuery){
				if(this.editable){
					this.el.dom.select();
				}
				if(!this.selectByValue(this.value, true)){
					this.select(0, true);
				}
			}else{
				this.selectNext();
				if(this.typeAhead && this.lastKey != Ext.EventObject.BACKSPACE && this.lastKey != Ext.EventObject.DELETE){
					this.taTask.delay(this.typeAheadDelay);
				}
			}
		}else{
			this.onEmptyResults();
		}
	}*/

});

//sw.Promed.SwBaseLocalCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
//sw.Promed.SwBaseLocalCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
//sw.Promed.SwBaseLocalCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
//sw.Promed.SwBaseLocalCombo.prototype.trigger2Class = 'x-form-clear-trigger';
//sw.Promed.SwBaseLocalCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
//sw.Promed.SwBaseLocalCombo.prototype.onTrigger2Click = function() {if ( !this.disabled ) this.clearValue(); };

Ext.reg('swbaselocalcombo', sw.Promed.SwBaseLocalCombo);

sw.Promed.SwCombo = Ext.extend(Ext.form.ComboBox, {
	setSelectIndex: function(idx)
	{
		this.selectIndex = idx;
	},
	setValue: function(v) {
		sw.Promed.SwCombo.superclass.setValue.apply(this, arguments);
		if ( (this.codeField != undefined ) && ( this.editable == false ) )
		{
			var r = this.findRecord(this.valueField, v);
			if(r){
				text = r.data[this.codeField]+ '. '+r.data[this.displayField];
				if (r.data[this.valueField] != "")
					Ext.form.ComboBox.superclass.setRawValue.call(this, text);
			}
		}
	},
	initComponent: function() {
		sw.Promed.SwCombo.superclass.initComponent.apply(this, arguments);
		this.addListener('blur', function(inp) {
			if ( inp.getRawValue() == '' ) {
				inp.setValue('');
				inp.setSelectIndex(-1);
				if (inp.onClearValue)
					this.onClearValue();
			}
			inp.setSelectIndex(-1);
			return false;
		});
		this.addListener('select', function(inp, record, index) {
			if ( (inp.codeField != undefined ) && ( inp.editable == false ) )
			{
				inp.setValue(record.data[inp.valueField]);
				if (record.data[inp.valueField] != "")
					inp.setRawValue(record.data[inp.codeField] + ". " + record.data[inp.displayField]);
			}
		});
		this.addListener('keydown', function(inp, e) {
			if ( e.getKey() == e.END) {
				this.inKeyMode = true;
				this.select(this.store.getCount() - 1);
			}
			if ( e.getKey() == e.HOME) {
				this.inKeyMode = true;
				this.select(0);
			}
			if ( e.getKey() == e.PAGE_UP) {
				this.inKeyMode = true;
				var ct = this.store.getCount();
				if(ct > 0){
					if(this.selectedIndex == -1){
						this.select(0);
					}else if(this.selectedIndex != 0){
						if (this.selectedIndex-10>=0)
								this.select(this.selectedIndex-10);
							else
								this.select(0);
					}
				}
			}
			if ( e.getKey() == e.PAGE_DOWN) {
				if(!this.isExpanded()){
					this.onTriggerClick();
				}else{
					this.inKeyMode = true;
					var ct = this.store.getCount();
					if(ct > 0){
						if(this.selectedIndex == -1){
							this.select(0);
						}else if(this.selectedIndex != ct-1){
							if (this.selectedIndex+10<ct-1)
								this.select(this.selectedIndex+10);
							else
								this.select(ct-1);
						}
					}
				}
			}
			if ( (inp.codeField == undefined ) || ( inp.editable !== false ) )
				return true;
			if (e.altKey || e.ctrlKey || e.shiftKey)
				return true;
			if ( e.getKey() == e.DELETE)
			{
				inp.setValue('');
				inp.setRawValue("");
				inp.setSelectIndex(-1);
				if (inp.onClearValue)
					this.onClearValue();
				e.stopEvent();
				return true;
			}
			if ( e.getKey() == e.BACKSPACE)
			{
				e.stopEvent();
				if ( inp.selectIndex == 0 )
				{
					inp.setValue('');
					inp.setRawValue("");
					inp.setSelectIndex(-1);
					if (inp.onClearValue)
						this.onClearValue();
				}
				var reg = /^(\d+)[.]+/;
				var numbers = String(inp.getRawValue()).match(reg);
				if ( numbers != null)
					var first = numbers[1];
				else
					var first = -1;
				if ( first >= 10 )
				{
					if ( String(first).length > inp.selectIndex && inp.selectIndex > 0 )
						first = String(first).substring(0, inp.selectIndex);
					var number = String(first).substring(0, String(first).length - 1);

					var idx = -1;
					var findIndex = 0;
					inp.getStore().findBy(function(r) {
						if ( r.data[inp.codeField] == number )
						{
							idx = findIndex;
							return true;
						}
						findIndex++;
					});
					if ( idx == -1 )
					{
						findIndex = 0;
						inp.getStore().findBy(function(r) {
							if ( String(number) == String(r.data[inp.codeField]).substring(0, String(number).length) )
							{
								idx = findIndex;
								return true;
							}
							findIndex++;
						});
					}

					if (idx>=0)
					{
						inp.setSelectIndex(String(number).length);
						inp.setValue(inp.getStore().getAt(idx).data[inp.valueField]);
						inp.setRawValue(inp.getStore().getAt(idx).data[inp.codeField] + '. ' + inp.getStore().getAt(idx).data[inp.displayField]);
						inp.selectText(String(number).length, inp.getRawValue().length);
						inp.fireEvent('beforeselect', inp, inp.getStore().getAt(idx));
					}
				}
				else
				{
					if (first >= 0)
					{
						inp.setValue('');
						inp.setRawValue("");
						inp.setSelectIndex(-1);
						if (inp.onClearValue)
							this.onClearValue();
					}
				}
				return true;
			}
			if ( e.getKey() < 95 )
				var number = e.getKey() - 48;
			else
				var number = e.getKey() - 96;
			if ( (number <= 9) && (number >= 0 ) )
			{
				var reg = /^(\d+)[.]+/;
				var numbers = String(inp.getRawValue()).match(reg);
				if ( numbers != null)
					var first = numbers[1];
				else
					var first = -1;
					if ( first >= 0 && inp.selectIndex > 0 )
					{
						first = String(first).substring(0, inp.selectIndex);
						number = String(first) + String(number);
					}
				var idx = -1;
					findIndex = 0;
					inp.getStore().findBy(function(r) {
						if ( String(number) == String(r.data[inp.codeField]).substring(0, String(number).length) )
						{
							idx = findIndex;
							return true;
						}
						findIndex++;
					});
				if ( idx == -1 )
				{

				var findIndex = 0;
				inp.getStore().findBy(function(r) {
					if ( r.data[inp.codeField] == number )
					{
						idx = findIndex;
						return true;
					}
					findIndex++;
				});
				}

				if ( idx>=0 )
				{
					if (inp.isExpanded)
						inp.collapse();
					inp.selectIndex = String(number).length;
					inp.setValue(inp.getStore().getAt(idx).data[inp.valueField]);
					inp.setRawValue(inp.getStore().getAt(idx).data[inp.codeField] + '. ' + inp.getStore().getAt(idx).data[inp.displayField]);
					inp.selectText(String(number).length, inp.getRawValue().length);
					inp.fireEvent('beforeselect', inp, inp.getStore().getAt(idx));
				}
			}
		});
	}
});

Ext.reg('swcombo', sw.Promed.SwCombo);

sw.Promed.SwBaseRemoteCombo = Ext.extend(Ext.form.ComboBox, {
	forceSelection: true,
	mode: 'remote',
	minChars: 1,
	resizable: true,
	selectOnFocus: true,
	initComponent: function() {
		if ( this.width < 500 || typeof(this.width)=='undefined' )
			this.listWidth = 300;
		sw.Promed.SwBaseRemoteCombo.superclass.initComponent.apply(this, arguments);
	}/*,
	onLoad : function(){

			//this.el.focus();
	}*/
});

sw.Promed.SwBaseRemoteCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwBaseRemoteCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwBaseRemoteCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwBaseRemoteCombo.prototype.trigger2Class = 'x-form-clear-trigger';
sw.Promed.SwBaseRemoteCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwBaseRemoteCombo.prototype.onTrigger2Click = function() {if ( !this.disabled ) this.clearValue()};

Ext.reg('swbaseremotecombo', sw.Promed.SwBaseRemoteCombo);

sw.Promed.SwBaseLocalComboSingleTrigger = Ext.extend(Ext.form.ComboBox, {
	triggerAction: 'all',
	minChars: 1,
	forceSelection: true,
	mode: 'local',
	resizable: true,
	selectOnFocus: true,
	initComponent: function() {
		if ( this.width < 500 || typeof(this.width)=='undefined' )
			this.listWidth = 300;
		sw.Promed.SwBaseLocalComboSingleTrigger.superclass.initComponent.apply(this, arguments);
	}
});

sw.Promed.SwLpuCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	ctxSerach: true,
	displayField: 'Lpu_Nick',
	editable: true,
	fieldLabel: langs('МО'),
	hiddenName: 'Lpu_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{[(values.Lpu_EndDate && values.Lpu_EndDate != "") ? "<font color=#777>"+values.Lpu_Nick + " (закрыто "+ values.Lpu_EndDate + ")</font>" : values.Lpu_Nick ]}&nbsp;',
		'</div></tpl>'
	),
	valueField: 'Lpu_id',
	autoLoad: false,
	initComponent: function() {
		sw.Promed.SwLpuCombo.superclass.initComponent.apply(this, arguments);

		if (!this.store) {
			this.store = new Ext.db.AdapterStore({
				autoLoad: this.autoLoad,
				dbFile: 'Promed.db',
				fields: [
					{name: 'Lpu_id', mapping: 'Lpu_id'},
					{name: 'Org_id', mapping: 'Org_id'},
					{name: 'Org_tid', mapping: 'Org_tid'},
					{name: 'Lpu_IsOblast', mapping: 'Lpu_IsOblast'},
					{name: 'Lpu_Name', mapping: 'Lpu_Name'},
					{name: 'Lpu_Nick', mapping: 'Lpu_Nick'},
					{name: 'Lpu_Ouz', mapping: 'Lpu_Ouz'},
					{name: 'Lpu_RegNomC', mapping: 'Lpu_RegNomC'},
					{name: 'Lpu_RegNomC2', mapping: 'Lpu_RegNomC2'},
					{name: 'Lpu_RegNomN2', mapping: 'Lpu_RegNomN2'},
					{name: 'Lpu_DloBegDate', mapping: 'Lpu_DloBegDate'},
					{name: 'Lpu_DloEndDate', mapping: 'Lpu_DloEndDate'},
					{name: 'Lpu_BegDate', mapping: 'Lpu_BegDate'},
					{name: 'Lpu_EndDate', mapping: 'Lpu_EndDate'},
					{name: 'LpuLevel_Code', mapping: 'LpuLevel_Code'},
					{name: 'Lpu_IsAccess', mapping: 'Lpu_IsAccess'},
					{name: 'Lpu_IsMse', mapping: 'Lpu_IsMse'}
				],
				key: 'Lpu_id',
				sortInfo: {field: 'Lpu_Nick'},
				listeners: {
					'load': function(store) {
						this.setValue(this.getValue());
					}.createDelegate(this)
				},
				tableName: 'Lpu'
			});
		}
	},
	setValue: function(v) {
		var text = v;
		if(this.valueField){
			var r = this.findRecord(this.valueField, v);
			if(r){
				text = r.data[this.displayField];
				if ( r.data['Lpu_EndDate'] != '' && Date.parseDate(r.data['Lpu_EndDate'], 'Y-m-d') < Date.parseDate(getGlobalOptions().date, 'd.m.Y') )
				{
					text = text + ' (закрыта '+ Ext.util.Format.date(Date.parseDate(r.data['Lpu_EndDate'], "Y-m-d"), "d.m.Y") + ' )';
				}
			} else if(this.valueNotFoundText !== undefined){
				text = this.valueNotFoundText;
			}
		}
		this.lastSelectionText = text;
		if(this.hiddenField){
			this.hiddenField.value = v;
		}
		Ext.form.ComboBox.superclass.setValue.call(this, text);
		this.value = v;
	}
});
Ext.reg('swlpucombo', sw.Promed.SwLpuCombo);

sw.Promed.SwLpuOpenedCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField: 'Lpu_Nick',
	editable: true,
	fieldLabel: langs('МО'),
	hiddenName: 'Lpu_id',
    forceSelection: true,
	tpl: new Ext.XTemplate(
		'<tpl for=".">',
		'{[(values.Lpu_EndDate && values.Lpu_EndDate != "") ? "<div class=x-combo-list-item style=\'display: none;\'>" : "<div class=x-combo-list-item>" ]}',
		'{[(values.Lpu_EndDate && values.Lpu_EndDate != "") ? "<font color=#777>"+values.Lpu_Nick + " (закрыто "+ values.Lpu_EndDate + ")</font>" : values.Lpu_Nick ]}&nbsp;',
		'</div></tpl>'
	),
	valueField: 'Lpu_id',
	autoLoad: false,
	initComponent: function() {
		sw.Promed.SwLpuCombo.superclass.initComponent.apply(this, arguments);

		if (!this.store) {
			this.store = new Ext.db.AdapterStore({
				autoLoad: this.autoLoad,
				dbFile: 'Promed.db',
				fields: [
					{name: 'Lpu_id', mapping: 'Lpu_id'},
					{name: 'Lpu_IsOblast', mapping: 'Lpu_IsOblast'},
					{name: 'Lpu_Name', mapping: 'Lpu_Name'},
					{name: 'Lpu_Nick', mapping: 'Lpu_Nick'},
					{name: 'Lpu_Ouz', mapping: 'Lpu_Ouz'},
					{name: 'Lpu_RegNomC', mapping: 'Lpu_RegNomC'},
					{name: 'Lpu_RegNomC2', mapping: 'Lpu_RegNomC2'},
					{name: 'Lpu_RegNomN2', mapping: 'Lpu_RegNomN2'},
					{name: 'Lpu_DloBegDate', mapping: 'Lpu_DloBegDate'},
					{name: 'Lpu_DloEndDate', mapping: 'Lpu_DloEndDate'},
					{name: 'Lpu_BegDate', mapping: 'Lpu_BegDate'},
					{name: 'Lpu_EndDate', mapping: 'Lpu_EndDate'},
					{name: 'LpuLevel_Code', mapping: 'LpuLevel_Code'},
					{name: 'Lpu_IsAccess', mapping: 'Lpu_IsAccess'},
					{name: 'Lpu_IsMse', mapping: 'Lpu_IsMse'}
				],
				key: 'Lpu_id',
				sortInfo: {field: 'Lpu_Nick'},
				listeners: {
					'load': function(store) {
						this.setValue(this.getValue());
					}.createDelegate(this)
				},
				tableName: 'Lpu'
			});
		}
	},
	setValue: function(v) {
		var text = v;
		if(this.valueField){
			var r = this.findRecord(this.valueField, v);
			if(r){
				text = r.data[this.displayField];
				if ( r.data['Lpu_EndDate'] != '' && Date.parseDate(r.data['Lpu_EndDate'], 'Y-m-d') < Date.parseDate(getGlobalOptions().date, 'd.m.Y') )
				{
					text = text + ' (закрыта '+ Ext.util.Format.date(Date.parseDate(r.data['Lpu_EndDate'], "Y-m-d"), "d.m.Y") + ' )';
				}
			} else if(this.valueNotFoundText !== undefined){
				text = this.valueNotFoundText;
			}
		}
		this.lastSelectionText = text;
		if(this.hiddenField){
			this.hiddenField.value = v;
		}
		Ext.form.ComboBox.superclass.setValue.call(this, text);
		this.value = v;
	}
});
Ext.reg('swlpuopenedcombo', sw.Promed.SwLpuOpenedCombo);

sw.Promed.SwUslugaComplexForMesCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField: 'UslugaComplex_Display',
	editable: true,
	fieldLabel: langs('Услуга'),
	hiddenName: 'UslugaComplex_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{UslugaComplex_Code}</font>&nbsp;{UslugaComplex_Name}'+
		'</div></tpl>'
	),
	valueField: 'UslugaComplex_id',
	autoLoad: false,
	initComponent: function() {
		sw.Promed.SwUslugaComplexForMesCombo.superclass.initComponent.apply(this, arguments);

		if ( !this.store ) {
			this.store = new Ext.data.JsonStore({
				autoLoad: false,
				fields: [
					{name: 'UslugaComplex_id', type: 'int'},
					{name: 'UslugaComplex_Code', type: 'string'},
					{name: 'UslugaComplex_Name', type: 'string'},
					{name: 'UslugaCategory_id', type: 'int'},
					{name: 'UslugaCategory_SysNick', type: 'string'},
					{name: 'UslugaCategory_Name', type: 'string'},
					{name: 'UslugaComplex_Display',
						convert: function(val,row) {
							return row.UslugaComplex_Code + '. ' + row.UslugaComplex_Name;
						}	
					}
				],
				key: 'UslugaComplex_id',
				sortInfo: {
					field: 'UslugaComplex_Code'
				},
				url: '/?c=UslugaComplex&m=loadUslugaComplexListForMes'
			});
		}
	}
});
Ext.reg('swuslugacomplexformescombo', sw.Promed.SwUslugaComplexForMesCombo);

sw.Promed.SwLpuSearchCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField: 'Lpu_Nick',
	editable: true,
	fieldLabel: langs('МО'),
	hiddenName: 'Lpu_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		//'{Lpu_Nick}&nbsp;',
		'{[(values.Lpu_EndDate && values.Lpu_EndDate != "") ? "<font color=#777>"+values.Lpu_Nick + " (закрыто "+ values.Lpu_EndDate + ")</font>" : values.Lpu_Nick ]}&nbsp;',
		'</div></tpl>'
	),
	valueField: 'Lpu_id',
	initComponent: function() {
		sw.Promed.SwLpuCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'Lpu_id', mapping: 'Lpu_id'},
				{name: 'Lpu_IsOblast', mapping: 'Lpu_IsOblast'},
				{name: 'Lpu_Name', mapping: 'Lpu_Name'},
				{name: 'Lpu_Nick', mapping: 'Lpu_Nick'},
				{name: 'Lpu_Ouz', mapping: 'Lpu_Ouz'},
				{name: 'Lpu_RegNomC', mapping: 'Lpu_RegNomC'},
				{name: 'Lpu_RegNomC2', mapping: 'Lpu_RegNomC2'},
				{name: 'Lpu_RegNomN2', mapping: 'Lpu_RegNomN2'},
				{name: 'Lpu_DloBegDate', mapping: 'Lpu_DloBegDate'},
				{name: 'Lpu_DloEndDate', mapping: 'Lpu_DloEndDate'},
				{name: 'Lpu_BegDate', mapping: 'Lpu_BegDate'},
				{name: 'Lpu_EndDate', mapping: 'Lpu_EndDate'},
				{name: 'Lpu_IsAccess', mapping: 'Lpu_IsAccess'}
			],
			key: 'Lpu_id',
			sortInfo: {field: 'Lpu_Nick'},
			tableName: 'LpuSearch'
		});
	},
	setValue: function(v) {
		var text = v;
		if(this.valueField){
			var r = this.findRecord(this.valueField, v);
			if(r){
				text = r.data[this.displayField];
				if ( r.data['Lpu_EndDate'] != '' && Date.parseDate(r.data['Lpu_EndDate'], 'Y-m-d') < Date.parseDate(getGlobalOptions().date, 'd.m.Y') )
				{
					text = text + ' (закрыта '+ Ext.util.Format.date(Date.parseDate(r.data['Lpu_EndDate'], "Y-m-d"), "d.m.Y") + ' )';
				}
			} else if(this.valueNotFoundText !== undefined){
				text = this.valueNotFoundText;
			}
		}
		this.lastSelectionText = text;
		if(this.hiddenField){
			this.hiddenField.value = v;
		}
		Ext.form.ComboBox.superclass.setValue.call(this, text);
		this.value = v;
	}
});
Ext.reg('swlpusearchcombo', sw.Promed.SwLpuSearchCombo);

sw.Promed.SwMoSearchCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
    displayField: 'Lpu_Nick',
    editable: true,
    fieldLabel: langs('МО'),
    hiddenName: 'Lpu_id',
    tpl: new Ext.XTemplate(
        '<tpl for="."><div class="x-combo-list-item">',
        '{[(values.Lpu_EndDate && values.Lpu_EndDate != "") ? "<font color=#777>"+values.Lpu_Nick + " (закрыто "+ values.Lpu_EndDate + ")</font>" : (values.Lpu_BegDate && values.Lpu_BegDate != "") ? values.Lpu_Nick + " (работает с  "+ values.Lpu_BegDate + ")": values.Lpu_Nick]}&nbsp;',
        '</div></tpl>'
    ),
    valueField: 'Lpu_Nick',
    initComponent: function() {
        sw.Promed.SwLpuCombo.superclass.initComponent.apply(this, arguments);

        this.store = new Ext.db.AdapterStore({
            autoLoad: true,
            dbFile: 'Promed.db',
            fields: [
                {name: 'Lpu_id', mapping: 'Lpu_id'},
                {name: 'Lpu_IsOblast', mapping: 'Lpu_IsOblast'},
                {name: 'Lpu_Name', mapping: 'Lpu_Name'},
                {
                    name: 'Lpu_Nick', mapping: 'Lpu_Nick', multipleSortInfo: [
                        {field: 'Lpu_Nick', direction: 'ASC'},
                        {field: 'Lpu_BegDate', direction: 'DESC'}
                    ]
                },
                {name: 'Lpu_Ouz', mapping: 'Lpu_Ouz'},
                {name: 'Lpu_RegNomC', mapping: 'Lpu_RegNomC'},
                {name: 'Lpu_RegNomC2', mapping: 'Lpu_RegNomC2'},
                {name: 'Lpu_RegNomN2', mapping: 'Lpu_RegNomN2'},
                {name: 'Lpu_DloBegDate', mapping: 'Lpu_DloBegDate'},
                {name: 'Lpu_DloEndDate', mapping: 'Lpu_DloEndDate'},
                {name: 'Lpu_BegDate', mapping: 'Lpu_BegDate'},
                {name: 'Lpu_EndDate', mapping: 'Lpu_EndDate'},
                {name: 'Lpu_IsAccess', mapping: 'Lpu_IsAccess'},
                {name: 'mesagelputype_id', mapping: 'mesagelputype_id'}
            ],
            key: 'Lpu_id',
            sortInfo: {field: 'Lpu_Nick'},
            tableName: 'LpuSearch'
        });
    }
});
Ext.reg('swmosearchcombo', sw.Promed.SwMoSearchCombo);

sw.Promed.SwLpuHTMCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField: 'LpuHTM_Nick',
	editable: true,
	fieldLabel: langs('МО'),
	hiddenName: 'LpuHTM_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table><tr><td style="width: 40px;"><font color="red">{LpuHTM_f003mcod}</font>&nbsp;</td><td>{LpuHTM_Nick}</td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'LpuHTM_id',
	listWidth: 600,
	initComponent: function() {
		sw.Promed.SwLpuHTMCombo.superclass.initComponent.apply(this, arguments);
		
		this.rawValue = '';
		this.addListener('select', function(combo, record, index) {
			if (!record || !record.get('LpuHTM_id')) return false;
			var name = record.get('LpuHTM_f003mcod') + '. ' + record.get('LpuHTM_Nick');
			this.rawValue = name;
			this.setRawValue(name);
		},this);

		this.addListener('blur', function(combo) {
			if (!Ext.isEmpty(combo.getValue()))
				this.setRawValue(this.rawValue);
		},this);

		this.store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{name: 'LpuHTM_id', type: 'int'},
				{name: 'LpuHTM_f003mcod', type: 'int'},
				{name: 'LpuHTM_Nick', type: 'string'}
			],
			key: 'LpuHTM_id',
			sortInfo: {
				field: 'LpuHTM_Nick'
			},
			url: '/?c=Common&m=getLpuHTMList'
		});
	}
});
Ext.reg('swlpuhtmcombo', sw.Promed.SwLpuHTMCombo);

/*
sw.Promed.SwLpuLocalCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	displayField: 'Lpu_Nick',
	editable: true,
	fieldLabel: langs('МО'),
	hiddenName: 'Lpu_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{Lpu_Nick}&nbsp;',
		'</div></tpl>'
	),
	valueField: 'Lpu_id',

	initComponent: function()
	{
		sw.Promed.SwLpuLocalCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{ name: 'Lpu_id', mapping: 'Lpu_id' },
				{ name: 'Lpu_IsOblast', mapping: 'Lpu_IsOblast' },
				{ name: 'Lpu_Name', mapping: 'Lpu_Name' },
				{ name: 'Lpu_Nick', mapping: 'Lpu_Nick' },
				{ name: 'Lpu_Ouz', mapping: 'Lpu_Ouz' },
				{ name: 'Lpu_RegNomC', mapping: 'Lpu_RegNomC' },
				{ name: 'Lpu_RegNomC2', mapping: 'Lpu_RegNomC2' },
				{ name: 'Lpu_RegNomN2', mapping: 'Lpu_RegNomN2' },
				{ name: 'Lpu_DloBegDate', mapping: 'Lpu_DloBegDate' },
				{ name: 'Lpu_DloEndDate', mapping: 'Lpu_DloEndDate' },
				{ name: 'Lpu_BegDate', mapping: 'Lpu_BegDate' },
				{ name: 'Lpu_EndDate', mapping: 'Lpu_EndDate' }
			],
			key: 'Lpu_id',
			sortInfo: { field: 'Lpu_Nick' },
			tableName: 'Lpu'
		});
	},
	setValue: function(v) {
		var text = v;
		if(this.valueField){
			var r = this.findRecord(this.valueField, v);
			if(r){
				text = r.data[this.displayField];
				if ( r.data['Lpu_EndDate'] != '' && Date.parseDate(r.data['Lpu_EndDate'], 'Y-m-d') < Date.parseDate(getGlobalOptions().date, 'd.m.Y') )
				{
					text = text + ' (закрыта '+ Ext.util.Format.date(Date.parseDate(r.data['Lpu_EndDate'], "Y-m-d"), "d.m.Y") + ' )';
				}
			} else if(this.valueNotFoundText !== undefined){
				text = this.valueNotFoundText;
			}
		}
		this.lastSelectionText = text;
		if(this.hiddenField){
			this.hiddenField.value = v;
		}
		Ext.form.ComboBox.superclass.setValue.call(this, text);
		this.value = v;
	}
});
Ext.reg('swlpulocalcombo', sw.Promed.SwLpuLocalCombo);
*/
sw.Promed.SwLpuLocalCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField: 'Lpu_Nick',
	editable: true,
	fieldLabel: langs('МО'),
	hiddenName: 'Lpu_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{Lpu_Nick}&nbsp;',
		'</div></tpl>'
	),
	valueField: 'Lpu_id',
	initComponent: function() {
		sw.Promed.SwLpuLocalCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'Lpu_id', mapping: 'Lpu_id'},
				{name: 'Lpu_IsOblast', mapping: 'Lpu_IsOblast'},
				{name: 'Lpu_Name', mapping: 'Lpu_Name'},
				{name: 'Lpu_Nick', mapping: 'Lpu_Nick'},
				{name: 'Lpu_Ouz', mapping: 'Lpu_Ouz'},
				{name: 'Lpu_RegNomC', mapping: 'Lpu_RegNomC'},
				{name: 'Lpu_RegNomC2', mapping: 'Lpu_RegNomC2'},
				{name: 'Lpu_RegNomN2', mapping: 'Lpu_RegNomN2'},
				{name: 'Lpu_isDMS', mapping: 'Lpu_isDMS'},
				{name: 'Lpu_DloBegDate', mapping: 'Lpu_DloBegDate'},
				{name: 'Lpu_DloEndDate', mapping: 'Lpu_DloEndDate'},
				{name: 'Lpu_BegDate', mapping: 'Lpu_BegDate'},
				{name: 'Lpu_EndDate', mapping: 'Lpu_EndDate'},
				{name: 'Lpu_IsAccess', mapping: 'Lpu_IsAccess'}
			],
			key: 'Lpu_id',
			sortInfo: {field: 'Lpu_Nick'},
			tableName: 'Lpu'
		});
	},
	setValue: function(v) {
		var text = v;
		if(this.valueField){
			var r = this.findRecord(this.valueField, v);
			if(r){
				text = r.data[this.displayField];
				if ( r.data['Lpu_EndDate'] != '' && Date.parseDate(r.data['Lpu_EndDate'], 'Y-m-d') < Date.parseDate(getGlobalOptions().date, 'd.m.Y') )
				{
					text = text + ' (закрыта '+ Ext.util.Format.date(Date.parseDate(r.data['Lpu_EndDate'], "Y-m-d"), "d.m.Y") + ' )';
				}
			} else if(this.valueNotFoundText !== undefined){
				text = this.valueNotFoundText;
			}
		}
		this.lastSelectionText = text;
		if(this.hiddenField){
			this.hiddenField.value = v;
		}
		Ext.form.ComboBox.superclass.setValue.call(this, text);
		this.value = v;
	}
});
Ext.reg('swlpucombo', sw.Promed.SwLpuCombo);

sw.Promed.TripleTriggerField = Ext.extend(Ext.form.TriggerField, {
	initComponent : function(){
		sw.Promed.TripleTriggerField.superclass.initComponent.call(this);
		
		this.trigger1Class = 'x-form-search-trigger';
		this.trigger2Class = 'x-form-equil-trigger';
		this.trigger3Class = 'x-form-clear-trigger';
		
		this.triggerConfig = {
			tag:'span', cls:'x-form-twin-triggers', cn:[
			{tag: "img", src: Ext.BLANK_IMAGE_URL, cls: "x-form-trigger " + this.trigger1Class},
			{tag: "img", src: Ext.BLANK_IMAGE_URL, cls: "x-form-trigger " + this.trigger2Class},
			{tag: "img", src: Ext.BLANK_IMAGE_URL, cls: "x-form-trigger " + this.trigger3Class}
		]};
	},

	getTrigger : function(index){
		return this.triggers[index];
	},

	initTrigger : function(){
		var ts = this.trigger.select('.x-form-trigger', true);
		this.wrap.setStyle('overflow', 'hidden');
		var triggerField = this;
		ts.each(function(t, all, index){
			t.hide = function(){
				var w = triggerField.wrap.getWidth();
				this.dom.style.display = 'none';
				triggerField.el.setWidth(w-triggerField.trigger.getWidth());
			};
			t.show = function(){
				var w = triggerField.wrap.getWidth();
				this.dom.style.display = '';
				triggerField.el.setWidth(w-triggerField.trigger.getWidth());
			};
			var triggerIndex = 'Trigger'+(index+1);

			if(this['hide'+triggerIndex]){
				t.dom.style.display = 'none';
			}
			t.on("click", this['on'+triggerIndex+'Click'], this, {preventDefault:true});
			t.addClassOnOver('x-form-trigger-over');
			t.addClassOnClick('x-form-trigger-click');
		}, this);
		this.triggers = ts.elements;
	},

	onTrigger1Click : Ext.emptyFn,
	onTrigger2Click : Ext.emptyFn,
	onTrigger3Click : Ext.emptyFn
});

Ext.reg('swtripletriggerfield', sw.Promed.TripleTriggerField);

/* не используется 
sw.Promed.SwLpuSectionTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'LpuSectionType',
		key: 'LpuSectionType_id',
		autoLoad: false,
		baseParams: {object:'LpuSectionType', LpuSectionType_id:'',LpuSectionType_Code:'',LpuSectionType_Name:'',LpuSectionType_Nick:''},
		fields:
		[
			{name: 'LpuSectionType_id',    type:'int'},
			{name: 'LpuSectionType_Code', type:'string'},
			{name: 'LpuSectionType_Name',  type:'string'},
			{name: 'LpuSectionType_Nick',  type:'string'}
		],
		sortInfo:
		{
			field: 'LpuSectionType_id'
		}
	}),
	//triggerAction: 'all',
	editable: false,
	codeField: 'LpuSectionType_Code',
	displayField:'LpuSectionType_Name',
	valueField: 'LpuSectionType_id',
	hiddenName: 'LpuSectionType_id',
	fieldLabel: langs('Тип'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{LpuSectionType_Code}</font>&nbsp;{LpuSectionType_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwLpuSectionTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swlpusectiontypecombo', sw.Promed.SwLpuSectionTypeCombo);
*/

sw.Promed.SwLpuSectionProfileCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	//triggerAction: 'all',
	editable: true,
	codeField: 'LpuSectionProfile_Code',
	displayField:'LpuSectionProfile_Name',
	valueField: 'LpuSectionProfile_id',
	hiddenName: 'LpuSectionProfile_id',
	fieldLabel: langs('Профиль'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table><tr><td style="width: 40px;"><font color="red">{LpuSectionProfile_Code}</font>&nbsp;</td><td>{LpuSectionProfile_Name}&nbsp;</td></tr></table>',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.SwLpuSectionProfileCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			dbFile: 'Promed.db',
			tableName: 'LpuSectionProfile',
			key: 'LpuSectionProfile_id',
			autoLoad: false,
			baseParams: {object:'LpuSectionProfile', LpuSectionProfile_id:'',LpuSectionProfile_Code:'',LpuSectionProfile_Name:'',LpuSectionProfile_SysNick:''},
			fields: [
				{name: 'LpuSectionProfile_id',    type:'int'},
				{name: 'LpuSectionProfile_Code', type:(getRegionNick() == 'astra' ? 'int' : 'string')},
				{name: 'LpuSectionProfile_SysNick', type: 'string'},
				{name: 'LpuSectionProfile_Name',  type:'string'},
				{name: 'LpuSectionProfile_begDT', type: 'date', dateFormat: 'd.m.Y'},
				{name: 'LpuSectionProfile_endDT', type: 'date', dateFormat: 'd.m.Y'},
				{name: 'LpuSectionProfileGRAPP_Code', type: 'int'},
				{name: 'LpuSectionProfileGRKSS_Code', type: 'int'},
				{name: 'LpuSectionProfileGRSZP_Code', type: 'int'},
				{name: 'LpuSectionProfile_fedid', type: 'int'}
			],
			sortInfo:{
				field: (getRegionNick() == 'astra' ? 'LpuSectionProfile_Code' : 'LpuSectionProfile_Name')
			}
		});
	},
	setValue: function(v) {
		var text = v;
		if(this.valueField){
			var r = this.findRecord(this.valueField, v);
			if(r){
				text = r.data[this.displayField];
				if ( r.data['LpuSectionProfile_endDT'] != '' && r.data['LpuSectionProfile_endDT'] < Date.parseDate(getGlobalOptions().date, 'd.m.Y') )
				{
					text = text + ' (закрыт '+ Ext.util.Format.date(r.data['LpuSectionProfile_endDT'], "d.m.Y")   + ')';
				}
			} else if(this.valueNotFoundText !== undefined){
				text = this.valueNotFoundText;
			}
		}
		this.lastSelectionText = text;
		if(this.hiddenField){
			this.hiddenField.value = v;
		}
		Ext.form.ComboBox.superclass.setValue.call(this, text);
		this.value = v;
	}
});
Ext.reg('swlpusectionprofilecombo', sw.Promed.SwLpuSectionProfileCombo);


sw.Promed.SwTariffClass = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	editable: false,
	codeField: 'TariffClass_Code',
	displayField:'TariffClass_Name',
	valueField: 'TariffClass_id',
	hiddenName: 'TariffClass_id',
	fieldLabel: langs('Вид тарифа'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{TariffClass_Code}</font>&nbsp;{TariffClass_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwTariffClass.superclass.initComponent.apply(this, arguments);
		
		this.typeCode = 'int';
		
		this.store = new Ext.db.AdapterStore({
			autoLoad:false,
			baseParams:{object:'TariffClass', TariffClass_id:'', TariffClass_Code:'', TariffClass_Name:'', TariffClass_begDT:'', TariffClass_endDT:'', TariffClass_IsMap:''},
			dbFile:'Promed.db',
			fields:[
				{name:'TariffClass_id', type:'int'},
				{name:'TariffClass_Code', type: this.typeCode},
				{name:'TariffClass_Name', type:'string'},
				{name:'TariffClass_SysNick', type:'string'},
				{name:'TariffClass_begDT', type:'date', dateFormat: 'd.m.Y'},
				{name:'TariffClass_IsMap', type:'int'}
			],
			key:'TariffClass_id',
			sortInfo:{
				field:'TariffClass_Code'
			},
			tableName:'TariffClass'
		});
	}
});
Ext.reg('swtariffclasscombo', sw.Promed.SwTariffClass);

sw.Promed.SwCoeffIndex = Ext.extend(Ext.form.ComboBox, {
	store: new Ext.data.JsonStore({
		url: '/?c=CoeffIndex&m=loadCoeffIndexList',
		fields: [
			{name:'CoeffIndex_id', type:'int'},
			{name:'CoeffIndex_Code', type: 'int'},
			{name:'CoeffIndex_Name', type:'string'},
			{name:'CoeffIndex_SysNick', type:'string'},
			{name:'CoeffIndex_Min', type:'float'},
			{name:'CoeffIndex_Max', type:'float'}
		],
		key:'CoeffIndex_id',
		sortInfo:{
			field:'CoeffIndex_Code'
		}
	}),
	triggerAction: 'all',
	editable: false,
	codeField: 'CoeffIndex_Code',
	displayField:'CoeffIndex_Name',
	hiddenName: 'CoeffIndex_id',
	valueField: 'CoeffIndex_id',
	fieldLabel: langs('Коэффициент индексации'),
	tpl:
		'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{CoeffIndex_Code}</font>&nbsp;{CoeffIndex_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwCoeffIndex.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcoeffindexcombo', sw.Promed.SwCoeffIndex);

sw.Promed.SwAddressSpecObject = Ext.extend(Ext.form.ComboBox, {
	store: new Ext.data.JsonStore({
		url: '/?c=Address&m=loadAddressSpecObject',
		fields: [
			{name:'AddressSpecObject_id', type:'int'},
			{name:'AddressSpecObject_Name', type:'string'}
		],
		key:'AddressSpecObject_id',
		sortInfo:{
			field:'AddressSpecObject_Name'
		}
	}),
	triggerAction: 'all',
	editable: false,
	displayField:'AddressSpecObject_Name',
	hiddenName: 'AddressSpecObject_id',
	valueField: 'AddressSpecObject_id',
	fieldLabel: langs('Коэффициент индексации'),
	tpl:
		'<tpl for="."><div class="x-combo-list-item">'+
			'{AddressSpecObject_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwAddressSpecObject.superclass.initComponent.apply(this, arguments);
		this.addListener('keydown', function(inp, e) {
		if ( e.getKey() == e.DELETE||e.getKey() == e.BACKSPACE) {
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if ( inp.onClearValue ) {
					this.onClearValue();
				}
				e.stopEvent();
				return true;
			}
		});
	}
});
Ext.reg('swaddressspecobjectcombo', sw.Promed.SwAddressSpecObject);

sw.Promed.SwPersonCardCombo = Ext.extend(Ext.form.ComboBox, {
	store: new sw.Promed.Store({
		autoLoad: false,
		url: '/?c=PersonAmbulatCard&m=loadPersonCard',
		fields: [
			{name:'PersonAmbulatCard_id', type:'int'},
			{name:'PersonAmbulatCard_Num', type:'string'}
		],
		key:'PersonAmbulatCard_id',
		sortInfo:{
			field:'PersonAmbulatCard_Num'
		}
	}),
	triggerAction: 'all',
	editable: false,
	autoLoad: false,
	displayField:'PersonAmbulatCard_Num',
	hiddenName: 'PersonAmbulatCardt_id',
	valueField: 'PersonAmbulatCard_id',
	fieldLabel: langs('№ амб. карты'),
	tpl:
		'<tpl for="."><div class="x-combo-list-item">'+
			'{PersonAmbulatCard_Num}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwPersonCardCombo.superclass.initComponent.apply(this, arguments);
		
	}
});
Ext.reg('swpersoncardcombo', sw.Promed.SwPersonCardCombo);

sw.Promed.SwLpuSectionAgeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'LpuSectionAge',
		key: 'LpuSectionAge_id',
		autoLoad: false,
		baseParams: {object:'LpuSectionAge', LpuSectionAge_id:'',LpuSectionAge_Code:'',LpuSectionAge_Name:''},
		fields:
		[
			{name: 'LpuSectionAge_id', type:'int'},
			{name: 'LpuSectionAge_Code', type:'int'},
			{name: 'LpuSectionAge_Name', type:'string'}
		],
		sortInfo:
		{
			field: 'LpuSectionAge_Code'
		}
	}),
	//triggerAction: 'all',
	editable: false,
	codeField: 'LpuSectionAge_Code',
	displayField:'LpuSectionAge_Name',
	valueField: 'LpuSectionAge_id',
	hiddenName: 'LpuSectionAge_id',
	fieldLabel: langs('Возрастная группа'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{LpuSectionAge_Code}</font>&nbsp;{LpuSectionAge_Name}'+
			'</div></tpl>',

	initComponent: function()
	{
		sw.Promed.SwLpuSectionAgeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swlpusectionagecombo', sw.Promed.SwLpuSectionAgeCombo);

sw.Promed.SwLpuSectionBedProfileCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	//triggerAction: 'all',
	editable: false,
	codeField: 'LpuSectionBedProfile_Code',
	displayField:'LpuSectionBedProfile_Name',
	valueField: 'LpuSectionBedProfile_id',
	editable: true,
	hiddenName: 'LpuSectionBedProfile_id',
	fieldLabel: langs('Профиль коек'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{LpuSectionBedProfile_Code}</font>&nbsp;{LpuSectionBedProfile_Name}'+
			'</div></tpl>',

	initComponent: function()
	{
		this.store = new Ext.db.AdapterStore(
			{
				dbFile: 'Promed.db',
				tableName: 'LpuSectionBedProfile',
				key: 'LpuSectionBedProfile_id',
				autoLoad: false,
				baseParams: {object:'LpuSectionBedProfile', LpuSectionBedProfile_id:'',LpuSectionBedProfile_Code:'',LpuSectionBedProfile_Name:'',LpuSectionBedProfile_begDT:'',LpuSectionBedProfile_endDT:''},
				fields:
					[
						{name: 'LpuSectionBedProfile_id', type:'int'},
						{name: 'LpuSectionBedProfile_Code', type:'string'},
						{name: 'LpuSectionBedProfile_Name', type:'string'},
						{name: 'LpuSectionBedProfile_begDT', type:'date', dateFormat: 'd.m.Y'},
						{name: 'LpuSectionBedProfile_endDT', type:'date', dateFormat: 'd.m.Y'}
					],
				sortInfo:
				{
					field: 'LpuSectionBedProfile_Code'
				}
			});
		sw.Promed.SwLpuSectionBedProfileCombo.superclass.initComponent.apply(this, arguments);
	},
	filterByDates: function(setDate, disDate)
	{
		var combo = this,
			store = this.getStore(),
			v = combo.getValue(),
			rec;


		if ( ! Ext.isDate(setDate))
		{
			setDate = null;
		}

		if ( ! Ext.isDate(disDate))
		{
			disDate = null;
		}

		combo.lastQuery = '';
		store.clearFilter();

		var filterFN = function (rec) {

			var filter1= true,
				filter2 = true;

			if (rec.get('LpuSectionBedProfile_begDT') && disDate)
			{
				filter1 = rec.get('LpuSectionBedProfile_begDT').valueOf() <= disDate.valueOf();
			}

			if (rec.get('LpuSectionBedProfile_endDT') && setDate)
			{
				filter2 = rec.get('LpuSectionBedProfile_endDT').valueOf() >= setDate.valueOf();
			}

			return filter1 && filter2;
		}; 

		store.filterBy(filterFN);
		combo.setBaseFilter(filterFN);
		
		rec = store.getById(v);
		v = rec ? v : null;

		combo.setValue(v);

		return;
	}
});
Ext.reg('swlpusectionbedprofilecombo', sw.Promed.SwLpuSectionBedProfileCombo);

sw.Promed.SwLpuSectionBedProfileLinkCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	//triggerAction: 'all',
	editable: false,
	codeField: 'LpuSectionBedProfile_Code',
	displayField:'LpuSectionBedProfile_Display',
	valueField: 'LpuSectionBedProfileLink_id',
	editable: true,
	hiddenName: 'LpuSectionBedProfile_id',
	fieldLabel: langs('Профиль коек'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item word-wrap">'+
		'<font color="red">{LpuSectionBedProfile_Code}</font>&nbsp;{LpuSectionBedProfile_Name}{[this.fieldName(values)]}'+
		'</div></tpl>',
		{
			fieldName: function(values){
				var begDT = (values.LpuSectionBedProfile_begDT) ? Ext.util.Format.date(values.LpuSectionBedProfile_begDT, 'd.m.Y') : '';
				var endDT = (values.LpuSectionBedProfile_endDT) ? Ext.util.Format.date(values.LpuSectionBedProfile_endDT, 'd.m.Y') : '';
				var strDT = ' <font style="font-size: 0.8em; color: #585555; font-style: italic;">' + begDT + ' - ' + endDT + '</font>';
				if(values.LpuSectionBedProfile_fedid){
					return '&nbsp;(V020: '+values.LpuSectionBedProfile_fedCode+' - '+values.LpuSectionBedProfile_fedName+')' + strDT;
				}else{
					return strDT;
				}
			}
		}
	),
	initComponent: function()
	{
		this.store = new Ext.db.AdapterStore(
			{
				dbFile: 'Promed.db',
				tableName: 'LpuSectionBedProfileLink',
				key: 'LpuSectionBedProfileLink_id',
				autoLoad: false,
				baseParams: {object:'LpuSectionBedProfileLink', LpuSectionBedProfile_id:'',LpuSectionBedProfile_Code:'',LpuSectionBedProfile_Name:'',LpuSectionBedProfile_begDT:'',LpuSectionBedProfile_endDT:''},
				fields:
					[
						{name: 'LpuSectionBedProfileLink_id', type:'int'},
						{name: 'LpuSectionBedProfile_id', type:'int'},
						{name: 'LpuSectionBedProfile_Code', type:'string'},
						{name: 'LpuSectionBedProfile_Name', type:'string'},
						{name: 'LpuSectionBedProfile_fedid', type:'int'},
						{name: 'LpuSectionBedProfile_fedCode', type:'string'},
						{name: 'LpuSectionBedProfile_fedName', type:'string'},
						{name: 'LpuSectionBedProfile_Display',
							convert: function(val,row) {
								if ( !Ext.isEmpty(row.LpuSectionBedProfile_fedid) ) {
									return row.LpuSectionBedProfile_Code + '. ' + row.LpuSectionBedProfile_Name + ' (' + row.LpuSectionBedProfile_fedCode + ' - ' + row.LpuSectionBedProfile_fedName + ')';
								}
								else {
									return row.LpuSectionBedProfile_Code + '. ' + row.LpuBuildingOffice_Name;
								}
							}	
						},
						{name: 'LpuSectionBedProfile_begDT', type:'date', dateFormat: 'd.m.Y'},
						{name: 'LpuSectionBedProfile_endDT', type:'date', dateFormat: 'd.m.Y'}
					],
				sortInfo:
				{
					field: 'LpuSectionBedProfile_Code'
				}
			});
		sw.Promed.SwLpuSectionBedProfileLinkCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swlpusectionbedprofilelinkcombo', sw.Promed.SwLpuSectionBedProfileLinkCombo);

sw.Promed.SwMESLevelCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'MESLevel',
		key: 'MESLevel_id',
		autoLoad: false,
		baseParams: {object:'MESLevel', MESLevel_id:'',MESLevel_Code:'',MESLevel_Name:''},
		fields:
		[
			{name: 'MESLevel_id', type:'int'},
			{name: 'MESLevel_Code', type:'int'},
			{name: 'MESLevel_Name', type:'string'}
		],
		sortInfo:
		{
			field: 'MESLevel_Code'
		}
	}),
	//triggerAction: 'all',
	editable: false,
	//codeField: 'MESLevel_Code',
	displayField:'MESLevel_Code',
	valueField: 'MESLevel_id',
	hiddenName: 'MESLevel_id',
	fieldLabel: langs('Уровень'),
	/*tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{MESLevel_Code}</font>&nbsp;{MESLevel_Name}'+
			'</div></tpl>',
*/
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'{MESLevel_Code}&nbsp;'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwMESLevelCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swmeslevelcombo', sw.Promed.SwMESLevelCombo);

sw.Promed.SwDispOutTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'DispOutType',
		key: 'DispOutType_id',
		autoLoad: false,
		fields:
		[
			{name: 'DispOutType_id', type:'int'},
			{name: 'DispOutType_Code', type:'int'},
			{name: 'DispOutType_Name', type:'string'}
		],
		sortInfo:
		{
			field: 'DispOutType_Code'
		}
	}),
	triggerAction: 'all',
	displayField:'DispOutType_Name',
	valueField: 'DispOutType_id',
	hiddenName: 'DispOutType_id',
	fieldLabel: langs('Причина исключения'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'{DispOutType_Name}'+
			'</div></tpl>',

	initComponent: function()
	{
		sw.Promed.SwDispOutTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdispouttypecombo', sw.Promed.SwDispOutTypeCombo);

sw.Promed.SwFoodStuffCombo = Ext.extend(Ext.form.ComboBox, {
	store: new Ext.data.JsonStore({
		url: '/?c=FoodStuff&m=loadFoodStuffList',
		autoLoad: false,
		fields: [
			{name: 'FoodStuff_id', type:'int'},
			{name: 'FoodStuff_Code', type:'string'},
			{name: 'FoodStuff_Name', type:'string'},
			{name: 'FoodStuff_Protein', type:'float'},
			{name: 'FoodStuff_Fat', type:'float'},
			{name: 'FoodStuff_Carbohyd', type:'float'},
			{name: 'FoodStuff_Caloric', type:'float'}
		]
	}),
	triggerAction: 'all',
	displayField: 'FoodStuff_Name',
	valueField: 'FoodStuff_id',
	hiddenName: 'FoodStuff_id',
	minChars: 0,
	fieldLabel: langs('Продукт питания'),
	tpl:
		'<tpl for="."><div class="x-combo-list-item">'+
			'{FoodStuff_Name}'+
			'</div></tpl>',

	listeners: {
		'select': function(combo, record, index) {
			if ( record )
			{
				combo.setRawValue(record.get('FoodStuff_Name'));
			}
		},
		'blur': function(combo) {
			this.dqTask.cancel();
			combo.collapse();

			if ( combo.getRawValue() == '' ) {
				combo.setValue('');

				if ( this.onChange && typeof this.onChange == 'function' ) {
					this.onChange(this, '');
				}
			}
			else {
				var store = combo.getStore();
				// Получаем уже обработанный код
				var val = this.getRawValue().toString();

				// Вместо load пробежимся по найденным записям и уставим выбранное значение
				var yes = false;
				this.getStore().each(function(r){
					if ( r.data.FoodStuff_Name == val )
					{
						this.setValue(r.get(this.valueField));
						combo.fireEvent('select', combo, r, 0);
						//TODO: Возможно лишняя инструкция
						combo.fireEvent('change', combo, r.get(this.valueField), '');

						if ( this.onChange && typeof this.onChange == 'function') {
							this.onChange(this, r.get(this.valueField));
						}
						yes = true;
						return true;
					}
				}.createDelegate(this));
				if (!yes) {
					this.setValue(null);
					combo.fireEvent('change', combo, null, '');
					if ( this.onChange && typeof this.onChange == 'function') {
						this.onChange(this, null);
					}
				}
			}
		},
		'keydown': function(inp, e) {
			if ( e.getKey() == e.END) {
				this.inKeyMode = true;
				this.select(this.store.getCount() - 1);
			}

			if ( e.getKey() == e.HOME) {
				this.inKeyMode = true;
				this.select(0);
			}

			if ( e.getKey() == e.PAGE_UP) {
				this.inKeyMode = true;
				var ct = this.store.getCount();

				if ( ct > 0 ) {
					if ( this.selectedIndex == -1 ) {
						this.select(0);
					}
					else if ( this.selectedIndex != 0 ) {
						if ( this.selectedIndex - 10 >= 0 ) {
							this.select(this.selectedIndex - 10);
						}
						else {
							this.select(0);
						}
					}
				}
			}

			if ( e.getKey() == e.PAGE_DOWN)
			{
				if (!this.isExpanded())
				{
					this.onTriggerClick();
				}
				else
				{
					this.inKeyMode = true;
					var ct = this.store.getCount();
					if (ct > 0)
					{
						if (this.selectedIndex == -1)
						{
							this.select(0);
						}
						else if (this.selectedIndex != ct - 1)
						{
							if (this.selectedIndex + 10 < ct - 1)
								this.select(this.selectedIndex + 10);
							else
								this.select(ct - 1);
						}
					}
				}
			}

			if (e.shiftKey == false && e.getKey() == Ext.EventObject.TAB && inp.focusOnTab != null && inp.focusOnTab.toString().length > 0)
			{
				e.stopEvent();
				if (Ext.getCmp(this.focusOnTab))
				{
					Ext.getCmp(this.focusOnTab).focus(true);
				}
			}

			if (e.shiftKey == true && e.getKey() == Ext.EventObject.TAB && inp.focusOnShiftTab != null && inp.focusOnShiftTab.toString().length > 0)
			{
				e.stopEvent();
				if (Ext.getCmp(this.focusOnShiftTab))
				{
					Ext.getCmp(this.focusOnShiftTab).focus(true);
				}
			}

			if (e.altKey || e.ctrlKey || e.shiftKey)
				return true;

			if ( e.getKey() == e.DELETE)
			{
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if (inp.onClearValue)
					this.onClearValue();
				e.stopEvent();
				return true;
			}

			if (e.getKey() == e.F4)
			{
				this.onTrigger2Click();
			}
		}
	},

	initComponent: function()
	{
		sw.Promed.SwFoodStuffCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swfoodstuffcombo', sw.Promed.SwFoodStuffCombo);

sw.Promed.SwMicronutrientCombo = Ext.extend(Ext.form.ComboBox, {
    store: new Ext.data.JsonStore({
        url: '/?c=Micronutrient&m=loadMicronutrientList',
        autoLoad: false,
        fields: [
            {name: 'Micronutrient_id', type:'int'},
            {name: 'Micronutrient_Code', type:'string'},
            {name: 'Micronutrient_Name', type:'string'},
            {name: 'Okei_id', type:'int'}
        ]
    }),
    triggerAction: 'all',
    displayField: 'Micronutrient_Name',
    valueField: 'Micronutrient_id',
    hiddenName: 'Micronutrient_id',
    minChars: 0,
    fieldLabel: langs('Продукт питания'),
    tpl:
        '<tpl for="."><div class="x-combo-list-item">'+
            '{Micronutrient_Name}'+
            '</div></tpl>',

    listeners: {
        'select': function(combo, record, index) {
            if ( record )
            {
                combo.setRawValue(record.get('Micronutrient_Name'));
            }
        },
        'blur': function(combo) {
            this.dqTask.cancel();
            combo.collapse();

            if ( combo.getRawValue() == '' ) {
                combo.setValue('');

                if ( this.onChange && typeof this.onChange == 'function' ) {
                    this.onChange(this, '');
                }
            }
            else {
                var store = combo.getStore();

                var val = this.getRawValue().toString();

                // Вместо load пробежимся по найденным записям и уставим выбранное значение
                var yes = false;
                this.getStore().each(function(r){
                    if ( r.data.Micronutrient_Name == val )
                    {
                        this.setValue(r.get(this.valueField));
                        combo.fireEvent('select', combo, r, 0);
                        //TODO: Возможно лишняя инструкция
                        combo.fireEvent('change', combo, r.get(this.valueField), '');

                        if ( this.onChange && typeof this.onChange == 'function') {
                            this.onChange(this, r.get(this.valueField));
                        }
                        yes = true;
                        return true;
                    }
                }.createDelegate(this));
                if (!yes) {
                    this.setValue(null);
                    combo.fireEvent('change', combo, null, '');
                    if ( this.onChange && typeof this.onChange == 'function') {
                        this.onChange(this, null);
                    }
                }
            }
        },
        'keydown': function(inp, e) {
            if ( e.getKey() == e.END) {
                this.inKeyMode = true;
                this.select(this.store.getCount() - 1);
            }

            if ( e.getKey() == e.HOME) {
                this.inKeyMode = true;
                this.select(0);
            }

            if ( e.getKey() == e.PAGE_UP) {
                this.inKeyMode = true;
                var ct = this.store.getCount();

                if ( ct > 0 ) {
                    if ( this.selectedIndex == -1 ) {
                        this.select(0);
                    }
                    else if ( this.selectedIndex != 0 ) {
                        if ( this.selectedIndex - 10 >= 0 ) {
                            this.select(this.selectedIndex - 10);
                        }
                        else {
                            this.select(0);
                        }
                    }
                }
            }

            if ( e.getKey() == e.PAGE_DOWN)
            {
                if (!this.isExpanded())
                {
                    this.onTriggerClick();
                }
                else
                {
                    this.inKeyMode = true;
                    var ct = this.store.getCount();
                    if (ct > 0)
                    {
                        if (this.selectedIndex == -1)
                        {
                            this.select(0);
                        }
                        else if (this.selectedIndex != ct - 1)
                        {
                            if (this.selectedIndex + 10 < ct - 1)
                                this.select(this.selectedIndex + 10);
                            else
                                this.select(ct - 1);
                        }
                    }
                }
            }

            if (e.shiftKey == false && e.getKey() == Ext.EventObject.TAB && inp.focusOnTab != null && inp.focusOnTab.toString().length > 0)
            {
                e.stopEvent();
                if (Ext.getCmp(this.focusOnTab))
                {
                    Ext.getCmp(this.focusOnTab).focus(true);
                }
            }

            if (e.shiftKey == true && e.getKey() == Ext.EventObject.TAB && inp.focusOnShiftTab != null && inp.focusOnShiftTab.toString().length > 0)
            {
                e.stopEvent();
                if (Ext.getCmp(this.focusOnShiftTab))
                {
                    Ext.getCmp(this.focusOnShiftTab).focus(true);
                }
            }

            if (e.altKey || e.ctrlKey || e.shiftKey)
                return true;

            if ( e.getKey() == e.DELETE)
            {
                inp.setValue('');
                inp.setRawValue("");
                inp.selectIndex = -1;
                if (inp.onClearValue)
                    this.onClearValue();
                e.stopEvent();
                return true;
            }

            if (e.getKey() == e.F4)
            {
                this.onTrigger2Click();
            }
        }
    },

    initComponent: function()
    {
        sw.Promed.SwMicronutrientCombo.superclass.initComponent.apply(this, arguments);
    }
});
Ext.reg('swmicronutrientcombo', sw.Promed.SwMicronutrientCombo);

sw.Promed.SwDiagAutoCompleteCombo = Ext.extend(Ext.form.ComboBox, {
	baseFilterFn: null,
	baseFilterScope: null,
	checkAccessRights: false,
	codeField: 'Diag_Code',
	/* максимально возможное количество символов в коде, включая точку */
	countSymbolsCode: (getRegionNick().inlist([ 'astra', 'buryatiya', 'ekb', 'krym', 'msk', 'pskov', 'ufa', 'vologda' ]) ? 6 : 5),
	disableBlurAction: false,
	displayField: 'Diag_Name',
	enableKeyEvents: true,
	fieldLabel: langs('Диагноз'),
	/* тип поля, которое обрабатывает комбо: code|name */
	fieldType: 'code',
	focusOnShiftTab: null,
	focusOnTab: null,
	forceSelection: false,
	hiddenName: 'Diag_id',
	hideTrigger: true,
	FilterDiagCode: null,
	listWidth: 600,
	loadingText: langs('Идет поиск...'),
	minChars: 1,
	minLength: 1,
	minLengthText: langs('Поле должно быть заполнено'),
	MKB:null,
	mode: 'local',
	MorbusType_SysNick: '',//Тип заболевания/нозологии
	onTabKeyDown: Ext.emptyFn,
	PersonRegisterType_SysNick: '',
	resizable: true,
	/* глубина разрешенного выбора в дереве. По умолчанию можно выбирать только листы (4) */
	selectionDepth: 4,
	selectOnFocus: true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 45px;">{Diag_Code}</td><td><h3>{Diag_Name}</h3></td></tr></table>',
		'</div></tpl>'
	),
	// triggerClass: 'hideTrigger',
	valueField: 'Diag_id',
	width: 220,
	withGroups: false,
	//xtype: 'swbaselocalcombo',
	clearBaseFilter: function()
	{
		this.baseFilterFn = null;
		this.baseFilterScope = null;
		this.lastQuery = null;
	},
	setBaseFilter: function(fn, scope)
	{
		this.baseFilterFn = fn;
		this.baseFilterScope = scope || this;
		this.store.filterBy(fn, scope);
		this.lastQuery = null;
	},
	/**
	 * Получение "чистого" кода диагноза, при вводе и поиске 
	 */
	getDiagCode: function(code) {
		if (this.fieldType == 'name') {
			return code;
		}
		// получаем количество возможных символов
		q = code.slice(0, this.countSymbolsCode);
		// если в этом полученном количестве есть пробел, то обрезаем по пробел
		q = (q)?q.split(' ')[0]:'';
		// если там есть русские символы, то делаем их нерусскимми (код же в английской транскрипции)
		q = LetterChange(q.charAt(0)) + q.slice(1, q.length);
		// если нет точки в коде, и код больше трех символов, то добавляем точку 
		if (q.charAt(3) != '.' && q.length > 3)
		{
			q = q.slice(0, 3) + '.' + q.slice(3, this.countSymbolsCode-1);
		}
		// все пробелы заменяем на пусто // upd: после строки q = (q)?q.split(' ')[0]:''; уже не имеет актуальности
		// q = q.replace(' ', '');
		return q;
	},
	setMKBFilter: function(age,sex,main){
		var cur = this;
		
		if((age||age==0)&&sex&&getGlobalOptions().region.nick =='kareliya'){
			var mkb ={};
			mkb.query='';
			if(sex==1){
				mkb.query +='(5';
			}else{
				mkb.query +='(4';
			}
			if(main){
				mkb.isMain=main;
			}
			if(age>=18){
				mkb.query+=',7,1,2)'
			}else{
				if(age==0){
					if(sex==1){
						mkb.query+=',7,3)';
					}else{
						mkb.query+=',3)';
					}
				}else{
					mkb.query+=',7,2,3)';
				}
			}
			cur.MKB=mkb;
		}else{
			if(main){
				cur.MKB={isMain:main};
			}else{
				cur.MKB=null;
			}
		}
	},
	setValue: function(v) {
		sw.Promed.SwDiagAutoCompleteCombo.superclass.setValue.apply(this, arguments);

		var index = this.getStore().findBy(function(rec) {
			return (rec.get(this.valueField) == v);
		}.createDelegate(this));

		if (index >= 0) {
			var record = this.getStore().getAt(index);
			this.setRawValue(record.get('Diag_Code')+' '+record.get('Diag_Name'));
		}
	},
	doQuery: function(q, forceAll) {
		var cur = this;
		if (q === undefined || q === null) {
			q = '';
		} else {
			q = this.getDiagCode(q);
			this.setRawValue(q);
		}

		var qe = {
			query: q,
			forceAll: forceAll,
			combo: this,
			cancel: false
		};

		if (this.fireEvent('beforequery', qe) === false || qe.cancel) {
			return false;
		}

		q = qe.query;
		forceAll = qe.forceAll;

		var addGroupFilter = "";
		var groupClauseFilter = "4";
		if (this.withGroups) {
			addGroupFilter = " or DiagLevel_id = 3";
			groupClauseFilter = "3,4";
		}
	
		if (q.length >= this.minChars || ( this.allQueryFilter && this.allQueryFilter != '' ) )
		{
			//ufa gaf #106655  добавлено условие || (this.registryType == "PersonPregnansy" && this.lastSelectionText != q)
			//для регистра беременных поиск выполнять и для случая this.lastSelectionText != q
			//sw.swMsg.alert('Сообщение', 'Данный диагноз не может быть установлен для указанного поля');
			if (this.lastQuery != q || ( this.allQueryFilter && this.allQueryFilter != '' ) || ((this.registryType == "PersonPregnansy" /*|| this.registryType == "EcoRegistry"*/) && this.lastSelectionText != q) )
			{
				this.lastQuery = q;
				this.selectedIndex = -1;
				var filterDate = this.filterDate || getGlobalOptions().date;
				// можно задать фильтрацию по дополнительному условию
				// проверяем наличие свойства this.additQueryFilter
				var additQueryFilter = '';
				var additClauseFilter = ''; // для поиска в indexeddb
				
				if ( this.additQueryFilter && this.additQueryFilter != '' && (!this.allQueryFilter || this.allQueryFilter == '') )
				{
					additQueryFilter = " and " + this.additQueryFilter;
				}
				
				if ( this.additClauseFilter && this.additClauseFilter != '' && (!this.allQueryFilter || this.allQueryFilter == '') )
				{
					additClauseFilter = " && " + this.additClauseFilter;
				}

                if ( this.PersonRegisterType_SysNick && this.PersonRegisterType_SysNick.length > 0 && !this.PersonRegisterType_SysNick.inlist(['crazyRegistry','narkoRegistry']))
                {
                    additQueryFilter += " and PersonRegisterType_List like '%" + this.PersonRegisterType_SysNick + "%'";
                    additClauseFilter += ' && record["PersonRegisterType_List"].indexOf("'+this.PersonRegisterType_SysNick+'") >= 0';
                }
                if ( this.MorbusType_SysNick && this.MorbusType_SysNick.length > 0 && this.MorbusType_SysNick!='vzn' )
                {
                    additQueryFilter += " and MorbusType_List like '%" + this.MorbusType_SysNick + "%'";
                    additClauseFilter += ' && record["MorbusType_List"].indexOf("'+this.MorbusType_SysNick+'") >= 0';
                }
                if ( this.MorbusType_SysNick && this.MorbusType_SysNick.length > 0 && this.MorbusType_SysNick == 'vzn' )
                {
                    additQueryFilter = " and (isVZN = 1 and Diag_Code not like 'E75.5')";
                	additClauseFilter = ' && (record["MorbusType_List"].search(new RegExp("vzn", "i"))>=0)';
                }
                if ( this.registryType && 'Fmba' == this.registryType )
                {
                    additQueryFilter += " and Diag_Code like 'Z57%'";
                    additClauseFilter += ' && record["Diag_Code"].indexOf("Z57") >= 0';
                }
				if ( this.registryType && 'palliat' == this.registryType )
				{
					additQueryFilter += " and Diag_Code not like 'Z%'";
					additClauseFilter += ' && record["Diag_Code"].indexOf("Z") < 0';
				}
                if ( this.registryType && 'NarkoRegistry' == this.registryType )
                {
                    additQueryFilter += " and Diag_Code like 'F1%'";
                    additClauseFilter += ' && record["Diag_Code"].indexOf("F1") >= 0';
                }
                if ( this.registryType && 'CrazyRegistry' == this.registryType )
                {
                    additQueryFilter += " and (Diag_Code like 'F0%' or Diag_Code like 'F2%' or Diag_Code like 'F3%' or Diag_Code like 'F4%'" +
                    " or Diag_Code like 'F5%' or Diag_Code like 'F6%' or Diag_Code like 'F7%' or Diag_Code like 'F8%' or Diag_Code like 'F9%')";
                    // record["Diag_Code"].search(new RegExp("^F0|F[2-9]", "i"))>=0
                    additClauseFilter += ' && record["Diag_Code"].indexOf("F1") < 0';
                }
                if ( this.registryType && 'TubRegistry' == this.registryType )
                {
                    additQueryFilter += " and (Diag_Code like 'A15%' or Diag_Code like 'A16%' or Diag_Code like 'A17%' or Diag_Code like 'A18%' or Diag_Code like 'A19%'";
                    // record["Diag_Code"].search(new RegExp("^F0|F[2-9]", "i"))>=0
                    additClauseFilter += ' && record["Diag_Code"].search(new RegExp("^A1[5-9]", "i")) >= 0';
                }
		
                additQueryFilter += " and (Diag_begDate is null or Diag_begDate <= '" + Ext.util.Format.date(Date.parseDate(filterDate, 'd.m.Y'), 'Y-m-d') + "')";
                additQueryFilter += " and (Diag_endDate is null or Diag_endDate >= '" + Ext.util.Format.date(Date.parseDate(filterDate, 'd.m.Y'), 'Y-m-d') + "')";
				additClauseFilter += ' && (record["Diag_begDate"] == "" || Ext.util.Format.date(Date.parseDate(record["Diag_begDate"], "d.m.Y"), "Y-m-d") <= "'+Ext.util.Format.date(Date.parseDate(filterDate, 'd.m.Y'), 'Y-m-d')+'")';
				additClauseFilter += ' && (record["Diag_endDate"] == "" || Ext.util.Format.date(Date.parseDate(record["Diag_endDate"], "d.m.Y"), "Y-m-d") >= "'+Ext.util.Format.date(Date.parseDate(filterDate, 'd.m.Y'), 'Y-m-d')+'")';

				var where = '';
				if (this.fieldType == 'name') {
					where = "where (DiagLevel_id = 4"+addGroupFilter+") and Diag_Name like '%" + q + "%'" + additQueryFilter +" ";
				} else {
					where = "where (DiagLevel_id = 4"+addGroupFilter+") and Diag_Code like '" + q + "%'" + additQueryFilter +" ";
				}
				if (this.FilterDiagCode) {
					where = "where (DiagLevel_id = 4) and (Diag_Code like '" + this.FilterDiagCode + "%')" + additQueryFilter +" ";
				}
				var qForClause = '^' + q.replace(/'/ig, '').replace(/%/ig, '');
				var clause = {where: 'record["DiagLevel_id"] && record["DiagLevel_id"].inlist(['+groupClauseFilter+']) && record["Diag_Code"].search(new RegExp("'+qForClause+'", "i"))>=0' + additClauseFilter, limit: 100}; // для поиска в indexeddb
				
				if ( this.additQueryFilter && this.additQueryFilter != '' && this.allQueryFilter && this.allQueryFilter != '' )
				{
					additQueryFilter = " and " + this.additQueryFilter;
					where = "where (DiagLevel_id = 4"+addGroupFilter+") " + additQueryFilter + " limit 100";
				}
				
				if ( this.additClauseFilter && this.additClauseFilter != '' && this.allQueryFilter && this.allQueryFilter != '' )
				{
					additClauseFilter = " && " + this.additClauseFilter;
					clause = {where: 'record["DiagLevel_id"] && record["DiagLevel_id"].inlist(['+groupClauseFilter+']) ' + additClauseFilter, limit: 100};
				}
				
				// ограничиваем только заданными диагнозами
				if ( this.DiagFilter_id && this.DiagLevelFilter_id && this.DiagFilter_id > 0 && this.DiagLevelFilter_id > 0 )
				{
					var join = "";
					var filters = "";
					// TODO: IndexedDB: Что делать с этими запросами в рамках IndexedDB вообще не понятно, сумрачный гений IVP уже не скажет об этом
					switch (this.DiagLevelFilter_id)
					{
					   case '1':
						join += "LEFT JOIN Diag dg1 ON dg.Diag_id=dg1.Diag_id ";
						join += "LEFT JOIN Diag dg2 ON dg1.Diag_pid=dg2.Diag_id ";
						join += "LEFT JOIN Diag dg3 ON dg2.Diag_pid=dg3.Diag_id ";
						join += "LEFT JOIN Diag dg4 ON dg3.Diag_pid=dg4.Diag_id ";
						filters += "dg4.Diag_id = " + this.DiagFilter_id;
					   break;
					   case '2':
						join += "LEFT JOIN Diag dg1 ON dg.Diag_id=dg1.Diag_id ";
						join += "LEFT JOIN Diag dg2 ON dg1.Diag_pid=dg2.Diag_id ";
						join += "LEFT JOIN Diag dg3 ON dg2.Diag_pid=dg3.Diag_id ";
						filters += "dg3.Diag_id = " + this.DiagFilter_id;
					   break;
					   case '3':
						join += "LEFT JOIN Diag dg1 ON dg.Diag_id=dg1.Diag_id ";
						join += "LEFT JOIN Diag dg2 ON dg1.Diag_pid=dg2.Diag_id ";
						filters += "dg2.Diag_id = " + this.DiagFilter_id;
					   break;
					   case '4':
						join += "LEFT JOIN Diag dg1 ON dg.Diag_id=dg1.Diag_id ";
						filters += "dg1.Diag_id = " + this.DiagFilter_id;
					   break;
					}
					filters += " and (Diag_begDate = '' or substr(Diag_begDate,1,10) <= '" + Ext.util.Format.date(Date.parseDate(filterDate, 'd.m.Y'), 'Y-m-d') + "')";
					filters += " and (Diag_endDate = '' or substr(Diag_endDate,1,10) >= '" + Ext.util.Format.date(Date.parseDate(filterDate, 'd.m.Y'), 'Y-m-d') + "')";
					if (this.fieldType == 'name') {
						where = "where (DiagLevel_id = 4"+addGroupFilter+") and Diag_Name like '%" + q + "%' and Diag_id in (select dg.Diag_id from Diag dg " + join + " where " + filters + ")";
					} else {
						where = "where (DiagLevel_id = 4"+addGroupFilter+") and Diag_Code like '" + q + "%' and Diag_id in (select dg.Diag_id from Diag dg " + join + " where " + filters + ")";
					}
				}
				if(this.MKB!=null){
					if(this.MKB.isMain){
						if(getRegionNick() =='kareliya'){
						where+=" and (isMain != 1)";
						}else if (getRegionNick() != 'perm'){
							where+=" and Diag_Code not like 'X%' and Diag_Code not like 'Y%' and Diag_Code not like 'W%' and Diag_Code not like 'V%'";
						}
					}
					if(this.MKB.query){
						where+=" and ((Mkb10Cause_id is null) or (Mkb10Cause_id not in "+this.MKB.query+"))"
					}
				}			
				this.getStore().load({
					params: {where: where, clause: clause},
					callback: function() {
						if (this.checkAccessRights) {
							var code_list = getGlobalOptions().denied_diags.code_list;
							var code_range_list = getGlobalOptions().denied_diags.code_range_list;

							var filterDenied = function(record) {
								var result = true;
								if (code_list.length > 0 && record.get('Diag_Code').inlist(code_list)) {
									return false;
								}
								code_range_list.forEach(function(range){
									if (record.get('Diag_Code') >= range[0] && record.get('Diag_Code') <= range[1]) {
										result = false; return false;
									}
								});
								return result;
							};
						}
						if (typeof this.baseFilterFn == 'function')
						{
							// Apply the filter on top of the base filter
							this.getStore().filterBy(function(record, id) {
								var result = false;
								result = this.baseFilterFn.call(this.baseFilterScope, record, id);
								if (result)
								{
								/*	if (q.length > 0 && record.data[this.displayField].toString().substr(0, q.length).toLowerCase() != q.toLowerCase())
									{
										result = false;
									}*/
									if (this.checkAccessRights) {
										result = filterDenied(record);
									}
								}
								return result;
							}, this);
						} else if (this.checkAccessRights) {
							this.getStore().filterBy(filterDenied);
						}

						if (this.getStore().getCount() > 0)
						{
							this.expand();
							this.restrictHeight();

							if (this.lastQuery == this.allQuery)
							{
								if (this.editable)
								{
									this.el.dom.select();
								}

								if (!this.selectByValue(this.value, true))
								{
									this.select(0, true);
								}
							}
							else
							{
								if (this.typeAhead && this.lastKey != Ext.EventObject.BACKSPACE && this.lastKey != Ext.EventObject.DELETE)
								{
									this.taTask.delay(this.typeAheadDelay);
								}
							}
						}
						else
						{
							this.onEmptyResults();
						}					
						// Подсветка результатов искомого запроса
						var store = this.getStore();
						if (this.fieldType == 'name') {
							// Регистрочувствительная
							store.each(function(record) {
								var Diag_Name = record.get('Diag_Name');
								var index = Diag_Name.toLowerCase().indexOf(q.toLowerCase());
								if (index != -1) {
									var prefix = Diag_Name.substr(0, index);
									var query = Diag_Name.substr(index, q.length);
									var postfix = Diag_Name.substr(index + q.length);
									record.set('Diag_Name', prefix + '<font color="red">' + query + '</font>' + postfix);
								}
							});
						} else {
							// Нерегистрочувствительная, простая. Код все равно приводится к верхнему регистру
							store.each(function(record) {
								var Diag_Code = record.get('Diag_Code');
								record.set('Diag_Code', Diag_Code.replace(new RegExp(q, 'gi'), '<font color="red">' + q + '</font>'));
							});
						}
						// Костыль. Удаляет пустой элемент в начале списка, который порождает несколько багов.
						// Удалить его по-человечески нельзя, поскольку allowBlank = false включает валидацию, которую больше никак не выключить
						var record = store.getAt(0);
						if (record && record.get('Diag_id') === '') {
							store.remove(record);
						}
					}.createDelegate(this)
				});
			}
			else
			{
				console.log('else2');
				//alert('else2');
				this.selectedIndex = -1;
				this.onLoad();
			}
		}
		else
		{
			this.getStore().removeAll();
			this.collapse();
		}
	},
	onTabAction: function(e){
		return false;
	},
	listeners: {
		'select': function(combo, record, index) {
			if ( record )
			{
				combo.setValue(record.get(combo.valueField));
			}
		},
		'blur': function(combo) {
			this.dqTask.cancel();
			combo.collapse();
		//	combo.getRawValue('');
		//	combo.setValue('');
		}
	},
	setFilterByDate: function(dateValue) {
		
		var value = this.getValue(),
			combo = this,
			index;

		this.filterDate = Ext.util.Format.date(dateValue, 'd.m.Y');
		this.clearValue();
		this.getStore().clearFilter();
		this.lastQuery = '';

		if ( !Ext.isEmpty(dateValue) ) {
			this.getStore().filterBy(function(rec) {
				return ((Ext.isEmpty(rec.get('Diag_begDate')) || rec.get('Diag_begDate') <= dateValue || (rec.get('Diag_begDate') !== null && !Ext.isEmpty(rec.get('Diag_begDate').date) && rec.get('Diag_begDate').date <= Ext.util.Format.date(dateValue, 'Y-m-d')) || (rec.get('Diag_begDate').toString().split('.').reverse().join('-') <= Ext.util.Format.date(dateValue, 'Y-m-d')))
				&& (Ext.isEmpty(rec.get('Diag_endDate')) || rec.get('Diag_endDate') >= dateValue || (rec.get('Diag_endDate') !== null && !Ext.isEmpty(rec.get('Diag_endDate').date) && rec.get('Diag_endDate').date >= Ext.util.Format.date(dateValue, 'Y-m-d')) || (rec.get('Diag_endDate').toString().split('.').reverse().join('-') >= Ext.util.Format.date(dateValue, 'Y-m-d'))));
			});
		}

		index = this.getStore().findBy(function(rec) {
			return (rec.get(combo.valueField) == value);
		});

		if ( index >= 0 ) {
			this.setValue(value);
			this.fireEvent('select', this, this.findRecord(combo.valueField,value));
		} else {
			this.clearValue();
		}
	},
	initComponent: function() {
		sw.Promed.SwDiagAutoCompleteCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'Diag_id', mapping: 'Diag_id'},
				{name: 'Diag_pid', mapping: 'Diag_pid'},
				{name: 'Diag_Name', mapping: 'Diag_Name'},
				{name: 'Diag_Code', mapping: 'Diag_Code'},
				{name: 'DiagLevel_id', mapping: 'DiagLevel_id'},
				{name: 'Diag_begDate', mapping: 'Diag_begDate'},
				{name: 'Diag_endDate', mapping: 'Diag_endDate'},
				{name: 'PersonAgeGroup_Code', mapping: 'PersonAgeGroup_Code'},
				{name: 'Sex_Code', mapping: 'Sex_Code'},
				{name: 'DiagFinance_IsOms', mapping: 'DiagFinance_IsOms'},
				{name: 'DiagFinance_IsAlien', mapping: 'DiagFinance_IsAlien'},
				{name: 'DiagFinance_IsFacult', mapping: 'DiagFinance_IsFacult'},
				{name: 'DiagFinance_IsHealthCenter', mapping: 'DiagFinance_IsHealthCenter'},
				{name: 'DiagFinance_IsRankin', mapping: 'DiagFinance_IsRankin'},
				{name: 'PersonRegisterType_List', mapping: 'PersonRegisterType_List'},
				{name: 'MorbusType_List', mapping: 'MorbusType_List'},
				{name: 'DeathDiag_IsLowChance', mapping: 'DeathDiag_IsLowChance'}
			],
			key: 'Diag_id',
			sortInfo: {field: 'Diag_Code'},
			tableName: 'Diag'
		});

		this.queryDelay = (Ext.isIndexedDb || Ext.isRemoteDB)?600:300;
	}
});

Ext.reg('swdiagautocompletecombo', sw.Promed.SwDiagAutoCompleteCombo);

sw.Promed.SwDiagCombo = Ext.extend(Ext.form.ComboBox, {
	baseFilterFn: null,
	baseFilterScope: null,
	checkAccessRights: false,
	codeField: 'Diag_Code',
	/* максимально возможное количество символов в коде, включая точку */
	countSymbolsCode: (getRegionNick().inlist([ 'astra', 'buryatiya', 'ekb', 'krym', 'msk', 'pskov', 'ufa', 'vologda' ]) ? 6 : 5),
	disableBlurAction: false,
	displayField: 'Diag_Display',
	emptyText: langs('Введите код диагноза...'),
	enableKeyEvents: true,
	fieldLabel: langs('Диагноз'),
	focusOnShiftTab: null,
	focusOnTab: null,
	forceSelection: false,
	hiddenName: 'Diag_id',
	hideTrigger: false,
	listWidth: 600,
	loadingText: langs('Идет поиск...'),
	minChars: 1,
	minLength: 1,
	minLengthText: langs('Поле должно быть заполнено'),
	MKB:null,
	Diag_level3_code:null,
	notInsertOnBlur:false,
	mode: 'local',
	onTabKeyDown: Ext.emptyFn,
    onLoadStore: Ext.emptyFn,
	resizable: true,
	/* глубина разрешенного выбора в дереве. По умолчанию можно выбирать только листы (4) */
	selectionDepth: 4,
	selectOnFocus: true,
	triggerClass: 'x-form-search-trigger',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 45px;"><font color="red">{Diag_Code}</font></td><td><h3>{Diag_Name}</h3></td></tr></table>',
		'</div></tpl>'
	),
	// triggerClass: 'hideTrigger',
	valueField: 'Diag_id',
	width: 220,
	withGroups: false,
	//xtype: 'swbaselocalcombo',
	PersonRegisterType_SysNick: '',
	MorbusType_SysNick: '',//Тип заболевания/нозологии
	// Доступность окна поиска диагнозов для выбора, при существовании блокирует выбор диагноза из формы поиска
	allowDiagList: null,
	searchCodeAndName: false, //поиск либо по коду, либо по коду и наименованию
	clearBaseFilter: function()
	{
		this.baseFilterFn = null;
		this.baseFilterScope = null;
		this.lastQuery = null;
	},
	setBaseFilter: function(fn, scope)
	{
		this.baseFilterFn = fn;
		this.baseFilterScope = scope || this;
		this.store.filterBy(fn, scope);
		this.lastQuery = null;
	},
	/**
	 * Получение "чистого" кода диагноза, при вводе и поиске 
	 */
	getDiagCode: function(code) {
		// получаем количество возможных символов
		q = code.slice(0, this.countSymbolsCode);
		// если в этом полученном количестве есть пробел, то обрезаем по пробел
		q = (q)?q.split(' ')[0]:'';
		// если там есть русские символы, то делаем их нерусскимми (код же в английской транскрипции)
		q = LetterChange(q.charAt(0)) + q.slice(1, q.length);
		// если нет точки в коде, и код больше трех символов, то добавляем точку 
		if (q.charAt(3) != '.' && q.length > 3)
		{
			q = q.slice(0, 3) + '.' + q.slice(3, this.countSymbolsCode-1);
		}
		// все пробелы заменяем на пусто // upd: после строки q = (q)?q.split(' ')[0]:''; уже не имеет актуальности
		// q = q.replace(' ', '');
		return q;
	},
	setMKBFilter: function(age,sex,main){
		var cur = this;
		
		if((age||age==0)&&sex&&getGlobalOptions().region.nick =='kareliya'){
			var mkb ={};
			mkb.query='';
			if(sex==1){
				mkb.query +='(5';
			}else{
				mkb.query +='(4';
			}
			if(main){
				mkb.isMain=main;
			}
			if(age>=18){
				mkb.query+=',7,1,2)'
			}else{
				if(age==0){
					if(sex==1){
						mkb.query+=',7,3)';
					}else{
						mkb.query+=',3)';
					}
				}else{
					mkb.query+=',7,2,3)';
				}
			}
			cur.MKB=mkb;
		}else{
			if(main){
				cur.MKB={isMain:main};
			}else{
				cur.MKB=null;
			}
		}
	},
	/*setValue: function(v) {
		sw.Promed.SwDiagCombo.superclass.setValue.apply(this, arguments);
		var index = this.getStore().findBy(function(rec) {
			return (rec.get(this.valueField) == v);
		}.createDelegate(this));

		if (index >= 0) {
			var record = this.getStore().getAt(index);
			this.setRawValue(record.get('Diag_Code')+' '+record.get('Diag_Name'));
		}
	},*/
	doQuery: function(q, forceAll) {
		var cur = this;
		if (q === undefined || q === null)
		{
			q = '';
		}

		var reg = new RegExp('^([a-z]|[a-z][0-9.]{1,4})$', 'i');
		var search_by_name = (q && this.searchCodeAndName && q.search(reg) < 0) ? true : false;
		if(!search_by_name){
			q = this.getDiagCode(q);
			this.setRawValue(q);
		}

		var qe = {
			query: q,
			forceAll: forceAll,
			combo: this,
			cancel: false
		};

		if (this.fireEvent('beforequery', qe) === false || qe.cancel)
		{
			return false;
		}

		q = qe.query;
		forceAll = qe.forceAll;

		var addGroupFilter = "";
		var groupClauseFilter = "4";

		if (this.withGroups) {
			addGroupFilter = " or DiagLevel_id = 3";
			groupClauseFilter = "3,4";
		}
		//gaf 109848 для Регистра беременных, Основной диагноз добавлено && 'PersonPregnansy' != this.registryType
		if(this.Diag_level3_code && 'PersonPregnansy' != this.registryType /*&& 'EcoRegistry' != this.registryType*/){
			q = this.Diag_level3_code;//для уточненного диагноза
		}
	
		if (q.length >= this.minChars || ( this.allQueryFilter && this.allQueryFilter != '' ) )
		{

			if (this.lastQuery != q || ( this.allQueryFilter && this.allQueryFilter != '' ) )
			{

				this.lastQuery = q;
				this.selectedIndex = -1;
				var filterDate = this.filterDate || getGlobalOptions().date;
				// можно задать фильтрацию по дополнительному условию
				// проверяем наличие свойства this.additQueryFilter
				var additQueryFilter = '';
				var additClauseFilter = ''; // для поиска в indexeddb
				
				if ( this.additClauseFilter && this.additClauseFilter != '' && (!this.allQueryFilter || this.allQueryFilter == '') )
				{
					additClauseFilter = " && " + this.additClauseFilter;
				}

                if ( this.PersonRegisterType_SysNick && this.PersonRegisterType_SysNick.length > 0 && !this.PersonRegisterType_SysNick.inlist(['crazyRegistry','narkoRegistry']))
                {
                    additQueryFilter += " and PersonRegisterType_List like '%" + this.PersonRegisterType_SysNick + "%'";
                    additClauseFilter += ' && record["PersonRegisterType_List"].indexOf("'+this.PersonRegisterType_SysNick+'") >= 0';
                }
                if ( this.MorbusType_SysNick && this.MorbusType_SysNick.length > 0 )
                {
                    additQueryFilter += " and MorbusType_List like '%" + this.MorbusType_SysNick + "%'";
                    additClauseFilter += ' && record["MorbusType_List"].indexOf("'+this.MorbusType_SysNick+'") >= 0';
                }
                if ( this.MorbusType_SysNick && this.MorbusType_SysNick.length > 0 && this.MorbusType_SysNick == 'vzn' )
                {
                    additQueryFilter = " and isVZN = 1";
                	additClauseFilter = ' && record["isVZN"] == 1';
                }
                if ( this.registryType && 'ExternalCause' == this.registryType )
                {
                	if(q.search(new RegExp("^[VWXY]", "i")) < 0){
                		additQueryFilter += " and Diag_id < 0";
                	}
                    additClauseFilter += ' && record["Diag_Code"].search(new RegExp("^[VWXY]", "i")) >= 0';
                }
                if ( this.registryType && 'Fmba' == this.registryType )
                {
                    additQueryFilter += " and Diag_Code like 'Z57%'";
                    additClauseFilter += ' && record["Diag_Code"].indexOf("Z57") >= 0';
				}
				if ( this.registryType && 'palliat' == this.registryType )
				{
					additQueryFilter += " and Diag_Code not like 'Z%'";
					additClauseFilter += ' && record["Diag_Code"].indexOf("Z") < 0';
				}
                if ( this.registryType && 'NarkoRegistry' == this.registryType )
                {
                    additQueryFilter += " and Diag_Code like 'F1%'";
                    additClauseFilter += ' && record["Diag_Code"].indexOf("F1") >= 0';
                }
                if ( this.registryType && 'CrazyRegistry' == this.registryType )
                {
                    additQueryFilter += " and (Diag_Code like 'F0%' or Diag_Code like 'F2%' or Diag_Code like 'F3%' or Diag_Code like 'F4%'" +
                    " or Diag_Code like 'F5%' or Diag_Code like 'F6%' or Diag_Code like 'F7%' or Diag_Code like 'F8%' or Diag_Code like 'F9%')";
                    // record["Diag_Code"].search(new RegExp("^F0|F[2-9]", "i"))>=0
                    additClauseFilter += ' && record["Diag_Code"].indexOf("F1") < 0';
                }
                if ( this.registryType && 'TubRegistry' == this.registryType )
                {
                    additQueryFilter += " and (Diag_Code like 'A15%' or Diag_Code like 'A16%' or Diag_Code like 'A17%' or Diag_Code like 'A18%' or Diag_Code like 'A19%'";
                    // record["Diag_Code"].search(new RegExp("^F0|F[2-9]", "i"))>=0
                    additClauseFilter += ' && record["Diag_Code"].search(new RegExp("^A1[5-9]", "i")) >= 0';
                }
                //gaf 109848 27032018 добавлен фильтр по ufa
                //if ( this.registryType && 'PersonPregnansy' == this.registryType  && getRegionNick() == 'ufa')
				if ( this.registryType && ('PersonPregnansy' == this.registryType /*|| 'EcoRegistry' == this.registryType*/) && getRegionNick() == 'ufa')
                {
                    additQueryFilter += " and (Diag_Code like 'Z32%' or Diag_Code like 'Z33%' or Diag_Code like 'Z34%' or Diag_Code like 'Z35%' or Diag_Code like 'Z36%' or Diag_Code like 'O%') ";
                } 
                if ( this.registryType && 'BSKRegistry' == this.registryType )
                {
                    //additQueryFilter += " and Diag_Code like 'I%'";
                    //additClauseFilter += ' && record["Diag_Code"].indexOf("I") >= 0';
                }
                additQueryFilter += " and (Diag_begDate is null or Diag_begDate <= '" + Ext.util.Format.date(Date.parseDate(filterDate, 'd.m.Y'), 'Y-m-d') + "')";
                additQueryFilter += " and (Diag_endDate is null or Diag_endDate >= '" + Ext.util.Format.date(Date.parseDate(filterDate, 'd.m.Y'), 'Y-m-d') + "')";
				additClauseFilter += ' && (record["Diag_begDate"] == "" || Ext.util.Format.date(Date.parseDate(record["Diag_begDate"], "d.m.Y"), "Y-m-d") <= "'+Ext.util.Format.date(Date.parseDate(filterDate, 'd.m.Y'), 'Y-m-d')+'")';
				additClauseFilter += ' && (record["Diag_endDate"] == "" || Ext.util.Format.date(Date.parseDate(record["Diag_endDate"], "d.m.Y"), "Y-m-d") >= "'+Ext.util.Format.date(Date.parseDate(filterDate, 'd.m.Y'), 'Y-m-d')+'")';

				if ( this.additQueryFilter && this.additQueryFilter != '' && (!this.allQueryFilter || this.allQueryFilter == '') )
				{
					additQueryFilter += " and " + this.additQueryFilter;
				}
				
				var searchDiagLike = (search_by_name) ? " Diag_Name like '%" + q + "%'" : "Diag_Code like '" + q + "%'";
				var where = "where (DiagLevel_id = 4"+addGroupFilter+") and "+ searchDiagLike + additQueryFilter +" ";
				// var where = "where (DiagLevel_id = 4"+addGroupFilter+") and Diag_Code like '" + q + "%'" + additQueryFilter +" ";

				var qForClause = '^' + q.replace(/'/ig, '').replace(/%/ig, '');
				var clause = {where: 'record["DiagLevel_id"] && record["DiagLevel_id"].inlist(['+groupClauseFilter+']) && record["Diag_Code"].search(new RegExp("'+qForClause+'", "i"))>=0' + additClauseFilter, limit: 100}; // для поиска в indexeddb
				
				if ( this.additQueryFilter && this.additQueryFilter != '' && this.allQueryFilter && this.allQueryFilter != '' )
				{

					additQueryFilter = " and " + this.additQueryFilter;
					where = "where (DiagLevel_id = 4"+addGroupFilter+") " + additQueryFilter + " limit 100";
				}
				
				if ( this.additClauseFilter && this.additClauseFilter != '' && this.allQueryFilter && this.allQueryFilter != '' )
				{

					additClauseFilter = " && " + this.additClauseFilter;
					clause = {where: 'record["DiagLevel_id"] && record["DiagLevel_id"].inlist(['+groupClauseFilter+']) ' + additClauseFilter, limit: 100};
				}
				
				// ограничиваем только заданными диагнозами
				if ( this.DiagFilter_id && this.DiagLevelFilter_id && this.DiagFilter_id > 0 && this.DiagLevelFilter_id > 0 )
				{

					var join = "";
					var filters = "";
					// TODO: IndexedDB: Что делать с этими запросами в рамках IndexedDB вообще не понятно, сумрачный гений IVP уже не скажет об этом
					switch (this.DiagLevelFilter_id)
					{
					   case '1':
						join += "LEFT JOIN Diag dg1 ON dg.Diag_id=dg1.Diag_id ";
						join += "LEFT JOIN Diag dg2 ON dg1.Diag_pid=dg2.Diag_id ";
						join += "LEFT JOIN Diag dg3 ON dg2.Diag_pid=dg3.Diag_id ";
						join += "LEFT JOIN Diag dg4 ON dg3.Diag_pid=dg4.Diag_id ";
						filters += "dg4.Diag_id = " + this.DiagFilter_id;
					   break;
					   case '2':
						join += "LEFT JOIN Diag dg1 ON dg.Diag_id=dg1.Diag_id ";
						join += "LEFT JOIN Diag dg2 ON dg1.Diag_pid=dg2.Diag_id ";
						join += "LEFT JOIN Diag dg3 ON dg2.Diag_pid=dg3.Diag_id ";
						filters += "dg3.Diag_id = " + this.DiagFilter_id;
					   break;
					   case '3':
						join += "LEFT JOIN Diag dg1 ON dg.Diag_id=dg1.Diag_id ";
						join += "LEFT JOIN Diag dg2 ON dg1.Diag_pid=dg2.Diag_id ";
						filters += "dg2.Diag_id = " + this.DiagFilter_id;
					   break;
					   case '4':
						join += "LEFT JOIN Diag dg1 ON dg.Diag_id=dg1.Diag_id ";
						filters += "dg1.Diag_id = " + this.DiagFilter_id;
					   break;
					}
					filters += " and (Diag_begDate = '' or substr(Diag_begDate,1,10) <= '" + Ext.util.Format.date(Date.parseDate(filterDate, 'd.m.Y'), 'Y-m-d') + "')";
					filters += " and (Diag_endDate = '' or substr(Diag_endDate,1,10) >= '" + Ext.util.Format.date(Date.parseDate(filterDate, 'd.m.Y'), 'Y-m-d') + "')";
					where = "where (DiagLevel_id = 4"+addGroupFilter+") and " + searchDiagLike + " and Diag_id in (select dg.Diag_id from Diag dg " + join + " where " + filters + ")";

					
				}
				if(this.MKB!=null){
					if(this.MKB.isMain){
						if(getRegionNick() =='kareliya'){
						where+=" and (isMain != 1)";
						}else if (getRegionNick() != 'perm'){

							where+=" and Diag_Code not like 'X%' and Diag_Code not like 'Y%' and Diag_Code not like 'W%' and Diag_Code not like 'V%'";
						}
					}
					if(this.MKB.query){

						where+=" and ((Mkb10Cause_id is null) or (Mkb10Cause_id not in "+this.MKB.query+"))"
					}

				}
				this.getStore().load({


				params: {where: where, clause: clause},
					callback: function() {
						this.onLoadStore();
						//gaf 109848 для устранения зависания комбобокса при пустом возврате 
						if (this.getStore().totalLength == 0){
							return true;
						}												
						if (this.checkAccessRights) {

							var code_list = getGlobalOptions().denied_diags.code_list;
							var code_range_list = getGlobalOptions().denied_diags.code_range_list;

							var filterDenied = function(record) {
								var result = true;
								if (code_list.length > 0 && record.get('Diag_Code').inlist(code_list)) {
									return false;
								}
								code_range_list.forEach(function(range){
									if (getRegionNick().inlist(['kareliya', 'perm'])
										&& record.data.Diag_Code
										&& record.data.DiagLevel_id == 3
									) {
										if (record.get('Diag_Code') >= range[0].split('.')[0] && record.get('Diag_Code') <= range[1].split('.')[0]) {
											result = false; return false;
										}
									} else {
										if (record.get('Diag_Code') >= range[0] && record.get('Diag_Code') <= range[1]) {
											result = false; return false;
										}
									}
								});
								return result;
							};

						}

						if (typeof this.baseFilterFn == 'function')
						{

							// Apply the filter on top of the base filter
							this.getStore().filterBy(function(record, id) {
								var result = false;
								result = this.baseFilterFn.call(this.baseFilterScope, record, id);
								if (result)
								{
								/*	if (q.length > 0 && record.data[this.displayField].toString().substr(0, q.length).toLowerCase() != q.toLowerCase())
									{
										result = false;
									}*/
									if (this.checkAccessRights) {
										result = filterDenied(record);
									}
								}
								return result;
							}, this);
						} else if (this.checkAccessRights) {
							this.getStore().filterBy(filterDenied);

						}
						//для поля "Уточненный диагноз"
						if (this.Diag_level3_code) {
							this.clearValue();
							if (this.getStore().getCount() == 0) {
								this.setDisabled(true)//блокируем поле если нет уточняющих диагнозов
							} else {
								this.setDisabled(false);
								if (this.editable) {
									this.el.dom.select();
								}
								if (this.getStore().getCount() == 1){
									if (!this.selectByValue(this.value, true)) {
										var value = this.store.getAt(0).data.Diag_Code + ' ' + this.store.getAt(0).data.Diag_Name;
										this.setValue(value); //если в "Уточненном диагнозе" 1 значение, устанавливаем его автоматически
									}
								}
							}
						}

						if (this.getStore().getCount() > 0) {
							this.setDisabled(false);
							if(!this.Diag_level3_code){
								this.expand();
							}
							this.restrictHeight();
							if (this.lastQuery == this.allQuery) {
								if (this.editable) {
									this.el.dom.select();
								}

								if (!this.selectByValue(this.value, true)) {
									this.select(0, true);
								}
							}
							else {
								if (this.typeAhead && this.lastKey != Ext.EventObject.BACKSPACE && this.lastKey != Ext.EventObject.DELETE) {
									this.taTask.delay(this.typeAheadDelay);
								}
							}
						}
						else {
							this.onEmptyResults();
						}
					}.createDelegate(this)
				});
			}
			else
			{
				this.selectedIndex = -1;
				this.onLoad();
			}
		}
		else
		{

			this.getStore().removeAll();
			this.collapse();
		}
		this.afterQuery = true;

	},
	onTabAction: function(e){
		return false;
	},
	listeners: {
		'select': function(combo, record, index) {
			if ( record )
			{
				combo.setValue(record.get(combo.valueField));
			}
		},
		'blur': function(combo) {
			this.dqTask.cancel();
			combo.collapse();

			if ( combo.getRawValue() == '' ) {
				combo.setValue('');

				if ( this.onChange && typeof this.onChange == 'function' ) {
					this.onChange(this, '');
				}
			}
			else {
				var store = combo.getStore();
				// Получаем уже обработанный код
				var val = this.getDiagCode(this.getRawValue().toString().substr(0, this.countSymbolsCode)).trim();
				if(val.indexOf('.') == -1){
					val = this.getDiagCode(this.getRawValue().toString().substr(0, 3));
				}
				/*
				// Если введен код без точки, то принудительно ее вставляем
				
				var val = this.getRawValue().toString().substr(0, this.countSymbolsCode);
				val = LetterChange (val);
				if ( val.charAt(3) != '.' && val.length > 3 ) {
					val = val.slice(0,3) + '.' + val.slice(3, this.countSymbolsCode-1);
				}
				val = val.replace(' ', '');
				*/
				// Вместо load пробежимся по найденным записям и уставим выбранное значение 
				var yes = false;
				this.getStore().each(function(r){
					if ( r.data.Diag_Code == val )
					{
						//Исключение возможности автоустановки значения диагноза, которое запрещено на форме (Медсвидетельства о смерти) 
						if(this.notInsertOnBlur && this.afterQuery){
							var comp = this;
							var dd_store = null;
							var combo_dd_name = this.hiddenName.split('_');
							if(!Ext.isEmpty(combo_dd_name[1]))
							{
								combo_dd_name = combo_dd_name[1].toUpperCase();
								combo_dd_name = 'DeathDiag_IsDiag'+combo_dd_name;
							}
							while(comp.ownerCt){
								if(comp.DeathDiagStore){
									dd_store = comp.DeathDiagStore;
									break;
								} else {
									comp = comp.ownerCt;
								}
							}
							if(dd_store){
								var dd_index_used = dd_store.findBy(function(rec){
									return (
										rec.get('Diag_id') == r.data.Diag_id 
										&& rec.get('DeathDiag_IsUsed') == 2 
										&& (!Ext.isEmpty(combo_dd_name[1]) && rec.get(combo_dd_name) == 2)
									);
								});
								if(dd_index_used != -1){
									var dd_index = dd_store.findBy(function(rec){
										return (
											rec.get('Diag_id') == r.data.Diag_id 
											&& rec.get('DeathDiag_IsNotUsed') == 2 
											&& (!Ext.isEmpty(combo_dd_name[1]) && rec.get(combo_dd_name) == 2)
										);
									});
									if(dd_index != -1){
										return false;
									}
								}
							}
						}
						this.setValue(r.get(this.valueField));
						combo.fireEvent('select', combo, r, 0);
						//TODO: Возможно лишняя инструкция 
						combo.fireEvent('change', combo, r.get(this.valueField), '');
						/*
						this.setValue(rec[0].get(this.valueField));
						this.setRawValue(rec[0].get('Diag_Code') + " " + rec[0].get('Diag_Name'));
						*/
						if ( this.onChange && typeof this.onChange == 'function') {
							this.onChange(this, r.get(this.valueField));
						}
						yes = true;
						return true;
					}
				}.createDelegate(this));
				if (!yes) {
					this.setValue(null);
					combo.fireEvent('change', combo, null, '');
					if ( this.onChange && typeof this.onChange == 'function') {
						this.onChange(this, null);
					}
				}
				if(this.afterQuery){
					this.afterQuery = false;
				}
				/*
				this.getStore().load({
					callback: function(rec, opt) {
						if ( rec.length > 0 && rec[0].get(this.valueField) != '' ) {
							this.setValue(rec[0].get(this.valueField));
							this.setRawValue(rec[0].get('Diag_Code') + " " + rec[0].get('Diag_Name'));
						}
						else {
							this.setValue('');
							this.setRawValue('');
						}

						if ( this.onChange && typeof this.onChange == 'function' && rec.length > 0 ) {
							this.onChange(this, rec[0].get(this.valueField));
						}
					}.createDelegate(this),
					params: {where: "where (DiagLevel_id = 4"+addGroupFilter+") and Diag_Code like '" + val + "%' limit 100"},
					scope: this
				});
				*/
			}
		},
		'keydown': function(inp, e) {

		if (e.getKey() == e.TAB)
		{
			this.onTabAction(e);
		}
		else
			{
				if ( e.getKey() == e.END) {
					this.inKeyMode = true;
					this.select(this.store.getCount() - 1);
				}

				if ( e.getKey() == e.HOME) {
					this.inKeyMode = true;
					this.select(0);
				}

				if ( e.getKey() == e.PAGE_UP) {
					this.inKeyMode = true;
					var ct = this.store.getCount();

					if ( ct > 0 ) {
						if ( this.selectedIndex == -1 ) {
							this.select(0);
						}
						else if ( this.selectedIndex != 0 ) {
							if ( this.selectedIndex - 10 >= 0 ) {
								this.select(this.selectedIndex - 10);
							}
							else {
								this.select(0);
							}
						}
					}
				}

				if ( e.getKey() == e.PAGE_DOWN)
				{
					if (!this.isExpanded())
					{
						this.onTriggerClick();
					}
					else
					{
						this.inKeyMode = true;
						var ct = this.store.getCount();
						if (ct > 0)
						{
							if (this.selectedIndex == -1)
							{
								this.select(0);
							}
							else if (this.selectedIndex != ct - 1)
							{
								if (this.selectedIndex + 10 < ct - 1)
									this.select(this.selectedIndex + 10);
								else
									this.select(ct - 1);
							}
						}
					}
				}

				if (e.shiftKey == false && e.getKey() == Ext.EventObject.TAB && inp.focusOnTab != null && inp.focusOnTab.toString().length > 0)
				{
					e.stopEvent();
					if (Ext.getCmp(this.focusOnTab))
					{
						Ext.getCmp(this.focusOnTab).focus(true);
					}
				}

				if (e.shiftKey == true && e.getKey() == Ext.EventObject.TAB && inp.focusOnShiftTab != null && inp.focusOnShiftTab.toString().length > 0)
				{
					e.stopEvent();
					if (Ext.getCmp(this.focusOnShiftTab))
					{
						Ext.getCmp(this.focusOnShiftTab).focus(true);
					}
				}

				if (e.altKey || e.ctrlKey || e.shiftKey)
					return true;

				if ( e.getKey() == e.DELETE)
				{
					inp.setValue('');
					inp.setRawValue("");
					inp.selectIndex = -1;
					if (inp.onClearValue)
						this.onClearValue();
					e.stopEvent();
					return true;
				}

				if (e.getKey() == e.F4)
				{
					this.onTriggerClick();
				}

				if (e.getKey() == Ext.EventObject.TAB) {
					this.onTabKeyDown(e);
				}
			}
		}
	},
	setFilterByDate: function(dateValue) {
		
		var value = this.getValue(),
			combo = this,
			index;

		this.filterDate = Ext.util.Format.date(dateValue, 'd.m.Y');
		this.clearValue();
		this.getStore().clearFilter();
		this.lastQuery = '';

		if ( !Ext.isEmpty(dateValue) ) {
			this.getStore().filterBy(function(rec) {
				return ((Ext.isEmpty(rec.get('Diag_begDate')) || rec.get('Diag_begDate') <= dateValue || (rec.get('Diag_begDate') !== null && !Ext.isEmpty(rec.get('Diag_begDate').date) && rec.get('Diag_begDate').date <= Ext.util.Format.date(dateValue, 'Y-m-d')) || (rec.get('Diag_begDate').toString().split('.').reverse().join('-') <= Ext.util.Format.date(dateValue, 'Y-m-d')))
				&& (Ext.isEmpty(rec.get('Diag_endDate')) || rec.get('Diag_endDate') >= dateValue || (rec.get('Diag_endDate') !== null && !Ext.isEmpty(rec.get('Diag_endDate').date) && rec.get('Diag_endDate').date >= Ext.util.Format.date(dateValue, 'Y-m-d')) || (rec.get('Diag_endDate').toString().split('.').reverse().join('-') >= Ext.util.Format.date(dateValue, 'Y-m-d'))));
			});
		}

		index = this.getStore().findBy(function(rec) {
			return (rec.get(combo.valueField) == value);
		});

		if ( index >= 0 ) {
			this.setValue(value);
			this.fireEvent('select', this, this.findRecord(combo.valueField,value));
		} else {
			this.clearValue();
		}
	},
	onTriggerClick: function() {
		if (this.disabled)
			return false;
		var combo = this;
		combo.disableBlurAction = true;
		if(this.allowDiagList){
			sw4.showInfoMsg({
				hideDelay: 12000,
				type: 'warning',
				text: 'Внимание!<br>Если в выпадающем списке поля \"Диагноз\" отсутствует необходимый, то требуется добавить его в Список уточненных диагнозов в Сигнальной информации в ЭМК'
			});
			return false;
		}

		getWnd('swDiagSearchTreeWindow').show({
			MorbusType_SysNick: combo.MorbusType_SysNick,
			PersonRegisterType_SysNick: combo.PersonRegisterType_SysNick,
			registryType: combo.registryType,
			selectionDepth: combo.selectionDepth,
			withGroups: combo.withGroups,
			FilterDiagCode: combo.Diag_level3_code,
			filterDate: combo.filterDate,
			baseFilterFn: combo.baseFilterFn,
			onHide: function() {
				this.FilterDiagCode = null;
				combo.focus(false);
			},
			onSelect: function(diagData) {
				//Запрет установки не используемых диагнозов
				var comp = combo;
				var dd_store = null;
				var combo_dd_name = combo.hiddenName.split('_');

				if(!Ext.isEmpty(combo_dd_name[1]))
				{
					combo_dd_name = combo_dd_name[1].toUpperCase();
					combo_dd_name = 'DeathDiag_IsDiag'+combo_dd_name;
				}
				while(comp.ownerCt){
					if(comp.DeathDiagStore){
						dd_store = comp.DeathDiagStore;
						break;
					} else {
						comp = comp.ownerCt;
					}
				}
				if(dd_store && getRegionNick() != 'perm'){
					var dd_index_used = dd_store.findBy(function(rec){
						return (
							rec.get('Diag_id') == diagData.Diag_id
							&& rec.get('DeathDiag_IsUsed') == 2
							&& (!Ext.isEmpty(combo_dd_name[1]) && rec.get(combo_dd_name) == 2)
						);
					});
					if(dd_index_used != -1){
						var dd_index = dd_store.findBy(function(rec){
							return (
								rec.get('Diag_id') == diagData.Diag_id
								&& rec.get('DeathDiag_IsNotUsed') == 2
								&& (!Ext.isEmpty(combo_dd_name[1]) && rec.get(combo_dd_name) == 2)
							);
						});
						if(dd_index != -1){
							sw.swMsg.alert('Сообщение', 'Данный диагноз не может быть установлен для указанного поля');
							return false;
						}
					}
				}

				combo.getStore().removeAll();
				combo.getStore().loadData([{
					Diag_Code: diagData.Diag_Code,
					Diag_id: diagData.Diag_id,
					DiagLevel_id: diagData.DiagLevel_id,
					Diag_Name: diagData.Diag_Name,
					DiagFinance_IsOms: diagData.DiagFinance_IsOms,
					PersonRegisterType_List: diagData.PersonRegisterType_List,
					MorbusType_List: diagData.MorbusType_List,
					DeathDiag_IsLowChance: diagData.DeathDiag_IsLowChance
				}]);
				combo.setValue(diagData[combo.valueField]);

				var index = combo.getStore().findBy(function(rec) {
					return (rec.get(combo.valueField) == diagData[combo.valueField]);
				});

				if ( index == -1 ) {
					return false;
				}

				var record = combo.getStore().getAt(index);
				if ( typeof record == 'object' ) {
					combo.disableBlurAction = false;
					combo.fireEvent('select', combo, record, index);
					combo.fireEvent('change', combo, record.get(combo.valueField));
				}

				getWnd('swDiagSearchTreeWindow').hide();
				return true;
			}
		});
	},
	initComponent: function() {
		sw.Promed.SwDiagAutoCompleteCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'Diag_id', mapping: 'Diag_id'},
				{name: 'Diag_pid', mapping: 'Diag_pid'},
				{name: 'Diag_Name', mapping: 'Diag_Name'},
				{name: 'Diag_Code', mapping: 'Diag_Code'},
				{name: 'Diag_Display',
					convert: function(val,row) {
						return row.Diag_Code + ' ' + row.Diag_Name;
					}	
				},
				{name: 'DiagLevel_id', mapping: 'DiagLevel_id'},
				{name: 'Diag_begDate', mapping: 'Diag_begDate'},
				{name: 'Diag_endDate', mapping: 'Diag_endDate'},
				{name: 'PersonAgeGroup_Code', mapping: 'PersonAgeGroup_Code'},
				{name: 'Sex_Code', mapping: 'Sex_Code'},
				{name: 'DiagFinance_IsOms', mapping: 'DiagFinance_IsOms'},
				{name: 'DiagFinance_IsAlien', mapping: 'DiagFinance_IsAlien'},
				{name: 'DiagFinance_IsFacult', mapping: 'DiagFinance_IsFacult'},
				{name: 'DiagFinance_IsHealthCenter', mapping: 'DiagFinance_IsHealthCenter'},
				{name: 'DiagFinance_IsRankin', mapping: 'DiagFinance_IsRankin'},
				{name: 'PersonRegisterType_List', mapping: 'PersonRegisterType_List'},
				{name: 'MorbusType_List', mapping: 'MorbusType_List'},
				{name: 'DeathDiag_IsLowChance', mapping: 'DeathDiag_IsLowChance'}
			],
			key: 'Diag_id',
			sortInfo: {field: 'Diag_Code'},
			tableName: 'Diag'
		});

		this.queryDelay = (Ext.isIndexedDb || Ext.isRemoteDB)?600:300;

		if(this.searchCodeAndName){
			var diagcombo = this;
			diagcombo.tpl = new Ext.XTemplate(
				'<tpl for="."><div class="x-combo-list-item">',
				'{[this.returnValue(values)]}',
				'</div></tpl>',
				{
					returnValue: function(values){
						if(!values.Diag_id) return '';
						var combo = diagcombo;
						var str = (values.Diag_Name) ? values.Diag_Name : '';
						if(combo.searchCodeAndName && str && combo.lastQuery){
							str = str.replace(new RegExp('(' + combo.lastQuery.trim() + ')', 'ig'), '<span style="color:red;font-weight:900">$1</span>');
						}
						return '<table style="border: 0;"><td style="width: 45px;"><font color="red">'+values.Diag_Code+'</font></td><td><h3>'+str+'</h3></td></tr></table>';
					}
				}
			);
		}
	}
});
Ext.reg('swdiagcombo', sw.Promed.SwDiagCombo);

sw.Promed.SwLpuLocalCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	allowBlank: false,
	displayField: 'Lpu_Nick',
	width: 500,
	valueField: 'Lpu_id',
	fieldLabel: langs('МО'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{[(values.Lpu_EndDate && values.Lpu_EndDate != "") ? values.Lpu_Nick + " (закрыто "+ values.Lpu_EndDate + ")" : values.Lpu_Nick ]}&nbsp;',
		'</div></tpl>'
	),
	/*
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{Lpu_Nick}'+
			'</div></tpl>',
	*/
	initComponent: function() {
		sw.Promed.SwLpuLocalCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.db.AdapterStore({
			dbFile: 'Promed.db',
			tableName: 'Lpu',
			key: 'Lpu_id',
			autoLoad: false,
			listeners: {
				'load': function(store) {
					this.setValue(this.getValue());
				}.createDelegate(this)
			},
			fields: [
				{name: 'Lpu_id', mapping: 'Lpu_id'},
				{name: 'Lpu_IsOblast', mapping: 'Lpu_IsOblast'},
				{name: 'Lpu_Name', mapping: 'Lpu_Name'},
				{name: 'Lpu_Nick', mapping: 'Lpu_Nick'},
				{name: 'Lpu_Ouz', mapping: 'Lpu_Ouz'},
				{name: 'Lpu_RegNomC', mapping: 'Lpu_RegNomC'},
				{name: 'Lpu_RegNomC2', mapping: 'Lpu_RegNomC2'},
				{name: 'Lpu_RegNomN2', mapping: 'Lpu_RegNomN2'},
				{name: 'Lpu_isDMS', mapping: 'Lpu_isDMS'},
				{name: 'Lpu_DloBegDate', mapping: 'Lpu_DloBegDate'},
				{name: 'Lpu_DloEndDate', mapping: 'Lpu_DloEndDate'},
				{name: 'Lpu_BegDate', mapping: 'Lpu_BegDate'},
				{name: 'Lpu_EndDate', mapping: 'Lpu_EndDate'},
				{name: 'Lpu_IsAccess', mapping: 'Lpu_IsAccess'},
				{name: 'Lpu_IsNotForSystem', mapping: 'Lpu_IsNotForSystem'}
			],
			sortInfo: {
				field: 'Lpu_Nick'
			}
		});
	}
});

Ext.reg('swlpulocalcombo', sw.Promed.SwLpuLocalCombo);


sw.Promed.SwLpuWithMedServiceCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	medServiceTypeId: 0,
	displayField:'Lpu_Nick',
	valueField: 'Lpu_id',
	fieldLabel: langs('МО'),
	triggerAction: 'all',
	mode: 'local',
	editable: false,
	parentObj: this,
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{Lpu_Nick}'+
			'</div></tpl>',
	initComponent: function() {
		var me = this;
		sw.Promed.SwLpuWithMedServiceCombo.superclass.initComponent.apply(this, arguments);

		me.store = new Ext.data.JsonStore({
			url: C_LPUWITHMEDSERV_LIST,
			baseParams: {Object: 'LpuWithMedServ', MedServiceType_id: me.medServiceTypeId},
			autoLoad: false,
			key:'Lpu_id',
			fields: [
				{name: 'Lpu_id', type:'int'},
				{name: 'Lpu_Name', type:'string'},
				{name: 'Lpu_Nick', type:'string'}
			],
			sortInfo: {
				field: 'Lpu_Name'
			}
		});

		this.getStore().load(
			{
				params:
				{
					Object: 'LpuWithMedServ',
					MedServiceType_id: this.medServiceTypeId
				},
				callback: function(){
					me.setValue(me.getValue());
				}
			});
	}
});

Ext.reg('swlpuwithmedservicecombo', sw.Promed.SwLpuWithMedServiceCombo);

sw.Promed.SwLpuFilterCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'Lpu',
		key: 'Lpu_id',
		autoLoad: false,
		fields: [
			{name: 'Lpu_id', mapping: 'Lpu_id'},
			{name: 'Lpu_IsOblast', mapping: 'Lpu_IsOblast'},
			{name: 'Lpu_Name', mapping: 'Lpu_Name'},
			{name: 'Lpu_Nick', mapping: 'Lpu_Nick'},
			{name: 'Lpu_Ouz', mapping: 'Lpu_Ouz'},
			{name: 'Lpu_RegNomC', mapping: 'Lpu_RegNomC'},
			{name: 'Lpu_RegNomC2', mapping: 'Lpu_RegNomC2'},
			{name: 'Lpu_RegNomN2', mapping: 'Lpu_RegNomN2'},
			{name: 'Lpu_isDMS', mapping: 'Lpu_isDMS'},
			{name: 'Lpu_DloBegDate', mapping: 'Lpu_DloBegDate'},
			{name: 'Lpu_DloEndDate', mapping: 'Lpu_DloEndDate'},
			{name: 'Lpu_BegDate', mapping: 'Lpu_BegDate'},
			{name: 'Lpu_EndDate', mapping: 'Lpu_EndDate'},
			{name: 'Lpu_IsAccess', mapping: 'Lpu_IsAccess'}
		]
	}),
	displayField:'Lpu_Nick',
	valueField: 'Lpu_id',
	fieldLabel: langs('МО'),
	triggerAction: 'all',
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{Lpu_Nick}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwLpuFilterCombo.superclass.initComponent.apply(this, arguments);
	}
});

sw.Promed.SwLpuFilterCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwLpuFilterCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwLpuFilterCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwLpuFilterCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwLpuFilterCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwLpuFilterCombo.prototype.onTrigger2Click = function() {};
sw.Promed.SwLpuFilterCombo.prototype.onKeyUp = function(e){
		if (e.getKey() == e.F4)
			return;
		if(this.editable !== false && !e.isSpecialKey()){
			this.lastKey = e.getKey();
			this.dqTask.delay(this.queryDelay);
		}
	}

sw.Promed.SwLpuFilterCombo.prototype.doQuery = function(q, forceAll){
	if(q === undefined || q === null){
		q = '';
	}
	var qe = {
		query: q,
		forceAll: forceAll,
		combo: this,
		cancel:false
	};
	if(this.fireEvent('beforequery', qe)===false || qe.cancel){
		return false;
	}
	q = qe.query;
	forceAll = qe.forceAll;
	if(forceAll === true || (q.length >= this.minChars)){
		if(this.lastQuery !== q){
			this.lastQuery = q;
			if(this.mode == 'local'){
				this.selectedIndex = -1;
				if(forceAll){
					this.store.clearFilter();
					if (this.baseFilterFn != null)
					{
						this.getStore().filterBy(function(record, id) {
							var result = true;
							result = this.baseFilterFn.call(this.baseFilterScope, record, id);
							return result;
						}, this);
					}
				}else{
					if (q.length >= this.minChars)
					{
						this.lastQuery = q;
						this.selectedIndex = -1;

						this.getStore().filterBy(function(record, id) {
							var result = true;

							if (this.baseFilterFn != null)
							{
								result = this.baseFilterFn.call(this.baseFilterScope, record, id);
							}

							if (result)
							{
								var patt = new RegExp('^' + String(q).toLowerCase());
								result = patt.test(String(record.data[this.displayField]).toLowerCase());
							}
							return result;
						}, this);

						this.onLoad();
					}
				}
				this.onLoad();
			}else{
				this.store.baseParams[this.queryParam] = q;
				this.store.load({
					params: this.getParams(q)
				});
				this.expand();
			}
		}else{
			this.selectedIndex = -1;
			this.onLoad();
		}
	}
}
Ext.reg('swlpufiltercombo', sw.Promed.SwLpuFilterCombo);

sw.Promed.SwPersonSexCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'Sex_Code',
	displayField: 'Sex_Name',
	editable: false,
	fieldLabel: langs('Пол'),
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'Sex_id', type: 'int'},
			{name: 'Sex_Code', type: 'int'},
			{name: 'Sex_Name', type: 'string'}
		],
		key: 'Sex_id',
		sortInfo: {
			field: 'Sex_Code'
		},
		tableName: 'Sex'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{Sex_Code}</font>&nbsp;{Sex_Name}',
		'</div></tpl>'
	),
	valueField: 'Sex_id',
	initComponent: function() {
		sw.Promed.SwPersonSexCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swpersonsexcombo', sw.Promed.SwPersonSexCombo);

sw.Promed.SwLpuRegionTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	/*store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		tableName: 'LpuRegionType',
		key: 'LpuRegionType_id',
		fields: [
			{name: 'LpuRegionType_id',    type:'int'},
			{name: 'LpuRegionType_Code', type:'int'},
			{name: 'LpuRegionType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'LpuRegionType_Code'
		}
	}),
	*/
	codeField: 'LpuRegionType_Code',
	displayField:'LpuRegionType_Name',
	editable: false,
	valueField: 'LpuRegionType_id',
	hiddenName: 'LpuRegionType_id',
	fieldLabel: langs('Тип участка'),
	lastQuery: '',
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{LpuRegionType_Code}</font>&nbsp;{LpuRegionType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwLpuRegionTypeCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.db.AdapterStore(
		{
			autoLoad: false,
			dbFile: 'Promed.db',
			tableName: 'LpuRegionType',
			key: 'LpuRegionType_id',
			fields: [
				{name: 'LpuRegionType_id',    type:'int'},
				{name: 'LpuRegionType_Code', type:'string'},
				{name: 'LpuRegionType_SysNick',  type:'string'},
				{name: 'LpuRegionType_Name',  type:'string'}
			],
			sortInfo: {
				field: 'LpuRegionType_Code'
			},
			listeners: {
				'load': function(store) {
					store.filterBy(function(rec){
						var flag = true;
						if (getRegionNick() != 'perm' && rec.get('LpuRegionType_SysNick').inlist(['comp','prip'])) {
							flag = false;
						}
						if (getRegionNick().inlist([ 'kz' ]) && rec.get('LpuRegionType_SysNick').inlist(['feld'])) {
							flag = false;
						}
						return flag;
					});
				}.createDelegate(this)
			}
		})
	}
});

Ext.reg('swlpuregiontypecombo', sw.Promed.SwLpuRegionTypeCombo);

sw.Promed.SwLpuAttachTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'LpuAttachType',
		key: 'LpuAttachType_id',
		autoLoad: false,
		fields: [
			{name: 'LpuAttachType_id',    type:'int'},
			{name: 'LpuAttachType_Code', type:'int'},
			{name: 'LpuAttachType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'LpuAttachType_Code'
		}
	}),
	codeField: 'LpuAttachType_Code',
	displayField:'LpuAttachType_Name',
	editable: false,
	valueField: 'LpuAttachType_id',
	hiddenName: 'LpuAttachType_id',
	fieldLabel: langs('Тип прикрепления'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{LpuAttachType_Code}</font>&nbsp;{LpuAttachType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwLpuAttachTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swlpuattachtypecombo', sw.Promed.SwLpuAttachTypeCombo);

sw.Promed.SwCardCloseCauseCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CardCloseCause',
		key: 'CardCloseCause_id',
		autoLoad: false,
		fields: [
			{name: 'CardCloseCause_id',    type:'int'},
			{name: 'CardCloseCause_Code', type:'int'},
			{name: 'CardCloseCause_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CardCloseCause_Code'
		}
	}),
	codeField: 'CardCloseCause_Code',
	displayField:'CardCloseCause_Name',
	editable: false,
	valueField: 'CardCloseCause_id',
	fieldLabel: langs('Причина закрытия'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CardCloseCause_Code}</font>&nbsp;{CardCloseCause_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCardCloseCauseCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swcardclosecausecombo', sw.Promed.SwCardCloseCauseCombo);

sw.Promed.SwSocStatusCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'SocStatus',
		key: 'SocStatus_id',
		autoLoad: false,
		fields: [
			{name: 'SocStatus_id',    type:'int'},
			{name: 'SocStatus_Code', type:'string'},
			{name: 'SocStatus_Name',  type:'string'}
		],
		sortInfo: {
			field: 'SocStatus_Code'
		}
	}),
	codeField:'SocStatus_Code',
	displayField:'SocStatus_Name',
	editable: false,
	enableKeyEvents: true,
	valueField: 'SocStatus_id',
	fieldLabel: langs('Соц. статус'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{SocStatus_Code}</font>&nbsp;{SocStatus_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwSocStatusCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swsocstatuscombo', sw.Promed.SwSocStatusCombo);

sw.Promed.SwOMSSprTerrCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'OMSSprTerr_Code',
	displayField: 'OMSSprTerr_Name',
	editable: true,
	fieldLabel: langs('Территория'),
	forceSelection: true,
	hiddenName: 'OMSSprTerr_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'OMSSprTerr_Code', type: 'int'},
			{name: 'OMSSprTerr_id', type: 'int'},
			{name: 'OMSSprTerr_Name', type: 'string'},
			{name: 'KLRgn_id', type: 'int'},
			{name: 'OMSSprTerr_begDate', type: 'string'},
			{name: 'OMSSprTerr_endDate', type: 'string'}
		],
		key: 'OMSSprTerr_id',
		sortInfo: {
			field: 'OMSSprTerr_Code',
			direction: 'ASC'
		},
		tableName: 'OMSSprTerr'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{OMSSprTerr_Code}</font>&nbsp;{[(values.OMSSprTerr_endDate && values.OMSSprTerr_endDate != "") ? "<font color=#777>"+values.OMSSprTerr_Name + " (закрыто "+ values.OMSSprTerr_endDate + ")</font>" : values.OMSSprTerr_Name ]}',
		//'<font color="red">{OMSSprTerr_Code}</font>&nbsp;{OMSSprTerr_Name}',
		'</div></tpl>'
	),
	valueField: 'OMSSprTerr_id',
	width: 500,
	initComponent: function() {
		sw.Promed.SwOMSSprTerrCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swomssprterrcombo', sw.Promed.SwOMSSprTerrCombo);

sw.Promed.SwOMSSprTerrAdditCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'OMSSprTerr_Code',
	displayField: 'OMSSprTerr_Name',
	editable: true,
	fieldLabel: langs('Территория'),
	emptyText: langs('не указано'),
	forceSelection: true,
	hiddenName: 'OMSSprTerr_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'OMSSprTerr_Code', type: 'int'},
			{name: 'OMSSprTerr_id', type: 'int'},
			{name: 'OMSSprTerr_Name', type: 'string'},
			{name: 'KLRgn_id', type: 'int'}
		],
		key: 'OMSSprTerr_id',
		sortInfo: {
			field: 'OMSSprTerr_Code',
			direction: 'ASC'
		},
		tableName: 'OMSSprTerrAddit'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{OMSSprTerr_Code}</font>&nbsp;{OMSSprTerr_Name}',
		'</div></tpl>'
	),
	valueField: 'OMSSprTerr_id',
	width: 500,
	initComponent: function() {
		sw.Promed.SwOMSSprTerrAdditCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swomssprterradditcombo', sw.Promed.SwOMSSprTerrAdditCombo);

sw.Promed.SwOMSSprTerrSimpleCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'OMSSprTerr_Code',
	displayField: 'OMSSprTerr_Name',
	editable: true,
	fieldLabel: langs('Территория'),
	forceSelection: true,
	hiddenName: 'OMSSprTerr_id',
	store: new Ext.data.SimpleStore({
		autoLoad: false,
		fields: [
			{name: 'OMSSprTerr_Code', mapping: 'OMSSprTerr_Code'},
			{name: 'OMSSprTerr_id', mapping: 'OMSSprTerr_id'},
			{name: 'OMSSprTerr_Name', mapping: 'OMSSprTerr_Name'}
		],
		key: 'OMSSprTerr_id',
		sortInfo: {
			field: 'OMSSprTerr_Code',
			direction: 'ASC'
		}
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{[(values.OMSSprTerr_Code > 0) ? String(values.OMSSprTerr_Code) : "&nbsp;"]}</font>&nbsp;{[(values.OMSSprTerr_Code == -1)?"<b>" + values.OMSSprTerr_Name + "</b>":values.OMSSprTerr_Name]}',
		'</div></tpl>'
	),
	valueField: 'OMSSprTerr_id',
	width: 500,
	initComponent: function() {
		sw.Promed.SwOMSSprTerrSimpleCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swomssprterrsimplecombo', sw.Promed.SwOMSSprTerrSimpleCombo);

sw.Promed.SwPolisTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField:'PolisType_Code',
	displayField:'PolisType_Name',
	editable: false,
	fieldLabel: langs('Тип'),
	hiddenName: 'PolisType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'PolisType_Code', type: 'int'},
			{name: 'PolisType_id', type: 'int'},
			{name: 'PolisType_Name', type: 'string'}
		],
		key: 'PolisType_id',
		sortInfo: {
			field: 'PolisType_Code'
		},
		tableName: 'PolisType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{PolisType_Code}</font>&nbsp;{PolisType_Name}',
		'</div></tpl>'
	),
	valueField: 'PolisType_id',
	initComponent: function() {
		sw.Promed.SwPolisTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swpolistypecombo', sw.Promed.SwPolisTypeCombo);

sw.Promed.SwOrgSMOCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	clearBaseFilter: function() {
		this.baseFilterFn = null;
		this.baseFilterScope = null;
	},
	setBaseFilter: function(fn, scope) {
		this.baseFilterFn = fn;
		this.baseFilterScope = scope || this;
		this.store.filterBy(fn, scope);
	},
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OrgSMO',
		key: 'OrgSMO_id',
		autoLoad: false,
		fields: [
			{name: 'OrgSMO_id', type:'int'},
			{name: 'Org_id', type:'int'},
			{name: 'OrgSMO_RegNomC', type:'int'},
			{name: 'OrgSMO_RegNomN', type:'int'},
			{name: 'OrgSMO_Nick', type:'string'},
			{name: 'OrgSMO_isDMS', type:'int'},
			{name: 'KLRgn_id', type:'int'},
			{name: 'OrgSMO_endDate', type: 'string'},
			{name: 'OrgSMO_IsTFOMS', type: 'int'},
			{name: 'Orgsmo_f002smocod', type: 'string'}
		]
	}),
	displayField:'OrgSMO_Nick',
	valueField: 'OrgSMO_id',
	fieldLabel: langs('Выдан'),
	triggerAction: 'all',
	withoutTrigger: false,
	tpl: new Ext.XTemplate('<tpl for="."><div class="x-combo-list-item">'+
		'{OrgSMO_Nick}' + '{[(values.OrgSMO_endDate != "" && values.OrgSMO_endDate!=null) ? " (не действует с " + values.OrgSMO_endDate + ")" : "&nbsp;"]}'+
	'</div></tpl>'),
	initComponent: function() {
		this.addListener('keydown', function(inp, e) { //В рамках задачи https://redmine.swan.perm.ru/issues/85359
			if ( e.getKey() == e.DELETE||e.getKey() == e.BACKSPACE){
				inp.clearValue();
				inp.setRawValue(null);
			}
		});
		if (this.withoutTrigger) {
			this.initTrigger = Ext.form.ComboBox.prototype.initTrigger;
			Ext.form.ComboBox.prototype.initComponent.apply(this, arguments);
		} else {
			Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);
		}
	}
});

sw.Promed.SwOrgSMOCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwOrgSMOCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwOrgSMOCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwOrgSMOCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwOrgSMOCombo.prototype.onTrigger2Click = function() {
    if ( this.disabled ) {
        return;
    }

    var combo = this;
    combo.getStore().clearFilter();
    if(this.isExpanded()){
        this.collapse();
    }

    getWnd('swOrgSearchWindow').show({
        object: 'smo',
        onClose: function() {
            combo.focus(true, 200);
        },
        onSelect: function(orgData) {
            if ( orgData.OrgSMO_id > 0 ) {
                combo.setValue(orgData.OrgSMO_id);
                combo.focus(true, 250);
                combo.fireEvent('change', combo);
            }
            getWnd('swOrgSearchWindow').hide();
        }
    });
};
/*sw.Promed.SwOrgSMOCombo.prototype.onKeyUp = function(e){
	if (e.getKey() == e.F4)
		return;
	if(this.editable !== false && !e.isSpecialKey()){
		this.lastKey = e.getKey();
		this.dqTask.delay(this.queryDelay);
	}
}*/

sw.Promed.SwOrgSMOCombo.prototype.doQuery = function(q, forceAll){
	if(q === undefined || q === null){
		q = '';
	}
	var qe = {
		query: q,
		forceAll: forceAll,
		combo: this,
		cancel:false
	};
	if(this.fireEvent('beforequery', qe)===false || qe.cancel){
		return false;
	}
	q = qe.query;
	forceAll = qe.forceAll;
	if(forceAll === true || (q.length >= this.minChars)){
		if(this.lastQuery !== q){
			this.lastQuery = q;
			if(this.mode == 'local'){
				this.selectedIndex = -1;
				if(forceAll){
					this.store.clearFilter();
					if (typeof this.baseFilterFn == 'function')
					{
						this.getStore().filterBy(function(record, id) {
							return this.baseFilterFn.call(this.baseFilterScope, record, id);
						}, this);
					}
				}else{
					if (q.length >= this.minChars)
					{
						this.lastQuery = q;
						this.selectedIndex = -1;

						this.getStore().filterBy(function(record, id) {
							var result = true;

							if (typeof this.baseFilterFn == 'function')
							{
								result = this.baseFilterFn.call(this.baseFilterScope, record, id);
							}

							if (result)
							{
								var patt = new RegExp('^' + String(q).toLowerCase());
								result = patt.test(String(record.data[this.displayField]).toLowerCase());
							}
							return result;
						}, this);

						this.onLoad();
					}
				}
				this.onLoad();
			}else{
				this.store.baseParams[this.queryParam] = q;
				this.store.load({
					params: this.getParams(q)
				});
				this.expand();
			}
		}else{
			this.selectedIndex = -1;
			this.onLoad();
		}
	}
}
Ext.reg('sworgsmocombo', sw.Promed.SwOrgSMOCombo);
/*
sw.Promed.SwDocumentTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'DocumentType',
		key: 'DocumentType_id',
		autoLoad: false,
		fields: [
			{name: 'DocumentType_id',    type:'int'},
			{name: 'DocumentType_Code', type:'int'},
			{name: 'DocumentType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'DocumentType_Code'
		}
	}),
	codeField:'DocumentType_Code',
	displayField:'DocumentType_Name',
	valueField: 'DocumentType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{DocumentType_Code}</font>&nbsp;{DocumentType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwDocumentTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swdocumenttypecombo', sw.Promed.SwDocumentTypeCombo);
*/
sw.Promed.SwOrgDepCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	trigger1Class: 'x-form-search-trigger',
	triggerAction: 'none',
	store: new Ext.data.JsonStore({
		url: C_GETOBJECTLIST,
//		baseParams: {Object:'OrgSMO', OrgSMO_id:'', OrgSMO_Name:''},
		editable: false,
		key: 'OrgDep_id',
		autoLoad: false,
		fields: [
			{name: 'OrgDep_id',    type:'int'},
			{name: 'OrgDep_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OrgDep_Name'
		}
	}),
	triggerAction: 'all',
	displayField:'OrgDep_Name',
	valueField: 'OrgDep_id',
	fieldLabel: langs('Выдан'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{OrgDep_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOrgDepCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('sworgdepcombo', sw.Promed.SwOrgDepCombo);

sw.Promed.SwOrgRSchetCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	mode: 'local',
	//trigger1Class: 'x-form-search-trigger',
	store: new Ext.data.JsonStore({
		url: C_GETOBJECTLIST,
//		baseParams: {Object:'OrgSMO', OrgSMO_id:'', OrgSMO_Name:''},
		editable: false,
		key: 'OrgRSchet_id',
		autoLoad: false,
		fields: [
			{ name: 'OrgRSchet_id', type: 'int' },
			{ name: 'OrgRSchet_Name', type: 'string' },
			{ name: 'OrgRSchet_begDate', type: 'date', dateFormat: 'd.m.Y' },
			{ name: 'OrgRSchet_endDate', type: 'date', dateFormat: 'd.m.Y' },
			{ name: 'OrgRSchetType_id', type: 'int' }
		],
		sortInfo: {
			field: 'OrgRSchet_Name'
		}
	}),
	triggerAction: 'all',
	displayField:'OrgRSchet_Name',
	valueField: 'OrgRSchet_id',
	fieldLabel: langs('Расч. счет'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{OrgRSchet_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOrgRSchetCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('sworgrschetcombo', sw.Promed.SwOrgRSchetCombo);

sw.Promed.SwOkvedCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'Okved',
		key: 'Okved_id',
		autoLoad: false,
		fields: [
			{name: 'Okved_id',    type:'int'},
			{name: 'Okved_Code', type:'string'},
			{name: 'Okved_Name',  type:'string'}
		],
		sortInfo: {
			field: 'Okved_Code'
		}
	}),
	displayField:'Okved_Name',
	valueField: 'Okved_id',
	fieldLabel: langs('ОКВЭД'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{Okved_Code}</font>&nbsp;{Okved_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOkvedCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swokvedcombo', sw.Promed.SwOkvedCombo);

sw.Promed.SwYesNoCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'YesNo_Code',
	displayField: 'YesNo_Name',
	autoLoad:false,
	editable: false,
	fieldLabel: langs('Да/нет'),
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'YesNo_id', type: 'int'},
			{name: 'YesNo_Code', type: 'string'},
			{name: 'YesNo_Name', type: 'string'}
		],
		key: 'YesNo_id',
		sortInfo: {field: 'YesNo_Code'},
		tableName: 'YesNo'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{YesNo_Code}</font>&nbsp;{YesNo_Name}',
		'</div></tpl>'
	),
	valueField: 'YesNo_id',
	initComponent: function() {
		if(this.autoLoad){
			this.getStore().load()
		} 
		sw.Promed.SwYesNoCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swyesnocombo', sw.Promed.SwYesNoCombo);

sw.Promed.SwIsDetectedCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'YesNo_Code',
	displayField: 'YesNo_Name',
	autoLoad:false,
	editable: false,
	fieldLabel: langs('Да/нет'),
	store: new Ext.data.SimpleStore({
		key: 'YesNo_id',
		autoLoad: false,
		fields:[
			{name: 'YesNo_id', type: 'int'},
			{name: 'YesNo_Name', type: 'string'},
			{name: 'YesNo_Code', type: 'string'}
		],
		data: [
			[2, 'Выявлено', '1'],
			[1, 'Не выявлено', '0']
		]
	}),
	valueField: 'YesNo_id',
	initComponent: function() {
		if(this.autoLoad){
			this.getStore().load()
		} 
		sw.Promed.SwYesNoCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swisdetectedcombo', sw.Promed.SwIsDetectedCombo);

sw.Promed.SwEvalType = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'EvalType_Code',
	displayField: 'EvalType_Name',
	autoLoad:false,
	editable: false,
	fieldLabel: langs('Показатель'),
	store: new sw.Promed.Store({
		autoLoad: false,
		fields: [
			{name: 'EvalType_id', type: 'int'},
			{name: 'EvalType_Code', type: 'string'},
			{name: 'EvalType_Name', type: 'string'}
		],
		key: 'EvalType_id',
		sortInfo: {field: 'EvalType_Code'}
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{EvalType_Code}</font>&nbsp;{EvalType_Name}',
		'</div></tpl>'
	),
	valueField: 'EvalType_id',
	initComponent: function() {
		var myData = [
			{'EvalType_id':0,'EvatlType_Code':'0',"EvalType_Name":langs('Рост')},
			{'EvalType_id':1,'EvatlType_Code':'1',"EvalType_Name":'Вес'}
		];
		this.getStore().loadData(myData,false);
		sw.Promed.SwEvalType.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swevaltypecombo', sw.Promed.SwEvalType);

sw.Promed.SwCitizenType = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'CitizenType_Code',
	displayField: 'CitizenType_Name',
	autoLoad:false,
	editable: false,
	fieldLabel: langs('Житель'),
	store: new sw.Promed.Store({
		autoLoad: false,
		fields: [
			{name: 'CitizenType_id', type: 'int'},
			{name: 'CitizenType_Code', type: 'string'},
			{name: 'CitizenType_Name', type: 'string'}
		],
		key: 'CitizenType_id',
		sortInfo: {field: 'CitizenType_Code'}
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{CitizenType_Code}</font>&nbsp;{CitizenType_Name}',
		'</div></tpl>'
	),
	valueField: 'CitizenType_id',
	initComponent: function() {
		var myData = [
			{'CitizenType_id':0,'CitizenType_Code':'0',"CitizenType_Name":'Города'},
			{'CitizenType_id':1,'CitizenType_Code':'1',"CitizenType_Name":'Села'}
		];
		this.getStore().loadData(myData,false);
		sw.Promed.SwCitizenType.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swсitizentypecombo', sw.Promed.SwCitizenType);

sw.Promed.SwYear = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField: 'Year',
	autoLoad:false,
	editable: false,
	fieldLabel: langs('Год'),
	store: new sw.Promed.Store({
		autoLoad: false,
		fields: [,
			{name: 'Year', type: 'int'}
		],
		key: 'Year',
		sortInfo: {field: 'Year',direction: 'DESC'}
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{Year}',
		'</div></tpl>'
	),
	valueField: 'Year',
	initComponent: function() {
		var beg = new Date('1900');
		var end = new Date();
		var i = 0;
		var myData = [];
		while(beg.getYear()<end.getYear()+1){
		myData.push({"Year":parseInt(beg.format('Y'))});
		i++;
		beg = beg.add('Y',1);
		}
		this.getStore().loadData(myData,false);
		sw.Promed.SwYear.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swyearcombo', sw.Promed.SwYear);

sw.Promed.SwNormaDisturbanceTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'NormaDisturbanceType_Code',
	displayField: 'NormaDisturbanceType_Name',
	editable: false,
	fieldLabel: langs('Психомоторная сфера'),
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'NormaDisturbanceType_id', type: 'int'},
			{name: 'NormaDisturbanceType_Code', type: 'int'},
			{name: 'NormaDisturbanceType_Name', type: 'string'}
		],
		key: 'NormaDisturbanceType_id',
		sortInfo: {field: 'NormaDisturbanceType_Code'},
		tableName: 'NormaDisturbanceType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{NormaDisturbanceType_Code}</font>&nbsp;{NormaDisturbanceType_Name}',
		'</div></tpl>'
	),
	valueField: 'NormaDisturbanceType_id',
	initComponent: function() {
		sw.Promed.SwNormaDisturbanceTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swnormadisturbancetypecombo', sw.Promed.SwNormaDisturbanceTypeCombo);

sw.Promed.SwOkvedCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'Okved',
		key: 'Okved_id',
		autoLoad: false,
		fields: [
			{name: 'Okved_id',    type:'int'},
			{name: 'Okved_Code', type:'string'},
			{name: 'Okved_Name',  type:'string'}
		],
		sortInfo: {
			field: 'Okved_Code'
		}
	}),
	displayField:'Okved_Name',
	valueField: 'Okved_id',
	codeField: 'Okved_Code',
	editable: false,
	fieldLabel: langs('ОКВЭД'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{Okved_Code}</font>&nbsp;{Okved_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOkvedCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swokvedcombo', sw.Promed.SwOkvedCombo);


sw.Promed.SwMedSpecCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'MedSpec',
		key: 'MedSpec_id',
		autoLoad: false,
		fields: [
			{name: 'MedSpec_id',    type:'int'},
			{name: 'MedSpec_Code', type:'int'},
			{name: 'MedSpec_Name',  type:'string'}
		],
		sortInfo: {
			field: 'MedSpec_Code'
		}
	}),
	codeField: 'MedSpec_Code',
	editable: false,
	displayField:'MedSpec_Name',
	valueField: 'MedSpec_id',
	fieldLabel: langs('Специальность'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{MedSpec_Code}</font>&nbsp;{MedSpec_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwMedSpecCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swmedspeccombo', sw.Promed.SwMedSpecCombo);

sw.Promed.SwPostMedTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'PostMedType',
		key: 'PostMedType_id',
		autoLoad: false,
		fields: [
			{name: 'PostMedType_id',    type:'int'},
			{name: 'PostMedType_Code', type:'int'},
			{name: 'PostMedType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'PostMedType_Code'
		}
	}),
	displayField:'PostMedType_Name',
	valueField: 'PostMedType_id',
	codeField: 'PostMedType_Code',
	editable: false,
	fieldLabel: langs('Тип должности'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{PostMedType_Code}</font>&nbsp;{PostMedType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwPostMedTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swpostmedtypecombo', sw.Promed.SwPostMedTypeCombo);

sw.Promed.SwPostMedLocalCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'PostMed',
		key: 'PostMedType_id',
		autoLoad: false,
		fields: [
			{name: 'PostMed_id',    type:'int'},
			{name: 'PostMed_Code',	type:'int'},
			{name: 'PostMed_Name',  type:'string'}
		],
		sortInfo: {
			field: 'PostMed_Name'
		}
	}),
	displayField:'PostMed_Name',
	valueField: 'PostMed_id',
	editable: true,
	fieldLabel: langs('Тип должности'),
	tpl: '<tpl for="."><div class="x-combo-list-item">{PostMed_Name}</div></tpl>',
	initComponent: function() {
		sw.Promed.SwPostMedLocalCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swpostmedlocalcombo', sw.Promed.SwPostMedLocalCombo);

sw.Promed.SwPostMedCatCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'PostMedCat',
		key: 'PostMedCat_id',
		autoLoad: false,
		fields: [
			{name: 'PostMedCat_id',    type:'int'},
			{name: 'PostMedCat_Code', type:'int'},
			{name: 'PostMedCat_Name',  type:'string'}
		],
		sortInfo: {
			field: 'PostMedCat_Code'
		}
	}),
	displayField:'PostMedCat_Name',
	codeField: 'PostMedCat_Code',
	editable: false,
	valueField: 'PostMedCat_id',
	fieldLabel: langs('Категория'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{PostMedCat_Code}</font>&nbsp;{PostMedCat_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwPostMedCatCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swpostmedcatcombo', sw.Promed.SwPostMedCatCombo);

sw.Promed.SwPostMedClassCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'PostMedClass',
		key: 'PostMedClass_id',
		autoLoad: false,
		fields: [
			{name: 'PostMedClass_id',    type:'int'},
			{name: 'PostMedClass_Name',  type:'string'}
		],
		sortInfo: {
			field: 'PostMedClass_Name'
		}
	}),
	displayField:'PostMedClass_Name',
	valueField: 'PostMedClass_id',
	fieldLabel: langs('Вид должности'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{PostMedClass_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwPostMedClassCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swpostmedclasscombo', sw.Promed.SwPostMedClassCombo);

sw.Promed.SwKLCountryCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'KLCountry',
		key: 'KLCountry_id',
		autoLoad: false,
		fields: [
			{name: 'KLCountry_id',    type:'int'},
			{name: 'KLCountry_Code',    type:'int'},
			{name: 'KLCountry_Name',  type:'string'}
		],
		sortInfo: {
			field: 'KLCountry_Name'
		}
	}),
	triggerAction: 'all',
	editable: true,
	codeField: 'KLCountry_Code',
	displayField:'KLCountry_Name',
	valueField: 'KLCountry_id',
	fieldLabel: langs('Страна'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{KLCountry_Code}</font>&nbsp;{KLCountry_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwKLCountryCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swklcountrycombo', sw.Promed.SwKLCountryCombo);

sw.Promed.SwPersonSprTerrDop = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'PersonSprTerrDop',
		key: 'PersonSprTerrDop_id',
		autoLoad: false,
		fields: [
			{name: 'PersonSprTerrDop_id',    type:'int'},
			{name: 'PersonSprTerrDop_Code',    type:'int'},
			{name: 'PersonSprTerrDop_Name',  type:'string'},
			{name: 'KLAdr_Ocatd',  type:'string'},
			{name: 'KLArea_id', type: 'int'}
		],
		sortInfo: {
			field: 'PersonSprTerrDop_Name'
		}
	}),
	triggerAction: 'all',
	editable: true,
	codeField: 'PersonSprTerrDop_Code',
	displayField:'PersonSprTerrDop_Name',
	valueField: 'PersonSprTerrDop_id',
	fieldLabel: langs('Район города'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{PersonSprTerrDop_Code}</font>&nbsp;{PersonSprTerrDop_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwPersonSprTerrDop.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swpersonsprterrdop', sw.Promed.SwPersonSprTerrDop);

sw.Promed.SwKLSocrCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	triggerAction: 'all',
	displayField:'KLSocr_Nick',
	valueField: 'KLSocr_id',
	loadParams: null,
	fieldLabel: langs('Сокращение'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{KLSocr_Nick}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwKLSocrCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'KLSocr_id',    type:'int'},
				{name: 'KLSocr_Nick',  type:'string'}
			],
			key: 'KLSocr_id',
			sortInfo: {
				field: 'KLSocr_Nick'
			},
			tableName: 'KLSocr'
		});
		
		// В предыдушем варианте хранилище загружалось дважды, один раз
		// через MongoDBWork&m=getData, второй раз вместе MongoDBWork&m=getDataAll
		// Поэтому оставил доп.загрузку только если указаны loadParams
		// Возможно это участок вообще не будет работать корректно, т.к. все равно
		// следом вызывается MongoDBWork&m=getDataAll и возможно данные переезжаются
		// Если кто знает как сделать лучше - your are welcome
		this.on('render', function(combo){
			if (typeof this.loadParams === 'object') {
				combo.getStore().load(combo.loadParams);
			}
		});
	}
});

Ext.reg('swklsocrcombo', sw.Promed.SwKLSocrCombo);

sw.Promed.SwKLAreaStatCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'KLAreaStat',
		key: 'KLAreaStat_id',
		autoLoad: false,
		fields: [
			{name: 'KLAreaStat_id',    type:'int'},
			{name: 'KLAreaStat_Code', type:'int'},
			{name: 'KLArea_Name',  type:'string'},
			{name: 'KLCountry_id',  type:'int'},
			{name: 'KLRGN_id',  type:'int'},
			{name: 'KLSubRGN_id',  type:'int'},
			{name: 'KLCity_id',  type:'int'},
			{name: 'KLTown_id',  type:'int'}
		],
		sortInfo: {
			field: 'KLAreaStat_Code',
			direction: 'ASC'
		}
	}),
	displayField:'KLArea_Name',
	valueField: 'KLAreaStat_id',
	codeField: 'KLAreaStat_Code',
	editable: true,
	width: 500,
	fieldLabel: langs('Территория'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{KLAreaStat_Code}</font>&nbsp;{KLArea_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwKLAreaStatCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swklareastatcombo', sw.Promed.SwKLAreaStatCombo);

sw.Promed.SwBaseRemoteComboSingleTrigger = Ext.extend(Ext.form.ComboBox, {
	forceSelection: true,
	mode: 'remote',
	minChars: 1,
	resizable: true,
	selectOnFocus: true,
	initComponent: function() {
		if ( (this.width < 500 || typeof(this.width)=='undefined') && typeof(this.listWidth)=='undefined' )
			this.listWidth = 300;
		sw.Promed.SwBaseRemoteComboSingleTrigger.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swbaseremotecombosingletrigger', sw.Promed.SwBaseRemoteComboSingleTrigger);

sw.Promed.SwRegionCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: C_LOAD_REGIONCOMBO,
		key: 'Region_id',
		autoLoad: false,
		fields: [
			{name: 'Region_id',    type:'int'},
			{name: 'Socr_id', type: 'int'},
			{name: 'Region_Name',  type:'string'}
		],
		sortInfo: {
			field: 'Region_Name'
		}
	}),
	triggerAction: 'all',
	displayField:'Region_Name',
	valueField: 'Region_id',
	fieldLabel: langs('Регион'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{Region_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwRegionCombo.superclass.initComponent.apply(this, arguments);
	}
});

sw.Promed.SwRegionCombo.prototype.initComponent = Ext.form.TriggerField.prototype.initComponent;
sw.Promed.SwRegionCombo.prototype.getTrigger = Ext.form.TriggerField.prototype.getTrigger;
sw.Promed.SwRegionCombo.prototype.initTrigger = Ext.form.TriggerField.prototype.initTrigger;

Ext.reg('swregioncombo', sw.Promed.SwRegionCombo);

sw.Promed.SwUsersGroupsCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: C_USER_GETGROUP_LIST,
		key: 'Group_id',
		autoLoad: false,
		fields: [
			{name: 'Group_id',    type:'string'},
			{name: 'Group_Name', type: 'string'},
			{name: 'Group_Desc',  type:'string'},
			{name: 'Group_IsOnly', type: 'int'},
			{name: 'Group_IsBlocked', type: 'int'}
		],
		sortInfo: {
			field: 'Group_Desc'
		}
	}),
	triggerAction: 'all',
	displayField:'Group_Desc',
	valueField: 'Group_id',
	fieldLabel: langs('Группы'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{Group_Desc}&nbsp;'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwUsersGroupsCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swusersgroupscombo', sw.Promed.SwUsersGroupsCombo);

sw.Promed.SwLpuUnitCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: C_LPUUNIT_COMBO,
		baseParams: {Object:'LpuUnit', LpuUnit_id:'', LpuUnit_Name:'', LpuUnitType_SysNick:''},
		autoLoad: false,
		fields: [
			{name: 'LpuUnit_id', type:'int'},
			{name: 'LpuUnit_Code', type:'string'},
			{name: 'LpuUnit_Name', type:'string'},
			{name: 'LpuUnitType_SysNick', type:'string'},
			{name: 'LpuBuilding_id', type:'int'},
			{name: 'LpuBuilding_Name', type:'string'},
			{name: 'LpuUnit_IsNotFRMO', type:'int'},
			{name: 'LpuUnit_FRMOUnitID', type:'string'}
		],
		key: 'LpuUnit_id',
		sortInfo: {
			field: 'LpuUnit_Code'
		}
	}),
	triggerAction: 'all',
	editable: false,
	codeField: 'LpuUnit_Code',
	hiddenName:'LpuUnit_id',
	displayField:'LpuUnit_Name',
	valueField: 'LpuUnit_id',
	fieldLabel: langs('Группа отделений'),
	topLevel: false,
	tpl: new Ext.XTemplate('<tpl for="."><div class="x-combo-list-item">'+
				'<span style="color:red;">{LpuUnit_Code}</span> {LpuUnit_Name}'+
			'</div></tpl>'),
	initComponent: function()
	{
		if (this.topLevel)
		{

			this.tpl = new Ext.XTemplate(
				'<tpl for="."><div class="x-combo-list-item">'+
				'<span style="color:red;">{LpuUnit_Code}</span> {LpuUnit_Name} <span style="color:#777;">[{LpuBuilding_Name}]</span>' +
			'</div></tpl>');
		}
		sw.Promed.SwLpuUnitCombo.superclass.initComponent.apply(this, arguments);

	}
});

Ext.reg('swlpuunitcombo', sw.Promed.SwLpuUnitCombo);

// LpuUnitSet
sw.Promed.SwLpuUnitSetCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: C_LPUUNITSET_COMBO,
		baseParams: {Object:'LpuUnitSet', LpuUnitSet_id:'', LpuUnitSet_Code:'', LpuUnit_id:''},
		key: 'LpuUnitSet_id',
		autoLoad: false,
		fields: [
			{name: 'LpuUnitSet_id',    type:'int'},
			{name: 'LpuUnitSet_Code',  type:'string'},
			{name: 'LpuUnitSet_begDate',  type:'date', dateFormat: 'd.m.Y' },
			{name: 'LpuUnitSet_endDate',  type:'date', dateFormat: 'd.m.Y'}
		],
		sortInfo: {
			field: 'LpuUnitSet_Code'
		}
	}),
	triggerAction: 'all',
	editable: true,
	hiddenName:'LpuUnitSet_id',
	displayField:'LpuUnitSet_Code',
	valueField: 'LpuUnitSet_id',
	fieldLabel: langs('Код подр. ТФОМС'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{LpuUnitSet_Code}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwLpuUnitSetCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swlpuunitsetcombo', sw.Promed.SwLpuUnitSetCombo);


sw.Promed.SwLpuSectionCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	mode: 'local',
	store: new sw.Promed.Store({
		url: C_GETOBJECTLIST,
		baseParams: {Object:'LpuSection', LpuSection_id:'', LpuSection_Code:'', LpuSection_Name:'', Lpu_id: '', onDate: '', isStac: ''},
		key: 'LpuSection_id',
		autoLoad: false,
		fields: [
			{name: 'LpuSection_id', type:'int'},
			{name: 'LpuUnit_id', type:'int'},
			{name: 'LpuUnitType_id', type:'int'},
			{name: 'LpuUnitType_Code', type:'string'},
			{name: 'LpuUnitType_SysNick', type:'string'},
			{name: 'LpuSectionProfile_id', type:'int'},
			{name: 'LpuUnit_Name', type: 'string'},
			{name: 'LpuSection_Code', type:'string'},
			{name: 'LpuSection_Name', type:'string'},
            {name: 'LpuBuilding_id', type: 'string'}
		],
		sortInfo: {
			field: 'LpuSection_Name'
		}
	}),
	editable: true,
	forceSelection: true,
	codeField: 'LpuSection_Code',
	triggerAction: 'all',
	hiddenName:'LpuSection_id',
	displayField:'LpuSection_Name',
	valueField: 'LpuSection_id',
	fieldLabel: langs('Отделение'),
	separateStore: false,
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{LpuSection_Code}</font>&nbsp;{LpuSection_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwLpuSectionCombo.superclass.initComponent.apply(this, arguments);

		if(this.separateStore) {
			this.store = new sw.Promed.Store({
				url: C_GETOBJECTLIST,
				baseParams: {Object:'LpuSection', LpuSection_id:'', LpuSection_Code:'', LpuSection_Name:'', Lpu_id: '', onDate: '', isStac: ''},
				key: 'LpuSection_id',
				autoLoad: false,
				fields: [
					{name: 'LpuSection_id', type:'int'},
					{name: 'LpuUnit_id', type:'int'},
					{name: 'LpuUnitType_id', type:'int'},
					{name: 'LpuUnitType_Code', type:'string'},
					{name: 'LpuUnitType_SysNick', type:'string'},
					{name: 'LpuSectionProfile_id', type:'int'},
					{name: 'LpuUnit_Name', type: 'string'},
					{name: 'LpuSection_Code', type:'string'},
					{name: 'LpuSection_Name', type:'string'},
					{name: 'LpuBuilding_id', type: 'string'}
				],
				sortInfo: {
					field: 'LpuSection_Name'
				}
			});
		}

		this.addListener('blur', function(combo) {
			var index = combo.getStore().findBy(function(rec) {
				return (rec.get('LpuSection_id') == combo.getValue());
			});
			var record = combo.getStore().getAt(index);
			if ( record && !Ext.isEmpty(combo.getValue()) ) {
				combo.setRawValue(record.get('LpuSection_Code') + ". " + record.get('LpuSection_Name'));
			} else {
				combo.setRawValue('');
			}
		},this);
	}
});

Ext.reg('swlpusectioncombo', sw.Promed.SwLpuSectionCombo);

// Самая последняя загрузка справочника отделений
// при загрузке нужно использовать mode = combo
sw.Promed.SwLpuSectionLiteCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	mode: 'local',
	store: new sw.Promed.Store({
		url: C_LPUSECTION_LIST,
		key: 'LpuSection_id',
		autoLoad: false,
		fields: [
			{name: 'LpuSection_id', type:'int'},
			{name: 'LpuUnit_id', type:'int'},
			{name: 'LpuSection_Code', type:'string'},
			{name: 'LpuSection_Name', type:'string'}
		],
		sortInfo: {
			field: 'LpuSection_Name'
		}
	}),
	editable: false,
	codeField: 'LpuSection_Code',
	triggerAction: 'all',
	hiddenName:'LpuSection_id',
	displayField:'LpuSection_Name',
	valueField: 'LpuSection_id',
	fieldLabel: langs('Отделение'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{LpuSection_Code}</font>&nbsp;{LpuSection_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwLpuSectionLiteCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swlpusectionlitecombo', sw.Promed.SwLpuSectionLiteCombo);


sw.Promed.SwLpuSectionPidCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: C_LPUSECTION_PID,
		key: 'LpuSection_id',
		autoLoad: false,
		fields: [
			{name: 'LpuSection_id', type:'int'},
			{name: 'LpuSection_Code', type:'string'},
			{name: 'LpuSection_Name', type:'string'}
		],
		sortInfo: {
			field: 'LpuSection_Name'
		}
	}),
	editable: false,
	codeField: 'LpuSection_Code',
	triggerAction: 'all',
	hiddenName:'LpuSection_id',
	displayField:'LpuSection_Name',
	valueField: 'LpuSection_id',
	fieldLabel: langs('Отделение'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{LpuSection_Code}</font>&nbsp;{LpuSection_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwLpuSectionPidCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swlpusectionpidcombo', sw.Promed.SwLpuSectionPidCombo);


sw.Promed.SmpUnits = Ext.extend(Ext.form.ComboBox,
{
	displayField: 'LpuBuilding_Name',
	enableKeyEvents: true,
	fieldLabel: langs('Подразделение СМП'),
	forceSelection: true,
	hiddenName: 'LpuBuilding_id',
	baseParams: {showOperDpt: this.showOperDpt?this.showOperDpt:null},
	initComponent: function() {
		this.store = new Ext.data.JsonStore({
			autoLoad: true,
			baseParams: this.baseParams,
			fields: [
				{name: 'LpuBuilding_id', type: 'int'},
				{name: 'LpuBuilding_Code', type: 'int'},
				{name: 'LpuBuilding_Name', type: 'string'},
				{name: 'Lpu_id', type: 'int'},
				{name: 'Lpu_Nick', type: 'string'}
			],
			key: 'LpuBuilding_Code',
			sortInfo: {
				field: 'LpuBuilding_Name'
			},
			url: '/?c=CmpCallCard&m=loadSmpUnits',
			listeners: {
				beforeload: function() {
					if (Ext.isEmpty(getGlobalOptions().lpu_id)) {
						return false;
					}
				}
			}
		});
	},
	minChars: 2,
	minLength: 1,
	mode: 'remote',
	queryDelay: 1000,
	resizable: true,
	selectOnFocus: true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<h3>{LpuBuilding_Name}&nbsp;</h3>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'LpuBuilding_id'	
});

Ext.reg('swsmpunitscombo', sw.Promed.SmpUnits);



sw.Promed.SwLpuBuildingCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	mode: 'local',
	LpuBuildingType_id: '',
	autoLoad: false,
	editable: false,
	codeField: 'LpuBuilding_Code',
	triggerAction: 'all',
	hiddenName:'LpuBuilding_id',
	displayField:'LpuBuilding_Name',
	valueField: 'LpuBuilding_id',
	fieldLabel: langs('Подразделение'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{LpuBuilding_Code}</font>&nbsp;{LpuBuilding_Name}'+
			'</div></tpl>',
	initComponent: function() {
		this.store = new Ext.data.JsonStore({
			url: C_GETOBJECTLIST,
			baseParams: {Object:'LpuBuilding', LpuBuilding_id:'', LpuBuilding_Code:'', LpuBuilding_Name:'', Lpu_id:'', LpuBuildingType_id: this.LpuBuildingType_id },
			key: 'LpuBuilding_id',
			autoLoad: this.autoLoad,
			fields: [
				{name: 'LpuBuilding_id', type:'int'},
				{name: 'LpuBuilding_Code', type:'string'},
				{name: 'LpuBuilding_Name', type:'string'}
			],
			sortInfo: {
				field: 'LpuBuilding_Code'
			}
		});

		sw.Promed.SwLpuBuildingCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swlpubuildingcombo', sw.Promed.SwLpuBuildingCombo);


/** Загрузка справочника профилей, но только тех по которым в структуре данной МО есть отделения
 *
 */
// при загрузке нужно использовать mode = combo
sw.Promed.SwLpuSectionProfileLiteCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	mode: 'local',
	store: new sw.Promed.Store({
		url: '/?c=LpuStructure&m=getLpuSectionProfile',
		key: 'LpuSectionProfile_id',
		autoLoad: false,
		fields: [
			{name: 'LpuSectionProfile_id', type:'int'},
			{name: 'LpuSectionProfile_Code', type:'string'},
			{name: 'LpuSectionProfile_Name', type:'string'},
			{name: 'ProfileSpec_Name', type: 'string'}
		]/*,
		sortInfo: {
			field: 'LpuSectionProfile_Name'
		}*/
	}),
	editable: false,
	codeField: 'LpuSectionProfile_Code',
	triggerAction: 'all',
	hiddenName:'LpuSectionProfile_id',
	displayField:'LpuSectionProfile_Name',
	valueField: 'LpuSectionProfile_id',
	fieldLabel: langs('Профиль'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{LpuSectionProfile_Code}</font>&nbsp;{LpuSectionProfile_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwLpuSectionProfileLiteCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swlpusectionprofilelitecombo', sw.Promed.SwLpuSectionProfileLiteCombo);

sw.Promed.SwLpuStructureElementCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	allowBlank: true,
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: '/?c=LpuStructure&m=getLpuStructureElementList',
		key: 'LpuStructure_id',
		autoLoad: false,
		fields: [
			{name: 'LpuStructure_id',    type:'string'},
			{name: 'LpuStructure_Nick',  type:'string'},
			{name: 'LpuStructureElement_id',    type:'int'},
			{name: 'LpuStructureElement_Code',  type:'int'},
			{name: 'LpuStructureElement_Name',  type:'string'},
			{name: 'Lpu_id', type:'int'},
			{name: 'LpuBuilding_id', type:'int'},
			{name: 'LpuUnit_id', type:'int'},
			{name: 'LpuSection_id', type:'int'}
		]
	}),
	triggerAction: 'all',
	editable: true,
	displayField:'LpuStructureElement_Name',
	valueField: 'LpuStructure_id',
	fieldLabel: langs('Уровень МО'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
		'{LpuStructureElement_Name}'+
		'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwLpuStructureElementCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swlpustructureelementcombo', sw.Promed.SwLpuStructureElementCombo);

sw.Promed.SwPostCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: C_GETOBJECTLIST,
		baseParams: {Object:'Post', Post_id:'', Post_Name:'', Server_id:'check_it'},
		key: 'Post_id',
		autoLoad: false,
		fields: [
			{name: 'Post_id',    type:'int'},
			{name: 'Post_Name',  type:'string'}
		],
		sortInfo: {
			field: 'Post_Name'
		}
	}),
	triggerAction: 'all',
	editable: true,
	displayField:'Post_Name',
	valueField: 'Post_id',
	fieldLabel: langs('Должность'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{Post_Name}&nbsp;'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwPostCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swpostcombo', sw.Promed.SwPostCombo);

sw.Promed.SwPostSearchCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	triggerAction: 'all',
	editable: true,
	displayField:'Post_Name',
	valueField: 'Post_id',
	fieldLabel: langs('Должность'),
    searchMode: null,
	Org_id: null,
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
		'{Post_Name}&nbsp;'+
		'</div></tpl>',
	trigger2Class: 'x-form-search-trigger',
	onTrigger2Click: function() {
		var combo = this;

		var params = {};
        params.searchMode = combo.searchMode;
		params.Org_id = combo.Org_id;
		params.onSelect = function(data) {
			combo.getStore().load({
				params: {Post_curid: data.Post_id},
				callback: function() {
					combo.setValue(data.Post_id)
				}
			});
		};

		getWnd('swPostViewWindow').show(params);
	},
	setOrgId: function(Org_id) {
		this.Org_id = Org_id;
		this.store.baseParams.Org_id = Org_id;
	},
	initComponent: function() {
		sw.Promed.SwPostSearchCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			url: '/?c=Post&m=loadPostList',
			key: 'Post_id',
			autoLoad: false,
			fields: [
				{name: 'Post_id',    type:'int'},
				{name: 'Post_Name',  type:'string'}
			],
			sortInfo: {
				field: 'Post_Name'
			}
		});

        this.store.baseParams = {
            searchMode: this.searchMode
        };

        if (this.Org_id) {
        	this.setOrgId(this.Org_id);
		}
	}
});
Ext.reg('swpostsearchcombo', sw.Promed.SwPostSearchCombo);

sw.Promed.SwPostMedCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: C_GETOBJECTLIST,
		baseParams: {Object:'PostMed', PostMed_id:'', PostMed_Name:''/*, Server_id:'check_it'*/},
		key: 'PostMed_id',
		autoLoad: false,
		fields: [
			{name: 'PostMed_id',    type:'int'},
			{name: 'PostMed_Name',  type:'string'}
		],
		sortInfo: {
			field: 'PostMed_Name'
		}
	}),
	triggerAction: 'all',
	editable: true,
	displayField:'PostMed_Name',
	valueField: 'PostMed_id',
	fieldLabel: langs('Должность'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{PostMed_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwPostMedCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swpostmedcombo', sw.Promed.SwPostMedCombo);


// Дополнительный справочник на группе отделений (LpuUnit) - справочник редактируемый
sw.Promed.SwLpuUnitTypeDopCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: C_GETOBJECTLIST,
		baseParams: {Object:'LpuUnitTypeDop', LpuUnitTypeDop_id:'', LpuUnitTypeDop_Name:'', Server_id:'check_it'},
		key: 'LpuUnitTypeDop_id',
		autoLoad: false,
		fields: [
			{name: 'LpuUnitTypeDop_id',    type:'int'},
			{name: 'LpuUnitTypeDop_Name',  type:'string'}
		],
		sortInfo: {
			field: 'LpuUnitTypeDop_Name'
		}
	}),
	triggerAction: 'all',
	editable: true,
	displayField:'LpuUnitTypeDop_Name',
	valueField: 'LpuUnitTypeDop_id',
	fieldLabel: langs('Тип (доп.)'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{LpuUnitTypeDop_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwLpuUnitTypeDopCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swlpuunittypedopcombo', sw.Promed.SwLpuUnitTypeDopCombo);




sw.Promed.SwOrgUnionCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: C_GETOBJECTLIST,
		key: 'OrgUnion_id',
		autoLoad: false,
		fields: [
			{name: 'OrgUnion_id',    type:'int'},
			{name: 'OrgUnion_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OrgUnion_Name'
		}
	}),
	triggerAction: 'all',
	editable: true,
	displayField:'OrgUnion_Name',
	valueField: 'OrgUnion_id',
	fieldLabel: langs('Подразделение'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{OrgUnion_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOrgUnionCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('sworgunioncombo', sw.Promed.SwOrgUnionCombo);

/*sw.Promed.SwOrgUnionCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: C_GETOBJECTLIST,
//		baseParams: {Object:'OrgUnion', OrgUnion_id:'', OrgUnion_Name:''},
		key: 'OrgUnion_id',
		autoLoad: false,
		fields: [
			{name: 'OrgUnion_id',    type:'int'},
			{name: 'OrgUnion_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OrgUnion_Name'
		}
	}),
	triggerAction: 'all',
	displayField:'OrgUnion_Name',
	valueField: 'OrgUnion_id',
	fieldLabel: langs('Подразделение'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{OrgUnion_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOrgUnionCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('sworgunioncombo', sw.Promed.SwOrgUnionCombo);
*/

sw.Promed.SwSubRGNCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: C_LOAD_SUBREGIONCOMBO,
		key: 'SubRGN_id',
		autoLoad: false,
		fields: [
			{name: 'SubRGN_id',    type:'int'},
			{name: 'Socr_id', type: 'int'},
			{name: 'SubRGN_Name',  type:'string'}
		],
		sortInfo: {
			field: 'SubRGN_Name'
		}
	}),
	triggerAction: 'all',
	displayField:'SubRGN_Name',
	valueField: 'SubRGN_id',
	fieldLabel: langs('Район'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{SubRGN_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwSubRGNCombo.superclass.initComponent.apply(this, arguments);
	}
});
sw.Promed.SwSubRGNCombo.prototype.initComponent = Ext.form.TriggerField.prototype.initComponent;
sw.Promed.SwSubRGNCombo.prototype.getTrigger = Ext.form.TriggerField.prototype.getTrigger;
sw.Promed.SwSubRGNCombo.prototype.initTrigger = Ext.form.TriggerField.prototype.initTrigger;

Ext.reg('swsubrgncombo', sw.Promed.SwSubRGNCombo);

sw.Promed.SwCityCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: C_LOAD_CITYCOMBO,
		key: 'City_id',
		autoLoad: false,
		fields: [
			{name: 'City_id',    type:'int'},
			{name: 'Socr_id', type: 'int'},
			{name: 'City_Name',  type:'string'}
		],
		sortInfo: {
			field: 'City_Name'
		}
	}),
	triggerAction: 'all',
	displayField:'City_Name',
	valueField: 'City_id',
	fieldLabel: langs('Город'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{City_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCityCombo.superclass.initComponent.apply(this, arguments);
	}
});


sw.Promed.SwCityCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwCityCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwCityCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwCityCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwCityCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwCityCombo.prototype.onTrigger2Click = function() {};

Ext.reg('swcitycombo', sw.Promed.SwCityCombo);

sw.Promed.SwTownCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: C_LOAD_TOWNCOMBO,
		key: 'Town_id',
		autoLoad: false,
		fields: [
			{name: 'Town_id',    type:'int'},
			{name: 'Socr_id', type: 'int'},
			{name: 'Town_Name',  type:'string'}
		],
		sortInfo: {
			field: 'Town_Name'
		}
	}),
	triggerAction: 'all',
	displayField:'Town_Name',
	valueField: 'Town_id',
	fieldLabel: langs('Нас. пункт'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{Town_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwTownCombo.superclass.initComponent.apply(this, arguments);
	}
});

sw.Promed.SwTownCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwTownCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwTownCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwTownCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwTownCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwTownCombo.prototype.onTrigger2Click = function() {};

Ext.reg('swtowncombo', sw.Promed.SwTownCombo);

sw.Promed.SwStreetCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.data.JsonStore({
		url: C_LOAD_STREETCOMBO,
		key: 'Street_id',
		autoLoad: false,
		fields: [
			{name: 'Street_id',    type:'int'},
			{name: 'Socr_id', type: 'int'},
			{name: 'Street_Name',  type:'string'},
			{name: 'Socr_Nick',  type:'string'},
			{name: 'KLAdr_Ocatd',  type:'string'}
		],
		sortInfo: {
			field: 'Street_Name'
		}
	}),
	triggerAction: 'all',
	displayField:'Street_Name',
	valueField: 'Street_id',
	fieldLabel: langs('Улица'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{Street_Name} <span style="color:gray">{Socr_Nick}</span>'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwStreetCombo.superclass.initComponent.apply(this, arguments);
	}
});

//sw.Promed.SwStreetCombo.prototype.initComponent = Ext.form.TriggerField.prototype.initComponent;
//sw.Promed.SwStreetCombo.prototype.getTrigger = Ext.form.TriggerField.prototype.getTrigger;
//sw.Promed.SwStreetCombo.prototype.initTrigger = Ext.form.TriggerField.prototype.initTrigger;

Ext.reg('swstreetcombo', sw.Promed.SwStreetCombo);

sw.Promed.SwStreetAndUnformalizedAddressCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	initComponent: function() {
		sw.Promed.SwStreetAndUnformalizedAddressCombo.superclass.initComponent.apply(this, arguments);
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			url: C_LOAD_STREETSANDUNFORMALIZEDADDRESSCOMBO,
			key: 'StreetAndUnformalizedAddressDirectory_id',
			autoLoad: false,
			fields: [
				{name: 'StreetAndUnformalizedAddressDirectory_id',    type:'string'},
				{name: 'UnformalizedAddressDirectory_id',    type:'int'},
				{name: 'StreetAndUnformalizedAddressDirectory_Name',  type:'string'},
				{name: 'KLStreet_id',    type:'int'},
				{name: 'Socr_Nick',  type:'string'},
				{name: 'lat',  type:'string'},
				{name: 'lng',  type:'string'}
			],
			sortInfo: {
				field: 'StreetAndUnformalizedAddressDirectory_Name'
			}
		});
	},
	mode: 'local',
	tableName: 'StreetAndUnformalizedAddressDirectory',
	triggerAction: 'all',
	ctxSerach: true,
	displayField:'StreetAndUnformalizedAddressDirectory_Name',
	ignoreCodeField: true,
	valueField: 'StreetAndUnformalizedAddressDirectory_id',
	fieldLabel: langs('Неформализованный адрес'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{StreetAndUnformalizedAddressDirectory_Name} <span style="color:gray">{Socr_Nick}</span>'+
			'</div></tpl>',
	beforeBlur: function(){return false;},
	setValue: function(v) {
		sw.Promed.SwStreetAndUnformalizedAddressCombo.superclass.setValue.apply(this, arguments);
		var r = this.findRecord(this.valueField, v);
		if ( r ) {
			if ( r.get(this.valueField).toString().length > 0 && r.get(this.valueField) != -1  && r.get('Socr_Nick').toLowerCase()!='ул') {
				var text = r.get(this.displayField).toString() + '. ' + r.get('Socr_Nick');
			}
			else {
				var text = r.get(this.displayField);
			}
			
			if ( r.get(this.valueField).toString().length > 0 && this.el) {
				this.setRawValue(text);
			}
		}
	}
});

//sw.Promed.SwStreetAndUnformalizedAddressCombo.prototype.initComponent = Ext.form.TriggerField.prototype.initComponent;
//sw.Promed.SwStreetAndUnformalizedAddressCombo.prototype.getTrigger = Ext.form.TriggerField.prototype.getTrigger;
//sw.Promed.SwStreetAndUnformalizedAddressCombo.prototype.initTrigger = Ext.form.TriggerField.prototype.initTrigger;

sw.Promed.SwStreetAndUnformalizedAddressCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwStreetAndUnformalizedAddressCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwStreetAndUnformalizedAddressCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwStreetAndUnformalizedAddressCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwStreetAndUnformalizedAddressCombo.prototype.onTrigger2Click = this.onTrigger2Click;


Ext.reg('swstreetandunformalizedaddresscombo', sw.Promed.SwStreetAndUnformalizedAddressCombo);

sw.Promed.SwOrgCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	trigger1Class: 'x-form-search-trigger',
	triggerAction: 'all',
	displayField:'Org_Name',
	valueField: 'Org_id',
	needOrgType: false,
	needOrgOGRN: false,
	fieldLabel: langs('Место работы'),
	initComponent: function() {
		sw.Promed.SwOrgCombo.superclass.initComponent.apply(this, arguments);
		
		var combo = this;
		var baseParams = {};
		
		var fields = [
			{name: 'Org_id',    type:'int'},
			{name: 'Org_pid',    type:'int'},
			{name: 'Lpu_id',	type:'int'},
			{name: 'Org_Name',  type:'string'},
			{name: 'Org_begDate',  type:'string'},
			{name: 'Org_endDate',  type:'string'},
			{name: 'OrgStac_Code',  type:'string'},
			{name: 'Org_Nick',  type:'string'},
			{name: 'Org_Address', type:'string'}
		];
		
		if (this.needOrgType) {
			fields = fields.concat([{name: 'OrgType_Name',  type:'string'}, {name: 'OrgType_SysNick',  type:'string'}]);
			baseParams.needOrgType = true;
		}

		if (this.needOrgOGRN) {
			fields = fields.concat([{name: 'Org_OGRN',  type:'string'}]);
			baseParams.needOrgOGRN = true;
		}
		
		this.store = new Ext.data.JsonStore({
			url: C_ORG_LIST,
			editable: false,
			key: 'Org_id',
			autoLoad: false,
			fields: fields,
			baseParams: baseParams,
			sortInfo: {
				field: combo.displayField
			}
		});
	}
});

Ext.reg('sworgcombo', sw.Promed.SwOrgCombo);

sw.Promed.SwPersonCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	trigger1Class: 'x-form-search-trigger',
	store: new Ext.data.JsonStore({
		url: '/?c=Person&m=getPersonCombo',
		editable: false,
		key: 'Person_id',
		autoLoad: false,
		fields: [
			{name: 'Person_id',    type:'int'},
			{name: 'Person_Fio',  type:'string'}
		],
		sortInfo: {
			field: 'Person_Fio'
		}
	}),
	triggerAction: 'all',
	displayField:'Person_Fio',
	valueField: 'Person_id',
	fieldLabel: langs('Представитель'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{Person_Fio}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwPersonCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swpersoncombo', sw.Promed.SwPersonCombo);

sw.Promed.SwDrugMnnCombo = Ext.extend(Ext.form.ComboBox,
{
	displayField: 'DrugMnn_Name',
	enableKeyEvents: true,
	fieldLabel: langs('МНН'),
	forceSelection: true,
	hiddenName: 'DrugMnn_id',
	initComponent: function() {
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{name: 'DrugMnn_id', type: 'int'},
				{name: 'DrugMnn_Code', type: 'int'},
				{name: 'DrugMnn_Name', type: 'string'}
			],
			key: 'DrugMnn_id',
			sortInfo: {
				field: 'DrugMnn_Name'
			},
			url: C_DRUG_MNN_LIST
		});
	},
	minChars: 2,
	minLength: 1,
	mode: 'remote',
	onTrigger2Click: Ext.emptyFn,
	queryDelay: 1000,
	resizable: true,
	selectOnFocus: true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<h3>{DrugMnn_Name}&nbsp;</h3>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'DrugMnn_id'
});
Ext.reg('swdrugmnncombo', sw.Promed.SwDrugMnnCombo);

// sw.Promed.SwDrugMnnCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwDrugMnnCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwDrugMnnCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwDrugMnnCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwDrugMnnCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwDrugMnnCombo.prototype.onTrigger2Click = this.onTrigger2Click;


sw.Promed.swDrugMnnVznCombo = Ext.extend(Ext.form.ComboBox,
{
	displayField: 'DrugMnn_Name',
	enableKeyEvents: true,
	fieldLabel: langs('МНН'),
	forceSelection: true,
	hiddenName: 'DrugMnn_id',
	initComponent: function() {
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{name: 'DrugMnn_id', type: 'int'},
				{name: 'DrugMnn_Code', type: 'int'},
				{name: 'DrugMnn_Name', type: 'string'},
                                {name: 'vzn', type: 'int' }
			],
			key: 'DrugMnn_id',
			sortInfo: {
				field: 'DrugMnn_Name'
			},
			url: C_DRUG_MNN_LIST
		});
	},
	minChars: 2,
	minLength: 1,
	mode: 'remote',
	onTrigger2Click: Ext.emptyFn,
	queryDelay: 1000,
	resizable: true,
	selectOnFocus: true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<h3>{DrugMnn_Name}&nbsp;</h3>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'DrugMnn_id'
});
Ext.reg('swDrugMnnVznCombo', sw.Promed.swDrugMnnVznCombo);

sw.Promed.swDrugMnnVznCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.swDrugMnnVznCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.swDrugMnnVznCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.swDrugMnnVznCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.swDrugMnnVznCombo.prototype.onTrigger2Click = this.onTrigger2Click;



sw.Promed.SwDrugMnnDispCombo = Ext.extend(Ext.form.ComboBox,
{
	baseFilterFn: null,
	baseFilterScope: null,

	setBaseFilter: function(fn, scope)
	{
		this.baseFilterFn = fn;
		this.baseFilterScope = scope || this;
		this.store.filterBy(fn, scope);
	},

	clearBaseFilter: function()
	{
		this.baseFilterFn = null;
		this.baseFilterScope = null;
	},

	doQuery: function(q, forceAll) {
		if (q === undefined || q === null)
		{
			q = '';
		}

		var qe = {
			query: q,
			forceAll: forceAll,
			combo: this,
			cancel: false
		};

		if (this.fireEvent('beforequery', qe) === false || qe.cancel)
		{
			return false;
		}

		q = qe.query;
		forceAll = qe.forceAll;

		if (q.length >= this.minChars)
		{
			if (this.lastQuery != q)
			{
				this.lastQuery = q;
				this.selectedIndex = -1;

				if (this.baseFilterFn != null)
				{
					// Apply the filter on top of the base filter
					this.getStore().filterBy(function(record, id) {
						var result = false;
						result = this.baseFilterFn.call(this.baseFilterScope, record, id);
						if (result)
						{
							var patt = new RegExp('^' + q.toLowerCase());
							result = patt.test(record.data[this.displayField].toLowerCase());
							// if (q.length > 0 && record.data[this.displayField].toString().substr(0, q.length).toLowerCase() != q.toLowerCase())
							// {
							//	result = false;
							// }
						}
						return result;
					}, this);
				}
				else
				{
					this.getStore().filter(this.displayField, q);
				}

				this.onLoad();
			}
			else
			{
				this.selectedIndex = -1;
				this.onLoad();
			}
		}
	},
	displayField: 'DrugMnn_Name',
	enableKeyEvents: true,
	fieldLabel: langs('МНН'),
	forceSelection: true,
	hiddenName: 'DrugMnn_id',
	initComponent: function() {
		sw.Promed.SwDrugMnnDispCombo.superclass.initComponent.apply(this, arguments);
	},
	minChars: 1,
	minLength: 1,
	mode: 'local',
	onTrigger2Click: Ext.emptyFn,
	resizable: true,
	selectOnFocus: true,
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'DrugMnnKey_id', type: 'int'},
			{name: 'DrugMnn_id', type: 'int'},
			{name: 'DrugMnn_Code', type: 'int'},
			{name: 'DrugMnn_Name', type: 'string'},
			{name: 'Drug_IsKEK', type: 'int'},
			{name: 'PrivilegeType_id', type: 'int'}
		],
		key: 'DrugMnnKey_id',
		sortInfo: {
			field: 'DrugMnn_Name'
		},
		tableName: 'DrugFed'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<h3>{DrugMnn_Name}</h3>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'DrugMnn_id'
});
Ext.reg('swdrugmnndispcombo', sw.Promed.SwDrugMnnDispCombo);

sw.Promed.SwDrugMnnDispCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwDrugMnnDispCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwDrugMnnDispCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwDrugMnnDispCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwDrugMnnDispCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwDrugMnnDispCombo.prototype.onTrigger2Click = this.onTrigger2Click;

sw.Promed.SwDrugCombo = Ext.extend(Ext.form.ComboBox,
{
	allowBlank: false,
	displayField: 'Drug_Name',
	enableKeyEvents: true,
	fieldLabel: langs('Торговое наимен-е'),
	forceSelection: true,
	hiddenName: 'Drug_id',
    is_mi_1: false,
	initComponent: function() {
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);

		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'Drug_id'
			}, [
				{name: 'Drug_Name', mapping: 'Drug_Name'},
				{name: 'Drug_Code', mapping: 'Drug_Code'},
				{name: 'Drug_id', mapping: 'Drug_id'},
				{name: 'DrugMnn_id', mapping: 'DrugMnn_id'},
				{name: 'Drug_Price', mapping: 'Drug_Price'},
				{name: 'Drug_IsKEK', mapping: 'Drug_IsKEK'},
				{name: 'Drug_IsKEK_Code', mapping: 'Drug_IsKEK_Code'},
				{name: 'DrugOstat_Flag', mapping: 'DrugOstat_Flag'}
			]),
			url: C_DRUG_REC_LIST
		});
	},
	minChars: 2,
	minLength: 1,
	mode: 'remote',
	onTrigger2Click: Ext.emptyFn,
	resizable: true,
	selectOnFocus: true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<h3>{Drug_Name}&nbsp;</h3>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'Drug_id'
});
Ext.reg('swdrugcombo', sw.Promed.SwDrugCombo);

// sw.Promed.SwDrugCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwDrugCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwDrugCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwDrugCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwDrugCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwDrugCombo.prototype.onTrigger2Click = this.onTrigger2Click;

sw.Promed.SwDrugRlsCombo = Ext.extend(Ext.form.ComboBox,
    {
        allowBlank: false,
        displayField: 'Drug_Name',
        enableKeyEvents: true,
        fieldLabel: langs('Наименование'),
        forceSelection: true,
        hiddenName: 'Drug_id',
        initComponent: function() {
            Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);

            this.store = new Ext.data.Store({
                autoLoad: false,
                reader: new Ext.data.JsonReader({
                    id: 'Drug_id'
                }, [
                    {name: 'Drug_Name', mapping: 'Drug_Name'},
                    {name: 'Drug_Code', mapping: 'Drug_Code'},
                    {name: 'Drug_id', mapping: 'Drug_id'},
                    {name: 'Drug_Ean', mapping: 'Drug_Ean'}/*,
                    {name: 'DrugMnn_id', mapping: 'DrugMnn_id'},
                    {name: 'Drug_Price', mapping: 'Drug_Price'},
                    {name: 'Drug_IsKEK', mapping: 'Drug_IsKEK'},
                    {name: 'Drug_IsKEK_Code', mapping: 'Drug_IsKEK_Code'},
                    {name: 'DrugOstat_Flag', mapping: 'DrugOstat_Flag'}*/
                ]),
                url: '/?c=Drug&m=SearchDrugRlsList'
            });
        },
        minChars: 2,
        minLength: 1,
        mode: 'remote',
        onTrigger2Click: Ext.emptyFn,
        resizable: true,
        selectOnFocus: true,
        tpl: new Ext.XTemplate(
            '<tpl for="."><div class="x-combo-list-item">',
            '<h3>{Drug_Name}&nbsp;</h3>',
            '</div></tpl>'
        ),
        triggerAction: 'all',
        valueField: 'Drug_id'
    });
Ext.reg('swdrugrlscombo', sw.Promed.SwDrugRlsCombo);

// sw.Promed.SwDrugCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwDrugRlsCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwDrugRlsCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwDrugRlsCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwDrugRlsCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwDrugRlsCombo.prototype.onTrigger2Click = this.onTrigger2Click;

// 
sw.Promed.SwRefValuesCombo = Ext.extend(Ext.form.ComboBox,
{
	allowBlank: false,
	displayField: 'RefValues_Nick',
	enableKeyEvents: true,
	fieldLabel: langs('Референтное значение'),
	forceSelection: false,
	hiddenName: 'RefValues_id',
	initComponent: function() {
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);
		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'RefValues_id'
			}, [
				{name: 'RefValues_id', type:'int'},
				{name: 'RefValues_Code', type:'string'},
				{name: 'RefValues_Name', type:'string'},
				{name: 'RefValues_Nick', type:'string'},
				{name: 'RefMaterial_Name', type:'string'},
				{name: 'RefValuesType_id', type:'int'},
				{name: 'RefCategory_id', type:'int'},
				{name: 'RefCategory_Name', type:'string'},
				{name: 'RefValues_LowerLimit', type:'float'},
				{name: 'RefValues_UpperLimit', type:'float'},
				{name: 'RefValuesUnit_Name', type:'string'}
			]),
			url: C_REFVALUES_LIST
		});
	},
	loadingText: langs('Идет поиск...'),
	minChars: 2,
	minLength: 1,
	mode: 'remote',
	onTrigger2Click: Ext.emptyFn,
	resizable: true,
	selectOnFocus: true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<span>{RefValues_Nick}&nbsp;({RefMaterial_Name}):&nbsp;{RefValues_LowerLimit}-{RefValues_UpperLimit}&nbsp;{RefValuesUnit_Name}</span>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'RefValues_id'
});
Ext.reg('swrefvaluescombo', sw.Promed.SwRefValuesCombo);
// sw.Promed.SwDrugCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwRefValuesCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwRefValuesCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwRefValuesCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwRefValuesCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwRefValuesCombo.prototype.onTrigger2Click = this.onTrigger2Click;

sw.Promed.SwUslugaGostCombo = Ext.extend(Ext.form.ComboBox,
{
	allowBlank: false,
	displayField: 'UslugaGost_Name',
	enableKeyEvents: true,
	fieldLabel: langs('Услуга ГОСТ'),
	forceSelection: false,
	hiddenName: 'UslugaGost_id',
	initComponent: function() {
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);
		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'UslugaGost_id'
			}, [
				{name: 'UslugaGost_id', mapping: 'UslugaGost_id'},
				{name: 'UslugaGost_Code', mapping: 'UslugaGost_Code'},
				{name: 'UslugaGost_Name', mapping: 'UslugaGost_Name'},
				{name: 'UslugaGost_Level', mapping: 'UslugaGost_Level'},
				{name: 'UslugaGost_pid', mapping: 'UslugaGost_pid'}
			]),
			url: C_USLUGAGOST_LIST
		});
		
		// Add listeners on select
		/*
		this.addListener('select', function(combo, record, index) {
			if ( record.get(combo.valueField) ) {
				combo.setRawValue(record.get('UslugaGost_Code') + ". " + record.get('UslugaGost_Name'));
			}
		}, this);
		*/
		// Add listeners on blur
		this.addListener('blur', function(combo) {
			this.dqTask.cancel();
			combo.collapse();
			/*
			if ( combo.getRawValue() == '' )
			{
				combo.setValue('');
			}
			else
			{
				var patt = new RegExp("^[0-9]+");
				var store = combo.getStore();
				var val = '';

				var sr = patt.exec(this.getRawValue().toString());

				if (sr == null)
				{
					val = '';
				}
				else
				{
					val = sr[0];
				}
				this.getStore().load({
					callback: function(rec, opt) {
						if ( rec.length > 0 && rec[0].get('UslugaGost_id') != '' )
						{
							this.setValue(rec[0].get(this.valueField));
							this.setRawValue(rec[0].get('UslugaGost_Code') + ". " + rec[0].get('UslugaGost_Name'));
						}
						else
						{
							this.setValue('');
							this.setRawValue('');
						}
					}.createDelegate(this),
					scope: this
				});
			}*/
		}, this);

	},
	loadingText: langs('Идет поиск...'),
	emptyText: langs('Введите код услуги ГОСТ...'),
	minChars: 2,
	minLength: 1,
	mode: 'remote',
	onTrigger2Click: Ext.emptyFn,
	resizable: true,
	selectOnFocus: true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 70px;"><font color="red">{UslugaGost_Code}.</font></td><td><h3>{UslugaGost_Name}</h3></td></tr></table>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'UslugaGost_id'
});
Ext.reg('swuslugagostcombo', sw.Promed.SwUslugaGostCombo);
// sw.Promed.SwDrugCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwUslugaGostCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwUslugaGostCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwUslugaGostCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwUslugaGostCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwUslugaGostCombo.prototype.onTrigger2Click = this.onTrigger2Click;


/* Комбобокс выбора медикамента в аптеке */
sw.Promed.SwDrugFarmCombo = Ext.extend(Ext.form.ComboBox,
{
	allowBlank: false,
	displayField: 'Drug_Name',
	enableKeyEvents: true,
	fieldLabel: langs('Медикамент'),
	forceSelection: true,
	hiddenName: 'Drug_id',
	anchor: '100%',
	onTrigger2Click: function() 
	{
		
		if (this.disabled)
			return false;
		//var win = Ext.getCmp('UslugaComplexEditForm');
		var combo = this;
		if (!this.formList)
		{
			this.formList = new sw.Promed.swListSearchWindow(
			{
				title: langs('Поиск медикамента'),
				id: 'DrugWinSearch',
				object: 'Drug',
				store: this.getStore(),
				useBaseParams: true
			});
		}
		this.formList.show(
		{
			onSelect: function(data) 
			{
				// подгрузить в компонент значение 
				this.getStore().baseParams.Drug_id=data['Drug_id'];
				this.getStore().load({
					callback: function() {
						this.setValue(data['Drug_id']);
						this.fireEvent('change', this, data['Drug_id'], data['Drug_id']);
						this.getStore().baseParams.Drug_id=null;
					}.createDelegate(this)
				});
				
				// и выбрать его 
				
			}.createDelegate(this), 
			onHide: function() 
			{
				this.focus(false);
			}.createDelegate(this)
		});
		return false;
	},
	initComponent: function() {
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);
		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'Drug_id'
			}, [
				{name: 'Drug_Fas', mapping: 'Drug_Fas'},
				{name: 'Drug_id', mapping: 'Drug_id'},
				{name: 'Drug_Code', mapping: 'Drug_Code'},
				{name: 'Drug_Name', mapping: 'Drug_Name'},
				{name: 'DrugMnn_id', mapping: 'DrugMnn_id'},
				{name: 'DrugForm_Name', mapping: 'DrugForm_Name'},
				{name: 'DrugUnit_Name', mapping: 'DrugUnit_Name'}
			]),
			url: '/?c=Farmacy&m=loadDrugList'
		});
		// Add listeners
		this.addListener('keydown', function(inp, e) 
			{
				if (e.getKey() == e.DELETE || e.getKey() == e.F4)
				{
					e.stopEvent();
					if (e.browserEvent.stopPropagation)
					{
						e.browserEvent.stopPropagation();
					}
					else
					{
						e.browserEvent.cancelBubble = true;
					}
					if (e.browserEvent.preventDefault)
					{
						e.browserEvent.preventDefault();
					}
					else
					{
						e.browserEvent.returnValue = false;
					}

					e.returnValue = false;

					if (Ext.isIE)
					{
						e.browserEvent.keyCode = 0;
						e.browserEvent.which = 0;
					}
					switch (e.getKey())
					{
						case e.DELETE:
							inp.clearValue();
							inp.setRawValue(null);
							break;
						case e.F4:
							inp.onTrigger2Click();
							break;
					}
				}
			},
			this);
	},
	loadingText: langs('Идет поиск...'),
	minChars: 1,
	minLength: 1,
	mode: 'remote',
	minLengthText: langs('Поле должно быть заполнено'),
	resizable: true,
	selectOnFocus: true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item" style="white-space:normal;">',
		'<h3 style="min-height:30px;">{Drug_Name}&nbsp;</h3>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'Drug_id'
});
Ext.reg('swdrugfarmcombo', sw.Promed.SwDrugFarmCombo);
//sw.Promed.SwDrugCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwDrugFarmCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwDrugFarmCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwDrugFarmCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwDrugFarmCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
//sw.Promed.SwDrugFarmCombo.prototype.onTrigger2Click = this.onTrigger2Click;

sw.Promed.SwEvnDrugPrepCombo = Ext.extend(Ext.form.ComboBox,{
	drugField: 'Drug_id',
	drugPrepField: 'DrugPrepFas_id',
	fieldLabel: langs('Медикамент'),
	hiddenName: 'DrugPrepFas_id',
	displayField: 'DrugPrep_Name',
	enableKeyEvents: true,
	forceSelection: true,
	anchor: '98%',
	loadingText: langs('Идет поиск...'),
	queryDelay: 500,
	minChars: 3,
	minLength: 1,
	mode: 'remote',
	minLengthText: langs('Поле должно быть заполнено'),
	selectOnFocus: true,
	tpl: new Ext.XTemplate(
		// '<tpl for="."><div class="x-combo-list-item">',
		// '<h3>{DrugPrep_Name}&nbsp;</h3>',
		// '</div></tpl>'
		'<tpl for="."><div class="x-combo-list-item" {[this.titleSet(values.DrugPrep_Name, values.hintPackagingData, values.hintRegistrationData, values.hintPRUP, values.FirmNames)]}>',
		'<h3>{DrugPrep_Name}&nbsp;</h3>',
		'</div></tpl>',
		{
			titleSet: function(str1,str2,str3,str4, firmNames){
				var mark = '&#8226;';
				var br = '&#013;';
				var bodyHint = '';
				var hintstr1 = (str1) ? str1.replace(/"/g, "&#8242;"): '';
				var hintstr2 = '';
				if(str2){
		    		if(firmNames){
						var pr = firmNames;
						pr = pr.replace('(', '\\(');
						pr = pr.replace(')', '\\)');
						var re = new RegExp("(, |^)"+pr+".*");
						hintstr2 = str2.replace(re, '');
						hintstr2 = hintstr2.replace(/"/g, "&#8242;");
		        	}else{
		        		hintstr2 = str2.replace(/"/g, "&#8242;");
		        	}
		    	}
			var hintstr3 = (str3) ? str3.replace(/"/g, "&#8242;"): '';
			var hintstr4 = (str4) ? str4.replace(/"/g, "&#8242;"): '';

			if(hintstr1){
				bodyHint += mark + ' Торговое наименование: ' + hintstr1 + br;
			}
			if(hintstr2){
				if(hintstr2.slice(-1) == ',') hintstr2=hintstr2.slice(0, -1);
				bodyHint += mark + ' Данные об упаковке: ' + hintstr2 + br;
			}
			if(hintstr3){
				if(hintstr3.slice(-1) == ',') hintstr3=hintstr3.slice(0, -1);
				bodyHint += mark + ' Данные о регистрации: ' + hintstr3 + br;
			}
			if(hintstr4){
				bodyHint += mark + ' Пр./Уп.: ' + hintstr4;
			}
			return 'title="'+bodyHint+'"';
            }
        }
	),
	triggerAction: 'all',
	valueField: 'DrugPrepFas_id',
	onTrigger2Click: function()
	{
		if (this.disabled)
			return false;
		var combo = this;
		// Именно для этого комбо логика несколько иная
		if (!this.formList)
		{
			if (Ext.getCmp('DrugPrepWinSearch')) {
				this.formList = Ext.getCmp('DrugPrepWinSearch');
			} else {
				this.formList = new sw.Promed.swListSearchWindow({
					//params: {
					title: langs('Поиск медикамента'),
					id: 'DrugPrepWinSearch',
					object: 'Drug',
					modal: false,
					//maximizable: true,
					maximized: true,
					paging: true,
					prefix: 'dprws',
					dataUrl: '/?c=Farmacy&m=loadDrugMultiList',
					columns: true,
					stringfields:
						[
							{name: 'Drug_id', key: true},
							{name: 'DrugPrepFas_id', hidden: true},
							{name: 'DrugTorg_Name',  headerName:langs('Торговое наименование/Мнн') ,header: langs('Торговое наименование'), isfilter:true, columnWidth: '.4'},
							{name: 'DrugMnn',  header: langs('МНН'), width: 200},
							{name: 'DrugForm_Name', header: langs('Форма выпуска'), width: 120,isfilter:true, columnWidth: '.14'},
							{name: 'Drug_Dose', header: langs('Дозировка'), width: 80, isfilter:true, columnWidth: '.14'},
							{name: 'Drug_Fas', header: langs('Фасовка'), width: 80},
							{name: 'Drug_PackName', header: langs('Упаковка'), width: 800},
							{name: 'Drug_Firm', header: langs('Производитель'), width: 180, isfilter:true, columnWidth: '.3'},
							{name: 'Drug_Ean', header: 'EAN', width: 80},
							{name: 'Drug_RegNum', header: langs('РУ'), width: 100}
						],
					useBaseParams: true
					//}
				});
			}
		}
		// выбираем компонент
		var combo = null;
		if (this.drugPrepField) {
			var form = this.findForm();
			if (form)
				combo = form.getForm().findField(this.drugPrepField);
		}
		else
			combo = this;
		var params = (combo.getStore().baseParams)?combo.getStore().baseParams:{};
		params.DrugPrepFas_id = null;
		params.mode = 'ostat';
		combo.collapse();
		this.collapse();
		this.formList.show({
			params:params,
			onSelect: function(data)
			{
				// на форме должно быть два компонента
				var cp = this.findForm().getForm().findField((this.drugField)?this.drugField:'Drug_id');
				cp.getStore().removeAll();
				cp.clearValue();
				combo.hasFocus = false;
				// Читаем DrugPrepFas
				cp.getStore().baseParams.DrugPrepFas_id=data['DrugPrepFas_id'];
				cp.getStore().baseParams.query=null;
				cp.getStore().load({
					callback: function() {
						this.setValue(data['DrugPrepFas_id']);
						cp.setValue(data['Drug_id']);

						this.startValue = this.getValue();
						cp.startValue = cp.getValue();

						cp.fireEvent('change', cp, data['Drug_id'], data['Drug_id']);
						combo.hasFocus = true;
						combo.getStore().baseParams.DrugPrepFas_id=null;
					}.createDelegate(combo)
				});
			}.createDelegate(this),
			onHide: function()
			{
				this.focus(false);
			}.createDelegate(this)
		});
		return false;
	},
	initComponent: function() {
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);
		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'DrugPrepFas_id'
			}, [
				{name: 'DrugPrep_id', mapping: 'DrugPrep_id'},
				{name: 'DrugPrep_Name', mapping: 'DrugPrep_Name'},
				{name: 'DrugPrepFas_id', mapping: 'DrugPrepFas_id'},
				{name: 'Storage_id', mapping: 'Storage_id', type: 'int'},
				{name: 'hintPackagingData', mapping: 'hintPackagingData'},
				{name: 'hintRegistrationData', mapping: 'hintRegistrationData'},
				{name: 'hintPRUP', mapping: 'hintPRUP'},
				{name: 'FirmNames', mapping: 'FirmNames'}
			]),
			url: '/?c=EvnDrug&m=loadDrugPrepList'
		});

		this.addListener('keydown', function(inp, e) {
			if (e.getKey() == e.DELETE || e.getKey() == e.F4) {
				e.stopEvent();
				if (e.browserEvent.stopPropagation) {
					e.browserEvent.stopPropagation();
				} else {
					e.browserEvent.cancelBubble = true;
				}
				if (e.browserEvent.preventDefault) {
					e.browserEvent.preventDefault();
				} else {
					e.browserEvent.returnValue = false;
				}

				e.returnValue = false;

				if (Ext.isIE) {
					e.browserEvent.keyCode = 0;
					e.browserEvent.which = 0;
				}
				switch (e.getKey()) {
					case e.DELETE:
						inp.clearValue();
						inp.setRawValue(null);
						break;
					case e.F4:
						inp.onTrigger2Click();
						break;
				}
			}
		}, this);
	}
});
Ext.reg('swevndrugprepcombo', sw.Promed.SwEvnDrugPrepCombo);
sw.Promed.SwEvnDrugPrepCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwEvnDrugPrepCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwEvnDrugPrepCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwEvnDrugPrepCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;

sw.Promed.SwEvnDrugPackCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	mode: 'remote',
	enableKeyEvents: true,
	fieldLabel: langs('Упаковка'),
	hiddenName: 'Drug_id',
	anchor: '100%',
	editable: false,
	lastQuery: '',
	displayField: 'Drug_Name',
	drugPrepField: 'DrugPrepFas_id',
	drugField: 'Drug_id',
	valueField: 'Drug_id',
	resizable: true,
	selectOnFocus: true,
	triggerAction: 'all',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<h3>{Drug_Name}&nbsp;</h3>',
		'</div></tpl>'
	),
	onTrigger2Click: function()
	{
		if (this.disabled)
			return false;
		var combo = this;
// Именно для этого комбо логика несколько иная
		if (!this.formList)
		{
			if (Ext.getCmp('DrugPackWinSearch')) {
				this.formList = Ext.getCmp('DrugPackWinSearch');
			} else {
				this.formList = new sw.Promed.swListSearchWindow(
				{
					//params: {
					title: langs('Поиск медикамента'),
					id: 'DrugPackWinSearch',
					object: 'Drug',
					modal: false,
					//maximizable: true,
					maximized: true,
					paging: true,
					columns: true,
					prefix: 'dpckws',
					dataUrl: '/?c=Farmacy&m=loadDrugMultiList',
					stringfields:
						[
							{name: 'Drug_id', key: true},
							{name: 'DrugPrepFas_id', hidden: true},
							{name: 'DrugTorg_Name', autoexpand: true, header: langs('Торговое наименование'), isfilter:true},
							{name: 'DrugForm_Name', header: langs('Форма выпуска'), width: 140, isfilter:true},
							{name: 'Drug_Dose', header: langs('Дозировка'), width: 100, isfilter:true},
							{name: 'Drug_Fas', header: langs('Фасовка'), width: 100},
							{name: 'Drug_PackName', header: langs('Упаковка'), width: 100},
							{name: 'Drug_Firm', header: langs('Производитель'), width: 200, isfilter:true},
							{name: 'Drug_Ean', header: 'EAN', width: 100},
							{name: 'Drug_RegNum', header: langs('РУ'), width: 120}
						],
					useBaseParams: true
					//}
				});
			}
		}
// выбираем компонент
		var combo = null;
		if (this.drugPrepField)
		{
			var form = this.findForm();
			if (form)
				combo = form.getForm().findField(this.drugPrepField);
		}
		else
			combo = this;

		var params = (combo.getStore().baseParams)?combo.getStore().baseParams:{};
		params.DrugPrepFas_id = null;
		params.mode = 'ostat';

		combo.collapse();
		this.collapse();

		this.formList.show(
		{
			params:params,
			onSelect: function(data)
			{
				// на форме должно быть два компонента
				var cp = this.findForm().getForm().findField((this.drugField)?this.drugField:'Drug_id');
				cp.getStore().removeAll();
				cp.clearValue();
				cp.hasFocus = false;
				// Читаем DrugPrepFas
				cp.getStore().baseParams.DrugPrepFas_id=data['DrugPrepFas_id'];
				cp.getStore().load({
					callback: function() {
						this.setValue(data['DrugPrepFas_id']);
						cp.setValue(data['Drug_id']);

						this.startValue = this.getValue();
						cp.startValue = cp.getValue();

						cp.fireEvent('change', cp, data['Drug_id'], data['Drug_id']);

					}.createDelegate(combo)
				});
			}.createDelegate(this),
			onHide: function()
			{
				this.focus(false);
			}.createDelegate(this)
		});
		return false;
	},
	initComponent: function() {
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);
		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'Drug_id'
			}, [
				{name: 'Drug_Fas', mapping: 'Drug_Fas'},
				{name: 'DrugPrepFas_id', mapping: 'DrugPrepFas_id'},
				{name: 'Drug_id', mapping: 'Drug_id'},
				{name: 'Drug_Code', mapping: 'Drug_Code'},
				{name: 'Drug_Name', mapping: 'Drug_Name'},
				{name: 'Drug_FullName', mapping: 'Drug_FullName'},
				{name: 'DrugForm_Name', mapping: 'DrugForm_Name'},
				{name: 'DrugUnit_Name', mapping: 'DrugUnit_Name'},
                {name: 'GoodsUnit_bid', mapping: 'GoodsUnit_bid'},
                {name: 'GoodsUnit_bName', mapping: 'GoodsUnit_bName'},
                {name: 'GoodsPackCount_bCount', mapping: 'GoodsPackCount_bCount'}
			]),
			url: '/?c=EvnDrug&m=loadDrugList'
		});

		this.addListener('keydown', function(inp, e) {
			if (e.getKey() == e.DELETE || e.getKey() == e.F4) {
				e.stopEvent();
				if (e.browserEvent.stopPropagation) {
					e.browserEvent.stopPropagation();
				} else {
					e.browserEvent.cancelBubble = true;
				}
				if (e.browserEvent.preventDefault) {
					e.browserEvent.preventDefault();
				} else {
					e.browserEvent.returnValue = false;
				}

				e.returnValue = false;

				if (Ext.isIE) {
					e.browserEvent.keyCode = 0;
					e.browserEvent.which = 0;
				}
				switch (e.getKey()) {
					case e.DELETE:
						inp.clearValue();
						inp.setRawValue(null);
						break;
					case e.F4:
						inp.onTrigger2Click();
						break;
				}
			}
		}, this);
	}
});
Ext.reg('swevndrugpackcombo', sw.Promed.SwEvnDrugPackCombo);
sw.Promed.SwEvnDrugPackCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwEvnDrugPackCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwEvnDrugPackCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwEvnDrugPackCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;

/**
 * Два взаимосвязанных компонента выбора медикамента в аптеке 
 * Комбобокс №1 (медикамент)
 */
sw.Promed.SwDrugPrepCombo = Ext.extend(Ext.form.ComboBox,
{
	//allowBlank: false,
	displayField: 'DrugPrep_Name',
	enableKeyEvents: true,
	fieldLabel: langs('Медикамент'),
	forceSelection: true,
	hiddenName: 'DrugPrepFas_id',
	anchor: '100%',
	drugField: 'Drug_id',
	drugPrepField: 'DrugPrepFas_id',
	onTrigger2Click: function() 
	{
		
		if (this.disabled)
			return false;
		var combo = this;
		this.el.focus();
		// Именно для этого комбо логика несколько иная 
		if (!this.formList)
		{
			if (Ext.getCmp('DrugPrepWinSearch')) {
				this.formList = Ext.getCmp('DrugPrepWinSearch');
			} else {
				this.formList = new sw.Promed.swListSearchWindow(
				{
					//params: {
						title: langs('Поиск медикамента'),
						id: 'DrugPrepWinSearch',
						object: 'Drug',
						modal: false,
						//maximizable: true,
						maximized: true,
						paging: true,
						prefix: 'dprws',
						dataUrl: '/?c=Farmacy&m=loadDrugMultiList',
						columns: true,
						stringfields:
						[
							{name: 'Drug_id', key: true},
							{name: 'DrugPrepFas_id', hidden: true},
							{name: 'DrugTorg_Name',  headerName:langs('Торговое наименование/Мнн') ,header: langs('Торговое наименование'), isfilter:true, columnWidth: '.4'},
							{name: 'DrugMnn',  header: langs('МНН'), width: 200},
							{name: 'DrugForm_Name', header: langs('Форма выпуска'), width: 120,isfilter:true, columnWidth: '.14'},
							{name: 'Drug_Dose', header: langs('Дозировка'), width: 80, isfilter:true, columnWidth: '.14'},
							{name: 'Drug_Fas', header: langs('Фасовка'), width: 80},
							{name: 'Drug_PackName', header: langs('Упаковка'), width: 800},
							{name: 'Drug_Firm', header: langs('Производитель'), width: 180, isfilter:true, columnWidth: '.3'},
							{name: 'Drug_Ean', header: 'EAN', width: 80},
							{name: 'Drug_RegNum', header: langs('РУ'), width: 100}
						],
						useBaseParams: true
					//}
				});
			}
		}
		// выбираем компонент 
		var combo = null;
		if (this.drugPrepField)
		{
			var form = this.findForm();
			if (form)
				combo = form.getForm().findField(this.drugPrepField);
		}
		else 
			combo = this;
		var params = (combo.getStore().baseParams)?combo.getStore().baseParams:{};
		params.DrugPrepFas_id = null;
		combo.collapse();
		this.collapse();
		this.formList.show(
		{
			params:params,
			onSelect: function(data) 
			{
				// на форме должно быть два компонента
				var cp = this.findForm().getForm().findField((this.drugField)?this.drugField:'Drug_id');
				cp.getStore().removeAll();
				cp.clearValue();
				combo.hasFocus = false;
				// Читаем DrugPrepFas
				combo.getStore().baseParams.DrugPrepFas_id=data['DrugPrepFas_id'];
				combo.getStore().baseParams.query=null;
				combo.getStore().load({
					params: {Drug_id: data['Drug_id']},
					callback: function() {
						this.setValue(data['DrugPrepFas_id']);
						cp.setValue(data['Drug_id']);
						
						this.startValue = this.getValue();
						cp.startValue = cp.getValue();
						
						this.fireEvent('change', this, data['DrugPrepFas_id'], data['DrugPrepFas_id']);
						combo.hasFocus = true;
						combo.getStore().baseParams.DrugPrepFas_id=null;
					}.createDelegate(combo)
				});
			}.createDelegate(this), 
			onHide: function() 
			{
				this.focus(false);
			}.createDelegate(this)
		});
		return false;
	},
	onTrigger1Click: function()
	{
		if (this.disabled)
			return false;
		var combo = this;
		var params = {};
		if (combo.getValue()>0)
		{
			combo.getStore().baseParams.DrugPrepFas_id= combo.getValue();
		}
		var form = combo.findForm();
		if (form)
		{
			params.Drug_id = (form.getForm().findField('Drug_id'))?form.getForm().findField('Drug_id').getValue():null;
		}
		params.load = 'torg';
		if (!this.isExpanded())
		{
			this.onFocus({});
			combo.getStore().load(
			{
				params: params,
				callback: function()
				{
					if (combo.getStore().getCount()>0)
					{
						//combo.setValue(combo.getStore().getAt(0).get('DrugPrepFas_id'));
					}
					combo.getStore().baseParams.DrugPrepFas_id = null;
				}
			});
			this.expand();
		}
		else 
		{
			this.collapse();
			this.el.focus();
		}
		return false;
	},
	beforequery: function() {
		return false;
	},
	initComponent: function() {
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);
		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'Drug_id'
			}, [
				{name: 'DrugPrep_id', mapping: 'DrugPrep_id'},
				{name: 'DrugPrep_Name', mapping: 'DrugPrep_Name'},
				{name: 'DrugPrepFas_id', mapping: 'DrugPrepFas_id'}
			]),
			url: '/?c=Farmacy&m=loadDrugPrepList'
		});
		// Add listeners
		
		this.addListener('keydown', function(inp, e)
		{
			inp.removeListener('beforequery', inp.beforequery);
			
			if (e.getKey() == e.DELETE || e.getKey() == e.F4 || e.getKey() == e.F2 || (e.getKey() == e.DOWN && !inp.isExpanded()))
			{
				e.stopEvent();
				if (e.browserEvent.stopPropagation)
				{
					e.browserEvent.stopPropagation();
				}
				else
				{
					e.browserEvent.cancelBubble = true;
				}
				if (e.browserEvent.preventDefault)
				{
					e.browserEvent.preventDefault();
				}
				else
				{
					e.browserEvent.returnValue = false;
				}

				e.returnValue = false;

				if (Ext.isIE)
				{
					e.browserEvent.keyCode = 0;
					e.browserEvent.which = 0;
				}
				switch (e.getKey())
				{
					case e.DELETE:
						inp.clearValue();
						inp.setRawValue(null);
						break;
					case e.F4:
						inp.addListener('beforequery', inp.beforequery);
						inp.onTrigger2Click();
						break;
					case e.F2: case e.DOWN:
						inp.addListener('beforequery', inp.beforequery);
						inp.focus();
						inp.onTrigger1Click();
						break;
					
				}
			}
		},
		this);
		
		this.addListener('change', function(combo, newValue, oldValue) 
		{
			var base_form = combo.findForm().getForm();
			
			var DrugCombo = base_form.findField('Drug_id');
			var Drug_id = DrugCombo.getValue();
			
			if (DrugCombo && !DrugCombo.DrugPackage) {
				if (base_form.findField('DocumentUcStr_id')) {
					DrugCombo.getStore().baseParams.DocumentUcStr_id = base_form.findField('DocumentUcStr_id').getValue();
				} else {
					DrugCombo.getStore().baseParams.DocumentUcStr_id = null;
				}
				if ( newValue > 0 ) {
					DrugCombo.getStore().baseParams.DrugPrepFas_id = newValue;
				} else {
					// очистить второй комбо
					// DrugCombo.getStore().baseParams.DrugPrepFas_id = null;
				}
				
				// нужно сделать лоадкомбо и проставить первый медикамент 
				DrugCombo.clearValue();
				DrugCombo.lastQuery = '';
				DrugCombo.getStore().removeAll();
				if (newValue>0)
				{
					DrugCombo.getStore().load(
					{
						callback: function() {
							if (Drug_id>0) {
								DrugCombo.setFieldValue('Drug_id',Drug_id);
								//DrugCombo.setValue(Drug_id);
							} else {
							// #3284 3.3.	По умолчанию после выбора данных в первом комбобоксе подставляется первая возможная запись в списке. 
								if (DrugCombo.getStore().getCount()>0)
								{
									DrugCombo.setValue(DrugCombo.getStore().getAt(0).get('Drug_id'));
								}
								DrugCombo.fireEvent('change', DrugCombo, DrugCombo.getValue());
							}
							
							DrugCombo.hasFocus = true;
						}
					});
				}
			}
			return true;
		},
		this);
		
	},
	loadingText: langs('Идет поиск...'),
	queryDelay: 500,
	minChars: 3,
	minLength: 1,
	mode: 'remote',
	minLengthText: langs('Поле должно быть заполнено'),
	resizable: true,
	selectOnFocus: true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<h3>{DrugPrep_Name}&nbsp;</h3>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'DrugPrepFas_id'
});
Ext.reg('swdrugprepcombo', sw.Promed.SwDrugPrepCombo);
sw.Promed.SwDrugPrepCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwDrugPrepCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwDrugPrepCombo.prototype.trigger2Class = 'x-form-search-trigger';
//sw.Promed.SwDrugPrepCombo.prototype.onTrigger1Click
//sw.Promed.SwDrugPrepCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;


/**
 * Комбобокс №2 (упаковка)
 */
sw.Promed.SwDrugPackCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	allowBlank: false,
	displayField: 'Drug_Name',
	enableKeyEvents: true,
	fieldLabel: langs('Упаковка'),
	hiddenName: 'Drug_id',
	anchor: '100%',
	editable: false,
	lastQuery: '',
	drugPrepField: 'DrugPrepFas_id',
	drugField: 'Drug_id',
	//lazyInit: false,
    onLoadStore: Ext.emptyFn,
	onTrigger2Click: function() {
		if (this.disabled) {
            return false;
        }

		var combo = this;
		// Именно для этого комбо логика несколько иная 
		if (!this.formList)
		{
			if (Ext.getCmp('DrugPackWinSearch')) {
				this.formList = Ext.getCmp('DrugPackWinSearch');
			} else {
				this.formList = new sw.Promed.swListSearchWindow(
				{
					//params: {
						title: langs('Поиск медикамента'),
						id: 'DrugPackWinSearch',
						object: 'Drug',
						modal: false,
						//maximizable: true,
						maximized: true,
						paging: true,
						columns: true,
						prefix: 'dpckws',
						dataUrl: '/?c=Farmacy&m=loadDrugMultiList',
						stringfields:
						[
							{name: 'Drug_id', key: true},
							{name: 'DrugPrepFas_id', hidden: true},
							{name: 'GoodsUnit_id', hidden: true},
							{name: 'DrugTorg_Name', autoexpand: true, header: langs('Торговое наименование'), isfilter:true},
							{name: 'DrugForm_Name', header: langs('Форма выпуска'), width: 140, isfilter:true},
							{name: 'Drug_Dose', header: langs('Дозировка'), width: 100, isfilter:true},
							{name: 'Drug_Fas', header: langs('Фасовка'), width: 100},
							{name: 'Drug_PackName', header: langs('Упаковка'), width: 100},
							{name: 'Drug_Firm', header: langs('Производитель'), width: 200, isfilter:true},
							{name: 'Drug_Ean', header: 'EAN', width: 100},
							{name: 'Drug_RegNum', header: langs('РУ'), width: 120}
						],
						useBaseParams: true
					//}
				});
			}
		}
		// выбираем компонент 
		var combo = null;
		if (this.drugPrepField)
		{
			var form = this.findForm();
			if (form)
				combo = form.getForm().findField(this.drugPrepField);
		}
		else 
			combo = this;
		var params = (combo.getStore().baseParams)?combo.getStore().baseParams:{};
		params.DrugPrepFas_id = null;
		
		combo.collapse();
		this.collapse();
		
		this.formList.show(
		{
			params:params,
			onSelect: function(data) 
			{
				// на форме должно быть два компонента
				var cp = this.findForm().getForm().findField((this.drugField)?this.drugField:'Drug_id');
				cp.getStore().removeAll();
				cp.clearValue();
				cp.hasFocus = false;
				// Читаем DrugPrepFas
				combo.getStore().baseParams.DrugPrepFas_id=data['DrugPrepFas_id'];
				combo.getStore().load({
					params: {Drug_id: data['Drug_id']},
					callback: function() {
						this.setValue(data['DrugPrepFas_id']);
						cp.setValue(data['Drug_id']);
						
						this.startValue = this.getValue();
						cp.startValue = cp.getValue();
						
						this.fireEvent('change', this, data['DrugPrepFas_id'], data['DrugPrepFas_id']);
						combo.getStore().baseParams.DrugPrepFas_id=null;
						
					}.createDelegate(combo)
				});
			}.createDelegate(this), 
			onHide: function() 
			{
				this.focus(false);
			}.createDelegate(this)
		});
		return false;
	},
	initComponent: function() {
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);
		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'Drug_id'
			}, [
				{name: 'Drug_Fas', mapping: 'Drug_Fas'},
				{name: 'DrugPrepFas_id', mapping: 'DrugPrepFas_id'},
				{name: 'Drug_id', mapping: 'Drug_id'},
				{name: 'Drug_Code', mapping: 'Drug_Code'},
				{name: 'Drug_Name', mapping: 'Drug_Name'},
				{name: 'Drug_FullName', mapping: 'Drug_FullName'},
				{name: 'DrugForm_Name', mapping: 'DrugForm_Name'},
				{name: 'DrugUnit_Name', mapping: 'DrugUnit_Name'},
				{name: 'GoodsUnit_id', mapping: 'GoodsUnit_id'}
			]),
			url: '/?c=Farmacy&m=loadDrugList',
            listeners: {
                'load': function(store) {
                    this.onLoadStore(store);
                }.createDelegate(this)
            }
		});
		
		// Add listeners
		this.addListener('keydown', function(inp, e) 
			{
				if (e.getKey() == e.DELETE || e.getKey() == e.F4)
				{
					e.stopEvent();
					if (e.browserEvent.stopPropagation)
					{
						e.browserEvent.stopPropagation();
					}
					else
					{
						e.browserEvent.cancelBubble = true;
					}
					if (e.browserEvent.preventDefault)
					{
						e.browserEvent.preventDefault();
					}
					else
					{
						e.browserEvent.returnValue = false;
					}

					e.returnValue = false;

					if (Ext.isIE)
					{
						e.browserEvent.keyCode = 0;
						e.browserEvent.which = 0;
					}
					switch (e.getKey())
					{
						case e.DELETE:
							inp.clearValue();
							inp.setRawValue(null);
							break;
						case e.F4:
							inp.onTrigger2Click();
							break;
					}
				}
			},
			this);

	},
	/*
	forceSelection: true,
	loadingText: langs('Идет поиск...'),
	minChars: 1,
	minLength: 1,
	mode: 'remote',
	minLengthText: langs('Поле должно быть заполнено'),
	*/
	resizable: true,
	selectOnFocus: true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<h3>{Drug_Name}&nbsp;</h3>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'Drug_id'
});
Ext.reg('swdrugpackcombo', sw.Promed.SwDrugPackCombo);
sw.Promed.SwDrugPackCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwDrugPackCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwDrugPackCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwDrugPackCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;

// МедПерсонал - врач
sw.Promed.SwMedPersonalCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	allowBlank: false,
	workData: null,
	displayField: 'MedPersonal_Fio',
	codeField: 'MedPersonal_Code',
	editable: true,
	enableKeyEvents: true,
	fieldLabel: langs('Врач'),
	hiddenName: 'MedPersonal_id',
	lastQuery: '',
	setBaseFilter: function(fn, scope)
	{
		this.baseFilterFn = fn;
		this.baseFilterScope = scope || this;
		this.store.filterBy(fn, scope);
	},
	Lpu_id: false,
	//anchor: '100%',
	initComponent: function()
	{
		this.addListener('keydown', function(inp, e) { //В рамках задачи https://redmine.swan.perm.ru/issues/85359
			if ( e.getKey() == e.DELETE||e.getKey() == e.BACKSPACE){
				inp.clearValue();
				inp.setRawValue(null);
				var qe = {
					query: '',
					forceAll: true,
					combo: this,
					cancel: false
				};
				this.fireEvent('letsloadall', qe);// #147636 событие для загрузки всего списка после очистки поля
			}
		});

		sw.Promed.SwMedPersonalCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.Store({
			autoLoad: false,
			baseParams: {
				"MedPersonalNotNeeded": '2'
			},
			reader: new Ext.data.JsonReader(
				{
					id: 'MedPersonal_id'
				},
				[
					{name: 'MedPersonal_id', mapping: 'MedPersonal_id'},
					{name: 'MedPersonal_Code', mapping: 'MedPersonal_Code'},
					{name: 'MedPersonal_Fio', mapping: 'MedPersonal_Fio'},
					{name: 'WorkData_begDate', mapping: 'WorkData_endDate'},
					{name: 'WorkData_endDate', mapping: 'WorkData_endDate'}
				]),

			url: C_MP_LOADLIST
		});
	},
	resizable: true,
	selectOnFocus: true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 70px"><font color="red">{MedPersonal_Code}</font></td><td><b>{MedPersonal_Fio}</b>&nbsp;</td></tr></table>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'MedPersonal_id'
});
Ext.reg('swmedpersonalcombo', sw.Promed.SwMedPersonalCombo);

// Единицы измреения которые присутствуют в OkeiLink
sw.Promed.SwOkeiLinkCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	displayField: 'Okei_NationSymbol',
	editable: false,
	autoLoad: false,
	codeField: null,
	enableKeyEvents: true,
	fieldLabel: langs('Ед. изм.'),
	hiddenName: 'OkeiLink_id',
	lastQuery: '',
	//anchor: '100%',
	initComponent: function()
	{
		sw.Promed.SwOkeiLinkCombo.superclass.initComponent.apply(this, arguments);
	},
	resizable: true,
	selectOnFocus: true,
	store: new Ext.data.Store(
	{
		reader: new Ext.data.JsonReader(
		{
		    id: 'OkeiLink_id'
		},
		[
			{name: 'OkeiLink_id', mapping: 'OkeiLink_id'},
			{name: 'Okei_NationSymbol', mapping: 'Okei_NationSymbol'}
		]),
		url: C_OKEILINK
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 70px"></td><td><b>{Okei_NationSymbol}</b></td></tr></table>',
		'</div></tpl>'
		),
	triggerAction: 'all',
	valueField: 'OkeiLink_id'
});
Ext.reg('swokeilinkcombo', sw.Promed.SwOkeiLinkCombo);

// Бригады СМП оперативная обстановка
sw.Promed.swEmergencyTeamOperEnvCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,{
	enableKeyEvents: true,
	allowBlank: false,
	editable: false,
	resizable: true,
	selectOnFocus: true,
	//anchor: '100%',
	fieldLabel: langs('Бригада СМП'),
	codeField: 'EmergencyTeam_Num',
	displayField: 'EmergencyTeamSpec_Name',
	hiddenName: 'EmergencyTeam_id',
	valueField: 'EmergencyTeam_id',
	triggerAction: 'all',
	lastQuery: '',
	store: new Ext.data.Store({
		//autoLoad: true,
		//url: '/?c=EmergencyTeam&m=loadEmergencyTeamOperEnv',
		url: '/?c=EmergencyTeam4E&m=loadEmergencyTeamOperEnv',
		//baseParams: {object:'AttachType'},
		reader: new Ext.data.JsonReader({
			id: 'EmergencyTeam_id'
		},[
			{name: 'EmergencyTeam_id', mapping: 'EmergencyTeam_id'},
			{name: 'EmergencyTeam_Num', mapping: 'EmergencyTeam_Num'},
			{name: 'EmergencyTeamSpec_Name', mapping: 'EmergencyTeamSpec_Name'},
			{name: 'EmergencyTeamSpec_Code', mapping: 'EmergencyTeamSpec_Code'}
		])
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">'
		+'<font color="red">{EmergencyTeam_Num}</font>&nbsp;{EmergencyTeamSpec_Name}'
		+'</div></tpl>'
	)
});
Ext.reg('swemergencyteamorepenvcombo', sw.Promed.swEmergencyTeamOperEnvCombo);

// Признак вызова
sw.Promed.swCmpCallCardNumvPrCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,{
	name: 'CmpCallCard_NumvPr',
	fieldLabel:langs('Признак вызова за день'),
	displayField: 'CmpCallCardNumvPr_Name',
	valueField: 'CmpCallCardNumvPr_id',
	editable: false,
	store: new Ext.data.SimpleStore({
		autoLoad: true,
		data: [
			[ 0, langs('Все') ],
			[ 1, langs('Без признака') ],
			[ 2, langs('А') ],
			[ 3, langs('П') ],
			[ 4, langs('И') ],
			[ 5, langs('К') ],
			[ 6, langs('Н') ]

		],
		fields: [
			{name: 'CmpCallCardNumvPr_id', type: 'int'},
			{name: 'CmpCallCardNumvPr_Name', type: 'string'}
		],
		key: 'CmpCallCardNumvPr_id',
		sortInfo: {field: 'CmpCallCardNumvPr_id'}
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'&nbsp;{CmpCallCardNumvPr_Name}',
		'</div></tpl>'
	),
	width: 300,
	listWidth: 300,
});
Ext.reg('swcmpcallcardnumvprcombo', sw.Promed.swCmpCallCardNumvPrCombo);

sw.Promed.swEmergencyTeamCCC = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	enableKeyEvents: true,
	allowBlank: false,
	editable: false,
	resizable: true,
	selectOnFocus: true,
	fieldLabel: langs('Бригада СМП'),
	codeField: 'EmergencyTeam_Num',
	displayField: 'EmergencyTeamSpec_Name',
	hiddenName: 'EmergencyTeam_id',
	valueField: 'EmergencyTeam_id',
	triggerAction: 'all',
	lastQuery: '',
	store: new Ext.data.Store({
		//autoLoad: true,
		url: '/?c=EmergencyTeam&m=loadEmergencyTeamCCC',
		reader: new Ext.data.JsonReader({
			id: 'EmergencyTeam_id'
		},[
			{name: 'EmergencyTeam_id'},
			{name: 'EmergencyTeam_Num'},
			{name: 'EmergencyTeamSpec_Name'},
			{name: 'EmergencyTeamSpec_Code'},
			{name: 'EmergencyTeam_HeadShiftFIO'},
			{name: 'MedPersonal_id'},
			{name: 'MedStaffFact_id'},
			{name: 'LpuBuilding_id'}
		]),
		sortInfo: {field: 'EmergencyTeamSpec_Name'}
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">'
		+'<font color="red">{EmergencyTeam_Num}</font>'
		+'&nbsp;{EmergencyTeamSpec_Name}'
		+'</div></tpl>'
	)
});
Ext.reg('swEmergencyTeamCCC', sw.Promed.swEmergencyTeamCCC);


// Бригады СМП
sw.Promed.swEmergencyTeamCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,{
	enableKeyEvents: true,
	allowBlank: false,
	editable: false,
	resizable: true,
	selectOnFocus: true,
	anchor: '100%',
	fieldLabel: langs('Бригада СМП'),
	codeField: 'EmergencyTeam_Code',
	displayField: 'EmergencyTeam_Name',
	hiddenName: 'EmergencyTeam_id',
	valueField: 'EmergencyTeam_id',
	triggerAction: 'all',
	lastQuery: '',
	initComponent: function(){
		sw.Promed.swEmergencyTeamCombo.superclass.initComponent.apply(this, arguments);
	},
	store: new Ext.data.Store({
		//autoLoad: true,
		url: C_ET_LOADLIST,
		reader: new Ext.data.JsonReader({
			id: 'EmergencyTeam_id'
		},[
			{name: 'EmergencyTeam_id', mapping: 'EmergencyTeam_id'},
			{name: 'LpuBuilding_id', mapping: 'LpuBuilding_id'},
			{name: 'EmergencyTeam_Code', mapping: 'EmergencyTeam_Code'},
			{name: 'EmergencyTeam_Name', mapping: 'EmergencyTeam_Name'}
		])
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">'
		+'<font color="red">{EmergencyTeam_Code}</font>&nbsp;{EmergencyTeam_Name}'
		+'</div></tpl>'
	)
});
Ext.reg('swemergencyteamcombo', sw.Promed.swEmergencyTeamCombo);

// Актуальные (незакрытые) наряды СМП
sw.Promed.swUnfinishedEmergencyTeamCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo,{
	enableKeyEvents: true,
	allowBlank: false,
	editable: false,
	resizable: true,
	selectOnFocus: true,
	anchor: '100%',
	fieldLabel: langs('Бригада СМП'),
	codeField: 'EmergencyTeam_Code',
	displayField: 'EmergencyTeam_Name',
	hiddenName: 'EmergencyTeam_id',
	valueField: 'EmergencyTeam_id',
	triggerAction: 'all',
	lastQuery: '',
	store: new Ext.data.Store({
		url: '/?c=EmergencyTeam4E&m=loadUnfinishedEmergencyTeamList',
		reader: new Ext.data.JsonReader({
			id: 'EmergencyTeam_id'
		},[
			{name: 'EmergencyTeam_id', mapping: 'EmergencyTeam_id'},
			{name: 'EmergencyTeam_Num', mapping: 'EmergencyTeam_Num'},
			{name: 'EmergencyTeamSpec_Code', mapping: 'EmergencyTeamSpec_Code'},
			{name: 'EmergencyTeam_HeadShiftFIO', mapping: 'EmergencyTeam_HeadShiftFIO'},
			{name: 'EmergencyTeam_Name', mapping: 'EmergencyTeam_Name'}
		])
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">'
		+'<font color="red">{EmergencyTeam_Num}</font>'
		+'&nbsp;<font color="blue">{EmergencyTeamSpec_Code}</font>'
		+'&nbsp;{EmergencyTeam_HeadShiftFIO}'
		+'</div></tpl>'
	)
});
Ext.reg('swunfinishedemergencyteamcombo', sw.Promed.swUnfinishedEmergencyTeamCombo);

// МедПерсонал - врач и без кодов тоже
sw.Promed.SwMedPersonalAllCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	allowBlank: false,
	displayField: 'MedPersonal_FIO',
	codeField: 'MedPersonal_Code',
	editable: false,
	enableKeyEvents: true,
	fieldLabel: langs('Врач'),
	hiddenName: 'MedPersonal_id',
	lastQuery: '',
	anchor: '100%',
	initComponent: function()
	{
		sw.Promed.SwMedPersonalAllCombo.superclass.initComponent.apply(this, arguments);
	},
	//onTrigger2Click: Ext.emptyFn,
	resizable: true,
	selectOnFocus: true,
	store: new Ext.data.Store(
	{
		//autoLoad: false,
		reader: new Ext.data.JsonReader(
		{
		id: 'MedPersonal_id'
		},
		[
			{name: 'MedPersonal_id', mapping: 'MedPersonal_id'},
			{name: 'MedPersonal_Code', mapping: 'MedPersonal_Code'},
			{name: 'MedPersonal_FIO', mapping: 'MedPersonal_FIO'},
			{name: 'WorkData_begDate', mapping: 'WorkData_begDate'},
			{name: 'WorkData_endDate', mapping: 'WorkData_endDate'}
		]),
		url: C_MP_COMBO
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 50px"><font color="red">{MedPersonal_Code}&nbsp;</font></td><td nowrap><b>{MedPersonal_FIO}</b></td></tr></table>',
		'</div></tpl>'
		),
	triggerAction: 'all',
	valueField: 'MedPersonal_id'
});
Ext.reg('swmedpersonalallcombo', sw.Promed.SwMedPersonalAllCombo);

// врач в действующих МО на текущую дату
sw.Promed.SwMedPersonalIsOpenMOCombo = Ext.extend(sw.Promed.SwMedPersonalAllCombo,
{
	displayField: 'MedPersonal_FIO',
	codeField: 'MedPersonal_Code',
	hiddenName: 'MedPersonal_id',
	store: new Ext.data.Store(
	{
		reader: new Ext.data.JsonReader(
		{
			id: 'MedPersonal_id'
		},
		[
			{name: 'MedPersonal_id', mapping: 'MedPersonal_id'},
			{name: 'MedPersonal_Code', mapping: 'MedPersonal_Code'},
			{name: 'MedPersonal_FIO', mapping: 'MedPersonal_FIO'},
			{name: 'WorkData_begDate', mapping: 'WorkData_begDate'},
			{name: 'WorkData_endDate', mapping: 'WorkData_endDate'}
		]),
		url: '/?c=MedPersonal&m=getMedPersonalIsOpenMOCombo'
	})
});
Ext.reg('swmedpersonalisopenmocombo', sw.Promed.SwMedPersonalIsOpenMOCombo);

// МедПерсонал - врач и без кодов тоже
sw.Promed.SwMedPersonalWithLpuRegionCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	allowBlank: false,
	displayField: 'MedPersonal_FIO',
	codeField: 'MedPersonal_Code',
	editable: false,
	enableKeyEvents: true,
	fieldLabel: langs('Врач'),
	hiddenName: 'MedPersonal_id',
	lastQuery: '',
	anchor: '100%',
	initComponent: function()
	{
		sw.Promed.SwMedPersonalWithLpuRegionCombo.superclass.initComponent.apply(this, arguments);
	},
	resizable: true,
	selectOnFocus: true,
	store: new Ext.data.Store(
	{
		reader: new Ext.data.JsonReader(
		{
		id: 'MedPersonal_id'
		},
		[
			{name: 'MedPersonal_id', mapping: 'MedPersonal_id'},
			{name: 'MedPersonal_Code', mapping: 'MedPersonal_Code'},
			{name: 'MedPersonal_FIO', mapping: 'MedPersonal_FIO'},
			{name: 'WorkData_begDate', mapping: 'WorkData_begDate'},
			{name: 'WorkData_endDate', mapping: 'WorkData_endDate'}
		]),
		url: '/?c=MedPersonal&m=getMedPersonalWithLpuRegionCombo'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 50px"><font color="red">{MedPersonal_Code}</font></td><td nowrap><b>{MedPersonal_FIO}</b></td></tr></table>',
		'</div></tpl>'
		),
	triggerAction: 'all',
	valueField: 'MedPersonal_id'
});
Ext.reg('swmedpersonalwithlpuregioncombo', sw.Promed.SwMedPersonalWithLpuRegionCombo);


// МедПерсонал - комбо с врачами, в т.ч. работающими не в отделении
sw.Promed.SwMedPersonalWithoutLpuSectionCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	allowBlank: false,
	displayField: 'MedPersonal_Fio',
	codeField: 'MedPersonal_TabCode',
	editable: true,
	enableKeyEvents: true,
	fieldLabel: langs('Врач'),
	hiddenName: 'MedPersonal_id',
	lastQuery: '',
	initComponent: function()
	{
		sw.Promed.SwMedPersonalWithoutLpuSectionCombo.superclass.initComponent.apply(this, arguments);
	},
	resizable: true,
	selectOnFocus: true,
	store: new Ext.data.Store(
	{
		reader: new Ext.data.JsonReader(
		{
		id: 'MedPersonal_id'
		},
		[
			{name: 'MedPersonal_id', mapping: 'MedPersonal_id'},
			{name: 'MedPersonal_Code', mapping: 'MedPersonal_Code'},
			{name: 'MedPersonal_TabCode', mapping: 'MedPersonal_TabCode'},
			{name: 'MedPersonal_Fio', mapping: 'MedPersonal_Fio'},
			{name: 'PostMed_id', mapping: 'PostMed_id'},
			{name: 'PostMed_Code', mapping: 'PostMed_Code'},
			{name: 'PostMed_Name', mapping: 'PostMed_Name'},
			{name: 'WorkData_begDate', mapping: 'WorkData_begDate'},
			{name: 'WorkData_endDate', mapping: 'WorkData_endDate'},
			{name: 'MedStaffFact_id', mapping: 'MedStaffFact_id'}
		]),
		baseParams: {andWithoutLpuSection: 2},
		url: '/?c=MedPersonal&m=loadMedStaffFactList'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 50px"><font color="red">{MedPersonal_TabCode}</font></td><td nowrap><b>{MedPersonal_Fio}</b>&nbsp;{PostMed_Name}</td></tr></table>',
		'</div></tpl>'
	),
	loadList: function(params){
		params = params || {};
		var callback = params.callback || Ext.emptyFn;
		if (this.getStore().getCount() == 0) {
			this.getStore().load(params);
		} else {
			callback();
		}
	},
	reloadList: function(params){
		this.getStore().load(params);
	},
	triggerAction: 'all',
	valueField: 'MedPersonal_id'
});
Ext.reg('swmedpersonalwithoutlpusectioncombo', sw.Promed.SwMedPersonalWithoutLpuSectionCombo);


sw.Promed.SwCmpStationCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	allowBlank: false,
	displayField: 'CmpStation_Name',
	codeField: 'CmpStation_Code',
	editable: false,
	enableKeyEvents: true,
	fieldLabel: langs('Станция скорой помощи'),
	hiddenName: 'Lpu_id',
	lastQuery: '',
	initComponent: function()
	{
		sw.Promed.SwCmpStationCombo.superclass.initComponent.apply(this, arguments);
	},
	//onTrigger2Click: Ext.emptyFn,
	resizable: true,
	selectOnFocus: true,
	store: new Ext.data.Store(
		{
			//autoLoad: false,
			reader: new Ext.data.JsonReader(
				{
					id: 'Lpu_id'
				},
				[
					{name: 'CmpStation_id', mapping: 'CmpStation_id'},
					{name: 'Lpu_id', mapping: 'Lpu_id'},
					{name: 'CmpStation_Code', mapping: 'CmpStation_Code'},
					{name: 'CmpStation_Name', mapping: 'CmpStation_Name'}
				]),
			url: '/?c=CmpCallCard&m=loadCmpStation'
		}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 70px"><font color="red">{CmpStation_Code}</font></td><td><b>{CmpStation_Name}</b></td></tr></table>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'Lpu_id'
});
Ext.reg('swcmpstationcombo', sw.Promed.SwCmpStationCombo);

sw.Promed.SwLpuRegionCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	displayField: 'LpuRegion_Name',
	editable: true,
	enableKeyEvents: true,
	forceSelection: true,
	fieldLabel: langs('Участок'),
	hiddenName: 'LpuRegion_id',
	queryDelay: 1,
	lastQuery: '',
	initComponent: function() {
		sw.Promed.SwLpuRegionCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'LpuRegion_id'
			},
			[
				{name: 'LpuRegion_Name', mapping: 'LpuRegion_Name'},
				{name: 'LpuRegion_id', mapping: 'LpuRegion_id'},
				{name: 'Lpu_id', mapping: 'Lpu_id'},
				{name: 'LpuRegion_Descr', mapping: 'LpuRegion_Descr'},
				{name: 'LpuRegionType_id', mapping: 'LpuRegionType_id'},
				{name: 'LpuRegionType_SysNick', mapping: 'LpuRegionType_SysNick'},
				{name: 'LpuRegionType_Name', mapping: 'LpuRegionType_Name'}
			]),
			listeners: {
				'load': function(store) {
					this.setValue(this.getValue());
				}.createDelegate(this)
			},
			url: C_LPUREGION_LIST
		});
	},
	setValue: function(v) {
		var text = v;
		if ( this.valueField ) {
			var r = this.findRecord(this.valueField, v);

			if ( r ) {
				text = r.get(this.displayField);
				if ( r.get('LpuRegion_Descr') ) {
					text = text + ' ( '+ r.get('LpuRegion_Descr') + ' )';
				}
			}
			else if ( this.valueNotFoundText ) {
				text = this.valueNotFoundText;
			}
		}
		this.lastSelectionText = text;
		if ( this.hiddenField ) {
			this.hiddenField.value = v;
		}
		Ext.form.ComboBox.superclass.setValue.call(this, text);
		this.value = v;
	},
/*
	store: new Ext.data.Store({
		autoLoad: false,
		reader: new Ext.data.JsonReader({
			id: 'LpuRegion_id'
		},
		[
			{ name: 'LpuRegion_Name', mapping: 'LpuRegion_Name' },
			{ name: 'LpuRegion_id', mapping: 'LpuRegion_id' },
			{ name: 'LpuRegion_Descr', mapping: 'LpuRegion_Descr' },
			{ name: 'LpuRegionType_id', mapping: 'LpuRegionType_id' },
			{ name: 'LpuRegionType_Name', mapping: 'LpuRegionType_Name' }
		]),
		url: C_LPUREGION_LIST
	}),
*/
	tpl: '<tpl for="."><div class="x-combo-list-item">{LpuRegion_Name} {[ (String(values.LpuRegion_Descr).toUpperCase() == "NULL" || String(values.LpuRegion_Descr) == "" || String(values.LpuRegion_Descr) == "undefined") ? "&nbsp;" : "( " + values.LpuRegion_Descr + " )"]}</div></tpl>',
	triggerAction: 'all',
	valueField: 'LpuRegion_id'
});
Ext.reg('swlpuregioncombo', sw.Promed.SwLpuRegionCombo);

sw.Promed.SwMedStaffFactPostCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	allowBlank: false,
	displayField: 'PostMed_Name',
	codeField: 'PostMed_Code',
	editable: true,
	enableKeyEvents: true,
	fieldLabel: langs('Должность'),
	hiddenName: 'MedStaffFact_id',
	lastQuery: '',
	initComponent: function()
	{
		sw.Promed.SwMedStaffFactPostCombo.superclass.initComponent.apply(this, arguments);
	},
	resizable: true,
	selectOnFocus: true,
	store: new Ext.data.Store(
	{
		reader: new Ext.data.JsonReader(
		{
		id: 'MedStaffFact_id'
		},
		[
			{name: 'MedPersonal_id', mapping: 'MedPersonal_id'},
			{name: 'PostMed_Code', mapping: 'PostMed_Code'},
			{name: 'PostMed_Name', mapping: 'PostMed_Name'},
			{name: 'MedStaffFact_id', mapping: 'MedStaffFact_id'},
			{name: 'LpuSection_id', mapping : 'LpuSection_id'},
			{name: 'LpuSectionProfile_msfid', mapping: 'LpuSectionProfile_msfid'},
		]),
		baseParams: {andWithoutLpuSection: 3},
		url: '/?c=MedPersonal&m=loadMedStaffFactList'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 50px"><font color="red">{PostMed_Code}</font></td><td nowrap><b>{PostMed_Name}</b></td></tr></table>',
		'</div></tpl>'
	),
	loadList: function(params){
		params = params || {};
		var callback = params.callback || Ext.emptyFn;
		if (this.getStore().getCount() == 0) {
			this.getStore().load(params);
		} else {
			callback();
		}
	},
	reloadList: function(params){
		this.getStore().load(params);
	},
	triggerAction: 'all',
	valueField: 'MedStaffFact_id'
});
Ext.reg('swmedstafffactpostcombo', sw.Promed.SwMedStaffFactPostCombo);

sw.Promed.SwMedStaffByLpuCombo = Ext.extend(sw.Promed.SwLpuListsBaseCombo, {
	codeField: 'MedPersonal_TabCode',
	displayField: 'MedPersonal_FIO',
	fieldLabel: langs('Врач'),
	hiddenName: 'MedStaffFact_id',
	valueField: 'MedStaffFact_id',
	linkedElementsDisabled: true,
	parentElementDisabled: true,
	listWidth: 700,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;">',
		'<td style="width: 45px;"><font color="red">{MedPersonal_TabCode}&nbsp;</font></td>',
		'<td>',
			'<div style="font-weight: bold; white-space: normal;">{MedPersonal_FIO}&nbsp;{[Ext.isEmpty(values.LpuSection_Name)?"":"[ " + values.LpuSection_Name + " ]"]}</div>',
			'<div style="font-size: 10px;">{PostMed_Name}{[!Ext.isEmpty(values.MedStaffFact_Stavka) ? ", ст." : ""]} {MedStaffFact_Stavka}</div>',
			'<div style="font-size: 10px;">{[!Ext.isEmpty(values.MedStaffFact_setDate) ? "Дата начала работы: " + values.MedStaffFact_setDate:""]} {[!Ext.isEmpty(values.MedStaffFact_disDate) ? "Дата увольнения: " + this.formatWorkDataEndDate(values.MedStaffFact_disDate) :""]}</div>',
		'</td>',
		'</tr></table>',
		'</div></tpl>',
		{
			formatWorkDataEndDate: function(endDate) {
				var fixed = (typeof endDate == 'object' ? Ext.util.Format.date(endDate, 'd.m.Y') : endDate);
				return fixed;
			}
		}
	),
	store: new Ext.data.Store({
		autoLoad: false,
		key: 'MedStaffFact_id',
		reader: new Ext.data.JsonReader({
			id: 'MedStaffFact_id'
		}, [
			{ name: 'MedStaffFact_id', mapping: 'MedStaffFact_id' },
			{ name: 'MedPersonal_TabCode', mapping: 'MedPersonal_TabCode' },
			{ name: 'MedPersonal_id', mapping: 'MedPersonal_id' },
			{ name: 'MedPersonal_FIO', mapping: 'MedPersonal_FIO' },
			{ name: 'LpuSection_Name', mapping: 'LpuSection_Name' },
			{ name: 'PostMed_Name', mapping: 'PostMed_Name' },
			{ name: 'MedStaffFact_Stavka', mapping: 'MedStaffFact_Stavka', type: 'string'},
			{ name: 'MedStaffFact_setDate', mapping: 'MedStaffFact_setDate' },
			{ name: 'MedStaffFact_disDate', mapping: 'MedStaffFact_disDate' }
		]),
		url: C_MPBYSTRUCTURE_LIST
	}),
	initComponent: function() {
		sw.Promed.SwMedStaffByLpuCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swmedstafffactbylpucombo', sw.Promed.SwMedStaffByLpuCombo);

sw.Promed.SwMesOldCombo = Ext.extend(Ext.form.ComboBox,
{
	allowBlank: false,
	displayField: 'Mes_Code',
	enableKeyEvents: true,
	fieldLabel: langs('Код') + getMESAlias(),
	forceSelection: true,
	hiddenName: 'Mes_id',
	initComponent: function() {
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);

		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'Mes_id'
			}, [
				{name: 'Mes_Code', mapping: 'Mes_Code'},
				{name: 'Mes_id', mapping: 'Mes_id'}
			]),
			url: '/?c=Mes&m=loadMesOldCodeList'
		});
	},
	minChars: 2,
	minLength: 1,
	mode: 'remote',
	onTrigger2Click: function() {
		if (this.disabled) {
			return false;
		}
		var combo = this;
		getWnd('swMesOldComboSearchWindow').show({
			onHide: function() {
				combo.focus(false);
			},
			onSelect: function(mesData) {
				combo.getStore().removeAll();
				combo.getStore().loadData([{
					Mes_Code: mesData.Mes_Code,
					Mes_id: mesData.Mes_id
				}]);
				combo.setValue(mesData[combo.valueField]);

				var index = combo.getStore().find('Mes_id', mesData.Mes_id);

				if (index == -1) {
					return false;
				}

				var record = combo.getStore().getAt(index);
				combo.fireEvent('select', combo, record, 0);
				combo.fireEvent('beforeselect', combo, record);
				getWnd('swMesOldComboSearchWindow').hide();
			}
		});
	},
	resizable: true,
	selectOnFocus: true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<h3>{Mes_Code}&nbsp;</h3>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'Mes_id'
});
Ext.reg('swmesoldcombo', sw.Promed.SwMesOldCombo);

sw.Promed.SwMesOldCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwMesOldCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwMesOldCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwMesOldCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;

sw.Promed.SwUslugaCombo = Ext.extend(Ext.form.ComboBox, {
	baseFilterFn: null,
	baseFilterScope: null,
	allowedCatCode: null,
	allowedCodeList: null,
	loadQuery: true,
	setLoadQuery: function(f)
	{
		this.loadQuery = f;
		// Здесь надо как то задисейблить триггер
	},
	clearBaseFilter: function()
	{
		this.baseFilterFn = null;
		this.baseFilterScope = null;
	},
	setBaseFilter: function(fn, scope)
	{
		this.baseFilterFn = fn;
		this.baseFilterScope = scope || this;
		this.store.filterBy(fn, scope);
	},
	codeField: 'Usluga_Code',
	displayField: 'Usluga_Name',
	doQuery: function(q, forceAll) {
		// значение для поиска по наименованию
		var name_q = '';
		if (q === undefined || q === null)
		{
			q = '';
		}
		else
		{
			var patt = (getGlobalOptions().region.nick == 'ufa')?new RegExp("^[A-Za-z0-9\.]+"):new RegExp("^[0-9]+");  // Коды для Уфы текстовые с точками могут быть 
			var sr = patt.exec(q);

			if (sr == null)
			{
				// так же можно искать по наименованию, если не числовой код
				name_q = q;
				q = '';				
			}
			else
			{
				q = sr[0];
			}
		}				

		// если ищем по наименовани.
		if ( name_q != '' )
			this.setRawValue(name_q);
		else
			this.setRawValue(q);

		var qe = {
			query: q,
			forceAll: forceAll,
			combo: this,
			cancel: false
		};

		if (this.fireEvent('beforequery', qe) === false || qe.cancel)
		{
			return false;
		}
		q = qe.query;
		forceAll = qe.forceAll;

		if ( (q.length >= this.minChars) || (this.loadQuery==false) || (name_q != '' && name_q.length >= this.minChars) )
		{
			if (this.lastQuery != q || (name_q != '' && this.lastQuery != name_q) )
			{
				if ( name_q != '' )
					this.lastQuery = name_q;
				else
					this.lastQuery = q;
				this.selectedIndex = -1;
				
				var isPskov = ( getGlobalOptions().region && getGlobalOptions().region.nick == 'pskov' );
				if (this.loadQuery==true)
				{
					if ( name_q != '' )
					{
						var first_upper_name_q = name_q.substr(0,1).toUpperCase() + name_q.substr(1, name_q.length - 1);						
						var where = "where ";
						var whereForClause = "";
						
						if(!isPskov) {
							where += "UslugaType_id = 2 and ";
							whereForClause += "record['UslugaType_id'] == '2' && ";
						}
						where += "(Usluga_Name like '%" + name_q + "%' or Usluga_Name like '" + (first_upper_name_q ? first_upper_name_q : '') + "%') ";
						whereForClause += "(record['Usluga_Name'].search(new RegExp('"+name_q+"', 'i'))>=0 || record['Usluga_Name'].search(new RegExp('^"+first_upper_name_q+"', 'i'))>=0) ";
						
						if(this.allowedCatCode) {
							where += 'and UslugaCategory_Code = "' + this.allowedCatCode + '" ';
							whereForClause += "&& record['UslugaCategory_Code'] == '" + this.allowedCatCode + "' ";
						}
						if(this.allowedCatCode && this.allowedCatCode == 1) {
							where += "and ( (substr(Usluga_Code, 1, 1) = 'A' and length(replace(Usluga_Code, '.', '')) in (8, 11)) or (substr(Usluga_Code, 1, 1) = 'B' and length(replace(Usluga_Code, '.', '')) in (8, 9)) or (substr(Usluga_Code, 1, 1) = 'D' and length(replace(Usluga_Code, '.', '')) in (7, 9, 10, 11)) or (substr(Usluga_Code, 1, 1) = 'F' and length(replace(Usluga_Code, '.', '')) in (7, 9)) ) ";
							whereForClause += "&& ( (record['Usluga_Code'].substring(0,1) == 'A' && record['Usluga_Code'].replace(/\\./ig, '').length.inlist([8, 11])) || (record['Usluga_Code'].substring(0,1) == 'B' && record['Usluga_Code'].replace(/\\./ig, '').length.inlist([8, 9])) || (record['Usluga_Code'].substring(0,1) == 'D' && record['Usluga_Code'].replace(/\\./ig, '').length.inlist([7, 9, 10, 11])) || (record['Usluga_Code'].substring(0,1) == 'F' && record['Usluga_Code'].replace(/\\./ig, '').length.inlist([7, 9])) ) ";
						}
						where += this.getFilterLpuLevelCode();
						whereForClause += this.getFilterLpuLevelCodeForClause();
						
						if(this.allowedCodeList) {
							where += " and Usluga_Code in (" + this.allowedCodeList + ") ";
							whereForClause += " && record['Usluga_Code'].inlist(["+this.allowedCodeList+"]) ";
						}
						if(!isPskov) {
							where += this.getFilterActualUsluga();
							whereForClause += this.getFilterActualUslugaForClause();
						}
						where +=  " limit 100";
						
						var clause = {where: whereForClause, limit: 100};
						
						//log(where);
						this.getStore().load({
							params: {
								where: where, clause: clause
							}
						});
					}
					else
					{
						var where = "where ";
						var whereForClause = "";
						
						if(!isPskov) {
							where += "UslugaType_id = 2 and ";
							whereForClause += "record['UslugaType_id'] == '2' && ";
						}
						where += "Usluga_Code like '" + q + "%' ";
						whereForClause += "(record['Usluga_Code'].search(new RegExp('^"+q+"', 'i'))>=0) ";
						if(this.allowedCatCode) {
							where += 'and UslugaCategory_Code = "' + this.allowedCatCode + '" ';
							whereForClause += "&& record['UslugaCategory_Code'] == '" + this.allowedCatCode + "' ";
						}
						if(this.allowedCatCode && this.allowedCatCode == 1) {
							where += "and ( (substr(Usluga_Code, 1, 1) = 'A' and length(replace(Usluga_Code, '.', '')) in (8, 11)) or (substr(Usluga_Code, 1, 1) = 'B' and length(replace(Usluga_Code, '.', '')) in (8, 9)) or (substr(Usluga_Code, 1, 1) = 'D' and length(replace(Usluga_Code, '.', '')) in (7, 9, 10, 11)) or (substr(Usluga_Code, 1, 1) = 'F' and length(replace(Usluga_Code, '.', '')) in (7, 9)) ) ";
							whereForClause += "&& ( (record['Usluga_Code'].substring(0,1) == 'A' && record['Usluga_Code'].replace(/\\./ig, '').length.inlist([8, 11])) || (record['Usluga_Code'].substring(0,1) == 'B' && record['Usluga_Code'].replace(/\\./ig, '').length.inlist([8, 9])) || (record['Usluga_Code'].substring(0,1) == 'D' && record['Usluga_Code'].replace(/\\./ig, '').length.inlist([7, 9, 10, 11])) || (record['Usluga_Code'].substring(0,1) == 'F' && record['Usluga_Code'].replace(/\\./ig, '').length.inlist([7, 9])) ) ";
						}
						where += this.getFilterLpuLevelCode();
						whereForClause += this.getFilterLpuLevelCodeForClause();
						
						if(this.allowedCodeList) {
							where += " and Usluga_Code in (" + this.allowedCodeList + ") ";
							whereForClause += " && record['Usluga_Code'].inlist(["+this.allowedCodeList+"]) ";
						}
						if(!isPskov) {
							where += this.getFilterActualUsluga();
							whereForClause += this.getFilterActualUslugaForClause();
						}
						where +=  " limit 100";
						
						var clause = {where: whereForClause, limit: 100};
						
						//log(where);
						this.getStore().load({
							params: {
								where: where, clause: clause
							}
						});
					}
				}
				if (this.baseFilterFn != null)
				{
					// Apply the filter on top of the base filter
					this.getStore().filterBy(function(record, id) {
						var result = false;
						result = this.baseFilterFn.call(this.baseFilterScope, record, id);
						if (result)
						{
							if (q.length > 0 && record.data[this.displayField].toString().substr(0, q.length).toLowerCase() != q.toLowerCase())
							{
								result = false;
							}
						}
						return result;
					}, this);
				}

				if (this.getStore().getCount() > 0)
				{
					this.expand();
					this.restrictHeight();

					if (this.lastQuery == this.allQuery)
					{
						if (this.editable)
						{
							this.el.dom.select();
						}

						if (!this.selectByValue(this.value, true))
						{
							this.select(0, true);
						}
					}
					else
					{
						if (this.typeAhead && this.lastKey != Ext.EventObject.BACKSPACE && this.lastKey != Ext.EventObject.DELETE)
						{
							this.taTask.delay(this.typeAheadDelay);
						}
					}
				}
				else
				{
					this.onEmptyResults();
				}
			}
			else
			{
				this.selectedIndex = -1;
				this.onLoad();
			}
		}
		else
		{
			this.getStore().removeAll();
			this.collapse();
		}
	},
	emptyText: langs('Введите код услуги...'),
	enableKeyEvents: true,
	fieldLabel: langs('Услуга'),
	focusOnShiftTab: null,
	focusOnTab: null,
	forceSelection: false,
	hiddenName: 'Usluga_id',
	hideTrigger: false,
	listeners: {
		'select': function(combo, record, index) {
			if ( record.get(combo.valueField) ) {
				combo.setRawValue(record.get('Usluga_Code') + ". " + record.get('Usluga_Name'));
				if ( getRegionNick() == 'ufa' )
					combo.setValue(record.get(combo.valueField));
			}
		},
		'blur': function(combo) {
			if ( this.ignoreBlurReload )
			{
				combo.collapse();
				return true;
			}
			this.dqTask.cancel();
			combo.collapse();

			if ( combo.getRawValue() == '' )
			{
				combo.setValue('');
			}
			else
			{
				
				var patt = new RegExp("^[0-9]+");
				var store = combo.getStore();
				var val = '';
				var name_val = '';

				var sr = patt.exec(this.getRawValue().toString());

				if (sr == null)
				{
					val = '';
					name_val = this.getRawValue().toString();
				}
				else
				{
					val = sr[0];
				}
				
				var isPskov = ( getGlobalOptions().region && getGlobalOptions().region.nick == 'pskov' );
				var where = "where ";
				var whereForClause = "";
				
				if(!isPskov) {
					where += "UslugaType_id = 2 and ";
					whereForClause += "record['UslugaType_id'] == '2' && ";
				}
				where += (name_val != '')?("Usluga_Code like '" + name_val + "%' "):("Usluga_Code like '" + val + "%' ");
				whereForClause += (name_val != '')?("(record['Usluga_Code'].search(new RegExp('^"+name_val+"', 'i'))>=0) "):("(record['Usluga_Code'].search(new RegExp('^"+val+"', 'i'))>=0) ");
				
				if(this.allowedCatCode) {
					where += 'and UslugaCategory_Code = "' + this.allowedCatCode + '" ';
					whereForClause += "&& record['UslugaCategory_Code'] == '" + this.allowedCatCode + "' ";
				}
				if(this.allowedCatCode && this.allowedCatCode == 1) {
					where += "and ( (substr(Usluga_Code, 1, 1) = 'A' and length(replace(Usluga_Code, '.', '')) in (8, 11)) or (substr(Usluga_Code, 1, 1) = 'B' and length(replace(Usluga_Code, '.', '')) in (8, 9)) or (substr(Usluga_Code, 1, 1) = 'D' and length(replace(Usluga_Code, '.', '')) in (7, 9, 10, 11)) or (substr(Usluga_Code, 1, 1) = 'F' and length(replace(Usluga_Code, '.', '')) in (7, 9)) ) ";
					whereForClause += "&& ( (record['Usluga_Code'].substring(0,1) == 'A' && record['Usluga_Code'].replace(/\\./ig, '').length.inlist([8, 11])) || (record['Usluga_Code'].substring(0,1) == 'B' && record['Usluga_Code'].replace(/\\./ig, '').length.inlist([8, 9])) || (record['Usluga_Code'].substring(0,1) == 'D' && record['Usluga_Code'].replace(/\\./ig, '').length.inlist([7, 9, 10, 11])) || (record['Usluga_Code'].substring(0,1) == 'F' && record['Usluga_Code'].replace(/\\./ig, '').length.inlist([7, 9])) ) ";
				}
				
				where += this.getFilterLpuLevelCode();
				whereForClause += this.getFilterLpuLevelCodeForClause();
				
				if(this.allowedCodeList) {
					where += " and Usluga_Code in (" + this.allowedCodeList + ") ";
					whereForClause += " && record['Usluga_Code'].inlist(["+this.allowedCodeList+"]) ";
				}
				if(!isPskov) {
					where += this.getFilterActualUsluga();
					whereForClause += this.getFilterActualUslugaForClause();
				}
				where +=  " limit 100";
				
				var clause = {where: whereForClause, limit: 100};
				
				//log(where);

				// Вместо load пробежимся по найденным записям и уставим выбранное значение 
				var yes = false;
				this.getStore().each(function(r){
					if ( r.data.Usluga_Code == val || r.data.Usluga_Name == name_val )
					{
						this.setValue(r.get(this.valueField));
						combo.fireEvent('select', combo, r, 0);
						//TODO: Возможно лишняя инструкция 
						combo.fireEvent('change', combo, r.get(this.valueField), '');
						if ( this.onChange && typeof this.onChange == 'function' ) {
							this.onChange(this, r.get(this.valueField));
						}
						yes = true;
						return true;
					}
				}.createDelegate(this));
				if (!yes) {
					this.setValue(null);
					combo.fireEvent('change', combo, null, '');
					if ( this.onChange && typeof this.onChange == 'function') {
						this.onChange(this, null);
					}
				}
				/*
				this.getStore().load({
					callback: function(rec, opt) {
						if ( rec.length > 0 && rec[0].get('Usluga_id') != '' )
						{
							this.setValue(rec[0].get(this.valueField));
							this.setRawValue(rec[0].get('Usluga_Code') + ". " + rec[0].get('Usluga_Name'));
						}
						else
						{
							this.setValue('');
							this.setRawValue('');
						}
					}.createDelegate(this),
					// params: {where: "where UslugaType_id = 2 and Usluga_Code like '" + val + "%'" + this.getFilterActualUsluga() + " limit 100"},
					params: {where: where, clause: clause},
					scope: this
				});
				*/
			}
		},
		'keydown': function(inp, e) {
			if ( e.getKey() == e.END)
			{
				this.inKeyMode = true;
				this.select(this.store.getCount() - 1);
			}

			if ( e.getKey() == e.HOME)
			{
				this.inKeyMode = true;
				this.select(0);
			}

			if ( e.getKey() == e.PAGE_UP)
			{
				this.inKeyMode = true;
				var ct = this.store.getCount();

				if (ct > 0)
				{
					if (this.selectedIndex == -1)
					{
						this.select(0);
					}
					else if (this.selectedIndex != 0)
					{
						if (this.selectedIndex - 10 >= 0)
							this.select(this.selectedIndex - 10);
						else
							this.select(0);
					}
				}
			}

			if ( e.getKey() == e.PAGE_DOWN)
			{
				if (!this.isExpanded())
				{
					this.onTriggerClick();
				}
				else
				{
					this.inKeyMode = true;
					var ct = this.store.getCount();
					if (ct > 0)
					{
						if (this.selectedIndex == -1)
						{
							this.select(0);
						}
						else if (this.selectedIndex != ct - 1)
						{
							if (this.selectedIndex + 10 < ct - 1)
								this.select(this.selectedIndex + 10);
							else
								this.select(ct - 1);
						}
					}
				}
			}

			if (e.shiftKey == false && e.getKey() == Ext.EventObject.TAB && inp.focusOnTab != null && inp.focusOnTab.toString().length > 0)
			{
				e.stopEvent();
				if (Ext.getCmp(this.focusOnTab))
				{
					Ext.getCmp(this.focusOnTab).focus(true);
				}
			}

			if (e.shiftKey == true && e.getKey() == Ext.EventObject.TAB && inp.focusOnShiftTab != null && inp.focusOnShiftTab.toString().length > 0)
			{
				e.stopEvent();
				if (Ext.getCmp(this.focusOnShiftTab))
				{
					Ext.getCmp(this.focusOnShiftTab).focus(true);
				}
			}

			if (e.altKey || e.ctrlKey || e.shiftKey)
				return true;

			if ( e.getKey() == e.DELETE)
			{
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if (inp.onClearValue)
					this.onClearValue();
				e.stopEvent();
				return true;
			}

			if (e.getKey() == e.F4)
			{
				this.onTrigger2Click();
			}
		}
	},
	loadingText: langs('Идет поиск...'),
	minChars: 1,
	minLength: 1,
	minLengthText: langs('Поле должно быть заполнено'),
	mode: 'local',
	enableLpuLevelCodeFilter: false,
	LpuLevel_Code: 0,
	Usluga_date: null, // dateFormat: 'd.m.Y'
	setLpuLevelCode: function(lpu_level_code) {
		this.LpuLevel_Code = lpu_level_code;
	},
	setLpuLevelCodeFilterEnabled: function(enable) {
		this.enableLpuLevelCodeFilter = enable;
	},
	setFilterActualUsluga: function(usluga_date,usluga_id) {
		if ( usluga_id )
		{
			// если передается usluga_id, то ничего не делаем.
			return true;
		}
		var combo = this;
		combo.Usluga_date = Ext.util.Format.date(usluga_date, 'd.m.Y');
		combo.getStore().removeAll();

		var currentValue = combo.getValue();
		// если было значение то подгрузить в сторе это значение.
		if (!Ext.isEmpty(currentValue)) {
			combo.clearValue();
			combo.getStore().load({
				callback: function() {
					combo.getStore().each(function(record) {
						if ( record.get('Usluga_id') == currentValue ) {
							combo.setValue(currentValue);
						}
					});
				},
				params: { where: "where Usluga_id = " + currentValue }
			});
		}
	},
	getFilterLpuLevelCode: function() {
		if ( this.LpuLevel_Code == 0 || this.enableLpuLevelCodeFilter == false ) {
			return '';
		}

		return " and Usluga_Code like '" + this.LpuLevel_Code + "%'";
	},
	getFilterLpuLevelCodeForClause: function() {
		if ( this.LpuLevel_Code == 0 || this.enableLpuLevelCodeFilter == false ) {
			return '';
		}

		return " && record['Usluga_Code'].search(new RegExp('^"+this.LpuLevel_Code+"', 'i'))>=0";
	},
	getFilterActualUslugaForClause: function() {
		if ( !this.Usluga_date)
		{
			return '';
		}
		var usluga_date_obj = Date.parseDate(this.Usluga_date, 'd.m.Y');
		var usluga_dt = usluga_date_obj.format('Y-m-d');

		return " && ((record['Usluga_begDT'] == '' || Ext.util.Format.date(Date.parseDate(record['Usluga_begDT'], 'd.m.Y'), 'Y-m-d') <=  '"+ usluga_dt +"') && (record['Usluga_endDT'] == '' || Ext.util.Format.date(Date.parseDate(record['Usluga_endDT'], 'd.m.Y'), 'Y-m-d') >= '"+ usluga_dt +"' ))";
	},
	getFilterActualUsluga: function() {
		if ( !this.Usluga_date)
		{
			return '';
		}
		var usluga_date_obj = Date.parseDate(this.Usluga_date, 'd.m.Y');
		var usluga_dt = usluga_date_obj.format('Y-m-d') +' 00:00:00';
		if (Ext.isRemoteDB) 
			return " and ((Usluga_begDT is null OR Usluga_begDT <=  '"+ usluga_dt +"') AND (Usluga_endDT is null OR Usluga_endDT >= '"+ usluga_dt +"' ))";
		else 
			return " and ((Usluga_begDT = '' OR Usluga_begDT <=  '"+ usluga_dt +"') AND (Usluga_endDT = '' OR Usluga_endDT >= '"+ usluga_dt +"' ))"; // todo: не знаю, откуда это родилось, пока не трогаю
	},
	onTrigger2Click: function() {
		if ( this.disabled || !this.loadQuery) {
			return false;
		}

		var combo = this;

		combo.fireEvent('beforequery', {combo: combo});
		getWnd('swUslugaSearchWindow').show({

			onHide: function() {
				combo.focus(false);
			},
			onSelect: function(uslugaData) {
				combo.getStore().removeAll();
				combo.getStore().loadData([{
					Usluga_Code: uslugaData.Usluga_Code,
					Usluga_id: uslugaData.Usluga_id,
					Usluga_Name: uslugaData.Usluga_Name
				}]);
				combo.setValue(uslugaData.Usluga_id);

				var index = combo.getStore().find('Usluga_id', uslugaData.Usluga_id);

				if (index == -1)
				{
					return false;
				}

				var record = combo.getStore().getAt(index);
				combo.fireEvent('select', combo, record, 0);
				combo.fireEvent('beforeselect', combo, record);
				getWnd('swUslugaSearchWindow').hide();
			},
			Usluga_date: combo.Usluga_date,
			allowedCatCode: combo.allowedCatCode,
			allowedCodeList: combo.allowedCodeList
		});
	},
	resizable: true,
	queryDelay: (Ext.isIndexedDb || Ext.isRemoteDB)?600:300,
	selectOnFocus: true,
/*
	setValue: function(v) {
		sw.Promed.SwUslugaCombo.superclass.setValue.apply(this, arguments);

		var r = this.findRecord(this.valueField, v);

		if ( r ) {
			if ( r.get(this.codeField) != "" ) {
				var text = r.get(this.codeField) + '. ' + r.get(this.displayField);
			}
			else {
				var text = r.get(this.displayField);
			}

			if ( r.get(this.valueField) != "" ) {
				Ext.form.ComboBox.superclass.setRawValue.call(this, text);
			}
		}
	},
*/
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'Usluga_Name', mapping: 'Usluga_Name'},
			{name: 'Usluga_id', mapping: 'Usluga_id'},
			{name: 'Usluga_Code', mapping: 'Usluga_Code'},
			{name: 'UslugaCategory_Code', mapping: 'UslugaCategory_Code'},
			{name: 'UslugaCategory_id', mapping: 'UslugaCategory_id'},
			{name: 'Usluga_begDT', mapping: 'Usluga_begDT'},
			{name: 'Usluga_endDT', mapping: 'Usluga_endDT'}
			/*
			{name: 'Usluga_Name', mapping: 'Usluga_Name', type: 'string'},
			{name: 'Usluga_id', mapping: 'Usluga_id', type: 'int'},
			{name: 'Usluga_pid', mapping: 'Usluga_pid', type: 'int'},
			{name: 'UslugaType_id', mapping: 'UslugaType_id', type: 'int'},
			{name: 'Usluga_Code', mapping: 'Usluga_Code', type: 'string'},
			{name: 'UslugaCategory_Code', mapping: 'UslugaCategory_Code', type: 'string'},
			{name: 'Usluga_begDT', mapping: 'Usluga_begDT', type: 'date'},
			{name: 'Usluga_endDT', mapping: 'Usluga_endDT', type: 'date'},
			{name: 'UslugaCategory_id', mapping: 'UslugaCategory_id', type: 'int'}
			*/
		],
		key: 'Usluga_id',
		sortInfo: {field: 'Usluga_Code'},
		tableName: 'Usluga'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 70px;"><font color="red">{Usluga_Code}.</font></td><td><h3>{Usluga_Name}</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'Usluga_id',
	width: 220,
	// xtype: 'swbaselocalcombo',
	initComponent: function() {
		sw.Promed.SwUslugaCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swuslugacombo', sw.Promed.SwUslugaCombo);

sw.Promed.SwUslugaCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwUslugaCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwUslugaCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwUslugaCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwUslugaCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
//sw.Promed.SwUslugaCombo.prototype.onTrigger2Click = this.onTrigger2Click;

// Талон по доп. диспансеризации - Прикреплен для
sw.Promed.SwAttachTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'AttachType',
		key: 'AttachType_id',
		autoLoad: false,
		baseParams: {object:'AttachType', AttachType_id:'',AttachType_Code:'',AttachType_Name:''},
		fields:
		[
			{name: 'AttachType_id',    type:'int'},
			{name: 'AttachType_Code', type:'int'},
			{name: 'AttachType_Name',  type:'string'}
		],
		sortInfo:
		{
			field: 'AttachType_Code'
		}
	}),
	//triggerAction: 'all',
	editable: false,
	codeField: 'AttachType_Code',
	displayField:'AttachType_Name',
	valueField: 'AttachType_id',
	hiddenName:'AttachType_id',
	fieldLabel: langs('Прикреплен для'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{AttachType_Code}</font>&nbsp;{AttachType_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwAttachTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swattachtypecombo', sw.Promed.SwAttachTypeCombo);

// Талон по доп. диспансеризации : Осмотр врача-специалиста - Специальность врача
sw.Promed.SwDopDispSpecCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'DopDispSpec',
		key: 'DopDispSpec_id',
		autoLoad: false,
		baseParams: {object:'DopDispSpec', DopDispSpec_id:'', DopDispSpec_Code:'', DopDispSpec_Name:''},
		fields:
		[
			{name: 'DopDispSpec_id', type:'int'},
			{name: 'DopDispSpec_Code', type:'int'},
			{name: 'DopDispSpec_Name',  type:'string'}
		],
		sortInfo:
		{
			field: 'DopDispSpec_Code'
		}
	}),
	//triggerAction: 'all',
	editable: false,
	codeField: 'DopDispSpec_Code',
	displayField:'DopDispSpec_Name',
	valueField: 'DopDispSpec_id',
	hiddenName:'DopDispSpec_id',
	fieldLabel: langs('Специальность врача'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{DopDispSpec_Code}</font>&nbsp;{DopDispSpec_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwDopDispSpecCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdopdispspeccombo', sw.Promed.SwDopDispSpecCombo);

// Талон по диспансеризации 14ти летних подростков: Осмотр врача-специалиста - Специальность врача
sw.Promed.SwTeen14DispSpecTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'Teen14DispSpecType',
		key: 'Teen14DispSpecType_id',
		autoLoad: false,
		baseParams: {object:'Teen14DispSpecType', Teen14DispSpecType_id:'', Teen14DispSpecType_Code:'', Teen14DispSpecType_Name:''},
		fields:
		[
			{name: 'Teen14DispSpecType_id', type:'int'},
			{name: 'Teen14DispSpecType_Code', type:'int'},
			{name: 'Teen14DispSpecType_Name',  type:'string'}
		],
		sortInfo:
		{
			field: 'Teen14DispSpecType_Code'
		}
	}),
	//triggerAction: 'all',
	editable: false,
	codeField: 'Teen14DispSpecType_Code',
	displayField:'Teen14DispSpecType_Name',
	valueField: 'Teen14DispSpecType_id',
	hiddenName:'Teen14DispSpecType_id',
	fieldLabel: langs('Специальность врача'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{Teen14DispSpecType_Code}</font>&nbsp;{Teen14DispSpecType_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwTeen14DispSpecTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swteen14dispspectypecombo', sw.Promed.SwTeen14DispSpecTypeCombo);

// Талон по диспансеризации детей-сирот: Осмотр врача-специалиста - Специальность врача
sw.Promed.SwOrpDispSpecCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'OrpDispSpec',
		key: 'OrpDispSpec_id',
		autoLoad: false,
		baseParams: {object:'OrpDispSpec', OrpDispSpec_id:'', OrpDispSpec_Code:'', OrpDispSpec_Name:''},
		fields:
		[
			{name: 'OrpDispSpec_id', type:'int'},
			{name: 'OrpDispSpec_Code', type:'int'},
			{name: 'OrpDispSpec_Name',  type:'string'}
		],
		sortInfo:
		{
			field: 'OrpDispSpec_Code'
		}
	}),
	//triggerAction: 'all',
	editable: false,
	codeField: 'OrpDispSpec_Code',
	displayField:'OrpDispSpec_Name',
	valueField: 'OrpDispSpec_id',
	hiddenName:'OrpDispSpec_id',
	fieldLabel: langs('Специальность врача'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{OrpDispSpec_Code}</font>&nbsp;{OrpDispSpec_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwOrpDispSpecCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('sworpdispspeccombo', sw.Promed.SwOrpDispSpecCombo);

// Талон по доп. диспансеризации : Осмотр врача-специалиста - Заболевание
sw.Promed.SwDopDispDiagTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'DopDispDiagType',
		key: 'DopDispDiagType_id',
		autoLoad: false,
		baseParams: {object:'DopDispDiagType', DopDispDiagType_id:'', DopDispDiagType_Code:'', DopDispDiagType_Name:''},
		fields:
		[
			{name: 'DopDispDiagType_id', type:'int'},
			{name: 'DopDispDiagType_Code', type:'int'},
			{name: 'DopDispDiagType_Name',  type:'string'}
		],
		sortInfo:
		{
			field: 'DopDispDiagType_Code'
		}
	}),
	//triggerAction: 'all',
	editable: false,
	codeField: 'DopDispDiagType_Code',
	displayField:'DopDispDiagType_Name',
	valueField: 'DopDispDiagType_id',
	hiddenName:'DopDispDiagType_id',
	fieldLabel: langs('Заболевание'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{DopDispDiagType_Code}</font>&nbsp;{DopDispDiagType_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwDopDispDiagTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdopdispdiagtypecombo', sw.Promed.SwDopDispDiagTypeCombo);

/*
sw.Promed.SwOrpDispDiagTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'OrpDispDiagType',
		key: 'OrpDispDiagType_id',
		autoLoad: false,
		baseParams: {object:'OrpDispDiagType', OrpDispDiagType_id:'', OrpDispDiagType_Code:'', OrpDispDiagType_Name:''},
		fields:
		[
			{name: 'OrpDispDiagType_id', type:'int'},
			{name: 'OrpDispDiagType_Code', type:'int'},
			{name: 'OrpDispDiagType_Name',  type:'string'}
		],
		sortInfo:
		{
			field: 'OrpDispDiagType_Code'
		}
	}),
	//triggerAction: 'all',
	editable: false,
	codeField: 'OrpDispDiagType_Code',
	displayField:'OrpDispDiagType_Name',
	valueField: 'OrpDispDiagType_id',
	hiddenName:'OrpDispDiagType_id',
	fieldLabel: langs('Заболевание'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{OrpDispDiagType_Code}</font>&nbsp;{OrpDispDiagType_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwOrpDispDiagTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('sworpdispdiagtypecombo', sw.Promed.SwOrpDispDiagTypeCombo);
*/

// Талон по доп. диспансеризации : Осмотр врача-специалиста - Стадия заболевания
sw.Promed.SwDeseaseStageCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'DeseaseStage',
		key: 'DeseaseStage_id',
		autoLoad: false,
		baseParams: {object:'DeseaseStage', DeseaseStage_id:'', DeseaseStage_Code:'', DeseaseStage_Name:''},
		fields:
		[
			{name: 'DeseaseStage_id', type:'int'},
			{name: 'DeseaseStage_Code', type:'int'},
			{name: 'DeseaseStage_Name',  type:'string'}
		],
		sortInfo:
		{
			field: 'DeseaseStage_Code'
		}
	}),
	//triggerAction: 'all',
	editable: false,
	codeField: 'DeseaseStage_Code',
	displayField:'DeseaseStage_Name',
	valueField: 'DeseaseStage_id',
	hiddenName:'DeseaseStage_id',
	fieldLabel: langs('Заболевание'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{DeseaseStage_Code}</font>&nbsp;{DeseaseStage_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwDeseaseStageCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdeseasestagecombo', sw.Promed.SwDeseaseStageCombo);

// Талон по доп. диспансеризации : Осмотр врача-специалиста - Группа здоровья
sw.Promed.SwHealthKindCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	//triggerAction: 'all',
	editable: false,
	codeField: 'HealthKind_Code',
	displayField:'HealthKind_Name',
	valueField: 'HealthKind_id',
	hiddenName:'HealthKind_id',
	fieldLabel: langs('Заболевание'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{HealthKind_Code}</font>&nbsp;{HealthKind_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwHealthKindCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			baseParams: {object:'HealthKind', HealthKind_id:'', HealthKind_Code:'', HealthKind_Name:''},
			dbFile: 'Promed.db',
			fields: [
				{name: 'HealthKind_id', type: 'int'},
				{name: 'HealthKind_Code', type: 'int'},
				{name: 'HealthKind_Name', type: 'string'}
			],
			key: 'HealthKind_id',
			sortInfo: {
				field: 'HealthKind_Code'
			},
			tableName: 'HealthKind'
		});
	}
});
Ext.reg('swhealthkindcombo', sw.Promed.SwHealthKindCombo);

// Талон по доп. диспансеризации : Осмотр врача-специалиста - Группа здоровья
sw.Promed.SwDopDispAlienCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	//triggerAction: 'all',
	editable: false,
	codeField: 'DopDispAlien_Code',
	displayField:'DopDispAlien_Name',
	valueField: 'DopDispAlien_id',
	hiddenName:'DopDispAlien_id',
	fieldLabel: '',
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{DopDispAlien_Code}</font>&nbsp;{DopDispAlien_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwDopDispAlienCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			baseParams: {object:'DopDispAlien', DopDispAlien_id:'', DopDispAlien_Code:'', DopDispAlien_Name:''},
			dbFile: 'Promed.db',
			fields: [
				{name: 'DopDispAlien_id', type: 'int'},
				{name: 'DopDispAlien_Code', type: 'int'},
				{name: 'DopDispAlien_Name', type: 'string'}
			],
			key: 'DopDispAlien_id',
			sortInfo: {
				field: 'DopDispAlien_Code'
			},
			tableName: 'DopDispAlien'
		});
	}
});
Ext.reg('swdopdispaliencombo', sw.Promed.SwDopDispAlienCombo);

// Талон по доп. диспансеризации : Лабораторное исследование - Вид
sw.Promed.SwDopDispUslugaTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'DopDispUslugaType',
		key: 'DopDispUslugaType_id',
		autoLoad: false,
		baseParams: {object:'DopDispUslugaType', DopDispUslugaType_id:'', DopDispUslugaType_Code:'', DopDispUslugaType_Name:''},
		fields:
		[
			{name: 'DopDispUslugaType_id', type:'int'},
			{name: 'DopDispUslugaType_Code', type:'int'},
			{name: 'DopDispUslugaType_Name',  type:'string'}
		],
		sortInfo:
		{
			field: 'DopDispUslugaType_Code'
		}
	}),
	//triggerAction: 'all',
	editable: false,
	codeField: 'DopDispUslugaType_Code',
	displayField:'DopDispUslugaType_Name',
	valueField: 'DopDispUslugaType_id',
	hiddenName:'DopDispUslugaType_id',
	fieldLabel: langs('Заболевание'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{DopDispUslugaType_Code}</font>&nbsp;{DopDispUslugaType_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwDopDispUslugaTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdopdispuslugatypecombo', sw.Promed.SwDopDispUslugaTypeCombo);

// Талон по доп. диспансеризации : Лабораторное исследование - Вид
sw.Promed.SwDispUslugaTeen14TypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'DispUslugaTeen14Type',
		key: 'DispUslugaTeen14Type_id',
		autoLoad: false,
		baseParams: {object:'DispUslugaTeen14Type', DispUslugaTeen14Type_id:'', DispUslugaTeen14Type_Code:'', DispUslugaTeen14Type_Name:''},
		fields:
		[
			{name: 'DispUslugaTeen14Type_id', type:'int'},
			{name: 'DispUslugaTeen14Type_Code', type:'int'},
			{name: 'DispUslugaTeen14Type_Name',  type:'string'}
		],
		sortInfo:
		{
			field: 'DispUslugaTeen14Type_Code'
		}
	}),
	//triggerAction: 'all',
	editable: false,
	codeField: 'DispUslugaTeen14Type_Code',
	displayField:'DispUslugaTeen14Type_Name',
	valueField: 'DispUslugaTeen14Type_id',
	hiddenName:'DispUslugaTeen14Type_id',
	fieldLabel: langs('Заболевание'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{DispUslugaTeen14Type_Code}</font>&nbsp;{DispUslugaTeen14Type_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwDispUslugaTeen14TypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdispuslugateen14typecombo', sw.Promed.SwDispUslugaTeen14TypeCombo);

// Талон по диспансеризации детей-сирот  : Лабораторное исследование - Вид
sw.Promed.SwOrpDispUslugaTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'OrpDispUslugaType',
		key: 'OrpDispUslugaType_id',
		autoLoad: false,
		fields:
		[
			{name: 'OrpDispUslugaType_id', type:'int'},
			{name: 'OrpDispUslugaType_Code', type:'int'},
			{name: 'OrpDispUslugaType_Name',  type:'string'}
		],
		sortInfo:
		{
			field: 'OrpDispUslugaType_Code'
		}
	}),
	//triggerAction: 'all',
	editable: false,
	codeField: 'OrpDispUslugaType_Code',
	displayField:'OrpDispUslugaType_Name',
	valueField: 'OrpDispUslugaType_id',
	hiddenName:'OrpDispUslugaType_id',
	fieldLabel: langs('Заболевание'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{OrpDispUslugaType_Code}</font>&nbsp;{OrpDispUslugaType_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwOrpDispUslugaTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('sworpdispuslugatypecombo', sw.Promed.SwOrpDispUslugaTypeCombo);

sw.Promed.SwPrehospDirectCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'PrehospDirect_Code',
	displayField: 'PrehospDirect_Name',
	editable: false,
	fieldLabel: langs('Кем направлен'),
	hiddenName: 'PrehospDirect_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'PrehospDirect_id', type: 'int'},
			{name: 'PrehospDirect_Code', type: 'int'},
			{name: 'PrehospDirect_Name', type: 'string'},
			{name: 'PrehospDirect_SysNick', type: 'string'}
		],
		key: 'PrehospDirect_id',
		sortInfo: {field: 'PrehospDirect_Code'},
		tableName: 'PrehospDirect'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{PrehospDirect_Code}</font>&nbsp;{PrehospDirect_Name}',
		'</div></tpl>'
	),
	valueField: 'PrehospDirect_id',
	initComponent: function() {
		sw.Promed.SwPrehospDirectCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swprehospdirectcombo', sw.Promed.SwPrehospDirectCombo);

sw.Promed.SwResultClassCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'ResultClass_Code',
	displayField: 'ResultClass_Name',
	editable: false,
	fieldLabel: langs('Результат лечения'),
	hiddenName: 'ResultClass_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'ResultClass_id', type: 'int'},
			{name: 'ResultClass_Code', type: 'int'},
			{name: 'ResultClass_Name', type: 'string'},
			{name: 'LeaveType_fedid', type: 'int'},
			{name: 'ResultClass_begDT', type: 'date', dateFormat: 'd.m.Y' },
			{name: 'ResultClass_endDT', type: 'date', dateFormat: 'd.m.Y' }
		],
		key: 'ResultClass_id',
		sortInfo: {field: 'ResultClass_Code'},
		tableName: 'ResultClass'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{ResultClass_Code}</font>&nbsp;{ResultClass_Name}',
		'</div></tpl>'
	),
	valueField: 'ResultClass_id',
	initComponent: function() {
		sw.Promed.SwResultClassCombo.superclass.initComponent.apply(this, arguments);

		if ( getRegionNick() == 'ekb' ) {
			this.loadParams = {
				params: {
					where: "where ResultClass_fedid is null"
				}
			};
		}
		else if ( getRegionNick() == 'kaluga' ) {
			this.loadParams = {
				params: {
					where: "where ResultClass_Code in ('301','305','308','314')"
				}
			};
		}
	}
});
Ext.reg('swresultclasscombo', sw.Promed.SwResultClassCombo);

sw.Promed.SwDirectTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'DirectType_Code',
	displayField: 'DirectType_Name',
	editable: false,
	fieldLabel: langs('Направление'),
	hiddenName: 'DirectType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'DirectType_id', type: 'int'},
			{name: 'DirectType_Code', type: 'int'},
			{name: 'DirectType_Name', type: 'string'}
		],
		key: 'DirectType_id',
		sortInfo: {field: 'DirectType_Code'},
		tableName: 'DirectType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{DirectType_Code}</font>&nbsp;{DirectType_Name}',
		'</div></tpl>'
	),
	valueField: 'DirectType_id',
	initComponent: function() {
		sw.Promed.SwDirectTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdirecttypecombo', sw.Promed.SwDirectTypeCombo);

sw.Promed.SwDirectClassCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'DirectClass_Code',
	displayField: 'DirectClass_Name',
	editable: false,
	fieldLabel: langs('Куда направлен'),
	hiddenName: 'DirectClass_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'DirectClass_id', type: 'int'},
			{name: 'DirectClass_Code', type: 'int'},
			{name: 'DirectClass_Name', type: 'string'}
		],
		key: 'DirectClass_id',
		sortInfo: {field: 'DirectClass_Code'},
		tableName: 'DirectClass'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{DirectClass_Code}</font>&nbsp;{DirectClass_Name}',
		'</div></tpl>'
	),
	valueField: 'DirectClass_id',
	initComponent: function() {
		sw.Promed.SwDirectClassCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdirectclasscombo', sw.Promed.SwDirectClassCombo);

sw.Promed.SwServiceTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'ServiceType_Code',
	displayField: 'ServiceType_Name',
	editable: false,
	fieldLabel: langs('Место'),
	hiddenName: 'ServiceType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'ServiceType_id', type: 'int'},
			{name: 'ServiceType_Code', type: 'string'},
			{name: 'ServiceType_SysNick', type: 'string'},
			{name: 'ServiceType_Name', type: 'string'},
			{name: 'ServiceType_begDate', type: 'date', dateFormat: 'd.m.Y'},
			{name: 'ServiceType_endDate', type: 'date', dateFormat: 'd.m.Y'}
		],
		key: 'ServiceType_id',
		sortInfo: {
			field: 'ServiceType_Code'
		},
		tableName: 'ServiceType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{ServiceType_Code}</font>&nbsp;{ServiceType_Name}',
		'</div></tpl>'
	),
	valueField: 'ServiceType_id',
	initComponent: function() {
		sw.Promed.SwServiceTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swservicetypecombo', sw.Promed.SwServiceTypeCombo);

/**
 * Комбобокс выбора только года, c типом string
 */

sw.Promed.SwYearsCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	//используется в "Паспорт МО -> Оснащенность компьютерным оборудованием"

	store: new Ext.data.SimpleStore({
		key: 'Year_Num',
		autoLoad: false,
		sortInfo: {
			field: 'Year_Num',
			direction: 'DESC'
		},
		fields:
			[
				{name: 'Year_id', type: 'int'},
				{name: 'Year_Num', type: 'string'}
			],
		data:
			(function() {

				//интервал лет
				var yearsInterval = 100;

				var k = 1,
					yearsData = [],
					currentDate = new Date,
					thisYear = currentDate.getFullYear();

				for (var i = thisYear - yearsInterval; i <= thisYear; i++) {

					yearsData.push([k, i]);
					k++;
				}

				return yearsData;
			})()
	}),
	editable: false,
	displayField:'Year_Num',
	valueField: 'Year_Num',
	fieldLabel: langs('Год'),
	allowBlank: false,
	initComponent: function()
	{
		sw.Promed.SwYearsCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swyearscombo', sw.Promed.SwYearsCombo);

/**
 * Комбобокс выбора целей использования
 */

sw.Promed.SwComputerEquipUsageCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
	{
		//используется в "Паспорт МО -> Оснащенность компьютерным оборудованием"

		store: new Ext.data.SimpleStore({
			key: 'ComputerEquip_Column',
			autoLoad: false,
			fields:
				[
					{name: 'ComputerEquip_Column', type: 'string'},
					{name: 'ComputerEquipUse_Name', type: 'string'}
				],
			data:
				[
					['ComputerEquip_AHDAmb',langs('Для нужд АХД')+' '+langs('амбулаторно')],
					['ComputerEquip_AHDStac',langs('Для нужд АХД')+' '+langs('в стационарах')],
					['ComputerEquip_MedPAmb',langs('Для медицинского персонала')+' '+langs('амбулаторно')],
					['ComputerEquip_MedPStac',langs('Для медицинского персонала')+' '+langs('в стационарах')],
					['ComputerEquip_other',langs('Прочие')],
					['ComputerEquip_MedStatCab',langs('Кабинеты медицинской статистики')]
				]
		}),
		editable: false,
		displayField:'ComputerEquipUse_Name',
		valueField: 'ComputerEquip_Column',
		fieldLabel: langs('Цели использования'),
		allowBlank: true,
		initComponent: function()
		{
			//чтобы пустое поле было широкое, а не узкое
			if(!this.tpl) {
				this.tpl = new Ext.XTemplate('<tpl for="."><div class="x-combo-list-item">{',  this.displayField , ':this.blank}</div></tpl>', {
					blank: function(value){
						return value==='' ? '&nbsp' : value;
					}
				});
			}

			sw.Promed.SwComputerEquipUsageCombo.superclass.initComponent.apply(this, arguments);
		}
	});

Ext.reg('SwComputerEquipUsageCombo', sw.Promed.SwComputerEquipUsageCombo);

/**
 * Комбобокс выбора типа журнала анкет по онкологии 
 */


sw.Promed.amm_OnkoJournalTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.data.SimpleStore(
	{
		key: 'OnkoType_id',
		autoLoad: false,
		fields:
		[
			{name: 'OnkoType_id', type: 'int'},
			{name: 'OnkoType_Name', type: 'string'}
		],
		data: [
            //[1,'Актуальные анкеты'],
			[1,langs('Все')],
			[2,langs('Все анкеты')]			
		]
	}),	
	editable: false,
	displayField:'OnkoType_Name',
	valueField: 'OnkoType_id',
	fieldLabel: langs('Тип данных'),
        allowBlank: false,
	initComponent: function()
	{
		sw.Promed.amm_OnkoJournalTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('amm_OnkoJournalTypeCombo', sw.Promed.amm_OnkoJournalTypeCombo);


sw.Promed.amm_SubAccountTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.data.SimpleStore(
	{
		key: 'SubAccountType_Code',
		autoLoad: false,
		fields:
		[
			{name: 'SubAccountType_Code', type: 'int'},
			{name: 'SubAccountType_Name', type: 'string'}
		],
		data: [
			['1','Доступно'],
			['2','Зарезервировано'],
			['3','В пути']		
		]
	}),	
	editable: false,
	displayField:'SubAccountType_Name',
	valueField: 'SubAccountType_Code',
	fieldLabel: langs('Тип субсчета'),
        allowBlank: true,
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
                   '{SubAccountType_Name}&nbsp;'+
                   '</div></tpl>',
	initComponent: function()
	{
		sw.Promed.amm_SubAccountTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('amm_SubAccountTypeCombo', sw.Promed.amm_SubAccountTypeCombo);


sw.Promed.amm_DrugPeriodCloseTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.data.SimpleStore(
	{
		key: 'DrugPeriodCloseType_id',
		autoLoad: false,
		fields:
		[
			{name: 'DrugPeriodCloseType_id', type: 'int'},
			{name: 'DrugPeriodCloseType_Name', type: 'string'}
		],
		data: [
			['1','Открыт'],
			['2','Закрыт']		
		]
	}),	
	editable: false,
	displayField:'DrugPeriodCloseType_Name',
	valueField: 'DrugPeriodCloseType_id',
	fieldLabel: 'Статус периода',
        allowBlank: true,
	initComponent: function()
	{
		sw.Promed.amm_DrugPeriodCloseTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('amm_DrugPeriodCloseTypeCombo', sw.Promed.amm_DrugPeriodCloseTypeCombo);


// tagir
/* 
sw.Promed.swPrivBacNameCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	fieldLabel: langs('Препараты'),
	valueField: 'Bac_id',
		displayField: 'Bac_name',
		mode: 'local',

		 store: new Ext.data.Store({

			autoLoad: true,
			reader: new Ext.data.JsonReader({
				fields: ['Bac_id', 'Bac_name'],
				root: 'rows'
			}),
			proxy: new Ext.data.HttpProxy({
				method: 'POST',
				url: '/?c=Win1&m=test'
			})

		   }),

//	tpl: new Ext.XTemplate(
//		'<tpl for="."><div class="x-combo-list-item">',
//		'<font color="red">{ServiceType_Code}</font>&nbsp;{Bac_Name}',
//		'</div></tpl>'
//	),
	//valueField: 'ServiceType_id',
	initComponent: function() {
		sw.Promed.swPrivBacNameCombo.superclass.initComponent.apply(this, arguments);
	}
}); 
Ext.reg('swprivbacnamecombo', sw.Promed.swPrivBacNameCombo);
*/
sw.Promed.amm_VaccineCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	fieldLabel: '',
	valueField: 'Vaccine_id',
		displayField: 'Vaccine_Name',
		mode: 'local',

		 store: new Ext.data.Store({

			autoLoad: false,
			reader: new Ext.data.JsonReader({
				fields: ['Vaccine_id', 'Vaccine_Name'],
				root: 'rows'
			}),
			proxy: new Ext.data.HttpProxy({
				method: 'POST',
				url: '/?c=Vaccine_List&m=getVaccine4Combo'
			})

		   }),

	initComponent: function() {
		sw.Promed.amm_VaccineCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('amm_VaccineCombo', sw.Promed.amm_VaccineCombo);


sw.Promed.amm_GrupRiskCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.data.SimpleStore(
	{
		key: 'id',
		autoLoad: false,
		fields:
		[
			{name: 'id', type: 'int'},
			{name: 'value', type: 'string'}
		],
		data: [
			[1,langs('1-ая')],
			[2,langs('2-ая')]			
		]
	}),	
	editable: false,
	displayField:'value',
	valueField: 'id',
	fieldLabel: langs('Группа риска'),
	initComponent: function()
	{
		sw.Promed.amm_GrupRiskCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('amm_GrupRiskCombo', sw.Promed.amm_GrupRiskCombo);

sw.Promed.amm_FlMokCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	fieldLabel: langs('Мoкрота'),
	valueField: 'fl_SprValue_id',
        displayField: 'fl_SprValue_value',
        mode: 'local',
        editable: false,

         store: new Ext.data.Store({
            autoLoad: false,
            reader: new Ext.data.JsonReader({
                fields: ['fl_SprValue_id', 'fl_SprValue_value'],
                root: 'rows'
            }),
            proxy: new Ext.data.HttpProxy({
                method: 'POST',
                //url: '/?c=VaccineCtrl&m=getFlMokrotaList'
                url: '/?c=FluorCtrl&m=getFlMokrotaList'
            })

           }),

	initComponent: function() {
		sw.Promed.amm_FlMokCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('amm_FlMokCombo', sw.Promed.amm_FlMokCombo);


sw.Promed.amm_FlResultCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	fieldLabel: langs('Результат'),
	valueField: 'fl_SprValue_id',
        displayField: 'fl_SprValue_value',
        mode: 'local',
        editable: false,

         store: new Ext.data.Store({
            autoLoad: false,
            reader: new Ext.data.JsonReader({
                fields: ['fl_SprValue_id', 'fl_SprValue_value'],
                root: 'rows'
            }),
            proxy: new Ext.data.HttpProxy({
                method: 'POST',
                //url: '/?c=VaccineCtrl&m=getFlResultList'
                url: '/?c=FluorCtrl&m=getFlResultList'
            })

           }),

	initComponent: function() {
		sw.Promed.amm_FlResultCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('amm_FlResultCombo', sw.Promed.amm_FlResultCombo);

/*
sw.Promed.amm_FlReasonCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	fieldLabel: langs('Причина'),
	valueField: 'fl_SprValue_id',
        displayField: 'fl_SprValue_value',
        mode: 'local',
        editable: false,

         store: new Ext.data.Store({
            autoLoad: true,
            reader: new Ext.data.JsonReader({
                fields: ['fl_SprValue_id', 'fl_SprValue_value'],
                root: 'rows'
            }),
            proxy: new Ext.data.HttpProxy({
                method: 'POST',
                url: '/?c=VaccineCtrl&m=getFlReasonList'
            })

           }),

	initComponent: function() {
		sw.Promed.amm_FlReasonCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('amm_FlReasonCombo', sw.Promed.amm_FlResultCombo);
*/

sw.Promed.ammTypePeriodcombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	fieldLabel: '',
	valueField: 'TipPeriod_id',
		displayField: 'TipPeriod_name',
		mode: 'local',

		 store: new Ext.data.Store({

			autoLoad: false,
			reader: new Ext.data.JsonReader({
				fields: ['TipPeriod_id', 'TipPeriod_name'],
				root: 'rows'
			}),
			proxy: new Ext.data.HttpProxy({
				method: 'POST',
				url: '/?c=Vaccine&m=GetVaccineTypePeriod'
			})

		   }),

	initComponent: function() {
		sw.Promed.ammTypePeriodcombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('ammTypePeriodcombo', sw.Promed.ammTypePeriodcombo);

sw.Promed.ammVaccineWaycombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	fieldLabel: '',
	valueField: 'VaccineWay_id',
		displayField: 'VaccineWay_name',
		mode: 'local',

		 store: new Ext.data.Store({

			autoLoad: false,
			reader: new Ext.data.JsonReader({
				fields: ['VaccineWay_id', 'VaccineWay_name'],
				root: 'rows'
			}),
			proxy: new Ext.data.HttpProxy({
				method: 'POST',
				url: '/?c=Vaccine&m=GetVaccineWay'
			})

		   }),

	initComponent: function() {
		sw.Promed.ammVaccineWaycombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('ammVaccineWaycombo', sw.Promed.ammVaccineWaycombo);

sw.Promed.ammVaccinePlaceCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	fieldLabel: '',
	valueField: 'VaccinePlace_id',
		displayField: 'VaccinePlace_name',
		mode: 'local',
//        VacineWay_id: -1,

		 store: new Ext.data.Store({

			autoLoad: false,
			reader: new Ext.data.JsonReader({
				fields: ['VaccinePlace_id', 'VaccinePlace_name'],
				root: 'rows'
			}),
			proxy: new Ext.data.HttpProxy({
				method: 'POST',
				url: '/?c=Vaccine&m=GetVaccinePlace'
			})

		   }),

	initComponent: function() {
		sw.Promed.ammVaccinePlaceCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('ammVaccinePlaceCombo', sw.Promed.ammVaccinePlaceCombo);


sw.Promed.amm_SprInoculationCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	fieldLabel: '',
	valueField: 'VaccineType_id',
	displayField: 'VaccineType_Name',  //'Name',
	mode: 'local',
	default1Row: true, //флаг "выводить после загрузки первую строку комбобокса"
	emptyText: VAC_EMPTY_TEXT,

	store: new Ext.data.Store({
	  autoLoad: false,
	  reader: new Ext.data.JsonReader({
		  fields: ['VaccineType_id', 'VaccineType_Name'],
		  root: 'rows'
	  }),
	  proxy: new Ext.data.HttpProxy({
		  method: 'POST',
		  url: '/?c=Vaccine_List&m=GetSprInoculation'
	  })
//	  , listeners: {
//		'load': function( obj, records, options ) {
//		  if (obj.parentId) {
//			Ext.getCmp(obj.parentId).emptyText = VAC_EMPTY_TEXT;
//		  }
//		}
//	  }
	}),

	initComponent: function() {
	  sw.Promed.amm_SprInoculationCombo.superclass.initComponent.apply(this, arguments);
//      this.emptyText = VAC_LOAD_WAIT;
	  if (this.id) this.store.parentId = this.id;
//        this.setValue(VAC_LOAD_WAIT);
	}
	
//    , listeners: {
//      'load': function( obj, records, options ) {
//        this.emptyText = VAC_EMPTY_TEXT;
//        if ((records.length > 0) && obj.default1Row && (obj.getValue() == null)) {
//          obj.setValue(obj.getStore().getAt(0).get(obj.valueField));
//        } else if (obj.getValue() == null) {
//          obj.reset();
//        }
//      }
//    }
});
Ext.reg('amm_SprInoculationCombo', sw.Promed.amm_SprInoculationCombo);

sw.Promed.amm_NumSchemeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	fieldLabel: '',
	valueField: 'Scheme_Num',
		displayField: 'Scheme_Num2',
		mode: 'local',

		 store: new Ext.data.Store({

			autoLoad: false,
			reader: new Ext.data.JsonReader({
				fields: ['vaccineType_id', 'Scheme_Num', 'Scheme_Num2'],
				root: 'rows'
			}),
			proxy: new Ext.data.HttpProxy({
				method: 'POST',
				url: '/?c=Vaccine_List&m=GetListNumSchemeCombo'
			})

		   }),

	initComponent: function() {
		sw.Promed.amm_NumSchemeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('amm_NumSchemeCombo', sw.Promed.amm_NumSchemeCombo);

sw.Promed.amm_VacWayPlaceCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: '',
  valueField: 'VaccineWayPlace_id',
  displayField: 'VaccineWayPlace_Name',
  mode: 'local',
  default1Row: true, //флаг "выводить после загрузки первую строку комбобокса"
  emptyText: VAC_EMPTY_TEXT,
  //mode: 'remote',
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['VaccineWayPlace_id', 'VaccineWayPlace_Name', 'VaccineWay_id'],
	  root: 'rows'
	}),
	key: 'VaccineWayPlace_id',
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=VaccineCtrl&m=GetVaccineWay'
	})
	, listeners: {
	  'load': function( obj, records, options ) {
		if (obj.parentId) {
		  Ext.getCmp(obj.parentId).emptyText = VAC_EMPTY_TEXT;
		}
	  }
	}
  }),
  initComponent: function() {
	sw.Promed.amm_VacWayPlaceCombo.superclass.initComponent.apply(this, arguments);
//    this.emptyText = VAC_LOAD_WAIT;
	if (this.id) this.store.parentId = this.id;
//    this.setValue(VAC_LOAD_WAIT);
  }
//  , listeners: {
//    'load': function( obj, records, options ) {
//        this.emptyText = VAC_EMPTY_TEXT;
//        if ((records.length > 0) && obj.default1Row && (obj.getValue() == null)) {
//          obj.setValue(obj.getStore().getAt(0).get(obj.valueField));
//        } else if (obj.getValue() == null) {
//          obj.reset();
//        }
//    }
//  }
});
Ext.reg('amm_VacWayPlaceCombo', sw.Promed.amm_VacWayPlaceCombo);

sw.Promed.amm_comboMethodAndPlaceOfIntroduction = Ext.extend(sw.Promed.amm_VacWayPlaceCombo, {
	fieldLabel: 'Способ и место введения',
	valueField: 'id_VaccineWayPlace_VaccinePlace',
	displayField: 'VaccineWayPlace_Name',
	store: new Ext.data.Store({
		autoLoad: false,
		reader: new Ext.data.JsonReader({
			fields: ['id_VaccineWayPlace_VaccinePlace', 'VaccineWayPlace_id', 'VaccineWayPlace_Name', 'VaccineWay_id', 'VaccinePlace_id'],
			root: 'rows'
		}),
		key: 'id_VaccineWayPlace_VaccinePlace',
		proxy: new Ext.data.HttpProxy({
			method: 'POST',
			url: '/?c=VaccineCtrl&m=GetVaccineWay'
		})
		, listeners: {
			'load': function( obj, records, options ) {
				if (obj.parentId) {
					Ext.getCmp(obj.parentId).emptyText = VAC_EMPTY_TEXT;
				}
			}
		}
	}),
});
Ext.reg('amm_comboMethodAndPlaceOfIntroduction', sw.Promed.amm_comboMethodAndPlaceOfIntroduction);

sw.Promed.amm_VacDozeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: '',
  valueField: 'VaccineDose_id',
  displayField: 'VaccineDose_Name',
  mode: 'local',
  default1Row: true, //флаг "выводить после загрузки первую строку комбобокса"
  //blankText: 'blankText',
  emptyText: VAC_EMPTY_TEXT,
//  processValue: function(value){
//    //if(this.stripCharsRe){
//    if (value == undefined) return '';
//    if(VAC_LOAD_WAIT){
//      var newValue=value.replace(this.stripCharsRe,'');
//      if(newValue!==value){
//        this.setRawValue(newValue);
//        return newValue;
//      }
//    }
//  },
  //mode: 'remote',
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['VaccineDose_id', 'VaccineDose_Name'],
	  root: 'rows'
	}),
	key: 'VaccineDose_id',
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=VaccineCtrl&m=GetVaccineDoze'
	})
	, listeners: {
	  'load': function( obj, records, options ) {
		if (obj.parentId) {
		  Ext.getCmp(obj.parentId).emptyText = VAC_EMPTY_TEXT;
		}
	  }
	}
  }),
  initComponent: function() {
	sw.Promed.amm_VacDozeCombo.superclass.initComponent.apply(this, arguments);
//    this.emptyText = VAC_LOAD_WAIT;
	if (this.id) this.store.parentId = this.id;
//    this.setValue(VAC_LOAD_WAIT);
//    consoleLog('this.processValue:');
//    consoleLog(this.processValue);
  }
//  , listeners: {
//    'load': function( obj, records, options ) {
//////        if ((records.length == 0) || (records.length > 0 && !(obj.default1Row)  )) { }
////      if ((records.length > 0) && obj.default1Row && (obj.getValue() == VAC_LOAD_WAIT || obj.getValue() == '')) {
////        obj.setValue(obj.getStore().getAt(0).get(obj.valueField));
////      } else if (obj.getValue() == VAC_LOAD_WAIT) {
////        obj.reset();
////      }
//        this.emptyText = VAC_EMPTY_TEXT;
//        if ((records.length > 0) && obj.default1Row && (obj.getValue() == null)) {
//          obj.setValue(obj.getStore().getAt(0).get(obj.valueField));
//        } else if (obj.getValue() == null) {
//          obj.reset();
//        }
//    }
//  }
});
Ext.reg('amm_VacDozeCombo', sw.Promed.amm_VacDozeCombo);

sw.Promed.amm_DozeTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: '',
  valueField: 'DoseType_id',
  displayField: 'DoseType_Name',
  mode: 'local',
  default1Row: true, //флаг "выводить после загрузки первую строку комбобокса"
  //blankText: 'blankText',
  emptyText: VAC_EMPTY_TEXT,
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['DoseType_id', 'DoseType_Name'],
	  root: 'rows'
	}),
	key: 'DoseType_id',
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=VaccineCtrl&m=GetDozeType'
	})
//    , listeners: {
//      'load': function( obj, records, options ) {
//        if (obj.parentId) {
//          Ext.getCmp(obj.parentId).emptyText = VAC_EMPTY_TEXT;
//        }
//      }
//    }
  }),
  initComponent: function() {
	sw.Promed.amm_DozeTypeCombo.superclass.initComponent.apply(this, arguments);
//    this.emptyText = VAC_LOAD_WAIT;
	if (this.id) this.store.parentId = this.id;
  }
});
Ext.reg('amm_DozeTypeCombo', sw.Promed.amm_DozeTypeCombo);

sw.Promed.amm_WayTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: '',
  valueField: 'VaccineWay_id',
  displayField: 'VaccineWay_Name',
  mode: 'local',
  default1Row: true, //флаг "выводить после загрузки первую строку комбобокса"
  //blankText: 'blankText',
  emptyText: VAC_EMPTY_TEXT,
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['VaccineWay_id', 'VaccineWay_Name'],
	  root: 'rows'
	}),
	key: 'VaccineWay_id',
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=VaccineCtrl&m=GetWayType'
	})
//    , listeners: {
//      'load': function( obj, records, options ) {
//        if (obj.parentId) {
//          Ext.getCmp(obj.parentId).emptyText = VAC_EMPTY_TEXT;
//        }
//      }
//    }
  }),
  initComponent: function() {
	sw.Promed.amm_WayTypeCombo.superclass.initComponent.apply(this, arguments);
//    this.emptyText = VAC_LOAD_WAIT;
//    if (this.id) this.store.parentId = this.id;
  }
});
Ext.reg('amm_WayTypeCombo', sw.Promed.amm_WayTypeCombo);

sw.Promed.amm_PlaceTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: '',
  editable: false,
  valueField: 'VaccinePlaceHome_id',
  displayField: 'VaccinePlace_Name',
  mode: 'local',
  default1Row: true, //флаг "выводить после загрузки первую строку комбобокса"
  //blankText: 'blankText',
  emptyText: VAC_EMPTY_TEXT,
  tpl: '<tpl for="."><div class="x-combo-list-item">'+
    '{VaccinePlace_Name}&nbsp;'+
    '</div></tpl>',        
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['VaccinePlaceHome_id', 'VaccinePlace_Name', 'VaccineWay_id'],
	  root: 'rows'
	}),
	key: 'VaccinePlaceHome_id',
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=VaccineCtrl&m=GetPlaceType'
	})
//    , listeners: {
//      'load': function( obj, records, options ) {
//        if (obj.parentId) {
//          Ext.getCmp(obj.parentId).emptyText = VAC_EMPTY_TEXT;
//        }
//      }
//    }
  }),
  initComponent: function() {
	sw.Promed.amm_PlaceTypeCombo.superclass.initComponent.apply(this, arguments);
//    this.emptyText = VAC_LOAD_WAIT;
//    if (this.id) this.store.parentId = this.id;
  }
});
Ext.reg('amm_PlaceTypeCombo', sw.Promed.amm_PlaceTypeCombo);

/**
*   amm_PlaceTypeComboW - аналог amm_PlaceTypeCombo, сделанный для того,
*   чтобы в одной форме исрользовать два независимыз объекта
*   одного типа
 */

sw.Promed.amm_PlaceTypeComboW = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: '',
  editable: false,
  valueField: 'VaccinePlaceHome_id',
  displayField: 'VaccinePlace_Name',
  mode: 'local',
  default1Row: true, //флаг "выводить после загрузки первую строку комбобокса"
  //blankText: 'blankText',
  emptyText: VAC_EMPTY_TEXT,
  tpl: '<tpl for="."><div class="x-combo-list-item">'+
    '{VaccinePlace_Name}&nbsp;'+
    '</div></tpl>',        
  store: new Ext.data.Store({
    autoLoad: false,
    reader: new Ext.data.JsonReader({
      fields: ['VaccinePlaceHome_id', 'VaccinePlace_Name', 'VaccineWay_id'],
      root: 'rows'
    }),
    key: 'VaccinePlaceHome_id',
    proxy: new Ext.data.HttpProxy({
      method: 'POST',
      url: '/?c=VaccineCtrl&m=GetPlaceType'
    })
//    , listeners: {
//      'load': function( obj, records, options ) {
//        if (obj.parentId) {
//          Ext.getCmp(obj.parentId).emptyText = VAC_EMPTY_TEXT;
//        }
//      }
//    }
  }),
  initComponent: function() {
    sw.Promed.amm_PlaceTypeComboW.superclass.initComponent.apply(this, arguments);
//    this.emptyText = VAC_LOAD_WAIT;
//    if (this.id) this.store.parentId = this.id;
  }
});
Ext.reg('amm_PlaceTypeComboW', sw.Promed.amm_PlaceTypeComboW);



sw.Promed.amm_VaccineListCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: '',
//  id: 'VaccineListCombo',
  valueField: 'Vaccine_id',
  displayField: 'GRID_NAME_VAC',
  vaccineParams: null,
  mode: 'local',
  default1Row: true, //флаг "выводить после загрузки первую строку комбобокса"
  emptyText: VAC_EMPTY_TEXT,
  store: new Ext.data.Store({
	autoLoad: false,
	//baseParams: {VaccineType_id:'3', BirthDay:'03.05.2011'},
	reader: new Ext.data.JsonReader({
	  fields: ['Vaccine_id', 'GRID_NAME_VAC'],
	  root: 'rows'
	}),
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=VaccineCtrl&m=loadVaccineList'
	})
	, listeners: {
	  'load': function( obj, records, options ) {
//        consoleLog('obj.parentId');
//        consoleLog(obj.parentId);
		if (obj.parentId) {
//          consoleLog(Ext.getCmp(obj.parentId));
//          Ext.getCmp(obj.parentId).fireEvent('loaded', Ext.getCmp(obj.parentId), records);
		  Ext.getCmp(obj.parentId).emptyText = VAC_EMPTY_TEXT;
//          consoleLog('fireEventload');
		}
	  }
	}
  }),
  
  initComponent: function() {
	sw.Promed.amm_VaccineListCombo.superclass.initComponent.apply(this, arguments);
//    this.emptyText = VAC_LOAD_WAIT;
	if (this.id) this.store.parentId = this.id;
  }
  
//  , listeners: {
//    loaded: function( obj, records ) {//TODO - не работает!!!
//      alert('load');
//      consoleLog('obj');
//      consoleLog(obj);
////        alert('load');
//        obj.emptyText = VAC_EMPTY_TEXT;
//        if ((records.length > 0) && obj.default1Row && (obj.getValue() == null)) {
//          obj.setValue(obj.getStore().getAt(0).get(obj.valueField));
//        } else if (obj.getValue() == null) {
//          obj.reset();
//        }
//    }
//  }
});
Ext.reg('amm_VaccineListCombo', sw.Promed.amm_VaccineListCombo);


sw.Promed.amm_VaccineOherListCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: '',
//  id: 'VaccineListCombo',
  valueField: 'Vaccine_id',
  displayField: 'GRID_NAME_VAC',
  vaccineParams: null,
  mode: 'local',
  default1Row: true, //флаг "выводить после загрузки первую строку комбобокса"
  emptyText: VAC_EMPTY_TEXT,
  store: new Ext.data.Store({
	autoLoad: false,
	//baseParams: {VaccineType_id:'3', BirthDay:'03.05.2011'},
	reader: new Ext.data.JsonReader({
	  fields: ['Vaccine_id', 'GRID_NAME_VAC'],
	  root: 'rows'
	}),
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=VaccineCtrl&m=loadVaccineList'
	})
	, listeners: {
	  'load': function( obj, records, options ) {
//        consoleLog('obj.parentId');
//        consoleLog(obj.parentId);
		if (obj.parentId) {
//          consoleLog(Ext.getCmp(obj.parentId));
//          Ext.getCmp(obj.parentId).fireEvent('loaded', Ext.getCmp(obj.parentId), records);
		  Ext.getCmp(obj.parentId).emptyText = VAC_EMPTY_TEXT;
//          consoleLog('fireEventload');
		}
	  }
	}
  }),
  
  initComponent: function() {
	sw.Promed.amm_VaccineOherListCombo.superclass.initComponent.apply(this, arguments);
//    this.emptyText = VAC_LOAD_WAIT;
	if (this.id) this.store.parentId = this.id;
  }
  
});
Ext.reg('amm_VaccineOherListCombo', sw.Promed.amm_VaccineOherListCombo);


sw.Promed.amm_uchListCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: '',
  allowBlank: false,
  default1Row: true, //флаг "выводить после загрузки первую строку комбобокса"
  valueField: 'LpuRegion_id',
  displayField: 'LpuRegion_Name',
  mode: 'local',
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['LpuRegion_id', 'LpuRegion_Name'],
	  root: 'rows'
	}),
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=VaccineCtrl&m=getUchList'
	})
  }),
  initComponent: function() {
	sw.Promed.amm_uchListCombo.superclass.initComponent.apply(this, arguments);
  }
});
Ext.reg('amm_uchListCombo', sw.Promed.amm_uchListCombo);

sw.Promed.amm_VaccineSeriaCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: '',
  valueField: 'VacPresence_id',
  displayField: 'vacSeria',
  mode: 'local',
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['VacPresence_id', 'vacSeria', 'Seria', 'Period', 'Manufacturer'],
	  root: 'rows'
	}),
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=VaccineCtrl&m=getVaccineSeriaList'
	})
  }),
  initComponent: function() {
	sw.Promed.amm_VaccineSeriaCombo.superclass.initComponent.apply(this, arguments);
  }
});
Ext.reg('amm_VaccineSeriaCombo', sw.Promed.amm_VaccineSeriaCombo);

sw.Promed.amm_TypeReactionCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: '',
  valueField: 'reaction_id',
  displayField: 'reaction_name',
  mode: 'local',
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['reaction_id', 'reaction_name'],
	  root: 'rows'
	}),
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=VaccineCtrl&m=getTypeReactionList'
	})
  }),
  initComponent: function() {
	sw.Promed.amm_TypeReactionCombo.superclass.initComponent.apply(this, arguments);
  }
});
Ext.reg('amm_TypeReactionCombo', sw.Promed.amm_TypeReactionCombo);

sw.Promed.amm_DiaskinTypeReactionCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: '',
  valueField: 'DiaskinTestReactionType_id',
  displayField: 'DiaskinTestReactionType_name',
  mode: 'local',
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['DiaskinTestReactionType_id', 'DiaskinTestReactionType_name'],
	  root: 'rows'
	}),
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=VaccineCtrl&m=getDiaskinTypeReactionList'
	})
  }),
  initComponent: function() {
	sw.Promed.amm_DiaskinTypeReactionCombo.superclass.initComponent.apply(this, arguments);
  }
});
Ext.reg('amm_DiaskinTypeReactionCombo', sw.Promed.amm_DiaskinTypeReactionCombo);


sw.Promed.amm_VaccineStatusCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: '',
  valueField: 'VaccineDose_id',
  displayField: 'VaccineDose_Name',
  mode: 'local',
  //mode: 'remote',
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['VaccineDose_id', 'VaccineDose_Name'],
	  root: 'rows'
	}),
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=VaccineCtrl&m=getVaccineStatusList'
	})
  }),
  initComponent: function() {
	sw.Promed.amm_VaccineStatusCombo.superclass.initComponent.apply(this, arguments);
  }
});
Ext.reg('amm_VaccineStatusCombo', sw.Promed.amm_VaccineStatusCombo);

sw.Promed.amm_VaccineRefusalTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: '',
  valueField: 'RefusalType_id',
  displayField: 'RefusalType_name',
  mode: 'local',
  //mode: 'remote',
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['RefusalType_id', 'RefusalType_name'],
	  root: 'rows'
	}),
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=VaccineCtrl&m=getVaccineRefusalTypeList'
	})
  }),
  initComponent: function() {
	sw.Promed.amm_VaccineRefusalTypeCombo.superclass.initComponent.apply(this, arguments);
  }
});
Ext.reg('amm_VaccineRefusalTypeCombo', sw.Promed.amm_VaccineRefusalTypeCombo);

sw.Promed.amm_LpuListCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: langs('МО'),
  valueField: 'Lpu_id',
  displayField: 'Lpu_Name',
  mode: 'local',
  //mode: 'remote',
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['Lpu_id', 'Lpu_Name'],
	  root: 'rows'
	}),
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=Org&m=getAllLpuList'
	})
  }),
  initComponent: function() {
	sw.Promed.amm_LpuListCombo.superclass.initComponent.apply(this, arguments);
  }
});
Ext.reg('amm_LpuListCombo', sw.Promed.amm_LpuListCombo);


sw.Promed.amm_FlReasonCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	fieldLabel: langs('Причина'),
	valueField: 'fl_SprValue_id',
        displayField: 'fl_SprValue_value',
        mode: 'local',
        listWidth: 380,
        editable: false,

         store: new Ext.data.Store({
            autoLoad: false,
            reader: new Ext.data.JsonReader({
                fields: ['fl_SprValue_id', 'fl_SprValue_value'],
                root: 'rows'
            }),
            proxy: new Ext.data.HttpProxy({
                method: 'POST',
                //url: '/?c=VaccineCtrl&m=getFlReasonList'
                url: '/?c=FluorCtrl&m=getFlReasonList'
            })

           }),

	initComponent: function() {
		sw.Promed.amm_FlReasonCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('amm_FlReasonCombo', sw.Promed.amm_FlReasonCombo);



sw.Promed.ammTypeInfectioncombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	fieldLabel: '',
	valueField: 'VaccineType_id',
	displayField: 'VaccineType_NameIm',
	mode: 'local',
	store: new Ext.data.Store({
		autoLoad: false,
		reader: new Ext.data.JsonReader({
			fields: ['VaccineType_id', 'VaccineType_NameIm'],
			root: 'rows'
		}),
		proxy: new Ext.data.HttpProxy({
			method: 'POST',
			url: '/?c=VaccineCtrl&m=getVaccineTypeInfection'
		})
	}),
	initComponent: function() {
		sw.Promed.ammTypeInfectioncombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('ammTypeInfectioncombo', sw.Promed.ammTypeInfectioncombo);

/*
 *  Комбобокс выбора типа иммунизации
 */
sw.Promed.ammTypeImmunizationCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	fieldLabel: '',
	valueField: 'type_id',
	displayField: 'typeName',
	mode: 'local',
	store: new Ext.data.Store({
		autoLoad: false,
		reader: new Ext.data.JsonReader({
			fields: ['type_id', 'typeName', 'type_Nick'],
			root: 'rows'
		}),
		proxy: new Ext.data.HttpProxy({
			method: 'POST',
			url: '/?c=Vaccine_List&m=getVaccineTypeImmunization'
		})
	}),
	initComponent: function() {
		sw.Promed.ammTypeImmunizationCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('ammTypeImmunizationCombo', sw.Promed.ammTypeImmunizationCombo);

/**
 * Комбобокс выбора типа населения - организованное/неорганизованное
 */
sw.Promed.amm_OrgUnOrgPopulationCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.data.SimpleStore(
	{
		key: 'OrgType_id',
		autoLoad: false,
		fields:
		[
			{name: 'OrgType_id', type: 'int'},
			{name: 'OrgType_Name', type: 'string'}
		],
		data: [
			[0,langs('Все пациенты')],
			[1,langs('Организованное население')],
			[2,langs('Неорганизованное население')]
		]
	}),
	//triggerAction: 'all',
	editable: false,
	displayField:'OrgType_Name',
	valueField: 'OrgType_id',
	hiddenName:'OrgType_id',
	fieldLabel: langs('Население'),
	value: 0,
	initComponent: function()
	{
		sw.Promed.amm_OrgUnOrgPopulationCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('amm_OrgUnOrgPopulationCombo', sw.Promed.amm_OrgUnOrgPopulationCombo);

/**
 * Комбобокс выбора типа возраста
 */
sw.Promed.amm_AgeTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.data.SimpleStore(
	{
		key: 'AgeType_id',
		autoLoad: false,
		fields:
		[
			{name: 'AgeType_id', type: 'int'},
			{name: 'AgeType_Name', type: 'string'}
		],
		data: [
			[1,langs('Дни')],
			[2,langs('Месяцы')],
			[3,langs('Годы')]
		]
	}),
	//triggerAction: 'all',
	editable: false,
	displayField:'AgeType_Name',
	valueField: 'AgeType_id',
	hiddenName:'AgeType_id',
	fieldLabel: langs('Тип периода'),
	emptyText: VAC_EMPTY_TEXT,
	initComponent: function()
	{
		sw.Promed.amm_AgeTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('amm_AgeTypeCombo', sw.Promed.amm_AgeTypeCombo);

/**
 * Комбобокс "Способ прикрепления" пациента
 */
sw.Promed.amm_AttachMethodCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.data.SimpleStore(
	{
		key: 'AttachMethod_id',
		autoLoad: false,
		fields:
		[
			{name: 'AttachMethod_id', type: 'int'},
			{name: 'AttachMethod_Name', type: 'string'}
		],
		data: [
			[0,langs('По месту жительства')],
			[1,langs('По месту работы/учебы')]
		]
	}),
	//triggerAction: 'all',
	editable: false,
	displayField:'AttachMethod_Name',
	valueField: 'AttachMethod_id',
	hiddenName:'AttachMethod_id',
	fieldLabel: langs('Способ прикрепления'),
	value: 0,
	initComponent: function()
	{
		sw.Promed.amm_AttachMethodCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('amm_AttachMethodCombo', sw.Promed.amm_AttachMethodCombo);

sw.Promed.amm_VacOrgJob2LpuCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: langs('Наименование'),
  valueField: 'Org_id',
  displayField: 'Org_Nick',
  mode: 'local',
  default1Row: true, //флаг "выводить после загрузки первую строку комбобокса"
  emptyText: VAC_EMPTY_TEXT,
  //mode: 'remote',
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['Org_id', 'Org_Nick'],
	  root: 'rows'
	}),
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=VaccineCtrl&m=getOrgJob2Lpu'
	})
	, listeners: {
	  'load': function( obj, records, options ) {
		if (obj.parentId) {
					var parentObj = Ext.getCmp(obj.parentId);
		  parentObj.emptyText = VAC_EMPTY_TEXT;
					if (parentObj.default1Row) parentObj.setValue(0);
		}
	  }
	}
  }),
  initComponent: function() {
	sw.Promed.amm_VacOrgJob2LpuCombo.superclass.initComponent.apply(this, arguments);
	if (this.id) this.store.parentId = this.id;
  }
});
Ext.reg('amm_VacOrgJob2LpuCombo', sw.Promed.amm_VacOrgJob2LpuCombo);


/**
 * Комбобокс "Cписок МО, в которых есть служба "Кабинет вакцинации"
 */
 
sw.Promed.amm_LpuListComboServiceVac = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: langs('МО'),
  valueField: 'Lpu_id',
  displayField: 'Lpu_Name',
  mode: 'local',
  //mode: 'remote',
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['Lpu_id', 'Lpu_Name'],
	  root: 'rows'
	}),
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=VaccineCtrl&m=getLpuListServiceVac'
	})
  }),
  initComponent: function() {
	sw.Promed.amm_LpuListComboServiceVac.superclass.initComponent.apply(this, arguments);
  }
});
Ext.reg('amm_LpuListComboServiceVac', sw.Promed.amm_LpuListComboServiceVac);


/**
 * Комбобокс "Cписок Подразделений, в которых есть служба "Кабинет вакцинации"
 */
sw.Promed.amm_BuildingComboServiceVac = Ext.extend(sw.Promed.SwLpuListsBaseCombo, {
	codeField: 'LpuBuilding_Code',
	displayField: 'LpuBuilding_Name',
	fieldLabel: langs('Подразделение'),
	hiddenName: 'LpuBuilding_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 70px"><font color="red">{LpuBuilding_Code}</font></td><td><h3>{LpuBuilding_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'LpuBuilding_id',
	initComponent: function() {
		sw.Promed.amm_BuildingComboServiceVac.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'LpuBuilding_id'
			}, [
				{ name: 'LpuBuilding_id', mapping: 'LpuBuilding_id' },
				{ name: 'LpuBuilding_Code', mapping: 'LpuBuilding_Code' },
				{ name: 'LpuBuilding_Name', mapping: 'LpuBuilding_Name' }
			]),
			sortInfo: {
				field: 'LpuBuilding_Name'
			},
			listeners: {
				'load': function(store) {
					this.setValue(this.getValue());
				}.createDelegate(this)
			},
			url: '/?c=VaccineCtrl&m=getLpuBuildingServiceVac'
		});
	}
});
Ext.reg('amm_BuildingComboServiceVac', sw.Promed.amm_BuildingComboServiceVac);


/**
 * Комбобокс "Cписок служб "Кабинет вакцинации"
 */

sw.Promed.amm_ComboMedServiceVac = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: langs('Службы'),
  valueField: 'MedService_id',
  displayField: 'MedService_Nick',
  mode: 'local',
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['MedService_id', 'MedService_Nick', 'Lpu_id', 'LpuBuilding_id'],
	  root: 'rows'
	}),
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=VaccineCtrl&m=getMedServiceVac'
	})
  }),
  initComponent: function() {
	sw.Promed.amm_ComboMedServiceVac.superclass.initComponent.apply(this, arguments);
  }
});
Ext.reg('amm_ComboMedServiceVac', sw.Promed.amm_ComboMedServiceVac);


/**
 * Комбобокс "Cписок служб "Кабинет вакцинации" с дополнительными пунктами (расширенный)
 */

sw.Promed.amm_ComboMedServiceVacExtended = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: langs('Службы'),
  valueField: 'MedService_id',
  displayField: 'MedService_Nick',
  mode: 'local',
  tpl: '<tpl for="."><div class="x-combo-list-item">'+
    '{MedService_Nick}&nbsp;'+
    '</div></tpl>',        
  //mode: 'remote',
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['MedService_id', 'MedService_Nick', 'Lpu_id', 'LpuBuilding_id'],
	  root: 'rows'
	}),
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=VaccineCtrl&m=getMedServiceVacExtended'
	})
  }),
  initComponent: function() {
	sw.Promed.amm_ComboMedServiceVacExtended.superclass.initComponent.apply(this, arguments);
  }
});
Ext.reg('amm_ComboMedServiceVacExtended', sw.Promed.amm_ComboMedServiceVacExtended);


/**
 * Комбобокс "Список медперсонала" 
 */


sw.Promed.amm_ComboVacMedPersonalFull = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: langs('Исполнители'),
  valueField: 'MedStaffFact_id',
  displayField: 'Person_Fin',
  mode: 'local',
  tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;">',
		'<td><span style="font-weight: bold;">{Person_Fin}</span>&nbsp;{Post_Name}&nbsp;</td>',
		'</tr></table>',
		'</div></tpl>'
	),
  //mode: 'remote',
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['MedStaffFact_id', 'Person_Fin', 'Post_Name', 'Lpu_id'],
	  root: 'rows'
	}),
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=VaccineCtrl&m=geComboVacMedPersonalFull'
	})
  }),
  initComponent: function() {
	sw.Promed.amm_ComboVacMedPersonalFull.superclass.initComponent.apply(this, arguments);
  }
});
Ext.reg('amm_ComboVacMedPersonalFull', sw.Promed.amm_ComboVacMedPersonalFull);


/**
 * Комбобокс "Список сотрудников службы "Кабинет вакцинации" 
 */

sw.Promed.amm_ComboVacMedPersonal = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: langs('Исполнители'),
  valueField: 'MedPersonal_id',
  displayField: 'MedPersonal_Name',
  mode: 'local',
  //mode: 'remote',
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['MedPersonal_id', 'MedPersonal_Name', 'Person_Fin', 'Lpu_id', 'LpuBuilding_id', 'MedService_id'],
	  root: 'rows'
	}),
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=VaccineCtrl&m=geComboVacMedPersonal'
	})
  }),
  initComponent: function() {
	sw.Promed.amm_ComboVacMedPersonal.superclass.initComponent.apply(this, arguments);
  }
});
Ext.reg('amm_ComboVacMedPersonal', sw.Promed.amm_ComboVacMedPersonal);



/**
 * Комбобокс "Cписок служб "Кабинет вакцинации"
 */

sw.Promed.amm_ComboMedServiceFl = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: langs('Службы'),
  valueField: 'MedService_id',
  displayField: 'MedService_Nick',
  mode: 'local',
  //mode: 'remote',
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['MedService_id', 'MedService_Nick', 'Lpu_id', 'LpuBuilding_id'],
	  root: 'rows'
	}),
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  //url: '/?c=VaccineCtrl&m=getMedServiceFl'
          url: '/?c=FluorCtrl&m=getMedServiceFl'
	})
  }),
  initComponent: function() {
	sw.Promed.amm_ComboMedServiceFl.superclass.initComponent.apply(this, arguments);
  }
});
Ext.reg('amm_ComboMedServiceFl', sw.Promed.amm_ComboMedServiceFl);


sw.Promed.amm_ComboMedServiceFlSearch = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: langs('Службы'),
  valueField: 'MedService_id',
  displayField: 'MedService_Nick',
  mode: 'local',
  //mode: 'remote',
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['MedService_id', 'MedService_Nick', 'Lpu_id', 'LpuBuilding_id'],
	  root: 'rows'
	}),
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  //url: '/?c=VaccineCtrl&m=getMedServiceFlSearch'
          url: '/?c=FluorCtrl&m=getMedServiceFlSearch'
	})
  }),
  initComponent: function() {
	sw.Promed.amm_ComboMedServiceFlSearch.superclass.initComponent.apply(this, arguments);
  }
});
Ext.reg('amm_ComboMedServiceFlSearch', sw.Promed.amm_ComboMedServiceFlSearch);

sw.Promed.amm_GetListVaccineTypeOther = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  fieldLabel: langs('Прививка'),
  valueField: 'VaccineType_id',
  displayField: 'VaccineType_Name',
  emptyText: VAC_EMPTY_TEXT,
  mode: 'local',
  default1Row: true, //флаг "выводить после загрузки первую строку комбобокса"
  store: new Ext.data.Store({
	autoLoad: false,
	reader: new Ext.data.JsonReader({
	  fields: ['VaccineType_id', 'VaccineType_Name'],
	  root: 'rows'
	}),
	proxy: new Ext.data.HttpProxy({
	  method: 'POST',
	  url: '/?c=VaccineCtrl&m=GetListVaccineTypeOther'
	})
  }),
  initComponent: function() {
	sw.Promed.amm_GetListVaccineTypeOther.superclass.initComponent.apply(this, arguments);
  }
});
Ext.reg('amm_GetListVaccineTypeOther', sw.Promed.amm_GetListVaccineTypeOther);


sw.Promed.amm_TubDiagnosisTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	fieldLabel: '',
	valueField: 'TubDiagnosisType_id',
		displayField: 'TubDiagnosisType_Name',
		mode: 'local',
                emptyText: VAC_EMPTY_TEXT,
                store: new Ext.data.Store({

			autoLoad: false,
			reader: new Ext.data.JsonReader({
				fields: ['TubDiagnosisType_id', 'TubDiagnosisType_Name'],
				root: 'rows'
			}),
			proxy: new Ext.data.HttpProxy({
				method: 'POST',
				url: '/?c=VaccineCtrl&m=GetTubDiagnosisTypeCombo'
			})

		   }),

	initComponent: function() {
		sw.Promed.amm_TubDiagnosisTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('amm_TubDiagnosisTypeCombo', sw.Promed.amm_TubDiagnosisTypeCombo);

sw.Promed.amm_OnkoCtrlProfileCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.data.SimpleStore(
	{
		key: 'OnkoCtrlProfile_id',
		autoLoad: false,
		fields:
		[
			{name: 'OnkoCtrlProfile_id', type: 'int'},
			{name: 'OnkoCtrlProfile_Name', type: 'string'}
		],
		data: [
			[-1,langs('Все')],
                        [2,langs('Анкета заполнена')],
			[1,langs('Анкета не заполнена')]			
		]
	}),	
	editable: false,
	displayField:'OnkoCtrlProfile_Name',
	valueField: 'OnkoCtrlProfile_id',
	fieldLabel: langs('Анкетирование'),
	initComponent: function()
	{
		sw.Promed.amm_OnkoCtrlProfileCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('amm_OnkoCtrlProfileCombo', sw.Promed.amm_OnkoCtrlProfileCombo);


sw.Promed.amm_OnkoCtrCommentCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.data.SimpleStore(
	{
		key: 'OnkoCtrComment_id',
		autoLoad: false,
		fields:
		[
			{name: 'OnkoCtrComment_id', type: 'int'},
			{name: 'OnkoCtrComment_Name', type: 'string'}
		],
		data: [
			[-1,langs('Все')],
                        [2,langs('Необходим Онкоконтроль')],
			[1,langs('Не нужен Онкоконтроль')]			
		]
	}),	
	editable: false,
	displayField:'OnkoCtrComment_Name',
	valueField: 'OnkoCtrComment_id',
	fieldLabel: langs('Онкоконтроль'),
	initComponent: function()
	{
		sw.Promed.amm_OnkoCtrCommentCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('amm_OnkoCtrCommentCombo', sw.Promed.amm_OnkoCtrCommentCombo);

sw.Promed.amm_OnkoCtrResultCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	fieldLabel: '',
                allowBlank: false,
	valueField: 'OnkoQuestions_id',
		displayField: 'OnkoQuestions_Nick',
		mode: 'local',
                //emptyText: VAC_EMPTY_TEXT,
                store: new Ext.data.Store({

			autoLoad: false,
			reader: new Ext.data.JsonReader({
				fields: ['OnkoQuestions_id', 'OnkoQuestions_Nick'],
				root: 'rows'
			}),
			proxy: new Ext.data.HttpProxy({
				method: 'POST',
				url: '/?c=OnkoCtrl&m=GetOnkoCtrlProfileResult'
			})

		   }),

	initComponent: function() {
		sw.Promed.amm_OnkoCtrResultCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('amm_OnkoCtrResultCombo', sw.Promed.amm_OnkoCtrResultCombo);


/*
 * 
 * Список МО для прикрепления к складам аптек
 */
sw.Promed.amm_Lpu4FarmStorageCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	fieldLabel: '',
        allowBlank: false,
	valueField: 'Lpu_id',
		displayField: 'Lpu_Nick',
		mode: 'local',
                //emptyText: VAC_EMPTY_TEXT,
                store: new Ext.data.Store({

			autoLoad: false,
			reader: new Ext.data.JsonReader({
				fields: ['Lpu_id', 'Lpu_Nick'],
				root: 'rows'
			}),
			proxy: new Ext.data.HttpProxy({
				method: 'POST',
				url: '/?c=Storage&m=GetLpu4FarmStorage'
			})

		   }),

	initComponent: function() {
		sw.Promed.amm_Lpu4FarmStorageCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('amm_Lpu4FarmStorageCombo', sw.Promed.amm_Lpu4FarmStorageCombo);


//  End tagir


 /* 
 * Список МО, осуществляющие обслуживание вызовов на дому 
 */
sw.Promed.swLpuHomeVisitStorageCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	fieldLabel: langs('Выберите ЛПУ'),
    allowBlank: false,
	valueField: 'Lpu_id',
	displayField: 'Lpu_Nick',
	mode: 'local',
    store: new Ext.data.Store({
		autoLoad: false,
		reader: new Ext.data.JsonReader({
			fields: ['Lpu_id', 'Lpu_Nick']
			//root: 'rows'
		}),
		proxy: new Ext.data.HttpProxy({
			method: 'POST',
			url: '/?c=CmpCallCard&m=loadLpuHomeVisit'
		})
	}),

	initComponent: function() {
		sw.Promed.swLpuHomeVisitStorageCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swLpuHomeVisitStorageCombo', sw.Promed.swLpuHomeVisitStorageCombo);

/*
* Список МО, имеющих опер отдел с типом подразделения СМП или НМП
*/
sw.Promed.swlpuwithopersmpcombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	fieldLabel: langs('Выберите ЛПУ'),
	allowBlank: false,
	valueField: 'Lpu_id',
	displayField: 'Lpu_Nick',
	mode: 'local',
	store: new Ext.data.Store({
		autoLoad: true,
		reader: new Ext.data.JsonReader({
			fields: ['Lpu_id', 'Lpu_Nick']
		}),
		proxy: new Ext.data.HttpProxy({
			method: 'POST',
			url: '/?c=CmpCallCard&m=getLpuWithOperSmp'
		})
	}),

	initComponent: function() {
		sw.Promed.swLpuHomeVisitStorageCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swlpuwithopersmpcombo', sw.Promed.swlpuwithopersmpcombo);


sw.Promed.SwProfGoalCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'ProfGoal_Code',
	displayField: 'ProfGoal_Name',
	editable: false,
	fieldLabel: langs('Цель профосмотра'),
	hiddenName: 'ProfGoal_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'ProfGoal_id', type: 'int'},
			{name: 'ProfGoal_Code', type: 'int'},
			{name: 'ProfGoal_Name', type: 'string'}
		],
		key: 'ProfGoal_id',
		sortInfo: {
			field: 'ProfGoal_Code'
		},
		tableName: 'ProfGoal'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{ProfGoal_Code}</font>&nbsp;{ProfGoal_Name}',
		'</div></tpl>'
	),
	valueField: 'ProfGoal_id',
	initComponent: function() {
		sw.Promed.SwProfGoalCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swprofgoalcombo', sw.Promed.SwProfGoalCombo);

sw.Promed.SwDeseaseTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'DeseaseType_Code',
	displayField: 'DeseaseType_Name',
	editable: false,
	fieldLabel: langs('Характер'),
	hiddenName: 'DeseaseType_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{DeseaseType_Code}</font>&nbsp;{DeseaseType_Name}',
		'</div></tpl>'
	),
	valueField: 'DeseaseType_id',
	initComponent: function() {
		sw.Promed.SwDeseaseTypeCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'DeseaseType_id', type: 'int'},
				{name: 'DeseaseType_Code', type: 'int'},
				{name: 'DeseaseType_Name', type: 'string'},
				{name: 'DeseaseType_SysNick', type: 'string'},
				{name: 'DeseaseType_begDT', type: 'date', dateFormat: 'd.m.Y'},
				{name: 'DeseaseType_endDT', type: 'date', dateFormat: 'd.m.Y'}
			],
			key: 'DeseaseType_id',
			sortInfo: {
				field: 'DeseaseType_Code'
			},
			tableName: 'DeseaseType'
		});
	}
});
Ext.reg('swdeseasetypecombo', sw.Promed.SwDeseaseTypeCombo);

sw.Promed.SwPrehospTraumaCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'PrehospTrauma_Code',
	displayField: 'PrehospTrauma_Name',
	editable: false,
	fieldLabel: langs('Травма'),
	hiddenName: 'PrehospTrauma_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'PrehospTrauma_id', type: 'int'},
			{name: 'PrehospTrauma_Code', type: 'int'},
			{name: 'PrehospTrauma_Name', type: 'string'},
			{name: 'TraumaType_id', type: 'int'},
			{name: 'TraumaType_Code', type: 'int'}
		],
		key: 'PrehospTrauma_id',
		sortInfo: {field: 'PrehospTrauma_Code'},
		tableName: 'PrehospTrauma'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{PrehospTrauma_Code}</font>&nbsp;{PrehospTrauma_Name}',
		'</div></tpl>'
	),
	valueField: 'PrehospTrauma_id',
	initComponent: function() {
		sw.Promed.SwPrehospTraumaCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swprehosptraumacombo', sw.Promed.SwPrehospTraumaCombo);

sw.Promed.SwReceptTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'ReceptType_Code',
	displayField: 'ReceptType_Name',
	editable: false,
	fieldLabel: langs('Тип рецепта'),
	hiddenName: 'ReceptType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'ReceptType_Name', mapping: 'ReceptType_Name'},
			{name: 'ReceptType_Code', mapping: 'ReceptType_Code'},
			{name: 'ReceptType_id', mapping: 'ReceptType_id'}
		],
		key: 'ReceptType_id',
		sortInfo: {field: 'ReceptType_Code'},
		tableName: 'ReceptType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<div><font color="red">{ReceptType_Code}</font>&nbsp;{ReceptType_Name}</div>',
		'</div></tpl>'
	),
	valueField: 'ReceptType_id',
	initComponent: function() {
		sw.Promed.SwReceptTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swrecepttypecombo', sw.Promed.SwReceptTypeCombo);

sw.Promed.SwReceptFinanceCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'ReceptFinance_Code',
	displayField: 'ReceptFinance_Name',
	editable: false,
	fieldLabel: langs('Финансирование'),
	hiddenName: 'ReceptFinance_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{ReceptFinance_Code}</font>&nbsp;{ReceptFinance_Name}',
		'</div></tpl>'
	),
	valueField: 'ReceptFinance_id',
	initComponent: function() {
		sw.Promed.SwReceptFinanceCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'ReceptFinance_Name', mapping: 'ReceptFinance_Name'},
				{name: 'ReceptFinance_Code', mapping: 'ReceptFinance_Code'},
				{name: 'ReceptFinance_id', mapping: 'ReceptFinance_id'}
			],
			key: 'ReceptFinance_id',
			sortInfo: {field: 'ReceptFinance_Code'},
			tableName: 'ReceptFinance'
		});
	}
});
Ext.reg('swreceptfinancecombo', sw.Promed.SwReceptFinanceCombo);

sw.Promed.SwReceptDiscountCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'ReceptDiscount_Code',
	displayField: 'ReceptDiscount_Name',
	editable: false,
	fieldLabel: langs('Скидка'),
	hiddenName: 'ReceptDiscount_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'ReceptDiscount_Name', mapping: 'ReceptDiscount_Name'},
			{name: 'ReceptDiscount_Code', mapping: 'ReceptDiscount_Code'},
			{name: 'ReceptDiscount_id', mapping: 'ReceptDiscount_id'}
		],
		key: 'ReceptDiscount_id',
		sortInfo: {field: 'ReceptDiscount_Code'},
		tableName: 'ReceptDiscount'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{ReceptDiscount_Code}</font>&nbsp;{ReceptDiscount_Name}',
		'</div></tpl>'
	),
	valueField: 'ReceptDiscount_id',
	initComponent: function() {
		sw.Promed.SwReceptDiscountCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swreceptdiscountcombo', sw.Promed.SwReceptDiscountCombo);


sw.Promed.SwPrivilegeTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'PrivilegeType_VCode',
	displayField: 'PrivilegeType_Name',
	editable: false,
	fieldLabel: langs('Категория'),
	hiddenName: 'PrivilegeType_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{PrivilegeType_VCode}</font>&nbsp;{PrivilegeType_Name}',
		'</div></tpl>'
	),
	valueField: 'PrivilegeType_id',
	initComponent: function() {
		sw.Promed.SwPrivilegeTypeCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'PrivilegeType_id', type: 'int'},
				{name: 'PrivilegeType_Code', type: 'int'},
				{name: 'PrivilegeType_VCode', type: 'string'},
				{name: 'PrivilegeType_Name', type: 'string'},
				{name: 'ReceptDiscount_id', type: 'int'},
				{name: 'ReceptFinance_id', type: 'int'},
				{name: 'PrivilegeType_begDate', type: 'date', dateFormat: 'd.m.Y'},
				{name: 'PrivilegeType_endDate', type: 'date', dateFormat: 'd.m.Y'},
				{name: 'PrivilegeType_IsNoz', type: 'int'},
				{name: 'PrivilegeType_IsDoc', type: 'int'},
				{name: 'WhsDocumentCostItemType_Name', type: 'string'}
			],
			key: 'PrivilegeType_id',
			sortInfo: {field: 'PrivilegeType_VCode'},
			tableName: 'PrivilegeType',
            listeners: {
                load: function(s) {
                    s.sortData('RlsClsntfr_Name');
                }
            },
			sortData: function() {
				var f = 'PrivilegeType_VCode';
				var direction = 'ASC';

				var fn = function(r1, r2){
					var
						ret = 0,
						v1 = r1.data[f],
						v2 = r2.data[f],
						t1 = !Ext.isEmpty(v1) && v1 != v1*1 ? 'string' : 'int',
						t2 = !Ext.isEmpty(v2) && v2 != v2*1 ? 'string' : 'int';

					if ( t1 == t2 ) {
						if (t1 == 'int') {
							v1 = v1*1;
							v2 = v2*1;
						} else {
							v1 = v1.toLowerCase();
							v2 = v2.toLowerCase();
						}

						ret = v1 > v2 ? 1 : (v1 < v2 ? -1 : 0)
					}
					else {
						ret = (t1 == 'int' ? -1 : 1)
					}

					return ret;
				};
				this.data.sort(direction, fn);
				if(this.snapshot && this.snapshot != this.data){
					this.snapshot.sort(direction, fn);
				}
			}

		});
	}
});
Ext.reg('swprivilegetypecombo', sw.Promed.SwPrivilegeTypeCombo);

sw.Promed.SwHTMSocGroupCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'HTMSocGroup_Code',
	displayField: 'HTMSocGroup_Name',
	editable: false,
	fieldLabel: langs('Социальная группа'),
	hiddenName: 'HTMSocGroup_id',
	mode: 'local',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{HTMSocGroup_Code}</font>&nbsp;{HTMSocGroup_Name}',
		'</div></tpl>'
	),
	triggerAction: 'all',
	/*resizable: true,*/
	valueField: 'HTMSocGroup_id',
	initComponent: function() {
		sw.Promed.SwHTMSocGroupCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			key: 'HTMSocGroup_id',
			fields: [
				{name: 'HTMSocGroup_id', type: 'int'},
				{name: 'HTMSocGroup_Code', type: 'int'},
				{name: 'HTMSocGroup_Name', type: 'string'},
				{name: 'HTMSocGroup_begDate', type: 'date', dateFormat: 'd.m.Y'},
				{name: 'HTMSocGroup_endDate', type: 'date', dateFormat: 'd.m.Y'}
			],
			sortInfo: {field: 'HTMSocGroup_Code'},
			tableName: 'HTMSocGroup'
		});
	}
});
Ext.reg('swhtmsocgroupcombo', sw.Promed.SwHTMSocGroupCombo);

sw.Promed.SwVenerSocGroupCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'VenerSocGroup_Code',
	displayField: 'VenerSocGroup_Name',
	editable: false,
	fieldLabel: langs('Социальная группа'),
	hiddenName: 'VenerSocGroup_id',
	mode: 'local',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{VenerSocGroup_Code}</font>&nbsp;{VenerSocGroup_Name}',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'VenerSocGroup_id',
	initComponent: function() {
		sw.Promed.SwVenerSocGroupCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			key: 'VenerSocGroup_id',
			fields: [
				{name: 'VenerSocGroup_id', type: 'int'},
				{name: 'VenerSocGroup_Code', type: 'int'},
				{name: 'VenerSocGroup_Name', type: 'string'},
				{name: 'VenerSocGroup_SysName', type: 'string'},
				{name: 'VenerSocGroup_begDate', type: 'date', dateFormat: 'd.m.Y'},
				{name: 'VenerSocGroup_endDate', type: 'date', dateFormat: 'd.m.Y'}
			],
			sortInfo: {field: 'VenerSocGroup_Code'},
			tableName: 'VenerSocGroup'
		});
	}
});
Ext.reg('swvenersocgroupcombo', sw.Promed.SwVenerSocGroupCombo);

sw.Promed.SwStickTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'StickType_Code',
	displayField: 'StickType_Name',
	editable: false,
	fieldLabel: langs('Тип листа'),
	hiddenName: 'StickType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'StickType_Name', mapping: 'StickType_Name'},
			{name: 'StickType_Code', mapping: 'StickType_Code'},
			{name: 'StickType_id', mapping: 'StickType_id'}
		],
		key: 'StickType_id',
		sortInfo: {field: 'StickType_Code'},
		tableName: 'StickType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{StickType_Code}</font>&nbsp;{StickType_Name}',
		'</div></tpl>'
	),
	valueField: 'StickType_id',
	initComponent: function() {
		sw.Promed.SwStickTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swsticktypecombo', sw.Promed.SwStickTypeCombo);

sw.Promed.SwStickCauseCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'StickCause_Code',
	displayField: 'StickCause_Name',
	editable: false,
	fieldLabel: langs('Причина выдачи'),
	hiddenName: 'StickCause_id',
	setFilterByDate: function(date) {
		this.lastQuery = '';
		this.store.filterBy(function(rec){
			return (
				(Ext.isEmpty(rec.get('StickCause_begDate')) || rec.get('StickCause_begDate') <= date) &&
				(Ext.isEmpty(rec.get('StickCause_endDate')) || rec.get('StickCause_endDate') >= date)
			);
		});
	},
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'StickCause_id', type: 'int'},
			{name: 'StickCause_Name', type: 'string'},
			{name: 'StickCause_Code', type: 'string'},
			{name: 'StickCause_SysNick', type: 'string'},
			{name: 'StickCause_begDate', type: 'date', dateFormat: 'd.m.Y'},
			{name: 'StickCause_endDate', type: 'date', dateFormat: 'd.m.Y'}
		],
		key: 'StickCause_id',
		sortInfo: {field: 'StickCause_Code'},
		tableName: 'StickCause'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{StickCause_Code}</font>&nbsp;{StickCause_Name}',
		'</div></tpl>'
	),
	valueField: 'StickCause_id',
	initComponent: function() {
		sw.Promed.SwStickCauseCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swstickcausecombo', sw.Promed.SwStickCauseCombo);

sw.Promed.SwUslugaClassCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'UslugaClass_Code',
	displayField: 'UslugaClass_Name',
	editable: false,
	fieldLabel: langs('Тип услуги'),
	hiddenName: 'UslugaClass_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{UslugaClass_Code}</font>&nbsp;{UslugaClass_Name}',
		'</div></tpl>'
	),
	valueField: 'UslugaClass_id',
	initComponent: function() {
		sw.Promed.SwUslugaClassCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'UslugaClass_Name', mapping: 'UslugaClass_Name'},
				{name: 'UslugaClass_Code', mapping: 'UslugaClass_Code'},
				{name: 'UslugaClass_id', mapping: 'UslugaClass_id'}
			],
			key: 'UslugaClass_id',
			sortInfo: {field: 'UslugaClass_Code'},
			tableName: 'UslugaClass'
		});
	}
});
Ext.reg('swuslugaclasscombo', sw.Promed.SwUslugaClassCombo);

sw.Promed.SwUslugaPlaceCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'UslugaPlace_Code',
	displayField: 'UslugaPlace_Name',
	editable: false,
	fieldLabel: langs('Место выполнения'),
	hiddenName: 'UslugaPlace_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'UslugaPlace_Code', mapping: 'UslugaPlace_Code'},
			{name: 'UslugaPlace_id', mapping: 'UslugaPlace_id'},
			{name: 'UslugaPlace_Name', mapping: 'UslugaPlace_Name'}
		],
		key: 'UslugaPlace_id',
		sortInfo: {field: 'UslugaPlace_Code'},
		tableName: 'UslugaPlace'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{UslugaPlace_Code}</font>&nbsp;{UslugaPlace_Name}',
		'</div></tpl>'
	),
	valueField: 'UslugaPlace_id',
	initComponent: function() {
		sw.Promed.SwUslugaPlaceCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swuslugaplacecombo', sw.Promed.SwUslugaPlaceCombo);

sw.Promed.SwAggTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'AggType_Code',
	displayField: 'AggType_Name',
	editable: false,
	fieldLabel: langs('Вид осложнения'),
	hiddenName: 'AggType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'AggType_Code', mapping: 'AggType_Code'},
			{name: 'AggType_id', mapping: 'AggType_id'},
			{name: 'AggType_Name', mapping: 'AggType_Name'}
		],
		key: 'AggType_id',
		sortInfo: {field: 'AggType_Code'},
		tableName: 'AggType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{AggType_Code}</font>&nbsp;{AggType_Name}',
		'</div></tpl>'
	),
	valueField: 'AggType_id',
	initComponent: function() {
		sw.Promed.SwAggTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swaggtypecombo', sw.Promed.SwAggTypeCombo);


/**
* Комбобоксы используемые в заявке
**/

// Статус заявки
sw.Promed.SwDrugRequestStatusCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	codeField: 'DrugRequestStatus_Code',
	displayField: 'DrugRequestStatus_Name',
	anchor: '100%',
	editable: false,
	fieldLabel: langs('Статус заявки'),
	hiddenName: 'DrugRequestStatus_id',
	store: new Ext.db.AdapterStore(
	{
		autoLoad: false,
		dbFile: 'Promed.db',
		fields:
		[
			{name: 'DrugRequestStatus_Name', mapping: 'DrugRequestStatus_Name'},
			{name: 'DrugRequestStatus_Code', mapping: 'DrugRequestStatus_Code'},
			{name: 'DrugRequestStatus_id', mapping: 'DrugRequestStatus_id'}
		],
		key: 'DrugRequestStatus_id',
		sortInfo: {field: 'DrugRequestStatus_Code'},
		tableName: 'DrugRequestStatus'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{DrugRequestStatus_Code}</font>&nbsp;{DrugRequestStatus_Name}',
		'</div></tpl>'
	),
	valueField: 'DrugRequestStatus_id',
	initComponent: function() {
		sw.Promed.SwDrugRequestStatusCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdrugrequeststatuscombo', sw.Promed.SwDrugRequestStatusCombo);

// Период заявки
sw.Promed.SwDrugRequestPeriodCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	displayField: 'DrugRequestPeriod_Name',
	anchor: '100%',
	editable: false,
	fieldLabel: langs('Период заявки'),
	hiddenName: 'DrugRequestPeriod_id',
	store: new Ext.db.AdapterStore(
	{
		autoLoad: false,
		dbFile: 'Promed.db',
		fields:
		[
			{name: 'DrugRequestPeriod_Name', mapping: 'DrugRequestPeriod_Name'},
			{name: 'DrugRequestPeriod_begDate', mapping: 'DrugRequestPeriod_begDate'},
			{name: 'DrugRequestPeriod_endDate', mapping: 'DrugRequestPeriod_endDate'},
			{name: 'DrugRequestPeriod_id', mapping: 'DrugRequestPeriod_id'}
		],
		key: 'DrugRequestPeriod_id',
		sortInfo: {field: 'DrugRequestPeriod_id'},
		tableName: 'DrugRequestPeriod'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{DrugRequestPeriod_Name}&nbsp;<font color="gray">({DrugRequestPeriod_begDate} - {DrugRequestPeriod_endDate})</font>',
		'</div></tpl>'
	),
	valueField: 'DrugRequestPeriod_id',
	initComponent: function() {
		sw.Promed.SwDrugRequestPeriodCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdrugrequestperiodcombo', sw.Promed.SwDrugRequestPeriodCombo);

// Период заявки (подгрузка данных с сервера)
sw.Promed.SwDynamicDrugRequestPeriodCombo = Ext.extend(Ext.form.ComboBox,
{
	displayField: 'DrugRequestPeriod_Name',
	anchor: '100%',
	editable: false,
	fieldLabel: langs('Период заявки'),
	hiddenName: 'DrugRequestPeriod_id',
	store: new Ext.data.JsonStore({
		url: '/?c=DrugRequest&m=loadDrugRequestPeriodList',
		editable: false,
		key: 'DrugRequestPeriod_id',
		autoLoad: false,
		fields: [
			{name: 'DrugRequestPeriod_Name', mapping: 'DrugRequestPeriod_Name'},
			{name: 'DrugRequestPeriod_begDate', mapping: 'DrugRequestPeriod_begDate'},
			{name: 'DrugRequestPeriod_endDate', mapping: 'DrugRequestPeriod_endDate'},
			{name: 'DrugRequestPeriod_id', mapping: 'DrugRequestPeriod_id'}
		],
		sortInfo: {field: 'DrugRequestPeriod_begDate'}
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{DrugRequestPeriod_Name}&nbsp;<font color="gray">({DrugRequestPeriod_begDate} - {DrugRequestPeriod_endDate})</font>',
		'</div></tpl>'
	),
	valueField: 'DrugRequestPeriod_id',
	initComponent: function() {
		sw.Promed.SwDynamicDrugRequestPeriodCombo.superclass.initComponent.apply(this, arguments);
	},
	onTrigger2Click: function() {
		var combo = this;

		if (combo.disabled) {
			return false;
		}

		getWnd('swDrugRequestPeriodViewWindow').show({
			onSelect: function() {
				var wnd = this;
				var viewframe = Ext.getCmp('drpvDrugRequestPeriodGrid');
				var record = viewframe.getGrid().getSelectionModel().getSelected();
				if (record && record.data.DrugRequestPeriod_id && record.data.DrugRequestPeriod_id > 0) {											
					combo.getStore().load({
						callback: function() {
							combo.setValue(record.data.DrugRequestPeriod_id);
							var index = combo.getStore().find('DrugRequestPeriod_id', record.data.DrugRequestPeriod_id);
							if (index != -1){
								var rec = combo.getStore().getAt(index);
								combo.fireEvent('select', combo, rec, 0);
							}
							wnd.hide();
						}
					});
				}
			},
			onHide: function() {
				combo.getStore().load({
					callback: function() {
						if (combo.getValue() > 0) {
							var index = combo.getStore().find('DrugRequestPeriod_id', combo.getValue());
							if (index == -1) {
								combo.setValue(null);
							}
						}
					}
				});
			}
		});
	},
	triggerAction: 'all'
});
Ext.reg('swdynamicdrugrequestperiodcombo', sw.Promed.SwDynamicDrugRequestPeriodCombo);

sw.Promed.SwDynamicDrugRequestPeriodCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwDynamicDrugRequestPeriodCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwDynamicDrugRequestPeriodCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwDynamicDrugRequestPeriodCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwDynamicDrugRequestPeriodCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;

// Тип заявки
sw.Promed.SwDrugRequestTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	codeField: 'DrugRequestType_Code',
	displayField: 'DrugRequestType_Name',
	anchor: '100%',
	editable: false,
	fieldLabel: langs('Статус заявки'),
	hiddenName: 'DrugRequestType_id',
	store: new Ext.db.AdapterStore(
	{
		autoLoad: false,
		dbFile: 'Promed.db',
		fields:
		[
			{name: 'DrugRequestType_Name', mapping: 'DrugRequestType_Name'},
			{name: 'DrugRequestType_Code', mapping: 'DrugRequestType_Code'},
			{name: 'DrugRequestType_id', mapping: 'DrugRequestType_id'}
		],
		key: 'DrugRequestType_id',
		sortInfo: {field: 'DrugRequestType_Code'},
		tableName: 'DrugRequestType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{DrugRequestType_Code}</font>&nbsp;{DrugRequestType_Name}',
		'</div></tpl>'
	),
	valueField: 'DrugRequestType_id',
	initComponent: function() {
		sw.Promed.SwDrugRequestTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdrugrequesttypecombo', sw.Promed.SwDrugRequestTypeCombo);

/**
 *
 * Комбобокс выбора протокола
 */
sw.Promed.SwDrugProtoCombo = Ext.extend(Ext.form.ComboBox,
{
	allowBlank: false,
	displayField: 'DrugProto_Name',
	enableKeyEvents: true,
	fieldLabel: langs('Протокол'),
	forceSelection: false,
	anchor: '100%',
	hiddenName: 'DrugProto_id',
	initComponent: function()
	{
		sw.Promed.SwDrugProtoCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.Store(
			{
				autoLoad: false,
				reader: new Ext.data.JsonReader(
					{
						id: 'DrugProto_id'
					},
					[
						{name: 'DrugProto_id', mapping: 'DrugProto_id'},
						{name: 'DrugProto_Code', mapping: 'DrugProto_Code' },
						{name: 'DrugProto_Name', mapping: 'DrugProto_Name'},
						{name: 'ReceptFinance_id', mapping: 'ReceptFinance_id'}
					]),
				url: '/?c=Drug&m=loadDrugProtoCombo'
			});
	},
	loadingText: langs('Идет поиск...'),
	queryDelay: 250,
	minChars: 1,
	minLength: 1,
	mode: 'remote',
	onTrigger2Click: Ext.emptyFn,
	resizable: true,
	selectOnFocus: true,
	tpl: new Ext.XTemplate(/*
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="width:100%;border: 0;"><td style="width:100%;"><h3>{DrugProto_Name}</h3></td></tr></table>',
		'</div></tpl>'*/
		'<tpl for="."><div class="x-combo-list-item">',
		'{DrugProto_Code}&nbsp;<font color="blue">({DrugProto_Name})</font>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'DrugProto_id'
});
Ext.reg('swdrugprotocombo', sw.Promed.SwDrugProtoCombo);

/** Комбобокс выбора медикамента в заявке
*/
sw.Promed.SwDrugProtoMnnCombo = Ext.extend(Ext.form.ComboBox,
{
	allowBlank: false,
	displayField: 'DrugProtoMnn_Name',
	enableKeyEvents: true,
	fieldLabel: langs('Медикамент'),
	forceSelection: false,
	hiddenName: 'DrugProtoMnn_id',
	initComponent: function()
	{
		sw.Promed.SwDrugProtoMnnCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.Store(
		{
			autoLoad: false,
			reader: new Ext.data.JsonReader(
			{
				id: 'DrugProtoMnn_id'
			},
			[
				{name: 'DrugProtoMnn_id', mapping: 'DrugProtoMnn_id'},
				//{ name: 'DrugProtoMnn_Code', mapping: 'DrugProtoMnn_Code' },
				{name: 'DrugProtoMnn_Name', mapping: 'DrugProtoMnn_Name'},
				{name: 'DrugMnn_id', mapping: 'DrugMnn_id'},
				{name: 'ReceptFinance_id', mapping: 'ReceptFinance_id'},
				{name: 'DrugProtoMnn_Price', mapping: 'DrugProtoMnn_Price'}
			]),
			url: '/?c=DrugRequest&m=index&method=loadDrugCombo'
		});
	},
	loadingText: langs('Идет поиск...'),
	queryDelay: 250,
	minChars: 1,
	minLength: 1,
	mode: 'remote',
	onTrigger2Click: Ext.emptyFn,
	resizable: true,
	selectOnFocus: true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="width:100%;border: 0;"><td style="width:80%;"><h3>{DrugProtoMnn_Name}</h3></td><td style="width:20%;">{DrugProtoMnn_Price}</td></tr></table>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'DrugProtoMnn_id'
});
Ext.reg('swdrugprotomnncombo', sw.Promed.SwDrugProtoMnnCombo);

/** Комбобокс выбора медикамента в рецепте
*/
sw.Promed.SwDrugProtoMnnSimpleCombo = Ext.extend(Ext.form.ComboBox,
{
	allowBlank: false,
	displayField: 'DrugProtoMnn_Name',
	enableKeyEvents: true,
	fieldLabel: langs('Медикамент'),
	forceSelection: false,
	hiddenName: 'DrugProtoMnn_id',
	initComponent: function()
	{
		sw.Promed.SwDrugProtoMnnSimpleCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.Store(
		{
			autoLoad: false,
			reader: new Ext.data.JsonReader(
			{
				id: 'DrugProtoMnn_id'
			},
			[
				{name: 'DrugProtoMnn_id', mapping: 'DrugProtoMnn_id'},
				{name: 'DrugProtoMnn_Name', mapping: 'DrugProtoMnn_Name'},
				{name: 'DrugMnn_id', mapping: 'DrugMnn_id'},
				{name: 'ReceptFinance_id', mapping: 'ReceptFinance_id'}
			]),
			url: '/?c=Drug&m=loadDrugProtoMnnCombo'
		});
	},
	loadingText: langs('Идет поиск...'),
	queryDelay: 250,
	minChars: 1,
	minLength: 1,
	mode: 'remote',
	onTrigger2Click: Ext.emptyFn,
	resizable: true,
	selectOnFocus: true,
	triggerAction: 'all',
	valueField: 'DrugProtoMnn_id'
});
Ext.reg('swdrugprotomnnsimplecombo', sw.Promed.SwDrugProtoMnnSimpleCombo);

sw.Promed.SwDrugProtoMnnListCombo = Ext.extend(Ext.form.ComboBox,
    {
        allowBlank: false,
        displayField: 'DrugMnn_Name',
        enableKeyEvents: true,
        fieldLabel: langs('Медикамент'),
        forceSelection: false,
        hiddenName: 'DrugProtoMnn_id',
        initComponent: function()
        {
            sw.Promed.SwDrugProtoMnnListCombo.superclass.initComponent.apply(this, arguments);
            this.store = new Ext.data.Store(
                {
                    autoLoad: false,
                    reader: new Ext.data.JsonReader(
                        {
                            id: 'DrugProtoMnn_id'
                        },
                        [
                            {name: 'DrugProtoMnn_id', mapping: 'DrugProtoMnn_id'},
                            {name: 'DrugMnn_id', mapping: 'DrugMnn_id'},
                            {name: 'DrugMnn_Name', mapping: 'DrugMnn_Name'},
							{name: 'ReceptFinance_id', mapping: 'ReceptFinance_id'}
                        ]),
                    url: '/?c=DrugRequest&m=index&method=loadMnnCombo'
                });
        },
        loadingText: langs('Идет поиск...'),
        queryDelay: 250,
        minChars: 1,
        minLength: 1,
        mode: 'remote',
        onTrigger2Click: Ext.emptyFn,
        resizable: true,
        selectOnFocus: true,
        tpl: new Ext.XTemplate(
            '<tpl for="."><div class="x-combo-list-item">',
            '<table style="width:100%;border: 0;"><td style="width:80%;"><h3>{DrugMnn_Name}</h3></td></tr></table>',
            '</div></tpl>'
        ),
        triggerAction: 'all',
        valueField: 'DrugProtoMnn_id'
    });
Ext.reg('swdrugprotomnnlistcombo', sw.Promed.SwDrugProtoMnnListCombo);

/*
sw.Promed.SwDrugProtoMnnCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwDrugProtoMnnCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwDrugProtoMnnCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwDrugProtoMnnCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwDrugProtoMnnCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwDrugProtoMnnCombo.prototype.onTrigger2Click = this.onTrigger2Click;
*/
sw.Promed.SwOrgFarmacyOstatCombo = Ext.extend(Ext.form.ComboBox,
{
	allowBlank: false,
	displayField: 'OrgFarmacy_Name',
	enableKeyEvents: true,
	fieldLabel: langs('Аптека'),
	forceSelection: true,
	hiddenName: 'OrgFarmacy_id',
	initComponent: function() {
		sw.Promed.SwOrgFarmacyOstatCombo.superclass.initComponent.apply(this, arguments);
	},
	minChars: 1,
	minLength: 1,
	mode: 'local',
	onTrigger2Click: Ext.emptyFn,
	resizable: true,
	selectOnFocus: true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0; width: 100%;"><tr>',
		'<td style="width: 55%;">{OrgFarmacy_Name}</td>',
		'<td style="width: 40%;">{OrgFarmacy_HowGo}</td>',
		'<td style="width: 5%; text-align: right;">{DrugOstat_Kolvo}</td>',
		'</tr></table>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'OrgFarmacy_id'
});
Ext.reg('sworgfarmacyostatcombo', sw.Promed.SwOrgFarmacyOstatCombo);

sw.Promed.SwOrgFarmacyOstatCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwOrgFarmacyOstatCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwOrgFarmacyOstatCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwOrgFarmacyOstatCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwOrgFarmacyOstatCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwOrgFarmacyOstatCombo.prototype.onTrigger2Click = this.onTrigger2Click;

sw.Promed.SwOrgFarmacyCombo = Ext.extend(Ext.form.ComboBox,
{
	allowBlank: true,
	displayField: 'OrgFarmacy_Name',
	enableKeyEvents: true,
	fieldLabel: langs('Аптека'),
	forceSelection: true,
	hiddenName: 'OrgFarmacy_id',
	initComponent: function() {
		sw.Promed.SwOrgFarmacyCombo.superclass.initComponent.apply(this, arguments);
	},
	minChars: 1,
	minLength: 1,
	mode: 'local',
	onTrigger2Click: Ext.emptyFn,
	resizable: true,
	selectOnFocus: true,
	store: new Ext.data.Store({
		autoLoad: false,
		baseParams: {
			"add_without_orgfarmacy_line": 1
		},
		reader: new Ext.data.JsonReader({
			id: 'OrgFarmacy_id'
		}, [
			{name: 'OrgFarmacy_id', mapping: 'OrgFarmacy_id'},
			{name: 'OrgFarmacy_Name', mapping: 'OrgFarmacy_Name'},
			{name: 'OrgFarmacy_HowGo', mapping: 'OrgFarmacy_HowGo'},
			{name: 'OrgFarmacy_IsFavorite', mapping: 'OrgFarmacy_IsFavorite', type: 'int'}
		]),
		url: C_ORGFARMACY_LIST
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<div style="width: 55%;{[values.OrgFarmacy_id != -1 ? "" : "font-weight:bold;"]}">{[values.OrgFarmacy_Name==""?"&nbsp;":values.OrgFarmacy_Name]}</div>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'OrgFarmacy_id'
});
Ext.reg('sworgfarmacycombo', sw.Promed.SwOrgFarmacyCombo);

sw.Promed.SwOrgFarmacyAdvCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	trigger1Class: 'x-form-search-trigger',
	store: new Ext.data.JsonStore({
		url: '/?c=Org&m=getOrgFarmacyList',
		editable: false,
		key: 'OrgFarmacy_id',
		autoLoad: false,
		fields: [
			{name: 'OrgFarmacy_id',    type:'int'},
			{name: 'OrgFarmacy_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OrgFarmacy_Name'
		}
	}),
	triggerAction: 'all',
	displayField:'OrgFarmacy_Name',
	valueField: 'OrgFarmacy_id',
	fieldLabel: langs('Аптека'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{OrgFarmacy_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOrgFarmacyAdvCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('sworgfarmacyadvcombo', sw.Promed.SwOrgFarmacyAdvCombo);


sw.Promed.SwProMedUserCombo = Ext.extend(Ext.form.ComboBox, {
	beforeBlur: function() {
		// медитируем
		return true;
	},
	displayField: 'pmUser_Fio',
	editable: true,
	enableKeyEvents: true,
	fieldLabel: langs('Пользователь'),
	hiddenName: 'pmUser_id',
	minChars: 1,
	minLength: 1,
	mode: 'local',
	resizable: true,
	selectOnFocus: true,
	store: new Ext.data.Store({
		autoLoad: false,
		reader: new Ext.data.JsonReader({
			id: 'pmUser_id'
		}, [
			{name: 'pmUser_id', mapping: 'pmUser_id'},
			{name: 'pmUser_Fio', mapping: 'pmUser_Fio'},
			{name: 'pmUser_Login', mapping: 'pmUser_Login'}
		]),
		sortInfo: {
			direction: 'ASC',
			field: 'pmUser_Fio'
		},
		url: C_PMUSER_LIST
	}),
	triggerAction: 'all',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<div><b>{[values.pmUser_Fio ? values.pmUser_Fio : "&nbsp;"]}</b> {[values.pmUser_Login ? "(" + values.pmUser_Login + ")" : "&nbsp;"]}</div>',
		'</div></tpl>'
	),
	valueField: 'pmUser_id',
	initComponent: function() {
		sw.Promed.SwProMedUserCombo.superclass.initComponent.apply(this, arguments);
		this.addListener('keydown', function(inp, e) {
			if ( e.getKey() == e.END ) {
				this.inKeyMode = true;
				this.select(this.getStore().getCount() - 1);
			}

			if ( e.getKey() == e.HOME ) {
				this.inKeyMode = true;
				this.select(0);
			}

			if ( e.getKey() == e.PAGE_UP ) {
				this.inKeyMode = true;
				var ct = this.getStore().getCount();

				if ( ct > 0 ) {
					if ( this.selectedIndex == -1 ) {
						this.select(0);
					}
					else if ( this.selectedIndex != 0 ) {
						if ( this.selectedIndex - 10 >= 0 )
							this.select(this.selectedIndex - 10);
						else
							this.select(0);
					}
				}
			}

			if ( e.getKey() == e.PAGE_DOWN ) {
				if ( !this.isExpanded() ) {
					this.onTriggerClick();
				}
				else {
					this.inKeyMode = true;
					var ct = this.getStore().getCount();

					if ( ct > 0 ) {
						if ( this.selectedIndex == -1 ) {
							this.select(0);
						}
						else if ( this.selectedIndex != ct - 1 ) {
							if ( this.selectedIndex + 10 < ct - 1 )
								this.select(this.selectedIndex + 10);
							else
								this.select(ct - 1);
						}
					}
				}
			}

			if ( e.altKey || e.ctrlKey || e.shiftKey )
				return true;
			
			if ( e.getKey() == e.DELETE||e.getKey() == e.BACKSPACE) {
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if ( inp.onClearValue ) {
					this.onClearValue();
				}
				e.stopEvent();
				return true;
			}
		});
		this.addListener('beforequery', function(q) {
			if ( q.combo.getStore().getCount() == 0 ) {
				q.combo.getStore().removeAll();
				q.combo.getStore().load();
			}
		});
	}
});

Ext.reg('swpromedusercombo', sw.Promed.SwProMedUserCombo);

sw.Promed.SwKatNaselCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'KatNasel_Code',
	displayField: 'KatNasel_Name',
	editable: false,
	fieldLabel: langs('Категория населения'),
	hiddenName: 'KatNasel_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'KatNasel_Name', mapping: 'KatNasel_Name'},
			{name: 'KatNasel_Code', mapping: 'KatNasel_Code'},
			{name: 'KatNasel_SysNick', mapping: 'KatNasel_SysNick'},
			{name: 'KatNasel_id', mapping: 'KatNasel_id'}
		],
		key: 'KatNasel_id',
		sortInfo: {field: 'KatNasel_Code'},
		tableName: 'KatNasel'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{KatNasel_Code}</font></td><td><h3>{KatNasel_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'KatNasel_id',
	initComponent: function() {
		sw.Promed.SwKatNaselCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swkatnaselcombo', sw.Promed.SwKatNaselCombo);

sw.Promed.SwRegistryTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'RegistryType_Code',
	displayField: 'RegistryType_Name',
	editable: false,
	fieldLabel: langs('Тип реестра'),
	hiddenName: 'RegistryType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'RegistryType_Name', mapping: 'RegistryType_Name'},
			{name: 'RegistryType_Code', mapping: 'RegistryType_Code'},
			{name: 'RegistryType_id', mapping: 'RegistryType_id'}
		],
		key: 'RegistryType_id',
		sortInfo: {field: 'RegistryType_Code'},
		tableName: 'RegistryType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{RegistryType_Code}</font></td><td><h3>{RegistryType_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'RegistryType_id',
	initComponent: function() {
		sw.Promed.SwRegistryTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swregistrytypecombo', sw.Promed.SwRegistryTypeCombo);


// Невалидные рецепты: результат
sw.Promed.SwReceptResultCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'ReceptResult',
		key: 'ReceptResult_id',
		autoLoad: false,
		baseParams: {object:'ReceptResult', ReceptResult_id:'', ReceptResult_Code:'', ReceptResult_Name:''},
		fields:
		[
			{name: 'ReceptResult_id', type:'int'},
			{name: 'ReceptResult_Code', type:'int'},
			{name: 'ReceptResult_Name',  type:'string'}
		],
		sortInfo:
		{
			field: 'ReceptResult_Code'
		}
	}),
	//triggerAction: 'all',
	editable: false,
	codeField: 'ReceptResult_Code',
	displayField:'ReceptResult_Name',
	valueField: 'ReceptResult_id',
	hiddenName:'ReceptResult_id',
	fieldLabel: langs('Результат'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{ReceptResult_Code}</font>&nbsp;{ReceptResult_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwReceptResultCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swreceptresultcombo', sw.Promed.SwReceptResultCombo);


// Невалидные рецепты: несовпадения в рецептах
sw.Promed.SwReceptMismatchCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'ReceptMismatch',
		key: 'ReceptMismatch_id',
		autoLoad: false,
		baseParams: {object:'ReceptMismatch', ReceptMismatch_id:'', ReceptMismatch_Code:'', ReceptMismatch_Name:''},
		fields:
		[
			{name: 'ReceptMismatch_id', type:'int'},
			{name: 'ReceptMismatch_Code', type:'int'},
			{name: 'ReceptMismatch_Name',  type:'string'}
		],
		sortInfo:
		{
			field: 'ReceptMismatch_Code'
		}
	}),
	//triggerAction: 'all',
	editable: false,
	codeField: 'ReceptMismatch_Code',
	displayField:'ReceptMismatch_Name',
	valueField: 'ReceptMismatch_id',
	hiddenName:'ReceptMismatch_id',
	fieldLabel: langs('Несовпадения в рецептах'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{ReceptMismatch_Code}</font>&nbsp;{ReceptMismatch_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwReceptMismatchCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swreceptmismatchcombo', sw.Promed.SwReceptMismatchCombo);

sw.Promed.SwAbortPlaceCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'AbortPlace_Code',
	displayField: 'AbortPlace_Name',
	editable: false,
	fieldLabel: langs('Место проведения'),
	hiddenName: 'AbortPlace_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'AbortPlace_Name', mapping: 'AbortPlace_Name'},
			{name: 'AbortPlace_Code', mapping: 'AbortPlace_Code'},
			{name: 'AbortPlace_id', mapping: 'AbortPlace_id'}
		],
		key: 'AbortPlace_id',
		sortInfo: {field: 'AbortPlace_Code'},
		tableName: 'AbortPlace'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{AbortPlace_Code}</font>&nbsp;{AbortPlace_Name}',
		'</div></tpl>'
	),
	valueField: 'AbortPlace_id',
	initComponent: function() {
		sw.Promed.SwAbortPlaceCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swabortplacecombo', sw.Promed.SwAbortPlaceCombo);

sw.Promed.SwAbortTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'AbortType_Code',
	displayField: 'AbortType_Name',
	editable: false,
	fieldLabel: langs('Тип аборта'),
	hiddenName: 'AbortType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'AbortType_Name', mapping: 'AbortType_Name'},
			{name: 'AbortType_Code', mapping: 'AbortType_Code'},
			{name: 'AbortType_id', mapping: 'AbortType_id'}
		],
		key: 'AbortType_id',
		sortInfo: {field: 'AbortType_Code'},
		tableName: 'AbortType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{AbortType_Code}</font>&nbsp;{AbortType_Name}',
		'</div></tpl>'
	),
	valueField: 'AbortType_id',
	initComponent: function() {
		sw.Promed.SwAbortTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swaborttypecombo', sw.Promed.SwAbortTypeCombo);

sw.Promed.SwSpecificTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'SpecificType_Code',
	displayField: 'SpecificType_Name',
	editable: false,
	fieldLabel: langs('Специфика'),
	hiddenName: 'SpecificType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'SpecificType_Name', mapping: 'SpecificType_Name'},
			{name: 'SpecificType_Code', mapping: 'SpecificType_Code'},
			{name: 'SpecificType_id', mapping: 'SpecificType_id'}
		],
		key: 'SpecificType_id',
		sortInfo: {field: 'SpecificType_Code'},
		tableName: 'SpecificType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{SpecificType_Code}</font>&nbsp;{SpecificType_Name}',
		'</div></tpl>'
	),
	valueField: 'SpecificType_id',
	initComponent: function() {
		sw.Promed.SwSpecificTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swspecifictypecombo', sw.Promed.SwSpecificTypeCombo);

sw.Promed.SwDirTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'DirType_Code',
	displayField: 'DirType_Name',
	editable: false,
	fieldLabel: langs('Тип направления'),
	hiddenName: 'DirType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'DirType_Name', mapping: 'DirType_Name'},
			{name: 'DirType_Code', mapping: 'DirType_Code'},
			{name: 'DirType_id', mapping: 'DirType_id'}
		],
		key: 'DirType_id',
		sortInfo: {field: 'DirType_Code'},
		tableName: 'DirType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{DirType_Code}</font>&nbsp;{DirType_Name}',
		'</div></tpl>'
	),
	valueField: 'DirType_id',
	initComponent: function() {
		sw.Promed.SwDirTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdirtypecombo', sw.Promed.SwDirTypeCombo);

sw.Promed.SwDirTypeBaseJournalCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'DirType_Code',
	displayField: 'DirType_Name',
	editable: false,
	fieldLabel: langs('Тип направления'),
	hiddenName: 'DirType_id',
	loadParams: {params: {where: ' where DirType_id not in (7, 18, 19)'}},
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{DirType_Code}</font>&nbsp;{DirType_Name}',
		'</div></tpl>'
	),
	valueField: 'DirType_id',
	initComponent: function() {
		sw.Promed.SwDirTypeBaseJournalCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'DirType_Name', mapping: 'DirType_Name'},
				{name: 'DirType_Code', mapping: 'DirType_Code'},
				{name: 'DirType_id', mapping: 'DirType_id'}
			],
			key: 'DirType_id',
			sortInfo: {field: 'DirType_Code'},
			tableName: 'DirType'
		});
	}
});
Ext.reg('swdirtypebasejournalcombo', sw.Promed.SwDirTypeBaseJournalCombo);

sw.Promed.SwKLAreaTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'KLAreaType_Code',
	displayField: 'KLAreaType_Name',
	editable: false,
	fieldLabel: langs('Тип населенного пункта'),
	hiddenName: 'KLAreaType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'KLAreaType_Name', mapping: 'KLAreaType_Name'},
			{name: 'KLAreaType_Code', mapping: 'KLAreaType_Code'},
			{name: 'KLAreaType_id', mapping: 'KLAreaType_id'}
		],
		key: 'KLAreaType_id',
		sortInfo: {field: 'KLAreaType_Code'},
		tableName: 'KLAreaType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{KLAreaType_Code}</font>&nbsp;{KLAreaType_Name}',
		'</div></tpl>'
	),
	valueField: 'KLAreaType_id',
	initComponent: function() {
		sw.Promed.SwKLAreaTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swklareatypecombo', sw.Promed.SwKLAreaTypeCombo);

sw.Promed.SwWeightAbnormTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'WeightAbnormType_Code',
	displayField: 'WeightAbnormType_Name',
	editable: false,
	fieldLabel: langs('Тип'),
	hiddenName: 'WeightAbnormType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'WeightAbnormType_id', mapping: 'WeightAbnormType_id'},
			{name: 'WeightAbnormType_Name', mapping: 'WeightAbnormType_Name'},
			{name: 'WeightAbnormType_Code', mapping: 'WeightAbnormType_Code'}
		],
		key: 'WeightAbnormType_id',
		sortInfo: {field: 'WeightAbnormType_Code'},
		tableName: 'WeightAbnormType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{WeightAbnormType_Code}</font>&nbsp;{WeightAbnormType_Name}',
		'</div></tpl>'
	),
	valueField: 'WeightAbnormType_id',
	initComponent: function() {
		sw.Promed.SwWeightAbnormTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swweightabnormtypecombo', sw.Promed.SwWeightAbnormTypeCombo);

sw.Promed.SwWeightMeasureTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'WeightMeasureType_Code',
	displayField: 'WeightMeasureType_Name',
	editable: false,
	fieldLabel: langs('Вид замера'),
	hiddenName: 'WeightMeasureType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'WeightMeasureType_id', mapping: 'WeightMeasureType_id'},
			{name: 'WeightMeasureType_Name', mapping: 'WeightMeasureType_Name'},
			{name: 'WeightMeasureType_Code', mapping: 'WeightMeasureType_Code'}
		],
		key: 'WeightMeasureType_id',
		sortInfo: {field: 'WeightMeasureType_Code'},
		tableName: 'WeightMeasureType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{WeightMeasureType_Code}</font>&nbsp;{WeightMeasureType_Name}',
		'</div></tpl>'
	),
	valueField: 'WeightMeasureType_id',
	initComponent: function() {
		sw.Promed.SwWeightMeasureTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swweightmeasuretypecombo', sw.Promed.SwWeightMeasureTypeCombo);

sw.Promed.SwHeightAbnormTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'HeightAbnormType_Code',
	displayField: 'HeightAbnormType_Name',
	editable: false,
	fieldLabel: langs('Тип'),
	hiddenName: 'HeightAbnormType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'HeightAbnormType_id', mapping: 'HeightAbnormType_id'},
			{name: 'HeightAbnormType_Name', mapping: 'HeightAbnormType_Name'},
			{name: 'HeightAbnormType_Code', mapping: 'HeightAbnormType_Code'}
		],
		key: 'HeightAbnormType_id',
		sortInfo: {field: 'HeightAbnormType_Code'},
		tableName: 'HeightAbnormType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{HeightAbnormType_Code}</font>&nbsp;{HeightAbnormType_Name}',
		'</div></tpl>'
	),
	valueField: 'HeightAbnormType_id',
	initComponent: function() {
		sw.Promed.SwHeightAbnormTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swheightabnormtypecombo', sw.Promed.SwHeightAbnormTypeCombo);

sw.Promed.SwHeightMeasureTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'HeightMeasureType_Code',
	displayField: 'HeightMeasureType_Name',
	editable: false,
	fieldLabel: langs('Вид замера'),
	hiddenName: 'HeightMeasureType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'HeightMeasureType_id', mapping: 'HeightMeasureType_id'},
			{name: 'HeightMeasureType_Name', mapping: 'HeightMeasureType_Name'},
			{name: 'HeightMeasureType_Code', mapping: 'HeightMeasureType_Code'}
		],
		key: 'HeightMeasureType_id',
		sortInfo: {field: 'HeightMeasureType_Code'},
		tableName: 'HeightMeasureType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{HeightMeasureType_Code}</font>&nbsp;{HeightMeasureType_Name}',
		'</div></tpl>'
	),
	valueField: 'HeightMeasureType_id',
	initComponent: function() {
		sw.Promed.SwHeightMeasureTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swheightmeasuretypecombo', sw.Promed.SwHeightMeasureTypeCombo);

sw.Promed.SwHealthAbnormCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'HealthAbnorm_Code',
	displayField: 'HealthAbnorm_Name',
	editable: false,
	fieldLabel: langs('Главное нарушение здоровья'),
	hiddenName: 'HealthAbnorm_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'HealthAbnorm_id', mapping: 'HealthAbnorm_id'},
			{name: 'HealthAbnorm_Name', mapping: 'HealthAbnorm_Name'},
			{name: 'HealthAbnorm_Code', mapping: 'HealthAbnorm_Code'}
		],
		key: 'HealthAbnorm_id',
		sortInfo: {field: 'HealthAbnorm_Code'},
		tableName: 'HealthAbnorm'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{HealthAbnorm_Code}</font>&nbsp;{HealthAbnorm_Name}',
		'</div></tpl>'
	),
	valueField: 'HealthAbnorm_id',
	initComponent: function() {
		sw.Promed.SwHealthAbnormCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swhealthabnormcombo', sw.Promed.SwHealthAbnormCombo);



// скорая помощь
sw.Promed.SwCmpPlaceCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'CmpPlace_Code',
	displayField: 'CmpPlace_Name',
	editable: false,
	fieldLabel: langs('Где'),
	hiddenName: 'CmpPlace_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'CmpPlace_id', mapping: 'CmpPlace_id'},
			{name: 'CmpPlace_Name', mapping: 'CmpPlace_Name'},
			{name: 'CmpPlace_Code', mapping: 'CmpPlace_Code'}
		],
		key: 'CmpPlace_id',
		sortInfo: {field: 'CmpPlace_Code'},
		tableName: 'CmpPlace'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{CmpPlace_Code}</font>&nbsp;{CmpPlace_Name}',
		'</div></tpl>'
	),
	valueField: 'CmpPlace_id',
	initComponent: function() {
		sw.Promed.SwCmpPlaceCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcmpplacecombo', sw.Promed.SwCmpPlaceCombo);


sw.Promed.SwCmpReasonCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'CmpReason_Code',
	displayField: 'CmpReason_Name',
	editable: false,
	fieldLabel: langs('Повод'),
	hiddenName: 'CmpReason_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'CmpReason_id', mapping: 'CmpReason_id'},
			{name: 'CmpReason_Name', mapping: 'CmpReason_Name'},
			{name: 'CmpReason_Code', mapping: 'CmpReason_Code'},
			{name: 'CmpReason_isCmp', type:'string'}
		],
		key: 'CmpReason_id',
		sortInfo: {field: 'CmpReason_Code'},
		tableName: 'CmpReason'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{CmpReason_Code}</font>&nbsp;{CmpReason_Name}',
		'</div></tpl>'
	),
	valueField: 'CmpReason_id',
	initComponent: function() {
		var curArm = '';
		if(sw.Promed.MedStaffFactByUser.current){
			curArm =  sw.Promed.MedStaffFactByUser.current.ARMType
		}
		if(!curArm && sw.Promed.MedStaffFactByUser.last){
			curArm = sw.Promed.MedStaffFactByUser.last.ARMType;
		}
		if(!curArm && getGlobalOptions().curARMType){
			curArm = getGlobalOptions().curARMType;
		}
		var cmp = this,
			isNmpArm = curArm.inlist(['slneotl','dispnmp','dispcallnmp','dispdirnmp']),
			now = Ext.Date.format(new Date(), "Y-m-d");

		this.loadParams = {
			params:  {
				where: " where ("
				+ " (  CmpReason_begDate is null OR  ( CmpReason_begDate < '" + now + "' )  ) "
				+ " AND "
				+ " (  CmpReason_endDate is null OR  ( CmpReason_endDate > '" + now + "' )  ) "
				+ ")"
			}
		};

		if(!isNmpArm){
			this.loadParams.params.where = {
				params: {
					where: " and CmpReason_isCmp = '2'"
				}
			};
		}
		sw.Promed.SwCmpReasonCombo.superclass.initComponent.apply(this, arguments);

		//Удалим поводы с одинаковым кодом
		cmp.store.on('load', function(q,w,e,r){
			cmp.store.each(function(rec){
				var finded = -1;
				if(rec && rec.get('CmpReason_isCmp') == '1'){
					finded = cmp.store.findBy(function(r){
						return (r.get('CmpReason_Code') == rec.get('CmpReason_Code')) && (r.get('CmpReason_isCmp') != rec.get('CmpReason_isCmp'))
					}, cmp.store)

					if(finded != -1){
						cmp.store.removeAt(finded)
					}
				}

			})
		})
	}
});
Ext.reg('swcmpreasoncombo', sw.Promed.SwCmpReasonCombo);

sw.Promed.SwCmpCallTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'CmpCallType_Code',
	displayField: 'CmpCallType_Name',
	editable: false,
	fieldLabel: langs('Тип выз.'),
	hiddenName: 'CmpCallType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'CmpCallType_id', type: 'int'},
			{name: 'CmpCallType_Code', type: 'int'},
			{name: 'CmpCallType_Name', type: 'string'},
			{name: 'CmpCallType_begDate', type: 'date', dateFormat: 'd.m.Y'},
			{name: 'CmpCallType_endDate', type: 'date', dateFormat: 'd.m.Y'}
		],
		key: 'CmpCallType_id',
		sortInfo: {field: 'CmpCallType_Code'},
		tableName: 'CmpCallType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{CmpCallType_Code}</font>&nbsp;{CmpCallType_Name}',
		'</div></tpl>'
	),
	valueField: 'CmpCallType_id',
	setFilterByDate: function(date) {
		this.lastQuery = '';
		this.store.filterBy(function(rec){
			return (
				(Ext.isEmpty(rec.get('CmpCallType_begDate')) || rec.get('CmpCallType_begDate') <= date) &&
				(Ext.isEmpty(rec.get('CmpCallType_endDate')) || rec.get('CmpCallType_endDate') >= date)
			);
		});
	},
	initComponent: function() {
		sw.Promed.SwCmpCallTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcmpcalltypecombo', sw.Promed.SwCmpCallTypeCombo);

sw.Promed.SwCmpProfileCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'CmpProfile_Code',
	displayField: 'CmpProfile_Name',
	editable: false,
	fieldLabel: langs('Прф.'),
	hiddenName: 'CmpProfile_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'CmpProfile_id', mapping: 'CmpProfile_id'},
			{name: 'CmpProfile_Name', mapping: 'CmpProfile_Name'},
			{name: 'CmpProfile_Code', mapping: 'CmpProfile_Code'}
		],
		key: 'CmpProfile_id',
		sortInfo: {field: 'CmpProfile_Code'},
		tableName: 'CmpProfile'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{CmpProfile_Code}</font>&nbsp;{CmpProfile_Name}',
		'</div></tpl>'
	),
	valueField: 'CmpProfile_id',
	initComponent: function() {
		sw.Promed.SwCmpProfileCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcmpprofilecombo', sw.Promed.SwCmpProfileCombo);

sw.Promed.SwCmpResultCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'CmpResult_Code',
	displayField: 'CmpResult_Name',
	editable: false,
	//loadParams: {params: { where: "where Region_id is null" }},
	fieldLabel: langs('Рез-т'),
	hiddenName: 'CmpResult_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'CmpResult_id', mapping: 'CmpResult_id'},
			{name: 'CmpResult_Name', mapping: 'CmpResult_Name'},
			{name: 'CmpResult_Code', mapping: 'CmpResult_Code'},
			{name: 'LeaveType_id', mapping: 'LeaveType_id'}
		],
		key: 'CmpResult_id',
		sortInfo: {field: 'CmpResult_Code'},
		tableName: 'CmpResult'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{CmpResult_Code}</font>&nbsp;{CmpResult_Name}',
		'</div></tpl>'
	),
	valueField: 'CmpResult_id',
	initComponent: function() {
		sw.Promed.SwCmpResultCombo.superclass.initComponent.apply(this, arguments);
		if(getRegionNick() == 'perm') this.loadParams = {params: { where: "where Region_id is null" }};
	}
});
Ext.reg('swcmpresultcombo', sw.Promed.SwCmpResultCombo);

sw.Promed.SwCmpTraumaCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'CmpTrauma_Code',
	displayField: 'CmpTrauma_Name',
	editable: false,
	fieldLabel: langs('Вид'),
	hiddenName: 'CmpTrauma_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'CmpTrauma_id', mapping: 'CmpTrauma_id'},
			{name: 'CmpTrauma_Name', mapping: 'CmpTrauma_Name'},
			{name: 'CmpTrauma_Code', mapping: 'CmpTrauma_Code'}
		],
		key: 'CmpTrauma_id',
		sortInfo: {field: 'CmpTrauma_Code'},
		tableName: 'CmpTrauma'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{CmpTrauma_Code}</font>&nbsp;{CmpTrauma_Name}',
		'</div></tpl>'
	),
	valueField: 'CmpTrauma_id',
	initComponent: function() {
		sw.Promed.SwCmpTraumaCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcmptraumacombo', sw.Promed.SwCmpTraumaCombo);

sw.Promed.SwCmpTalonCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'CmpTalon_Code',
	displayField: 'CmpTalon_Name',
	editable: false,
	fieldLabel: langs('Р'),
	hiddenName: 'CmpTalon_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'CmpTalon_id', mapping: 'CmpTalon_id'},
			{name: 'CmpTalon_Name', mapping: 'CmpTalon_Name'},
			{name: 'CmpTalon_Code', mapping: 'CmpTalon_Code'}
		],
		key: 'CmpTalon_id',
		sortInfo: {field: 'CmpTalon_Code'},
		tableName: 'CmpTalon'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{CmpTalon_Code}</font>&nbsp;{CmpTalon_Name}',
		'</div></tpl>'
	),
	valueField: 'CmpTalon_id',
	initComponent: function() {
		sw.Promed.SwCmpTalonCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcmptaloncombo', sw.Promed.SwCmpTalonCombo);

sw.Promed.SwCmpDrugCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'CmpDrug_Code',
	displayField: 'CmpDrug_Name',
	editable: true,
	fieldLabel: langs('Медикамент'),
	hiddenName: 'CmpDrug_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'CmpDrug_id', mapping: 'CmpDrug_id'},
			{name: 'CmpDrug_Name', mapping: 'CmpDrug_Name'},
			{name: 'CmpDrug_Code', mapping: 'CmpDrug_Code'},
			{name: 'CmpDrug_Ei', mapping: 'CmpDrug_Ei'},
			{name: 'CmpDrug_Kolvo', mapping: 'CmpDrug_Kolvo'}
		],
		key: 'CmpDrug_id',
		sortInfo: {field: 'CmpDrug_Code'},
		tableName: 'CmpDrug'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{CmpDrug_Code}</font>&nbsp;{CmpDrug_Name}',
		'</div></tpl>'
	),
	valueField: 'CmpDrug_id',
	initComponent: function() {
		sw.Promed.SwCmpDrugCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcmpdrugcombo', sw.Promed.SwCmpDrugCombo);

sw.Promed.SwCmpDiagCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'CmpDiag_Code',
	displayField: 'CmpDiag_Name',
	editable: true,
	fieldLabel: 'DS',
	hiddenName: 'CmpDiag_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'CmpDiag_id', mapping: 'CmpDiag_id'},
			{name: 'CmpDiag_Name', mapping: 'CmpDiag_Name'},
			{name: 'CmpDiag_Code', mapping: 'CmpDiag_Code'}
		],
		key: 'CmpDiag_id',
		sortInfo: {field: 'CmpDiag_Code'},
		tableName: 'CmpDiag'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{CmpDiag_Code}</font>&nbsp;{CmpDiag_Name}',
		'</div></tpl>'
	),
	valueField: 'CmpDiag_id',
	initComponent: function() {
		sw.Promed.SwCmpDiagCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcmpdiagcombo', sw.Promed.SwCmpDiagCombo);

sw.Promed.SwRecTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'RecType_id',
	displayField: 'RecType_Name',
	editable: false,
	fieldLabel: langs('Тип записи'),
	hiddenName: 'RecType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'RecType_id', mapping: 'RecType_id'},
			{name: 'RecType_Name', mapping: 'RecType_Name'}
		],
		key: 'RecType_id',
		sortInfo: {field: 'RecType_id'},
		tableName: 'RecType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{RecType_id}</font>&nbsp;{RecType_Name}',
		'</div></tpl>'
	),
	valueField: 'RecType_id',
	initComponent: function() {
		sw.Promed.SwRecTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swrectypecombo', sw.Promed.SwRecTypeCombo);

sw.Promed.SwMedStatusCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'MedStatus_id',
	displayField: 'MedStatus_Name',
	editable: false,
	fieldLabel: langs('Статус врача'),
	hiddenName: 'MedStatus_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'MedStatus_id', mapping: 'MedStatus_id'},
			{name: 'MedStatus_Name', mapping: 'MedStatus_Name'}
		],
		key: 'MedStatus_id',
		sortInfo: {field: 'MedStatus_id'},
		tableName: 'MedStatus'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{MedStatus_id}</font>&nbsp;{MedStatus_Name}',
		'</div></tpl>'
	),
	valueField: 'MedStatus_id',
	initComponent: function() {
		sw.Promed.SwMedStatusCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swmedstatuscombo', sw.Promed.SwMedStatusCombo);

sw.Promed.ContragentTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'ContragentType_Code',
	displayField: 'ContragentType_Name',
	editable: false,
	fieldLabel: langs('Тип контрагента'),
	hiddenName: 'ContragentType_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{ContragentType_Code}</font>&nbsp;{ContragentType_Name}',
		'</div></tpl>'
	),
	valueField: 'ContragentType_id',
	initComponent: function() {
		sw.Promed.ContragentTypeCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'ContragentType_Name', mapping: 'ContragentType_Name'},
				{name: 'ContragentType_Code', mapping: 'ContragentType_Code'},
				{name: 'ContragentType_id', mapping: 'ContragentType_id'}
			],
			key: 'ContragentType_id',
			sortInfo: {field: 'ContragentType_Code'},
			tableName: 'ContragentType'
		});
	}
});
Ext.reg('contragenttypecombo', sw.Promed.ContragentTypeCombo);

sw.Promed.SwContragentCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'remote',
	minChars: 1,
	editable: true,
	codeField: 'Contragent_Code',
	triggerAction: 'all',
	hiddenName:'Contragent_id',
	displayField:'Contragent_Name',
	valueField: 'Contragent_id',
	fieldLabel: langs('Контрагент'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border:0;"><td style="width:50px;color:red;">{Contragent_Code}</td><td nowrap>{Contragent_Name}&nbsp;</td></tr></table>',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.SwContragentCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			url: '/?c=Farmacy&m=loadContragentList',
			key: 'Contragent_id',
			autoLoad: false,
			fields: [
				{name: 'Contragent_id', type:'int'},
				{name: 'ContragentType_id', type:'int'},
				{name: 'ContragentType_Code', type:'int'},
				{name: 'Contragent_Code', type:'int'},
				{name: 'Contragent_Name', type:'string'},
				{name: 'Org_id', type:'int'},
				{name: 'OrgFarmacy_id', type:'int'},
				{name: 'MedService_id', type:'int'},
				{name: 'Lpu_id', type:'int'},
				{name: 'LpuSection_id', type:'int'},
				{name: 'OrgType_SysNick', type:'string'}
			]/*,
			sortInfo: {
				field: 'ContragentType_id'
			}*/
		});
	}
});

Ext.reg('swcontragentcombo', sw.Promed.SwContragentCombo);

sw.Promed.SwSanationStatusCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'SanationStatus_Code',
	displayField: 'SanationStatus_Name',
	editable: false,
	fieldLabel: langs('Санация'),
	hiddenName: 'SanationStatus_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'SanationStatus_Name', mapping: 'SanationStatus_Name'},
			{name: 'SanationStatus_Code', mapping: 'SanationStatus_Code'},
			{name: 'SanationStatus_id', mapping: 'SanationStatus_id'}
		],
		key: 'SanationStatus_id',
		sortInfo: {field: 'SanationStatus_Code'},
		tableName: 'SanationStatus'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{SanationStatus_Code}</font></td><td><h3>{SanationStatus_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'SanationStatus_id',
	initComponent: function() {
		sw.Promed.SwSanationStatusCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swsanationstatuscombo', sw.Promed.SwSanationStatusCombo);


sw.Promed.SwDrugFinanceCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'DrugFinance_Code',
	displayField: 'DrugFinance_Name',
	editable: false,
	fieldLabel: langs('Отдел'),
	hiddenName: 'DrugFinance_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'DrugFinance_Name', mapping: 'DrugFinance_Name'},
			{name: 'DrugFinance_Code', mapping: 'DrugFinance_Code'},
			{name: 'DrugFinance_id', mapping: 'DrugFinance_id'},
			{name: 'DrugFinance_begDate', mapping: 'DrugFinance_begDate'},
			{name: 'DrugFinance_endDate', mapping: 'DrugFinance_endDate'}
		],
		key: 'DrugFinance_id',
		sortInfo: {field: 'DrugFinance_Code'},
		tableName: 'DrugFinance'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{DrugFinance_Code}</font></td><td><h3>{DrugFinance_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'DrugFinance_id',
	unsetFilter: function() {
		this.lastQuery = '';
		this.getStore().clearFilter();
	},
	setDateFilter: function() {
		var begDate = null;
		var endDate = null;
		if (arguments[0]) {
			if (arguments[0].begDate)
				begDate = Date.parseDate(arguments[0].begDate, 'd.m.Y');
			if (arguments[0].endDate)
				endDate = Date.parseDate(arguments[0].endDate, 'd.m.Y');
			if (arguments[0].Date) {
				begDate = Date.parseDate(arguments[0].Date, 'd.m.Y');
				endDate = Date.parseDate(arguments[0].Date, 'd.m.Y');begDate = Date.parseDate(arguments[0].Date, 'd.m.Y');
				endDate = Date.parseDate(arguments[0].Date, 'd.m.Y');
			}
		} else {
			begDate = new Date();
			endDate = new Date();
		}

		this.unsetFilter();
		if (!Ext.isEmpty(begDate) && !Ext.isEmpty(endDate)) {
			this.getStore().filterBy(function(rec) {
				if (
					(Ext.isEmpty(rec.get('DrugFinance_begDate')) || Date.parseDate(rec.get('DrugFinance_begDate'), 'd.m.Y') <= begDate) &&
						(Ext.isEmpty(rec.get('DrugFinance_endDate')) || Date.parseDate(rec.get('DrugFinance_endDate'), 'd.m.Y') >= endDate)
					) {
					return true;
				} else {
					return false;
				}
			});
		}
	},
	initComponent: function() {
	    //  Реализовано в рамках интеграции
        sw.Promed.SwDrugFinanceCombo.superclass.initComponent.apply(this, arguments);
        // фильтрация для разных интерфейсов
        /*var farmacy_finance_code = new Array();
        var farmacy_finance_SysNick = new Array();
        if (getGlobalOptions().region) {
            switch (getRegionNick()) {
                case 'perm':
                    farmacy_finance_code = [3, 4, 6, 92, 93, 94];
                    break;
                case 'ufa':
                    farmacy_finance_code = [2, 20, 89];
                    farmacy_finance_SysNick = ['fed', 'reg', 'other'];
                    break;
            }
        }
        this.getStore().clearFilter();
        this.lastQuery = '';
        this.getStore().filterBy(function(record) {
            if (isFarmacyInterface && record.get('DrugFinance_Code').inlist(farmacy_finance_code)) {
                return true;
            }
            if (!isFarmacyInterface && !record.get('DrugFinance_Code').inlist(farmacy_finance_code)) {
                return true;
            }
            return false;
        });*/
    }
});
Ext.reg('swdrugfinancecombo', sw.Promed.SwDrugFinanceCombo);

sw.Promed.SwFinanceSourceCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'FinanceSource_Code',
	displayField: 'FinanceSource_Name',
	editable: false,
	fieldLabel: langs('Источник оплаты'),
	hiddenName: 'FinanceSource_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'FinanceSource_Name', mapping: 'FinanceSource_Name'},
			{name: 'FinanceSource_Code', mapping: 'FinanceSource_Code'},
			{name: 'FinanceSource_id', mapping: 'FinanceSource_id'},
			{name: 'DrugFinance_id', mapping: 'DrugFinance_id'},
			{name: 'WhsDocumentCostItemType_id', mapping: 'WhsDocumentCostItemType_id'},
			{name: 'BudgetFormType_id', mapping: 'BudgetFormType_id'}
		],
		key: 'FinanceSource_id',
		sortInfo: {field: 'FinanceSource_Code'},
		tableName: 'FinanceSource'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{FinanceSource_Code}</font></td><td><h3>{FinanceSource_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'FinanceSource_id',
	initComponent: function() {
        sw.Promed.SwFinanceSourceCombo.superclass.initComponent.apply(this, arguments);
    }
});
Ext.reg('swfinancesourcecombo', sw.Promed.SwFinanceSourceCombo);

sw.Promed.SwWhsDocumentStatusTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'WhsDocumentStatusType_Code',
	displayField: 'WhsDocumentStatusType_Name',
	editable: false,
	fieldLabel: langs('Статус'),
	hiddenName: 'WhsDocumentStatusType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'WhsDocumentStatusType_Name', mapping: 'WhsDocumentStatusType_Name'},
			{name: 'WhsDocumentStatusType_Code', mapping: 'WhsDocumentStatusType_Code'},
			{name: 'WhsDocumentStatusType_id', mapping: 'WhsDocumentStatusType_id'},
		],
		key: 'WhsDocumentStatusType_id',
		sortInfo: {field: 'WhsDocumentStatusType_Code'},
		tableName: 'WhsDocumentStatusType',
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{WhsDocumentStatusType_Code}</font></td><td><h3>{WhsDocumentStatusType_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'WhsDocumentStatusType_id',
	unsetFilter: function() {
		this.lastQuery = '';
		this.getStore().clearFilter();
	},
	setFilter: function(filter_function) {
		this.unsetFilter();
		if (filter_function && typeof filter_function == 'function') {
			this.getStore().filterBy(filter_function);
		}
	},
	initComponent: function() {
		sw.Promed.SwWhsDocumentStatusTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('SwWhsDocumentStatusTypeCombo', sw.Promed.SwWhsDocumentStatusTypeCombo);

sw.Promed.SwWhsDocumentCostItemTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'WhsDocumentCostItemType_Code',
	displayField: 'WhsDocumentCostItemType_Name',
	editable: false,
	fieldLabel: langs('Статья расхода'),
	hiddenName: 'WhsDocumentCostItemType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'WhsDocumentCostItemType_Name', mapping: 'WhsDocumentCostItemType_Name'},
			{name: 'WhsDocumentCostItemType_Code', mapping: 'WhsDocumentCostItemType_Code'},
			{name: 'WhsDocumentCostItemType_id', mapping: 'WhsDocumentCostItemType_id'},
			{name: 'WhsDocumentCostItemType_begDate', mapping: 'WhsDocumentCostItemType_begDate'},
			{name: 'WhsDocumentCostItemType_endDate', mapping: 'WhsDocumentCostItemType_endDate'},
			{name: 'WhsDocumentCostItemType_IsDlo', mapping: 'WhsDocumentCostItemType_IsDlo'},
			{name: 'DrugFinance_id', mapping: 'DrugFinance_id'}
		],
		key: 'WhsDocumentCostItemType_id',
		sortInfo: {field: 'WhsDocumentCostItemType_Code'},
		tableName: 'WhsDocumentCostItemType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{WhsDocumentCostItemType_Code}</font></td><td><h3>{WhsDocumentCostItemType_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'WhsDocumentCostItemType_id',
	unsetFilter: function() {
		this.lastQuery = '';
		this.getStore().clearFilter();
	},
	setFilter: function(filter_function) {
		this.unsetFilter();
		if (filter_function && typeof filter_function == 'function') {
			this.getStore().filterBy(filter_function);
		}
	},
	setDateFilter: function() {
		var begDate = null;
		var endDate = null;
		if (arguments[0]) {
			if (arguments[0].begDate)
				begDate = Date.parseDate(arguments[0].begDate, 'd.m.Y');
			if (arguments[0].endDate)
				endDate = Date.parseDate(arguments[0].endDate, 'd.m.Y');
			if (arguments[0].Date) {
				begDate = Date.parseDate(arguments[0].Date, 'd.m.Y');
				endDate = Date.parseDate(arguments[0].Date, 'd.m.Y');
			}
		} else {
			begDate = new Date();
			endDate = new Date();
		}

		this.unsetFilter();
		if (!Ext.isEmpty(begDate) && !Ext.isEmpty(endDate)) {
			this.getStore().filterBy(function(rec) {
				if (
					(Ext.isEmpty(rec.get('WhsDocumentCostItemType_begDate')) || Date.parseDate(rec.get('WhsDocumentCostItemType_begDate'), 'd.m.Y') <= begDate) &&
						(Ext.isEmpty(rec.get('WhsDocumentCostItemType_endDate')) || Date.parseDate(rec.get('WhsDocumentCostItemType_endDate'), 'd.m.Y') >= endDate)
					) {
					return true;
				} else {
					return false;
				}
			});
		}
	},
	initComponent: function() {
		sw.Promed.SwWhsDocumentCostItemTypeCombo.superclass.initComponent.apply(this, arguments);
        var Whs_Type_Code = new Array();
		Whs_Type_Code = [1, 2, 3, 34, 114, 115, 116, 117]; 
		this.Whs_Type_Code = Whs_Type_Code;
        this.getStore().clearFilter();
        this.lastQuery = '';
        this.getStore().filterBy(function(record) {
            if ( getGlobalOptions().region.nick == 'ufa' && getGlobalOptions().orgtype == 'farm') {
                if (record.get('WhsDocumentCostItemType_Code').inlist(Whs_Type_Code)) {
                    return true;
                } else
                    return false;
            } else {
                return true;
            }
        });
	}
});

Ext.reg('swwhsdocumentcostitemtypecombo', sw.Promed.SwWhsDocumentCostItemTypeCombo);

sw.Promed.SwDrugNdsCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	//codeField: 'DrugNds_Code',
	displayField: 'DrugNds_Name',
	editable: false,
	fieldLabel: langs('НДС'),
	hiddenName: 'DrugNds_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'DrugNds_Name', mapping: 'DrugNds_Name'},
			{name: 'DrugNds_Code', mapping: 'DrugNds_Code'},
			{name: 'DrugNds_id', mapping: 'DrugNds_id'}
		],
		key: 'DrugNds_id',
		sortInfo: {field: 'DrugNds_Code'},
		tableName: 'DrugNds'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td><h3>{DrugNds_Name}&nbsp;</h3></td></tr></table>', //<td style="width: 25px;"><font color="red">{DrugNds_Code}</font></td><
		'</div></tpl>'
	),
	valueField: 'DrugNds_id',
	initComponent: function() {
		sw.Promed.SwDrugNdsCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdrugndscombo', sw.Promed.SwDrugNdsCombo);

sw.Promed.SwOrgHeadPostCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'OrgHeadPost_id',
	displayField: 'OrgHeadPost_Name',
	editable: false,
	fieldLabel: langs('Должность'),
	hiddenName: 'OrgHeadPost_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'OrgHeadPost_id', mapping: 'OrgHeadPost_id'},
			{name: 'OrgHeadPost_Name', mapping: 'OrgHeadPost_Name'}
		],
		key: 'OrgHeadPost_id',
		sortInfo: {field: 'OrgHeadPost_id'},
		tableName: 'OrgHeadPost'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{OrgHeadPost_id}</font></td><td><h3>{OrgHeadPost_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'OrgHeadPost_id',
	initComponent: function() {
		sw.Promed.SwOrgHeadPostCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('sworgheadpostcombo', sw.Promed.SwOrgHeadPostCombo);

// Редактируемый справочник организаций (модуль Аптека)
sw.Promed.SwDrugProducerCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: C_GETOBJECTLIST,
		baseParams: {Object:'DrugProducer', DrugProducer_id:'', DrugProducer_Code:'', DrugProducer_Name:'', DrugProducer_Country:'', Server_id:'check_it'},
		key: 'DrugProducer_id',
		autoLoad: false,
		fields: [
			{name: 'DrugProducer_id', type:'int'},
			{name: 'DrugProducer_Code', type:'int'},
			{name: 'DrugProducer_Name', type:'string'},
			{name: 'DrugProducer_Country', type:'string'}
		],
		sortInfo: {
			field: 'DrugProducer_Name'
		}
	}),
	triggerAction: 'all',
	editable: true,
	displayField:'DrugProducer_Name',
	valueField: 'DrugProducer_id',
	fieldLabel: langs('Производитель'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{DrugProducer_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwDrugProducerCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swdrugproducercombo', sw.Promed.SwDrugProducerCombo);

sw.Promed.SwDrugLabResultCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: '?c=Farmacy&m=loadDrugLabResult',
		baseParams: {Object:'DrugLabResult', DrugLabResult_Name:'', Server_id:'check_it'},
		key: 'DrugLabResult_Name',
		autoLoad: false,
		fields: [
			{name: 'DrugLabResult_Name', type:'string'}

		],
		sortInfo: {
			field: 'DrugLabResult_Name'
		}
	}),
	hideEmptyRow: true,
	editable: true,
	enableKeyEvents: true,
	displayField: 'DrugLabResult_Name',
	hiddenName: 'DrugLabResult_Name',
	selectRawValueOnly: true,
	selectOnFocus: true,
	validateOnBlur: true,
	valueField: 'DrugLabResult_Name',
	triggerAction: 'all',
	fieldLabel: langs('Рез. лаб. иссл.'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{DrugLabResult_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwDrugLabResultCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swdruglabresultcombo', sw.Promed.SwDrugLabResultCombo);

/*
sw.Promed.SwDrugExtraLevelCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'DrugExtraLevel_Code',
	displayField: 'DrugExtraLevel_Name',
	editable: false,
	fieldLabel: langs('НДС'),
	hiddenName: 'DrugExtraLevel_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'DrugExtraLevel_Name', mapping: 'DrugExtraLevel_Name' },
			{ name: 'DrugExtraLevel_Code', mapping: 'DrugExtraLevel_Code' },
			{ name: 'DrugExtraLevel_id', mapping: 'DrugExtraLevel_id' }
		],
		key: 'DrugExtraLevel_id',
		sortInfo: { field: 'DrugExtraLevel_Code' },
		tableName: 'DrugExtraLevel'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{DrugExtraLevel_Code}</font></td><td><h3>{DrugExtraLevel_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'DrugExtraLevel_id',
	initComponent: function() {
		sw.Promed.SwDrugExtraLevelCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdrugextralevelcombo', sw.Promed.SwDrugExtraLevelCombo);
*/

sw.Promed.SwReceptDelayTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'ReceptDelayType_Code',
	displayField: 'ReceptDelayType_Name',
	editable: false,
	fieldLabel: langs('Статус рецепта'),
	hiddenName: 'ReceptDelayType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'ReceptDelayType_Name', mapping: 'ReceptDelayType_Name'},
			{name: 'ReceptDelayType_Code', mapping: 'ReceptDelayType_Code'},
			{name: 'ReceptDelayType_id', mapping: 'ReceptDelayType_id'}
		],
		key: 'ReceptDelayType_id',
		sortInfo: {field: 'ReceptDelayType_Code'},
		tableName: 'ReceptDelayType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{ReceptDelayType_Code}</font></td><td><h3>{ReceptDelayType_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'ReceptDelayType_id',
	initComponent: function() {
		sw.Promed.SwReceptDelayTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swreceptdelaytypecombo', sw.Promed.SwReceptDelayTypeCombo);

sw.Promed.SwDeputyKindCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'DeputyKind_Code',
	displayField: 'DeputyKind_Name',
	editable: false,
	fieldLabel: langs('Статус представителя'),
	hiddenName: 'DeputyKind_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'DeputyKind_Name', mapping: 'DeputyKind_Name'},
			{name: 'DeputyKind_Code', mapping: 'DeputyKind_Code'},
			{name: 'DeputyKind_id', mapping: 'DeputyKind_id'}
		],
		key: 'DeputyKind_id',
		sortInfo: {field: 'DeputyKind_Code'},
		tableName: 'DeputyKind'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{DeputyKind_Code}</font></td><td><h3>{DeputyKind_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'DeputyKind_id',
	initComponent: function() {
		sw.Promed.SwDeputyKindCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdeputykindcombo', sw.Promed.SwDeputyKindCombo);

sw.Promed.SwNationalityCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'Nationality_Code',
	displayField: 'Nationality_Name',
	editable: false,
	fieldLabel: langs('Гражданство'),
	hiddenName: 'PersonNationality_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'Nationality_Name', mapping: 'Nationality_Name'},
			{name: 'Nationality_Code', mapping: 'Nationality_Code'},
			{name: 'Nationality_id', mapping: 'Nationality_id'}
		],
		key: 'Nationality_id',
		sortInfo: {field: 'Nationality_Code'},
		tableName: 'Nationality'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{Nationality_Code}</font></td><td><h3>{Nationality_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'Nationality_id',
	initComponent: function() {
		sw.Promed.SwNationalityCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swnationalitycombo', sw.Promed.SwNationalityCombo);

sw.Promed.SwFamilyStatusCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'FamilyStatus_Code',
	displayField: 'FamilyStatus_Name',
	editable: false,
	fieldLabel: langs('Семейное положение'),
	hiddenName: 'PersonFamilyStatus_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'FamilyStatus_Name', mapping: 'FamilyStatus_Name'},
			{name: 'FamilyStatus_Code', mapping: 'FamilyStatus_Code'},
			{name: 'FamilyStatus_id', mapping: 'FamilyStatus_id'}
		],
		key: 'FamilyStatus_id',
		sortInfo: {field: 'FamilyStatus_Code'},
		tableName: 'FamilyStatus'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{FamilyStatus_Code}</font></td><td><h3>{FamilyStatus_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'FamilyStatus_id',
	initComponent: function() {
		sw.Promed.SwFamilyStatusCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swfamilystatuscombo', sw.Promed.SwFamilyStatusCombo);

sw.Promed.SwMedSpecOmsCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'MedSpecOms_Code',
	displayField: 'MedSpecOms_Name',
	editable: false,
	fieldLabel: langs('Специальность S90'),
	hiddenName: 'MedSpecOms_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'MedSpecOms_Name', mapping: 'MedSpecOms_Name'},
			{name: 'MedSpecOms_Code', mapping: 'MedSpecOms_Code'},
			{name: 'MedSpecOms_id', mapping: 'MedSpecOms_id'}
		],
		key: 'MedSpecOms_id',
		sortInfo: {field: 'MedSpecOms_Code'},
		tableName: 'MedSpecOms'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{MedSpecOms_Code}</font></td><td><h3>{MedSpecOms_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'MedSpecOms_id',
	initComponent: function() {
		sw.Promed.SwMedSpecOmsCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swmedspecomscombo', sw.Promed.SwMedSpecOmsCombo);

sw.Promed.SwMesProfCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'MesProf_Code',
	displayField: 'MesProf_Name',
	editable: false,
	fieldLabel: langs('Специальность'),
	hiddenName: 'MesProf_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'MesProf_Name', mapping: 'MesProf_Name'},
			{name: 'MesProf_Code', mapping: 'MesProf_Code'},
			{name: 'MesProf_id', mapping: 'MesProf_id'}
		],
		key: 'MesProf_id',
		sortInfo: {field: 'MesProf_Code'},
		tableName: 'MesProf'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{MesProf_Code}</font></td><td><h3>{MesProf_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'MesProf_id',
	initComponent: function() {
		sw.Promed.SwMesProfCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swmesprofcombo', sw.Promed.SwMesProfCombo);

sw.Promed.SwMesAgeGroupCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'MesAgeGroup_Code',
	displayField: 'MesAgeGroup_Name',
	editable: false,
	fieldLabel: langs('Возрастная группа'),
	hiddenName: 'MesAgeGroup_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'MesAgeGroup_Name', mapping: 'MesAgeGroup_Name'},
			{name: 'MesAgeGroup_Code', mapping: 'MesAgeGroup_Code'},
			{name: 'MesAgeGroup_id', mapping: 'MesAgeGroup_id'}
		],
		key: 'MesAgeGroup_id',
		sortInfo: {field: 'MesAgeGroup_Code'},
		tableName: 'MesAgeGroup'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{MesAgeGroup_Code}</font></td><td><h3>{MesAgeGroup_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'MesAgeGroup_id',
	initComponent: function() {
		sw.Promed.SwMesAgeGroupCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swmesagegroupcombo', sw.Promed.SwMesAgeGroupCombo);

sw.Promed.SwLpuTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'LpuType_Code',
	displayField: 'LpuType_Name',
	editable: false,
	fieldLabel: langs('Тип МО'),
	hiddenName: 'LpuType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'LpuType_Name', mapping: 'LpuType_Name'},
			{name: 'LpuType_Code', mapping: 'LpuType_Code'},
			{name: 'LpuType_id', mapping: 'LpuType_id'}
		],
		key: 'LpuType_id',
		sortInfo: {field: 'LpuType_Code'},
		tableName: 'LpuType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{LpuType_Code}</font></td><td><h3>{LpuType_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'LpuType_id',
	initComponent: function() {
		sw.Promed.SwLpuTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swlputypecombo', sw.Promed.SwLpuTypeCombo);

sw.Promed.SwOkonhCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'Okonh_Code',
	displayField: 'Okonh_Name',
	editable: false,
	fieldLabel: langs('ОКОНХ'),
	hiddenName: 'Okonh_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'Okonh_Name', mapping: 'Okonh_Name'},
			{name: 'Okonh_Code', mapping: 'Okonh_Code'},
			{name: 'Okonh_id', mapping: 'Okonh_id'}
		],
		key: 'Okonh_id',
		sortInfo: {field: 'Okonh_Code'},
		tableName: 'Okonh'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{Okonh_Code}</font></td><td><h3>{Okonh_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'Okonh_id',
	initComponent: function() {
		sw.Promed.SwOkonhCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swokonhcombo', sw.Promed.SwOkonhCombo);

sw.Promed.SwOkoguCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'Okogu_Code',
	displayField: 'Okogu_Name',
	editable: false,
	fieldLabel: langs('ОКОГУ'),
	hiddenName: 'Okogu_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'Okogu_Name', mapping: 'Okogu_Name'},
			{name: 'Okogu_Code', mapping: 'Okogu_Code'},
			{name: 'Okogu_id', mapping: 'Okogu_id'}
		],
		key: 'Okogu_id',
		sortInfo: {field: 'Okogu_Code'},
		tableName: 'Okogu'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{Okogu_Code}</font></td><td><h3>{Okogu_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'Okogu_id',
	initComponent: function() {
		sw.Promed.SwOkoguCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swokogucombo', sw.Promed.SwOkoguCombo);

sw.Promed.SwOkopfCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'Okopf_Code',
	displayField: 'Okopf_Name',
	editable: false,
	fieldLabel: langs('ОКОПФ'),
	hiddenName: 'Okopf_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'Okopf_Name', mapping: 'Okopf_Name'},
			{name: 'Okopf_Code', mapping: 'Okopf_Code'},
			{name: 'Okopf_id', mapping: 'Okopf_id'}
		],
		key: 'Okopf_id',
		sortInfo: {field: 'Okopf_Code'},
		tableName: 'Okopf'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{Okopf_Code}</font></td><td><h3>{Okopf_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'Okopf_id',
	initComponent: function() {
		sw.Promed.SwOkopfCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swokopfcombo', sw.Promed.SwOkopfCombo);

sw.Promed.SwOkfsCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'Okfs_Code',
	displayField: 'Okfs_Name',
	editable: false,
	fieldLabel: langs('ОКФС'),
	hiddenName: 'Okfs_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'Okfs_Name', mapping: 'Okfs_Name'},
			{name: 'Okfs_Code', mapping: 'Okfs_Code'},
			{name: 'Okfs_id', mapping: 'Okfs_id'}
		],
		key: 'Okfs_id',
		sortInfo: {field: 'Okfs_Code'},
		tableName: 'Okfs'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{Okfs_Code}</font></td><td><h3>{Okfs_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'Okfs_id',
	initComponent: function() {
		sw.Promed.SwOkfsCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swokfscombo', sw.Promed.SwOkfsCombo);

/*sw.Promed.SwMesLevelCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'MesLevel_Code',
	displayField: 'MesLevel_Name',
	editable: false,
	fieldLabel: langs('Категория сложности'),
	hiddenName: 'MesLevel_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'MesLevel_Name', mapping: 'MesLevel_Name' },
			{ name: 'MesLevel_Code', mapping: 'MesLevel_Code' },
			{ name: 'MesLevel_id', mapping: 'MesLevel_id' }
		],
		key: 'MesLevel_id',
		sortInfo: { field: 'MesLevel_Code' },
		tableName: 'MesLevel1'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{MesLevel_Code}</font></td><td><h3>{MesLevel_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'MesLevel_id',
	initComponent: function() {
		sw.Promed.SwMesLevelCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swmeslevel1combo', sw.Promed.SwMesLevelCombo);*/

sw.Promed.SwOmsLpuUnitTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'OmsLpuUnitType_Code',
	displayField: 'OmsLpuUnitType_Name',
	editable: false,
	fieldLabel: langs('Тип стационара'),
	hiddenName: 'OmsLpuUnitType_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'OmsLpuUnitType_Name', mapping: 'OmsLpuUnitType_Name'},
			{name: 'OmsLpuUnitType_Code', mapping: 'OmsLpuUnitType_Code'},
			{name: 'OmsLpuUnitType_id', mapping: 'OmsLpuUnitType_id'}
		],
		key: 'OmsLpuUnitType_id',
		sortInfo: {field: 'OmsLpuUnitType_Code'},
		tableName: 'OmsLpuUnitType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 25px;"><font color="red">{OmsLpuUnitType_Code}</font></td><td><h3>{OmsLpuUnitType_Name}&nbsp;</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'OmsLpuUnitType_id',
	initComponent: function() {
		sw.Promed.SwOmsLpuUnitTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swomslpuunittypecombo', sw.Promed.SwOmsLpuUnitTypeCombo);

sw.Promed.SwUslugaComplexCombo = Ext.extend(Ext.form.ComboBox, {
	beforeBlur: function() {
		// медитируем
		return true;
	},
	codeField: 'Usluga_Code',
	displayField: 'Usluga_Name',
	doQuery: function(q, forceAll) {
		if ( q === undefined || q === null ) {
			q = '';
		}

		var qe = {
			query: q,
			forceAll: forceAll,
			combo: this,
			cancel: false
		};

		if ( this.fireEvent('beforequery', qe) === false || qe.cancel ) {
			return false;
		}

		q = qe.query;
		forceAll = qe.forceAll;

		if ( q.length >= this.minChars ) {
			if ( this.lastQuery != q ) {
				this.lastQuery = q;
				this.selectedIndex = -1;

				this.getStore().filterBy(function(record, id) {
					var result = true;
					var patt_display = new RegExp(q.toLowerCase());
					var patt_code = new RegExp('^' + q.toLowerCase());

					result = patt_display.test(record.get(this.displayField).toLowerCase());

					if ( !result ) {
						result = patt_code.test(record.get(this.codeField).toLowerCase());
					}

					return result;
				}, this);

				this.onLoad();
			}
			else {
				this.selectedIndex = -1;
				this.onLoad();
			}
		}
	},
	editable: true,
	emptyText: langs('Введите код услуги...'),
	enableKeyEvents: true,
	fieldLabel: langs('Услуга'),
	forceSelection: true,
	hiddenName: 'UslugaComplex_id',
	listeners: {
		'select': function(combo, record, index) {
			if ( record.get(combo.valueField) ) {
				combo.setRawValue(record.get('Usluga_Code') + ". " + record.get('Usluga_Name'));
			}
		},
		'keydown': function(inp, e) {
			if ( e.getKey() == e.END ) {
				this.inKeyMode = true;
				this.select(this.store.getCount() - 1);
			}

			if ( e.getKey() == e.HOME ) {
				this.inKeyMode = true;
				this.select(0);
			}

			if ( e.getKey() == e.PAGE_UP ) {
				this.inKeyMode = true;
				var ct = this.store.getCount();

				if ( ct > 0 ) {
					if ( this.selectedIndex == -1 ) {
						this.select(0);
					}
					else if ( this.selectedIndex != 0 ) {
						if ( this.selectedIndex - 10 >= 0 )
							this.select(this.selectedIndex - 10);
						else
							this.select(0);
					}
				}
			}

			if ( e.getKey() == e.PAGE_DOWN ) {
				if ( !this.isExpanded() ) {
					this.onTriggerClick();
				}
				else {
					this.inKeyMode = true;
					var ct = this.store.getCount();

					if ( ct > 0 ) {
						if ( this.selectedIndex == -1 ) {
							this.select(0);
						}
						else if ( this.selectedIndex != ct - 1 ) {
							if ( this.selectedIndex + 10 < ct - 1 )
								this.select(this.selectedIndex + 10);
							else
								this.select(ct - 1);
						}
					}
				}
			}

			if ( e.altKey || e.ctrlKey || e.shiftKey )
				return true;

			if ( e.getKey() == e.DELETE) {
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if (inp.onClearValue)
					this.onClearValue();
				e.stopEvent();
				return true;
			}
		}
	},
	minChars: 0,
	minLength: 0,
	mode: 'local',
	resizable: true,
	selectOnFocus: true,
	Usluga_date: null, // dateFormat: 'd.m.Y'
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 60px;"><font color="red">{Usluga_Code}</font></td><td>{Usluga_Name}&nbsp;</td></tr></table>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'UslugaComplex_id',
	initComponent: function() {
		sw.Promed.SwUslugaComplexCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'UslugaComplex_id'
			}, [
				{ name: 'UslugaComplex_id', mapping: 'UslugaComplex_id' },
				{ name: 'Usluga_id', mapping: 'Usluga_id' },
				{ name: 'Usluga_Code', mapping: 'Usluga_Code' },
				{ name: 'Usluga_Name', mapping: 'Usluga_Name' },
				{ name: 'UslugaComplex_UET', mapping: 'UslugaComplex_UET' }
			]),
			url: '/?c=EvnUsluga&m=loadUslugaComplexList'
		});
	}
});
Ext.reg('swuslugacomplexcombo', sw.Promed.SwUslugaComplexCombo);

sw.Promed.swPrivilegeTypeWowCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField: 'PrivilegeTypeWow_Name',
	editable: false,
	fieldLabel: langs('Категория'),
	hiddenName: 'PrivilegeTypeWow_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'PrivilegeTypeWow_Name', mapping: 'PrivilegeTypeWow_Name'},
			{name: 'PrivilegeTypeWow_id', mapping: 'PrivilegeTypeWow_id'}
		],
		key: 'PrivilegeTypeWow_id',
		sortInfo: {field: 'PrivilegeTypeWow_id'},
		tableName: 'PrivilegeTypeWow'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{PrivilegeTypeWow_Name}',
		'</div></tpl>'
	),
	valueField: 'PrivilegeTypeWow_id',
	initComponent: function() {
		sw.Promed.swPrivilegeTypeWowCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swprivilegetypewowcombo', sw.Promed.swPrivilegeTypeWowCombo);

sw.Promed.SwDispWowUslugaTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'DispWowUslugaType_Code',
	displayField: 'DispWowUslugaType_Name',
	editable: false,
	fieldLabel: langs('Вид'),
	hiddenName: 'DispWowUslugaType_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{DispWowUslugaType_Code}</font>&nbsp;{DispWowUslugaType_Name}',
		'</div></tpl>'
	),
	store: new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'DispWowUslugaType_Name', mapping: 'DispWowUslugaType_Name'},
				{name: 'DispWowUslugaType_Code', mapping: 'DispWowUslugaType_Code'},
				{name: 'DispWowUslugaType_id', mapping: 'DispWowUslugaType_id'}
			],
			sortInfo:
			{
				field: 'DispWowUslugaType_Code'
			},
			key: 'DispWowUslugaType_id',
			sortInfo: {field: 'DispWowUslugaType_Code'},
			tableName: 'DispWowUslugaType'
		}),
	valueField: 'DispWowUslugaType_id',
	initComponent: function() {
		sw.Promed.SwDispWowUslugaTypeCombo.superclass.initComponent.apply(this, arguments);
		/*
		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{ name: 'DispWowUslugaType_Name', mapping: 'DispWowUslugaType_Name' },
				{ name: 'DispWowUslugaType_Code', mapping: 'DispWowUslugaType_Code' },
				{ name: 'DispWowUslugaType_id', mapping: 'DispWowUslugaType_id' }
			],
			key: 'DispWowUslugaType_id',
			sortInfo: { field: 'DispWowUslugaType_Code' },
			tableName: 'DispWowUslugaType'
		});
		*/
	}
});
Ext.reg('swdispwowuslugatypecombo', sw.Promed.SwDispWowUslugaTypeCombo);


sw.Promed.SwLeaveCauseCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'LeaveCause_Code',
	displayField: 'LeaveCause_Name',
	editable: false,
	fieldLabel: langs('Причина выписки'),
	hiddenName: 'LeaveCause_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{LeaveCause_Code}</font>&nbsp;{LeaveCause_Name}',
		'</div></tpl>'
	),
	store: new Ext.db.AdapterStore({
		autoLoad:false,
		dbFile:'Promed.db',
		fields:[
			{name:'LeaveCause_Name', mapping:'LeaveCause_Name'},
			{name:'LeaveCause_Code', mapping:'LeaveCause_Code'},
			{name:'LeaveCause_id', mapping:'LeaveCause_id'}
		],
		key:'LeaveCause_id',
		sortInfo:{field:'LeaveCause_Code'},
		tableName:'LeaveCause'
	}),
	valueField:'LeaveCause_id',
	initComponent: function() {
		sw.Promed.SwLeaveCauseCombo.superclass.initComponent.apply(this, arguments);

		if ( getGlobalOptions().region.nick.inlist([ 'kareliya' ]) ) {
			this.loadParams = {params: {where: ''}};
		} else {
			this.loadParams = {params: { where: "where LeaveCause_Code < 2 or LeaveCause_Code > 4" }};
		}
/*
		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'LeaveCause_Name', mapping: 'LeaveCause_Name'},
				{name: 'LeaveCause_Code', mapping: 'LeaveCause_Code'},
				{name: 'LeaveCause_id', mapping: 'LeaveCause_id'}
			],
			key: 'LeaveCause_id',
			sortInfo: {field: 'LeaveCause_Code'},
			tableName: 'LeaveCause'
		});
*/
	}
});
Ext.reg('swleavecausecombo', sw.Promed.SwLeaveCauseCombo);

sw.Promed.SwLeaveTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'LeaveType_Code',
	displayField: 'LeaveType_Name',
	editable: false,
	fieldLabel: langs('Исход госпитализации'),
	hiddenName: 'LeaveType_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{LeaveType_Code}</font>&nbsp;{LeaveType_Name}',
		'</div></tpl>'
	),
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'LeaveType_Name', mapping: 'LeaveType_Name'},
			{name: 'LeaveType_Code', mapping: 'LeaveType_Code'},
			{name: 'LeaveType_SysNick', mapping: 'LeaveType_SysNick'},
			{name: 'LeaveType_id', mapping: 'LeaveType_id'},
			{name: 'LeaveType_fedid', mapping: 'LeaveType_fedid'},
			{name: 'LeaveType_begDate', mapping: 'LeaveType_begDate', type: 'date', dateFormat: 'd.m.Y'},
			{name: 'LeaveType_endDate', mapping: 'LeaveType_endDate', type: 'date', dateFormat: 'd.m.Y'}
		],                 /*вроде бы работает и без этого. убрано потому что вызывает ошибку this.getValue() is not a function. Если без этого кусочка никак, можно попробовать убрать createDelegate
		listeners: {
			'load': function(store) {
				this.setValue(this.getValue());
			}.createDelegate(this)
		},               */
		key: 'LeaveType_id',
		sortInfo: {field: 'LeaveType_Code'},
		tableName: 'LeaveType'
	}),
	valueField: 'LeaveType_id',
	initComponent: function() {
		sw.Promed.SwLeaveTypeCombo.superclass.initComponent.apply(this, arguments);
		/*   Хранилище сделано общим
		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'LeaveType_Name', mapping: 'LeaveType_Name'},
				{name: 'LeaveType_Code', mapping: 'LeaveType_Code'},
				{name: 'LeaveType_id', mapping: 'LeaveType_id'}
			],
			listeners: {
				'load': function(store) {
					this.setValue(this.getValue());
				}.createDelegate(this)
			},
			key: 'LeaveType_id',
			sortInfo: {field: 'LeaveType_Code'},
			tableName: 'LeaveType'
		});
		*/
		if ( getGlobalOptions().region && !this.loadParams  ) {
			switch ( getRegionNick() ) {
				case 'buryatiya':
					this.loadParams = {params: {where: "where Region_id = 3"}};
				break;

				case 'kareliya':
					this.loadParams = {params: {where: "where Region_id = 10"}};
				break;

				case 'penza':
					this.loadParams = {params: {where: "where Region_id = 58"}};
				break;
			}
		}
	}
});
Ext.reg('swleavetypecombo', sw.Promed.SwLeaveTypeCombo);

sw.Promed.SwCureResultCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'CureResult_Code',
	displayField: 'CureResult_Name',
	editable: false,
	fieldLabel: langs('Итог лечения'),
	hiddenName: 'CureResult_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{CureResult_Code}</font>&nbsp;{CureResult_Name}',
		'</div></tpl>'
	),
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'CureResult_id', mapping: 'CureResult_id'},
			{name: 'CureResult_Code', mapping: 'CureResult_Code'},
			{name: 'CureResult_Name', mapping: 'CureResult_Name'}
		],
		key: 'CureResult_id',
		sortInfo: {field: 'CureResult_Code'},
		tableName: 'CureResult'
	}),
	valueField: 'CureResult_id',
	initComponent: function() {
		sw.Promed.SwLeaveTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcureresultcombo', sw.Promed.SwCureResultCombo);

sw.Promed.SwLeaveTypeFedCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'LeaveType_Code',
	displayField: 'LeaveType_Name',
	editable: false,
	fieldLabel: langs('Исход госпитализации'),
	hiddenName: 'LeaveTypeFed_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{LeaveType_Code}</font>&nbsp;{LeaveType_Name}',
		'</div></tpl>'
	),
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'LeaveType_id', mapping: 'LeaveType_id' },
			{ name: 'LeaveType_Code', mapping: 'LeaveType_Code' },
			{ name: 'LeaveType_Name', mapping: 'LeaveType_Name' },
			{ name: 'LeaveType_USLOV', mapping: 'LeaveType_USLOV' },
			{ name: 'LeaveType_begDT', mapping: 'LeaveType_begDT', type: 'date', dateFormat: 'd.m.Y' },
			{ name: 'LeaveType_endDT', mapping: 'LeaveType_endDT', type: 'date', dateFormat: 'd.m.Y' }
		],
		key: 'LeaveType_id',
		sortInfo: { field: 'LeaveType_Code' },
		tableName: 'LeaveTypeFed'
	}),
	valueField: 'LeaveType_id',
	initComponent: function() {
		sw.Promed.SwLeaveTypeFedCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swleavetypefedcombo', sw.Promed.SwLeaveTypeFedCombo);

sw.Promed.SwMedSpecFedCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'MedSpec_Code',
	displayField: 'MedSpec_Name',
	editable: false,
	hiddenName: 'MedSpec_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{MedSpec_Code}</font>&nbsp;{MedSpec_Name}',
		'</div></tpl>'
	),
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'MedSpec_id', mapping: 'MedSpec_id' },
			{ name: 'MedSpec_Code', mapping: 'MedSpec_Code' },
			{ name: 'MedSpec_Name', mapping: 'MedSpec_Name' }
		],
		key: 'MedSpec_id',
		sortInfo: { field: 'MedSpec_Code' },
		tableName: 'MedSpecFed'
	}),
	valueField: 'MedSpec_id',
	initComponent: function() {
		sw.Promed.SwMedSpecFedCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swmedspecfedcombo', sw.Promed.SwMedSpecFedCombo);

sw.Promed.SwMedSpecOmsFedCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'MedSpecOms_Code',
	displayField: 'MedSpecOms_Name',
	editable: false,
	hiddenName: 'MedSpecOms_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{MedSpecOms_Code}</font>&nbsp;{MedSpecOms_Name}',
		'</div></tpl>'
	),
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'MedSpecOms_id', mapping: 'MedSpecOms_id' },
			{ name: 'MedSpecOms_Code', mapping: 'MedSpecOms_Code' },
			{ name: 'MedSpecOms_Name', mapping: 'MedSpecOms_Name' }
		],
		key: 'MedSpecOms_id',
		sortInfo: { field: 'MedSpecOms_Code' },
		tableName: 'MedSpecOmsFed'
	}),
	valueField: 'MedSpecOms_id',
	initComponent: function() {
		sw.Promed.SwMedSpecOmsFedCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swmedspecomsfedcombo', sw.Promed.SwMedSpecOmsFedCombo);

sw.Promed.SwResultDeseaseTypeFedCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'ResultDeseaseType_Code',
	displayField: 'ResultDeseaseType_Name',
	editable: false,
	fieldLabel: langs('Исход'),
	hiddenName: 'ResultDeseaseType_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{ResultDeseaseType_Code}</font>&nbsp;{ResultDeseaseType_Name}',
		'</div></tpl>'
	),
	valueField: 'ResultDeseaseType_id',
	initComponent: function() {
		sw.Promed.SwResultDeseaseTypeFedCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{ name: 'ResultDeseaseType_id', mapping: 'ResultDeseaseType_id' },
				{ name: 'ResultDeseaseType_Code', mapping: 'ResultDeseaseType_Code' },
				{ name: 'ResultDeseaseType_Name', mapping: 'ResultDeseaseType_Name' }
			],
			key: 'ResultDeseaseType_id',
			sortInfo: { field: 'ResultDeseaseType_Code' },
			tableName: 'nsi_ResultDeseaseType'
		});
	}
});
Ext.reg('swresultdeseasetypefedcombo', sw.Promed.SwResultDeseaseTypeFedCombo);

sw.Promed.SwMedicalCareKindCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	mode: 'local',
	triggerAction: 'all',
	codeField: 'MedicalCareKind_Code',
	displayField: 'MedicalCareKind_Name',
	editable: false,
	fieldLabel: langs('Вид медицинской помощи'),
	hiddenName: 'MedicalCareKind_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{MedicalCareKind_Code}</font>&nbsp;{MedicalCareKind_Name}',
		'</div></tpl>'
	),
	store: new Ext.data.JsonStore({
		autoLoad: false,
		url: '/?c=MedicalCareKind&m=loadMedicalCareKindList',
		fields: [
			{ name: 'MedicalCareKind_id', type: 'int' },
			{ name: 'MedicalCareKind_Code', type: 'int' },
			{ name: 'MedicalCareKind_Name', type: 'string' },
			{ name: 'MedicalCareKind_SysNick', type: 'string' }
		],
		key: 'MedicalCareKind_id',
		sortInfo: { field: 'MedicalCareKind_Code' }
	}),
	valueField: 'MedicalCareKind_id',
	initComponent: function() {
		sw.Promed.SwMedicalCareKindCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swmedicalcarekindcombo', sw.Promed.SwMedicalCareKindCombo);

sw.Promed.SwMedicalCareFormTypeFedCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'MedicalCareFormType_Code',
	displayField: 'MedicalCareFormType_Name',
	fieldLabel: langs('Форма оказания медицинской помощи'),
	store: new Ext.data.Store({
		autoLoad: false,
		reader: new Ext.data.JsonReader({
			id: 'MedicalCareFormType_id'
		}, [
			{ name: 'MedicalCareFormType_id', mapping: 'MedicalCareFormType_id', type: 'int' },
			{ name: 'MedicalCareFormType_Code', mapping: 'MedicalCareFormType_Code', type: 'int' },
			{ name: 'MedicalCareFormType_Name', mapping: 'MedicalCareFormType_Name', type: 'string' }
		]),
		url: '/?c=MedicalCareKind&m=loadMedicalCareFormTypeList',
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{MedicalCareFormType_Code}</font>&nbsp;{MedicalCareFormType_Name}',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'MedicalCareFormType_id',
	lastQuery: '',
});
Ext.reg('swmedicalcareformtypecombo', sw.Promed.SwMedicalCareFormTypeFedCombo);

sw.Promed.SwMedicalCareKindFedCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'MedicalCareKind_Code',
	displayField: 'MedicalCareKind_Name',
	editable: false,
	fieldLabel: langs('Вид медицинской помощи'),
	hiddenName: 'MedicalCareKind_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{MedicalCareKind_Code}</font>&nbsp;{MedicalCareKind_Name}',
		'</div></tpl>'
	),
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'MedicalCareKind_id', mapping: 'MedicalCareKind_id' },
			{ name: 'MedicalCareKind_Code', mapping: 'MedicalCareKind_Code' },
			{ name: 'MedicalCareKind_Name', mapping: 'MedicalCareKind_Name' }
		],
		key: 'MedicalCareKind_id',
		sortInfo: { field: 'MedicalCareKind_Code' },
		tableName: 'nsi_MedicalCareKind'
	}),
	valueField: 'MedicalCareKind_id',
	initComponent: function() {
		sw.Promed.SwMedicalCareKindFedCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swmedicalcarekindfedcombo', sw.Promed.SwMedicalCareKindFedCombo);

/*sw.Promed.SwHTMedicalCareClassCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'HTMedicalCareClass_Code',
	displayField: 'HTMedicalCareClass_Name',
	editable: false,
	fieldLabel: langs('Метод высокотехнологичной медицинской помощи'),
	hiddenName: 'HTMedicalCareClass_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{HTMedicalCareClass_Code}</font>&nbsp;{HTMedicalCareClass_Name}',
		'</div></tpl>'
	),
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'HTMedicalCareClass_id', mapping: 'HTMedicalCareClass_id' },
			{ name: 'HTMedicalCareClass_Code', mapping: 'HTMedicalCareClass_Code' },
			{ name: 'HTMedicalCareClass_Name', mapping: 'HTMedicalCareClass_Name' },
			{ name: 'HTMedicalCareClass_begDate', mapping: 'HTMedicalCareClass_begDate', type: 'date', dateFormat: 'd.m.Y' },
			{ name: 'HTMedicalCareClass_endDate', mapping: 'HTMedicalCareClass_endDate', type: 'date', dateFormat: 'd.m.Y' },
			{ name: 'HTMedicalCareClass_fid', mapping: 'HTMedicalCareClass_fid' },
			{ name: 'HTMedicalCareType_id', mapping: 'HTMedicalCareType_id' }
		],
		key: 'HTMedicalCareClass_id',
		sortInfo: { field: 'HTMedicalCareClass_Code' },
		tableName: 'HTMedicalCareClass'
	}),
	valueField: 'HTMedicalCareClass_id',
	initComponent: function() {
		sw.Promed.SwHTMedicalCareClassCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swhtmedicalcareclasscombo', sw.Promed.SwHTMedicalCareClassCombo);*/

sw.Promed.SwHTMedicalCareClassCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	mode: 'local',
	triggerAction: 'all',
	codeField: 'HTMedicalCareClass_Code',
	displayField: 'HTMedicalCareClass_Name',
	editable: true,
	fieldLabel: langs('Метод высокотехнологичной медицинской помощи'),
	hiddenName: 'HTMedicalCareClass_id',
	// tpl: new Ext.XTemplate(
	// 	'<tpl for="."><div class="x-combo-list-item">',
	// 	'<font color="red">{HTMedicalCareClass_Code}</font>&nbsp;{HTMedicalCareClass_Name}',
	// 	'</div></tpl>'
	// ),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><tr>',
		'<td style="width: 45px;"><font color="red">{HTMedicalCareClass_Code}&nbsp;</font></td>',
		'<td style="width: 45px;"><b>{HTMedicalCareClass_Name}</b>&nbsp;</td></tr>',
		'{[(getRegionNick() == "ufa")?this.personModelName(values.HTMedicalPersonModel_Name):""]}',
		'</tr></table>',
		'</div></tpl>',
		{
			personModelName: function(nameValue) {
				var val = (!Ext.isEmpty(nameValue)) ? nameValue : '&nbsp;';
				return '<tr><td colspan="2"><div style="font-size: 10px; white-space: normal;padding-left:10px;">'+val+'</div></td></tr>';
			}
		}
	),
	store: new Ext.data.JsonStore({
		autoLoad: false,
		fields: [
			{ name: 'HTMedicalCareClass_id', type: 'int' },
			{ name: 'HTMedicalCareClass_Code', type: 'int' },
			{ name: 'HTMedicalCareClass_Name', type: 'string' },
			{ name: 'HTMedicalCareClass_begDate', type: 'date', dateFormat: 'd.m.Y' },
			{ name: 'HTMedicalCareClass_endDate', type: 'date', dateFormat: 'd.m.Y' },
			{ name: 'HTMedicalCareClass_fid', type: 'int' },
			{ name: 'HTMedicalCareType_id', type: 'int' },
			{ name: 'HTMedicalPersonModel_Name', type: 'string'}
		],
		key: 'HTMedicalCareClass_id',
		sortInfo: { field: 'HTMedicalCareClass_Code' },
		url: '/?c=HTMedicalCare&m=loadHTMedicalCareClassList'
	}),
	valueField: 'HTMedicalCareClass_id',
	initComponent: function() {
		sw.Promed.SwHTMedicalCareClassCombo.superclass.initComponent.apply(this, arguments);
	},
	setValue: function(v) {
		var text = v;
		if(this.valueField){
			var r = this.findRecord(this.valueField, v);
			if(r){
				text = r.data[this.displayField];
				if ( r.data['HTMedicalCareClass_Code'] != '' )
				{
					text = r.data['HTMedicalCareClass_Code']+ '. ' + text;
				}
			} else if(this.valueNotFoundText !== undefined){
				text = this.valueNotFoundText;
			}
		}
		this.lastSelectionText = text;
		if(this.hiddenField){
			this.hiddenField.value = v;
		}
		Ext.form.ComboBox.superclass.setValue.call(this, text);
		this.value = v;
	}
});
Ext.reg('swhtmedicalcareclasscombo', sw.Promed.SwHTMedicalCareClassCombo);

/*sw.Promed.SwHTMedicalCareClassFedCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	mode: 'local',
	triggerAction: 'all',
	codeField: 'HTMedicalCareClass_Code',
	displayField: 'HTMedicalCareClass_Name',
	editable: false,
    lastQuery: '',
	fieldLabel: langs('Метод высокотехнологичной медицинской помощи'),
	hiddenName: 'HTMedicalCareClass_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{HTMedicalCareClass_Code}</font>&nbsp;{HTMedicalCareClass_Name}',
		'</div></tpl>'
	),
	store: new Ext.data.JsonStore({
		autoLoad: false,
		fields: [
			{ name: 'HTMedicalCareClass_id', type: 'int' },
			{ name: 'HTMedicalCareClass_Code', type: 'int' },
			{ name: 'HTMedicalCareClass_Name', type: 'string' },
			{ name: 'HTMedicalCareType_id', type: 'int' }
		],
		key: 'HTMedicalCareClass_id',
		sortInfo: { field: 'HTMedicalCareClass_Code' },
		url: '/?c=HTMedicalCare&m=loadHTMedicalCareClassListFed'
	}),
	valueField: 'HTMedicalCareClass_id',
	initComponent: function() {
		sw.Promed.SwHTMedicalCareClassFedCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swhtmedicalcareclassfedcombo', sw.Promed.SwHTMedicalCareClassFedCombo);*/

sw.Promed.SwHTMedicalCareClassFedCombo = Ext.extend(Ext.form.ComboBox, {
	beforeBlur: function() {
		// медитируем
		return true;
	},
	reload: function() {
		var combo = this;
		var HTMedicalCareClass_id = combo.getValue();
		combo.clearValue();
		combo.lastQuery = '';
		combo.getStore().removeAll();
		combo.getStore().baseParams.query = '';

		combo.getStore().load({
			callback: function() {
				index = combo.getStore().findBy(function(rec) {
					return (rec.get('HTMedicalCareClass_id') == HTMedicalCareClass_id);
				});

				if ( index >= 0 ) {
					combo.setValue(HTMedicalCareClass_id);
				}
			}
		});
	},
	clearBaseParams: function() {
		this.lastQuery = 'This query sample that is not will never appear';
	},
	codeField: 'HTMedicalCareClass_Code',
	displayField: 'HTMedicalCareClass_Name',
	editable: true,
	emptyText: langs('Введите код или название метода...'),
	enableKeyEvents: true,
	fieldLabel: 'HTMedicalCareClass',
	forceSelection: true,
	hiddenName: 'HTMedicalCareClass_id',
	minChars: 1,
	minLength: 0,
	mode: 'remote',
	resizable: true,
	selectOnFocus: true,
	triggerAction: 'all',
	valueField: 'HTMedicalCareClass_id',
	initComponent: function() {
		sw.Promed.SwHTMedicalCareClassFedCombo.superclass.initComponent.apply(this, arguments);

		this.addListener('select', function(combo, record, index) {
			if ( record.get(combo.valueField) ) {
				combo.setRawValue(record.get('HTMedicalCareClass_Code') + ". " + record.get('HTMedicalCareClass_Name'));
			}
		});

		this.addListener('keydown', function(inp, e) {
			if ( e.getKey() == e.END ) {
				this.inKeyMode = true;
				this.select(this.getStore().getCount() - 1);
			}

			if ( e.getKey() == e.HOME ) {
				this.inKeyMode = true;
				this.select(0);
			}

			if ( e.getKey() == e.PAGE_UP ) {
				this.inKeyMode = true;
				var ct = this.getStore().getCount();

				if ( ct > 0 ) {
					if ( this.selectedIndex == -1 ) {
						this.select(0);
					}
					else if ( this.selectedIndex != 0 ) {
						if ( this.selectedIndex - 10 >= 0 )
							this.select(this.selectedIndex - 10);
						else
							this.select(0);
					}
				}
			}

			if ( e.getKey() == e.PAGE_DOWN ) {
				if ( !this.isExpanded() ) {
					this.onTriggerClick();
				}
				else {
					this.inKeyMode = true;
					var ct = this.getStore().getCount();

					if ( ct > 0 ) {
						if ( this.selectedIndex == -1 ) {
							this.select(0);
						}
						else if ( this.selectedIndex != ct - 1 ) {
							if ( this.selectedIndex + 10 < ct - 1 )
								this.select(this.selectedIndex + 10);
							else
								this.select(ct - 1);
						}
					}
				}
			}

			if ( e.altKey || e.ctrlKey || e.shiftKey )
				return true;
			
			if ( e.getKey() == e.DELETE||e.getKey() == e.BACKSPACE) {
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if ( inp.onClearValue ) {
					this.onClearValue();
				}
				e.stopEvent();
				return true;
			}
		});

		this.tpl = new Ext.XTemplate(
			'<tpl for="."><div class="x-combo-list-item">',
			'<span style="color: red">{HTMedicalCareClass_Code}</span>&nbsp;{HTMedicalCareClass_Name}',
			(getRegionNick().inlist(['kareliya', 'perm'])) ? ' (Группа: {HTMedicalCareClass_GroupCode})' : '',
			'</div></tpl>'
		);

		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'HTMedicalCareClass_id'
			}, [
				{ name: 'HTMedicalCareClass_id', mapping: 'HTMedicalCareClass_id',type: 'int' },
				{ name: 'HTMedicalCareClass_Code', mapping: 'HTMedicalCareClass_Code', type: 'string' },
				{ name: 'HTMedicalCareClass_Name', mapping: 'HTMedicalCareClass_Name', type: 'string' },
				{ name: 'HTMedicalCareClass_GroupCode', mapping: 'HTMedicalCareClass_GroupCode', type: 'int' }
			]),
			url: '/?c=HTMedicalCare&m=loadHTMedicalCareClassListFed'
		});
	}
});
Ext.reg('swhtmedicalcareclassfedcombo', sw.Promed.SwHTMedicalCareClassFedCombo);

sw.Promed.SwHTMedicalCareTypeFedCombo = Ext.extend(Ext.form.ComboBox, {
	beforeBlur: function() {
		// медитируем
		return true;
	},
	reload: function() {
		var combo = this;
		var HTMedicalCareType_id = combo.getValue();
		combo.clearValue();
		combo.lastQuery = '';
		combo.getStore().removeAll();
		combo.getStore().baseParams.query = '';

		combo.getStore().load({
			callback: function() {
				index = combo.getStore().findBy(function(rec) {
					return (rec.get('HTMedicalCareType_id') == HTMedicalCareType_id);
				});

				if ( index >= 0 ) {
					combo.setValue(HTMedicalCareType_id);
				}
			}
		});
	},
	clearBaseParams: function() {
		this.lastQuery = 'This query sample that is not will never appear';
	},
	codeField: 'HTMedicalCareType_Code',
	displayField: 'HTMedicalCareType_Name',
	editable: true,
	emptyText: langs('Введите код или название ВМП...'),
	enableKeyEvents: true,
	fieldLabel: 'HTMedicalCareType',
	forceSelection: true,
	hiddenName: 'HTMedicalCareType_id',
	minChars: 1,
	minLength: 0,
	mode: 'remote',
	resizable: true,
	selectOnFocus: true,
	triggerAction: 'all',
	valueField: 'HTMedicalCareType_id',
	initComponent: function() {
		sw.Promed.SwHTMedicalCareTypeFedCombo.superclass.initComponent.apply(this, arguments);

		this.addListener('select', function(combo, record, index) {
			if ( record.get(combo.valueField) ) {
				combo.setRawValue(record.get('HTMedicalCareType_Code') + ". " + record.get('HTMedicalCareType_Name'));
			}
		});

		this.addListener('keydown', function(inp, e) {
			if ( e.getKey() == e.END ) {
				this.inKeyMode = true;
				this.select(this.getStore().getCount() - 1);
			}

			if ( e.getKey() == e.HOME ) {
				this.inKeyMode = true;
				this.select(0);
			}

			if ( e.getKey() == e.PAGE_UP ) {
				this.inKeyMode = true;
				var ct = this.getStore().getCount();

				if ( ct > 0 ) {
					if ( this.selectedIndex == -1 ) {
						this.select(0);
					}
					else if ( this.selectedIndex != 0 ) {
						if ( this.selectedIndex - 10 >= 0 )
							this.select(this.selectedIndex - 10);
						else
							this.select(0);
					}
				}
			}

			if ( e.getKey() == e.PAGE_DOWN ) {
				if ( !this.isExpanded() ) {
					this.onTriggerClick();
				}
				else {
					this.inKeyMode = true;
					var ct = this.getStore().getCount();

					if ( ct > 0 ) {
						if ( this.selectedIndex == -1 ) {
							this.select(0);
						}
						else if ( this.selectedIndex != ct - 1 ) {
							if ( this.selectedIndex + 10 < ct - 1 )
								this.select(this.selectedIndex + 10);
							else
								this.select(ct - 1);
						}
					}
				}
			}

			if ( e.altKey || e.ctrlKey || e.shiftKey )
				return true;
			
			if ( e.getKey() == e.DELETE||e.getKey() == e.BACKSPACE) {
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if ( inp.onClearValue ) {
					this.onClearValue();
				}
				e.stopEvent();
				return true;
			}
		});

				this.tpl = new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{HTMedicalCareType_Code}</font>&nbsp;{HTMedicalCareType_Name}',
		'</div></tpl>'
	);
			this.store = new Ext.data.Store({
				autoLoad: false,
				reader: new Ext.data.JsonReader({
					id: 'HTMedicalCareType_id'
				}, [
                    { name: 'HTMedicalCareType_id', mapping: 'HTMedicalCareType_id',type: 'int' },
                    { name: 'HTMedicalCareType_Code', mapping: 'HTMedicalCareType_Code', type: 'string' },
                    { name: 'HTMedicalCareType_Name', mapping: 'HTMedicalCareType_Name', type: 'string' }
				]),
				url: '/?c=HTMedicalCare&m=loadHTMedicalCareTypeListFed'
			});
		

	}
});
Ext.reg('swhtmedicalcaretypefedcombo', sw.Promed.SwHTMedicalCareTypeFedCombo);

sw.Promed.SwPrehospArriveCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'PrehospArrive_Code',
	displayField: 'PrehospArrive_Name',
	editable: false,
	fieldLabel: langs('Способ доставки'),
	hiddenName: 'PrehospArrive_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{PrehospArrive_Code}</font>&nbsp;{PrehospArrive_Name}',
		'</div></tpl>'
	),
	valueField: 'PrehospArrive_id',
	initComponent: function() {
		sw.Promed.SwPrehospArriveCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'PrehospArrive_Name', mapping: 'PrehospArrive_Name'},
				{name: 'PrehospArrive_Code', mapping: 'PrehospArrive_Code'},
				{name: 'PrehospArrive_SysNick', mapping: 'PrehospArrive_SysNick'},
				{name: 'PrehospArrive_id', mapping: 'PrehospArrive_id'}
			],
			listeners: {
				'load': function(store) {
					this.setValue(this.getValue());
				}.createDelegate(this)
			},
			key: 'PrehospArrive_id',
			sortInfo: {field: 'PrehospArrive_Code'},
			tableName: 'PrehospArrive'
		});
	}
});
Ext.reg('swprehosparrivecombo', sw.Promed.SwPrehospArriveCombo);

sw.Promed.SwLpuSectionTransTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'LpuSectionTransType_Code',
	displayField: 'LpuSectionTransType_Name',
	editable: false,
	fieldLabel: langs('Вид транспортировки'),
	hiddenName: 'LpuSectionTransType_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{LpuSectionTransType_Code}</font>&nbsp;{LpuSectionTransType_Name}',
		'</div></tpl>'
	),
	valueField: 'LpuSectionTransType_id',
	initComponent: function() {
		sw.Promed.SwLpuSectionTransTypeCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'LpuSectionTransType_Name', mapping: 'LpuSectionTransType_Name'},
				{name: 'LpuSectionTransType_Code', mapping: 'LpuSectionTransType_Code'},
				{name: 'LpuSectionTransType_id', mapping: 'LpuSectionTransType_id'}
			],
			listeners: {
				'load': function(store) {
					this.setValue(this.getValue());
				}.createDelegate(this)
			},
			key: 'LpuSectionTransType_id',
			sortInfo: {field: 'LpuSectionTransType_Code'},
			tableName: 'LpuSectionTransType'
		});
	}
});
Ext.reg('swlpusectiontranstypecombo', sw.Promed.SwLpuSectionTransTypeCombo);

sw.Promed.SwPrehospToxicCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'PrehospToxic_Code',
	displayField: 'PrehospToxic_Name',
	editable: false,
	fieldLabel: langs('Вид опьянения'),
	hiddenName: 'PrehospToxic_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{PrehospToxic_Code}</font>&nbsp;{PrehospToxic_Name}',
		'</div></tpl>'
	),
	valueField: 'PrehospToxic_id',
	initComponent: function() {
		sw.Promed.SwPrehospToxicCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'PrehospToxic_Name', mapping: 'PrehospToxic_Name'},
				{name: 'PrehospToxic_Code', mapping: 'PrehospToxic_Code'},
				{name: 'PrehospToxic_id', mapping: 'PrehospToxic_id'}
			],
			key: 'PrehospToxic_id',
			sortInfo: {field: 'PrehospToxic_Code'},
			tableName: 'PrehospToxic'
		});
	}
});
Ext.reg('swprehosptoxiccombo', sw.Promed.SwPrehospToxicCombo);

sw.Promed.SwPrehospTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'PrehospType_Code',
	displayField: 'PrehospType_Name',
	editable: false,
	fieldLabel: langs('Тип госпитализации'),
	hiddenName: 'PrehospType_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{PrehospType_Code}</font>&nbsp;{PrehospType_Name}',
		'</div></tpl>'
	),
	valueField: 'PrehospType_id',
	initComponent: function() {
		sw.Promed.SwPrehospTypeCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'PrehospType_Name', mapping: 'PrehospType_Name'},
				{name: 'PrehospType_Code', mapping: 'PrehospType_Code'},
				{name: 'PrehospType_SysNick', mapping: 'PrehospType_SysNick'},
				{name: 'PrehospType_id', mapping: 'PrehospType_id'}
			],
			key: 'PrehospType_id',
			sortInfo: {field: 'PrehospType_Code'},
			tableName: 'PrehospType'
		});
	}
});
Ext.reg('swprehosptypecombo', sw.Promed.SwPrehospTypeCombo);

sw.Promed.SwResultDeseaseCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'ResultDesease_Code',
	displayField: 'ResultDesease_Name',
	editable: false,
	fieldLabel: langs('Исход заболевания'),
	hiddenName: 'ResultDesease_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{ResultDesease_Code}</font>&nbsp;{ResultDesease_Name}',
		'</div></tpl>'
	),
	valueField: 'ResultDesease_id',
	store:new Ext.db.AdapterStore({
		autoLoad:false,
		dbFile:'Promed.db',
		fields:[
			{name:'ResultDesease_Name', mapping:'ResultDesease_Name'},
			{name:'ResultDesease_Code', mapping:'ResultDesease_Code'},
			{name:'ResultDesease_id', mapping:'ResultDesease_id'}
		],
		key:'ResultDesease_id',
		sortInfo:{field:'ResultDesease_Code'},
		tableName:'ResultDesease'
	}),
	initComponent: function() {
		sw.Promed.SwResultDeseaseCombo.superclass.initComponent.apply(this, arguments);
/*
		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'ResultDesease_Name', mapping: 'ResultDesease_Name'},
				{name: 'ResultDesease_Code', mapping: 'ResultDesease_Code'},
				{name: 'ResultDesease_id', mapping: 'ResultDesease_id'}
			],
			key: 'ResultDesease_id',
			sortInfo: {field: 'ResultDesease_Code'},
			tableName: 'ResultDesease'
		});
*/
	}
});
Ext.reg('swresultdeseasecombo', sw.Promed.SwResultDeseaseCombo);

sw.Promed.SwDiagSetClassCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'DiagSetClass_Code',
	displayField: 'DiagSetClass_Name',
	editable: false,
	fieldLabel: langs('Вид диагноза'),
	hiddenName: 'DiagSetClass_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{DiagSetClass_Code}</font>&nbsp;{DiagSetClass_Name}',
		'</div></tpl>'
	),
	valueField: 'DiagSetClass_id',
	onLoadStore: Ext.emptyFn,
	initComponent: function() {
		sw.Promed.SwDiagSetClassCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'DiagSetClass_id', mapping: 'DiagSetClass_id'},
				{name: 'DiagSetClass_Code', mapping: 'DiagSetClass_Code'},
				{name: 'DiagSetClass_Name', mapping: 'DiagSetClass_Name'},
				{name: 'DiagSetClass_SysNick', mapping: 'DiagSetClass_SysNick'}
			],
			key: 'DiagSetClass_id',
			sortInfo: {field: 'DiagSetClass_Code'},
			tableName: 'DiagSetClass',
			listeners: {
				'load': function(store) {
					this.onLoadStore(store);
				}.createDelegate(this)
			}
		});
	}
});
Ext.reg('swdiagsetclasscombo', sw.Promed.SwDiagSetClassCombo);

sw.Promed.SwDiagSetTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'DiagSetType_Code',
	displayField: 'DiagSetType_Name',
	editable: false,
	fieldLabel: langs('Тип диагноза'),
	hiddenName: 'DiagSetType_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{DiagSetType_Code}</font>&nbsp;{DiagSetType_Name}',
		'</div></tpl>'
	),
	valueField: 'DiagSetType_id',
	initComponent: function() {
		sw.Promed.SwDiagSetTypeCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'DiagSetType_Name', mapping: 'DiagSetType_Name'},
				{name: 'DiagSetType_Code', mapping: 'DiagSetType_Code'},
				{name: 'DiagSetType_id', mapping: 'DiagSetType_id'}
			],
			key: 'DiagSetType_id',
			sortInfo: {field: 'DiagSetType_Code'},
			tableName: 'DiagSetType'
		});
	}
});
Ext.reg('swdiagsettypecombo', sw.Promed.SwDiagSetTypeCombo);


sw.Promed.SwDispWowSpecCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'DispWowSpec_Code',
	displayField: 'DispWowSpec_Name',
	editable: false,
	fieldLabel: langs('Специальность врача'),
	hiddenName: 'DispWowSpec_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{DispWowSpec_Code}</font>&nbsp;{DispWowSpec_Name}',
		'</div></tpl>'
	),
	store: new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'DispWowSpec_Name', mapping: 'DispWowSpec_Name'},
				{name: 'DispWowSpec_Code', mapping: 'DispWowSpec_Code'},
				{name: 'DispWowSpec_id', mapping: 'DispWowSpec_id'}
			],
			key: 'DispWowSpec_id',
			sortInfo: {field: 'DispWowSpec_Code'},
			tableName: 'DispWowSpec'
		}),
	valueField: 'DispWowSpec_id',
	initComponent: function() {
		sw.Promed.SwDispWowSpecCombo.superclass.initComponent.apply(this, arguments);

	}
});
Ext.reg('swdispwowspeccombo', sw.Promed.SwDispWowSpecCombo);

/**
 *  Комбо для ввода организации.
 *  при editable = true - переходит в ремоте моде и позволяет
 *  вводить символы по которым происходит фильтрация
 */
sw.Promed.SwOrgComboEx = Ext.extend(Ext.form.ComboBox, {
	width        : 500,
	listWidth    : 500,
	editable     : true,
	hiddenName   : 'Org_id',
	displayField : 'Org_Name',
	valueField   : 'Org_id',
	fieldLabel   : langs('Организация'),
//    hideTrigger  : true,
	enableKeyEvents: true,
	resizable      : true,
	queryDelay     : 300,
	selectOnFocus  : true,
	tpl            : '<tpl for="."><div class="x-combo-list-item">{Org_ColoredName}</div></tpl>',
	// when editable
	emptyText    : langs('Введите часть названия ... (не менее трех символов)'),
	mode         : 'remote',
	triggerAction: 'query',
	minChars     : 3,
	forceSelection : true,
	loadingText    : langs('Идет поиск...'),
    allowEmptyUAddress: '1',
	enableOrgType: true,
	defaultOrgType: null,
	listWidth: 700,

	initComponent: function() {
		
		var combo = this;
		
		Ext.form.ComboBox.superclass.initComponent.apply(this, arguments);
		if(this.editable)
		{
			this.store = new Ext.data.JsonStore({
				url: '/?c=Org&m=getOrgColoredList',
				editable: false,
				key: 'Org_id',
				autoLoad: false,
				baseParams: {'OrgType': combo.defaultOrgType, needOrgType: 1},
				fields: [
					{name: 'Org_id',    type:'int'},
					{name: 'Org_Name',  type:'string'},
					{name: 'Org_Nick',  type:'string'},
					{name: 'Org_ColoredName',  type:'string'},
					{name: 'OrgType_SysNick',  type:'string'},
                    {name: 'Lpu_id',    type:'int'}
				],
				sortInfo: {
					field: this.displayField
				}
			})
		} 
		else 
		{
			this.store = new Ext.data.SimpleStore({
				data    : [],
				editable: false,
				key: 'Org_id',
				autoLoad: false,
				fields: [
					{name: 'Org_id',    type:'int'},
					{name: 'Org_Name',  type:'string'},
					{name: 'Org_Nick',  type:'string'},
					{name: 'Org_ColoredName',  type:'string'},
					{name: 'OrgType_SysNick',  type:'string'},
                    {name: 'Lpu_id',    type:'int'}
				],
				sortInfo: {
					field: this.displayField
				}
			})
		}
		
	},
	listeners : {
		'select': function(combo, record, index) {
			combo.setRawValue(record.get(combo.displayField));
		},
		'keydown': function(inp, e) {
			if ( e.getKey() == e.DELETE)
			{
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if (inp.onClearValue)
					this.onClearValue();
				e.stopEvent();
				return true;
			}

			if (e.getKey() == e.F4)
			{
				this.onTriggerClick();
			}
		}
	},
	onTriggerClick: function() {
		if (this.disabled) return false;
		var combo = this;
		getWnd('swOrgSearchWindow').show({
			//object: 'org',
			enableOrgType: combo.enableOrgType,
			defaultOrgType: combo.defaultOrgType,
            allowEmptyUAddress: combo.allowEmptyUAddress,
			onHide: function() {
				combo.focus(false);
			},
			onSelect: function(orgData) {
				var oldValue = combo.getValue();
				combo.getStore().removeAll();
				combo.getStore().loadData([{
					Org_id: orgData.Org_id,
					Org_Name: orgData.Org_Name,
					Org_Nick: orgData.Org_Nick,
                    Org_ColoredName : '',
                    OrgType_SysNick: orgData.OrgType_SysNick
				}]);
				combo.setValue(orgData[combo.valueField]);

				var index = combo.getStore().find('Org_id', orgData.Org_id);

				if (index == -1)
				{
					return false;
				}

				var record = combo.getStore().getAt(index);
				combo.fireEvent('select', combo, record, 0);

				if (oldValue != combo.getValue()) {
					combo.fireEvent('change', combo, combo.getValue(), oldValue);
				}

				getWnd('swOrgSearchWindow').hide();
			}
		});
	},
	setValueByLpuId: function(Lpu_id) {
		cmp = this;

	}
});

sw.Promed.SwOrgComboEx.prototype.triggerClass = 'x-form-search-trigger';
Ext.reg('sworgcomboex', sw.Promed.SwOrgComboEx);

/**
 *  Комбо для подразделения медицинского изделия.
 *  при editable = true - переходит в ремоте моде и позволяет
 *  вводить символы по которым происходит фильтрация
 */
sw.Promed.SwMedProdClassComboEx = Ext.extend(Ext.form.ComboBox, {
	action: 'edit',
	width        : 500,
	listWidth    : 500,
	editable     : true,
	hiddenName   : 'MedProductClass_id',
	displayField : 'MedProductClass_Name',
	valueField   : 'MedProductClass_id',
	fieldLabel   : langs('Класс МИ'),
//    hideTrigger  : true,
	enableKeyEvents: true,
	resizable      : true,
	queryDelay     : 300,
	selectOnFocus  : true,
	tpl            : '<tpl for="."><div class="x-combo-list-item">{MedProductClass_Name}</div></tpl>',
	// when editable
	emptyText    : langs('Введите часть названия ... (не менее трех символов)'),
	mode         : 'remote',
	triggerAction: 'query',
	minChars     : 3,
    Lpu_id: null,
	forceSelection : true,
	loadingText    : langs('Идет поиск...'),
    getParams : function(q){
        var p = {};
        //p[this.queryParam] = q;
        if(this.pageSize){
            p.start = 0;
            p.limit = this.pageSize;
        }
        if(this.Lpu_id){
            p.Lpu_id = this.Lpu_id;
        }
        return p;
    },
	initComponent: function() {
        Ext.form.ComboBox.superclass.initComponent.apply(this, arguments);

        if(this.editable){
            this.store = new Ext.data.JsonStore({
                url: '/?c=LpuPassport&m=getMedProductClassList',
                editable: false,
                params: {Lpu_id: this.Lpu_id},
                key: 'MedProductClass_id',
                autoLoad: false,
                fields: [
                    {name: 'MedProductClass_id',    type:'int'},
                    {name: 'MedProductType_Name',    type:'string'},
                    {name: 'MedProductType_Code',    type:'string'},
                    {name: 'MedProductClass_Name',  type:'string'},
                    {name: 'MedProductClass_Model',  type:'string'},
                    {name: 'CardType_Name',  type:'string'},
                    {name: 'ClassRiskType_Name',  type:'string'},
					{name: 'FuncPurpType_Name',  type:'string'},
					{name: 'FRMOEquipment_Name', type:'string'},
                    {name: 'FZ30Type_Name',  type:'string'},
                    {name: 'GMDNType_Name',  type:'string'},
                    {name: 'MT97Type_Name',  type:'string'},
                    {name: 'OKOFType_Name',  type:'string'},
                    {name: 'OKPType_Name',  type:'string'},
                    {name: 'OKPDType_Name',  type:'string'},
                    {name: 'TNDEDType_Name',  type:'string'},
                    {name: 'UseAreaType_Name',  type:'string'},
                    {name: 'UseSphereType_Name',  type:'string'}
                ],
                sortInfo: {
                    field: 'MedProductClass_Name'
                }
            })
        } else {
            this.store = new Ext.data.SimpleStore({
                data:[],
                editable: false,
                params: {Lpu_id: this.Lpu_id},
                key:'MedProductClass_id',
                autoLoad: false,
                fields:[
                    {name: 'MedProductClass_id',    type:'int'},
                    {name: 'MedProductType_Name',    type:'string'},
                    {name: 'MedProductType_Code',    type:'string'},
                    {name: 'MedProductClass_Name',  type:'string'},
                    {name: 'MedProductClass_Model',  type:'string'},
                    {name: 'CardType_Name',  type:'string'},
                    {name: 'ClassRiskType_Name',  type:'string'},
                    {name: 'FuncPurpType_Name',  type:'string'},
					{name: 'FRMOEquipment_Name', type:'string'},
                    {name: 'FZ30Type_Name',  type:'string'},
                    {name: 'GMDNType_Name',  type:'string'},
                    {name: 'MT97Type_Name',  type:'string'},
                    {name: 'OKOFType_Name',  type:'string'},
                    {name: 'OKPType_Name',  type:'string'},
                    {name: 'OKPDType_Name',  type:'string'},
                    {name: 'TNDEDType_Name',  type:'string'},
                    {name: 'UseAreaType_Name',  type:'string'},
                    {name: 'UseSphereType_Name',  type:'string'}
                ],
                sortInfo: {
                    field: 'MedProductClass_Name'
                }
            })
        }
	},
	listeners : {
		'select': function(combo, record, index) {
			combo.setRawValue(record.get('MedProductClass_Name'));
		},
		'keydown': function(inp, e) {
			if ( e.getKey() == e.DELETE)
			{
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if (inp.onClearValue)
					this.onClearValue();
				e.stopEvent();
				return true;
			}

			if (e.getKey() == e.F4)
			{
				this.onTriggerClick();
			}
		}
	},
	onTriggerClick: function() {
		if (this.disabled) return false;
		var combo = this;
		getWnd('swMedProductClassSearchWindow').show({
			action: combo.action,
			onHide: function() {
				combo.focus(false);
			},
            Lpu_id: combo.Lpu_id,
            onSelect: function(MedProductClass) {
				//combo.getStore().removeAll();
				combo.getStore().reload();

				combo.getStore().loadData([{
					MedProductClass_id: MedProductClass.MedProductClass_id,
					MedProductClass_Name: MedProductClass.MedProductClass_Name,
                    MedProductClass_Model: MedProductClass.MedProductClass_Model,
                    MedProductType_Name: MedProductClass.MedProductType_Name,
                    MedProductType_Code: MedProductClass.MedProductType_Code,
                    CardType_Name: MedProductClass.CardType_Name,
                    ClassRiskType_Name: MedProductClass.ClassRiskType_Name,
                    FuncPurpType_Name: MedProductClass.FuncPurpType_Name,
					FRMOEquipment_Name: MedProductClass.FRMOEquipment_Name,
                    FZ30Type_Name: MedProductClass.FZ30Type_Name,
                    GMDNType_Name: MedProductClass.GMDNType_Name,
                    MT97Type_Name: MedProductClass.MT97Type_Name,
                    OKOFType_Name: MedProductClass.OKOFType_Name,
                    OKPType_Name: MedProductClass.OKPType_Name,
                    OKPDType_Name: MedProductClass.OKPDType_Name,
                    TNDEDType_Name: MedProductClass.TNDEDType_Name,
                    UseAreaType_Name: MedProductClass.UseAreaType_Name,
                    UseSphereType_Name: MedProductClass.UseSphereType_Name
				}]);

				combo.setValue(MedProductClass[combo.valueField]);

				var index = combo.getStore().find('MedProductClass_id', MedProductClass.MedProductClass_id);
				if (index == -1) {
					return false;
				}

				var record = combo.getStore().getAt(index);
				combo.fireEvent('select', combo, record, 0);

				getWnd('swMedProductClassSearchWindow').hide();
			}
		});
	}
});

Ext.reg('swmedprodclasscomboex', sw.Promed.SwMedProdClassComboEx);

sw.Promed.SwMedProdClassComboEx.prototype.triggerClass = 'x-form-search-trigger';
sw.Promed.SwAnatomWhereCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'AnatomWhere_Code',
	displayField: 'AnatomWhere_Name',
	editable: false,
	fieldLabel: langs('Место проведения'),
	hiddenName: 'AnatomWhere_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{AnatomWhere_Code}</font>&nbsp;{AnatomWhere_Name}',
		'</div></tpl>'
	),
	valueField: 'AnatomWhere_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'AnatomWhere_Name', mapping: 'AnatomWhere_Name'},
			{name: 'AnatomWhere_Code', mapping: 'AnatomWhere_Code'},
			{name: 'AnatomWhere_id', mapping: 'AnatomWhere_id'}
		],
		key: 'AnatomWhere_id',
		sortInfo: {field: 'AnatomWhere_Code'},
		tableName: 'AnatomWhere'}),
	initComponent: function () {
		sw.Promed.SwAnatomWhereCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swanatomwherecombo', sw.Promed.SwAnatomWhereCombo);

sw.Promed.SwAnesthesiaClassCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'AnesthesiaClass_Code',
	displayField: 'AnesthesiaClass_Name',
	editable: false,
	fieldLabel: langs('Вид анестезии'),
	hiddenName: 'AnesthesiaClass_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{AnesthesiaClass_Code}</font>&nbsp;{AnesthesiaClass_Name}',
		'</div></tpl>'
	),
	valueField: 'AnesthesiaClass_id',
	initComponent: function() {
		sw.Promed.SwAnesthesiaClassCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'AnesthesiaClass_Name', mapping: 'AnesthesiaClass_Name'},
				{name: 'AnesthesiaClass_Code', mapping: 'AnesthesiaClass_Code'},
				{name: 'AnesthesiaClass_id', mapping: 'AnesthesiaClass_id'}
			],
			key: 'AnesthesiaClass_id',
			sortInfo: {field: 'AnesthesiaClass_Code'},
			tableName: 'AnesthesiaClass'
		});
	}
});
Ext.reg('swanesthesiaclasscombo', sw.Promed.SwAnesthesiaClassCombo);

sw.Promed.SwOperDiffCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'OperDiff_Code',
	displayField: 'OperDiff_Name',
	editable: false,
	fieldLabel: langs('Категория сложности'),
	hiddenName: 'OperDiff_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{OperDiff_Code}</font>&nbsp;{OperDiff_Name}',
		'</div></tpl>'
	),
	valueField: 'OperDiff_id',
	initComponent: function() {
		sw.Promed.SwOperDiffCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'OperDiff_Name', mapping: 'OperDiff_Name'},
				{name: 'OperDiff_Code', mapping: 'OperDiff_Code'},
				{name: 'OperDiff_id', mapping: 'OperDiff_id'}
			],
			key: 'OperDiff_id',
			sortInfo: {field: 'OperDiff_Code'},
			tableName: 'OperDiff'
		});
	}
});
Ext.reg('swoperdiffcombo', sw.Promed.SwOperDiffCombo);

sw.Promed.SwOperTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'OperType_Code',
	displayField: 'OperType_Name',
	editable: false,
	fieldLabel: langs('Тип операции'),
	hiddenName: 'OperType_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{OperType_Code}</font>&nbsp;{OperType_Name}',
		'</div></tpl>'
	),
	valueField: 'OperType_id',
	initComponent: function() {
		sw.Promed.SwOperTypeCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'OperType_Name', mapping: 'OperType_Name'},
				{name: 'OperType_Code', mapping: 'OperType_Code'},
				{name: 'OperType_id', mapping: 'OperType_id'}
			],
			key: 'OperType_id',
			sortInfo: {field: 'OperType_Code'},
			tableName: 'OperType'
		});
	}
});
Ext.reg('swopertypecombo', sw.Promed.SwOperTypeCombo);

// Место выполнения услуги (ДД)
sw.Promed.SwExaminationPlaceCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'ExaminationPlace_Code',
	displayField: 'ExaminationPlace_Name',
	editable: false,
	fieldLabel: langs('Место выполнения'),
	hiddenName: 'ExaminationPlace_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{ExaminationPlace_Code}</font>&nbsp;{ExaminationPlace_Name}',
		'</div></tpl>'
	),
	valueField: 'ExaminationPlace_id',
	initComponent: function() {
		sw.Promed.SwExaminationPlaceCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'ExaminationPlace_Name', mapping: 'ExaminationPlace_Name'},
				{name: 'ExaminationPlace_Code', mapping: 'ExaminationPlace_Code'},
				{name: 'ExaminationPlace_id', mapping: 'ExaminationPlace_id'}
			],
			key: 'ExaminationPlace_id',
			sortInfo: {field: 'ExaminationPlace_Code'},
			tableName: 'ExaminationPlace'
		});
	}
});
Ext.reg('swexaminationplacecombo', sw.Promed.SwExaminationPlaceCombo);


sw.Promed.SwDrugRequestMnnCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	displayField: 'DrugRequestRow_Name',
	enableKeyEvents: true,
	fieldLabel: langs('Заявка'),
	forceSelection: true,
	hiddenName: 'id',
	initComponent: function() {
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{name: 'id', type: 'int'},
				{name: 'RequestDrug_id', type: 'int'},
				{name: 'DrugMnn_id', type: 'int'},
				{name: 'DrugFormGroup_id', type: 'int'},
				{name: 'Drug_DoseCount', type: 'float'},
				{name: 'Drug_Dose', type: 'string'},
				{name: 'Drug_Fas', type: 'float'},
				{name: 'DrugRequestRow_Name', type: 'string'},
				{name: 'MedPersonal_Name', type: 'string'}
			],
			key: 'id',
			sortInfo: {
				field: 'id'
			},
			url: '/?c=EvnRecept&m=loadDrugRequestMnnList'
		});
	},
	onTrigger2Click: Ext.emptyFn,
	resizable: true,
	selectOnFocus: true,
	tpl: new Ext.XTemplate(
		'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: center;">',
		'<td style="padding: 2px; width: 5%;">№ п/п</td>',
		'<td style="padding: 2px; width: 60%;">МНН</td>',
		'<td style="padding: 2px; width: 35%;">Врач</td>',
/*
		'<td style="padding: 2px; width: 35%;">МНН</td>',
		'<td style="padding: 2px; width: 10%;">Доступно</td>',
		'<td style="padding: 2px; width: 10%;">Заявлено</td>',
		'<td style="padding: 2px; width: 10%;">Выписано</td>',
		'<td style="padding: 2px; width: 25%;">Врач</td>',
		'<td style="padding: 2px; width: 10%;">Наличие</td>',
*/
		'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
		'<td style="padding: 2px;">{id}&nbsp;</td>',
		'<td style="padding: 2px;">{DrugRequestRow_Name}&nbsp;</td>',
		'<td style="padding: 2px;">{MedPersonal_Name}&nbsp;</td>',
/*
		'<td style="padding: 2px;">{DrugRequestRow_Name}&nbsp;</td>',
		'<td style="padding: 2px; text-align: right;">-&nbsp;</td>',
		'<td style="padding: 2px; text-align: right;">-&nbsp;</td>',
		'<td style="padding: 2px; text-align: right;">-&nbsp;</td>',
		'<td style="padding: 2px;">{MedPersonal_Name}&nbsp;</td>',
		'<td style="padding: 2px;">-&nbsp;</td>',
*/
		'</tr></tpl>',
		'</table>'
	),
	triggerAction: 'all',
	valueField: 'id'
});
Ext.reg('swdrugrequestmnncombo', sw.Promed.SwDrugRequestMnnCombo);

sw.Promed.SwDrugRequestMnnCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwDrugRequestMnnCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwDrugRequestMnnCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwDrugRequestMnnCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwDrugRequestMnnCombo.prototype.onTrigger2Click = this.onTrigger2Click;

sw.Promed.SwDemandStateCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField: 'DemandState_Name',
	editable: false,
	fieldLabel: langs('Статус заявки'),
	hiddenName: 'DemandState_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{DemandState_Id}</font>&nbsp;{DemandState_Name}',
		'</div></tpl>'
	),
	valueField: 'DemandState_id',
	initComponent: function() {
		sw.Promed.SwDemandStateCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'DemandState_id', type: 'int'},
				{name: 'DemandState_Name', type: 'string'}
			],
			key: 'DemandState_id',
			sortInfo: {field: 'DemandState_id'},
			tableName: 'DemandState'
		});

		/*this.store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{ name: 'DemandState_Id', type: 'int' },
				{ name: 'DemandState_Name', type: 'string' }
			],
			key: 'DemandState_Id',
			sortInfo: {
				field: 'DemandState_Id'
			},
			url: '/?c=Demand&m=getDemandStateList'
		});*/
	}
});
Ext.reg('swdemandstatecombo', sw.Promed.SwDemandStateCombo);

// МОЛ для EvnDrug
sw.Promed.SwMolCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	mode: 'local',
	editable: false,
	codeField: 'Mol_Code',
	triggerAction: 'all',
	hiddenName:'Mol_id',
	displayField:'Person_Fio',
	valueField: 'Mol_id',
	fieldLabel: langs('МОЛ'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{Mol_Code}</font>&nbsp;{Person_Fio}'+
			'</div></tpl>',
	initComponent: function() {
		this.store =  new Ext.data.JsonStore(
		{
			url: '/?c=EvnDrug&m=getMolCombo',
			key: 'Mol_id',
			autoLoad: false,
			fields:
			[
				{name: 'Mol_id', type:'int'},
				{name: 'Mol_Code', type:'int'},
				{name: 'LpuSection_id', type:'int'},
				{name: 'Contragent_id', type:'int'},
				{name: 'Storage_id', type:'int'},
				{name: 'MedPersonal_id', type:'int'},
				{name: 'Person_Fio', type:'string'},
				{name: 'Mol_begDT', type: 'string'}
			],
			sortInfo:
			{
				field: 'Person_Fio'
			}
		});
	
		sw.Promed.SwMolCombo.superclass.initComponent.apply(this, arguments);
		
	}
});

Ext.reg('swmolcombo', sw.Promed.SwMolCombo);

// Комбобокс "Первичный реестр"
sw.Promed.SwRegistryPrimaryCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField: 'displayField',
	valueField: 'Registry_id',
	editable: false,
	fieldLabel: '',
	hiddenName: 'Registry_id',
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
			'{displayField}'+
		'</div></tpl>',
	initComponent: function() {
		this.store =  new Ext.data.JsonStore(
		{
			autoLoad: false,
			key: 'Registry_id',
			fields:
			[
				{name: 'Registry_id', type: 'int'},
				{name: 'Registry_begDate', type: 'string'},
				{name: 'Registry_endDate', type: 'string'},
				{name: 'displayField', type: 'string'}
			],
			sortInfo:
			{
				field: 'Registry_id'
			},
			url: '/?c=Registry&m=getRegistryPrimaryCombo'
		});
	
		sw.Promed.SwRegistryPrimaryCombo.superclass.initComponent.apply(this, arguments);
		
	}
});
Ext.reg('swregistryprimarycombo', sw.Promed.SwRegistryPrimaryCombo);

//комбобоксы джля реализации выбора смо и филиала смо в разделе заявок
sw.Promed.SwComplexOrgSmoCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField: 'Smo_Name',
	editable: false,
	fieldLabel: langs('Организация'),
	hiddenName: 'Smo_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{Smo_Name}',
		'</div></tpl>'
	),
	valueField: 'Smo_id',
	initComponent: function() {
		sw.Promed.SwComplexOrgSmoCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{name: 'Smo_id', type: 'int'},
				{name: 'Smo_Name', type: 'string'}
			],
			key: 'Smo_id',
			sortInfo: {
				field: 'Smo_Name'
			},
			url: '/?c=Demand&m=getOrgSmoList'
		});
	}
});
Ext.reg('swcomplexorgsmocombo', sw.Promed.SwComplexOrgSmoCombo);

sw.Promed.SwQualitativeTestAnswerAnalyzerTestCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField: 'QualitativeTestAnswerAnalyzerTest_Answer',
	editable: false,
	fieldLabel: langs('Значение'),
	hiddenName: 'QualitativeTestAnswerAnalyzerTest_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{QualitativeTestAnswerAnalyzerTest_Answer}',
		'</div></tpl>'
	),
	valueField: 'QualitativeTestAnswerAnalyzerTest_id',
	initComponent: function() {
		sw.Promed.SwQualitativeTestAnswerAnalyzerTestCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{name: 'QualitativeTestAnswerAnalyzerTest_id', type: 'int'},
				{name: 'QualitativeTestAnswerAnalyzerTest_Answer', type: 'string'}
			],
			key: 'QualitativeTestAnswerAnalyzerTest_id',
			// sortInfo: {
			// 	field: 'QualitativeTestAnswerAnalyzerTest_Answer' отменем сортировку на клиенте в соответствии с #170502, 
			// },
			url: '/?c=QualitativeTestAnswerAnalyzerTest&m=loadList'
		});
	}
});
Ext.reg('swqualitativetestansweranalyzertestcombo', sw.Promed.SwQualitativeTestAnswerAnalyzerTestCombo);

sw.Promed.SwComplexOrgSmoFilialCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField: 'OrgSmoFilial_Name',
	editable: false,
	fieldLabel: langs('Филиал'),
	hiddenName: 'OrgSmoFilial_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{OrgSmoFilial_Name}',
		'</div></tpl>'
	),
	valueField: 'OrgSmoFilial_id',
	initComponent: function() {
		sw.Promed.SwComplexOrgSmoFilialCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{name: 'OrgSmoFilial_id', type: 'int'},
				{name: 'OrgSmoFilial_Name', type: 'string'}
			],
			key: 'OrgSmoFilial_id',
			sortInfo: {
				field: 'OrgSmoFilial_Name'
			},
			url: '/?c=Demand&m=getOrgSmoFilialList'
		});
	}
});
Ext.reg('swcomplexorgsmofilialcombo', sw.Promed.SwComplexOrgSmoFilialCombo);

//комбобокс для справочников в мед. свидетельствах
sw.Promed.SwCustomSvidCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	comboSubject: '',
	editable: false,
	initComponent: function() {
		if (this.comboSubject != '') {
			var combo_subject = this.comboSubject;
			var value = this.value;
			var combo = this;

			sw.Promed.SwCustomSvidCombo.superclass.initComponent.apply(this, arguments);

			this.codeField = combo_subject + '_Code';
			this.displayField = combo_subject + '_Name';
			this.tpl = new Ext.XTemplate(
				'<tpl for="."><div class="x-combo-list-item">',
				'<font color="red">{' + combo_subject + '_Code}</font>&nbsp;{' + combo_subject + '_Name}',
				'</div></tpl>'
			);
			this.valueField = combo_subject + '_id';
			this.store = new Ext.db.AdapterStore({
				autoLoad: false,
				dbFile: 'Promed.db',
				fields: [
					{name: combo_subject + '_id', mapping: combo_subject + '_id'},
					{name: combo_subject + '_Code', mapping: combo_subject + '_Code'},
					{name: combo_subject + '_Name', mapping: combo_subject + '_Name'}
				],
				key: combo_subject + '_id',
				sortInfo: {field: combo_subject + '_Code'},
				tableName: combo_subject,
				listeners: {
					'load': function(store) {
						combo.setValue(value);
					}
				}
			});
		}
	}
});
Ext.reg('swcustomsvidcombo', sw.Promed.SwCustomSvidCombo);

//комбобокс для справочников для произвольного обьекта
sw.Promed.SwCustomObjectCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	comboSubject: '',
	prefix: '',
	editable: false,
	initComponent: function() {
		if (this.comboSubject != '') {
			var combo_subject = this.comboSubject;
			var value = this.value;
			var combo = this;
			sw.Promed.SwCustomObjectCombo.superclass.initComponent.apply(this, arguments);

			this.idField = combo_subject + '_id';
			this.codeField = combo_subject + '_Code';
			this.displayField = combo_subject + '_Name';
			
			this.sortField = this.codeField;
			
			if (!this.id || this.id.substr(0,3)=='ext')
				this.id = combo_subject + '_combo';
			this.name = combo_subject + '_name';
			
			if ( Ext.isEmpty(this.hiddenName) ) {
				this.hiddenName = combo_subject + '_id';
			}
			
			this.valueField = combo_subject + '_id';
			
			this.tpl = new Ext.XTemplate(
				'<tpl for="."><div class="x-combo-list-item">',
				'<font color="red">{' + this.codeField + '}</font>&nbsp;{' + this.displayField + '}',
				'</div></tpl>'
			);			
			this.store = new Ext.db.AdapterStore({
				autoLoad: false,
				dbFile: 'Promed.db',
				fields: [
					{name: this.idField, mapping: this.idField},
					{name: this.codeField, mapping: this.codeField},
					{name: this.displayField, mapping: this.displayField}
				],
				key: this.idField,
				sortInfo: {field: this.sortField},
				tableName: this.prefix+combo_subject,
				listeners: {
					'load': function(store) {
						combo.setValue(value);
					}
				}
			});
		}
	}
});
Ext.reg('swcustomobjectcombo', sw.Promed.SwCustomObjectCombo);


//комбобокс для редактируемых справочников в обращениях
sw.Promed.SwTreatmentEditableCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	comboSubject: '', // Параметр с именем справочника
	idPrefix: '',
	mode: 'local',
	trigger1Class: 'x-form-search-trigger',
	triggerAction: 'all',
	fieldLabel: langs('Редактируемый справочник обращений'),
	minLengthText: langs('Поле должно быть заполнено'),
	allowBlank: false,
	disabled: false,
	editable: false,
	enableKeyEvents: true,
	listeners: {
		'keydown': function(inp, e) {
			if ( e.getKey() == e.END)
			{
				this.inKeyMode = true;
				this.select(this.store.getCount() - 1);
			}

			if ( e.getKey() == e.HOME)
			{
				this.inKeyMode = true;
				this.select(0);
			}

			if ( e.getKey() == e.DELETE)
			{
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if (inp.onClearValue)
					this.onClearValue();
				e.stopEvent();
				return true;
			}

			if (e.getKey() == e.F4)
			{
				this.onTrigger1Click();
			}
		}
	},
	initComponent: function() {
		if (this.comboSubject != '') {
			var combo_subject = this.comboSubject;
			var id_prefix = this.idPrefix;
			sw.Promed.SwTreatmentEditableCombo.superclass.initComponent.apply(this, arguments);
			this.codeField = combo_subject + '_Code';
			this.displayField = combo_subject + '_Name';
			this.valueField = combo_subject + '_id';
			this.id = id_prefix + combo_subject + '_id';
			//this.name = combo_subject + '_id';
			this.hiddenName = combo_subject + '_id';
			this.tpl = new Ext.XTemplate(
				'<tpl for="."><div class="x-combo-list-item">',
				'<font color="red">{' + combo_subject + '_Code}</font>&nbsp;{' + combo_subject + '_Name}',
				'</div></tpl>'
			);
			this.store = new Ext.data.JsonStore({
				url: '/?c=TreatmentCat&m=getList',
				editable: false,
				key: combo_subject + '_id',
				autoLoad: false,
				params: {object: combo_subject, order_by_field: combo_subject + '_Code'},
				fields: [
					{name: combo_subject + '_id', type:'int', mapping: combo_subject + '_id'},
					{name: combo_subject + '_Code', type:'int', mapping: combo_subject + '_Code'},
					{name: combo_subject + '_Name', type:'string', mapping: combo_subject + '_Name'},
					{name: combo_subject + '_IsDeletes', type:'int', mapping: combo_subject + '_IsDeletes'}
				],
				sortInfo: {
					field: combo_subject + '_Code'
				}
			});
			
			var onSelect = function(data)
			{
				if ( data[combo_subject+'_id'] > 0 ) {
					var params = {Object: combo_subject};
					params[combo_subject+'_id'] = data[combo_subject+'_id'];
					params[combo_subject+'_Name'] = '';
					this.getStore().load({
						callback: function() {
							this.setValue(data[combo_subject+'_id']);
							this.focus(true, 250);
							this.fireEvent('change', this);
						}.createDelegate(this),
						params: params
					});
				}
			}.createDelegate(this);
			
			if(this.onSelectFromList)
				onSelect = this.onSelectFromList;
				
			this.onTrigger1Click = function()
			{
				var combo = this;
				if (!this.formList)
				{
					this.formList = new sw.Promed.swListSearchWindow({
						title: this.fieldLabel,
						id: combo_subject + 'ListWindow',
						object: combo_subject,
						editformclassname: 'swTreatmentCatEditWindow',
						actions:[
							{name:'action_add'},
							{name:'action_edit'},
							{name:'action_view', hidden: true, disabled: true},
							{name:'action_delete', handler: function() { this.deleteItem(); }.createDelegate(this) },
							{name:'action_refresh', hidden: true, disabled: true},
							{name:'action_print', hidden: true, disabled: true}
						],
						store: this.getStore()
					});
					//this.formList.List.setParam('Object', combo_subject, false);
					this.formList.List.setParam('callback', function(data) {
						this.formList.List.getGrid().getStore().reload({
							params: {Object: combo_subject}
						}); }.createDelegate(this), false);
				}
				this.formList.List.removeAll();
				this.formList.show({
					params: {Object: combo_subject},
					onSelect: onSelect,
					onHide: function()
					{
						//combo.focus(false);
					}
				});
				return false;
			}.createDelegate(this);
		}
	},
	deleteItem: function()
	{
		var combo = this;
		sw.swMsg.show(
		{
			icon: Ext.MessageBox.QUESTION,
			msg: langs('Вы действительно хотите удалить '),
			title: langs('Вопрос'),
			buttons: Ext.Msg.YESNO,
			fn: function(buttonId, text, obj)
			{
				var record = combo.formList.List.getGrid().getSelectionModel().getSelected();
				if ('yes' == buttonId)
				{
					if (record.get( combo.comboSubject + '_IsDeletes' ) == 1)
					{
						sw.swMsg.alert('Внимание!', 'Запрещено удаление записи "' + record.get( combo.comboSubject + '_Name' ) + '"!');
						return false;
					}
					Ext.Ajax.request({
						url: '/?c=TreatmentCat&m=delItem',
						success: function() {
							combo.formList.List.getGrid().getStore().reload();
						},
						failure: function() {
							sw.swMsg.alert('Внимание!', 'Ошибка удаления записи "' + record.get( combo.comboSubject + '_Name' ) + '"!');
						},
						headers: { },
						params: {id: record.get( combo.comboSubject + '_id' ), Object: combo.comboSubject}
					});
				}
				else
				{
					return false;
				}
			}
		});
	}
});
Ext.reg('swtreatmenteditablecombo', sw.Promed.SwTreatmentEditableCombo);

//комбобокс для справочников в обращениях
sw.Promed.SwTreatmentCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	comboSubject: '',
	idPrefix: '',
	editable: false,
	initComponent: function() {
		if (this.comboSubject != '') {
			var combo_subject = this.comboSubject;
			var id_prefix = this.idPrefix;
			var value = this.value;
			var combo = this;

			sw.Promed.SwTreatmentCombo.superclass.initComponent.apply(this, arguments);

			this.codeField = combo_subject + '_Code';
			this.displayField = combo_subject + '_Name';
			this.id = id_prefix + combo_subject + '_id';
			this.hiddenName = combo_subject + '_id';
			this.tpl = new Ext.XTemplate(
				'<tpl for="."><div class="x-combo-list-item">',
				'<font color="red">{' + combo_subject + '_Code}</font>&nbsp;{' + combo_subject + '_Name}',
				'</div></tpl>'
			);
			this.valueField = combo_subject + '_id';
			this.store = new Ext.db.AdapterStore({
				autoLoad: false,
				dbFile: 'Promed.db',
				fields: [
					{name: combo_subject + '_id', mapping: combo_subject + '_id'},
					{name: combo_subject + '_Code', mapping: combo_subject + '_Code'},
					{name: combo_subject + '_Name', mapping: combo_subject + '_Name'}
				],
				key: combo_subject + '_id',
				sortInfo: {field: combo_subject + '_Code'},
				tableName: combo_subject,
				listeners: {
					'load': function(store) {
						//log(combo_subject + ' value: ' + value);
						combo.setValue(value);
					}
				}
			});
		}
	}
});
Ext.reg('swtreatmentcombo', sw.Promed.SwTreatmentCombo);


// Класс комбобокса для справочников общего вида
sw.Promed.SwCommonSprCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	allowSysNick: false,
	autoLoad: false,
	comboSubject: '',
	editable: false,
	typeCode: 'string',
	orderBy: 'Code',
	prefix: '',
	suffix: '',
	moreFields: [],
	showCodefield: true,
	onLoadStore: Ext.emptyFn,
	initComponent: function() {
		if ( this.comboSubject != '' ) {

			this.addListener('keydown', function(inp, e) { //В рамках задачи https://redmine.swan.perm.ru/issues/85359
				if ( inp.editable === false && (e.getKey() == e.DELETE||e.getKey() == e.BACKSPACE)){
					inp.clearValue();
					inp.setRawValue(null);
				}
			});

			sw.Promed.SwCommonSprCombo.superclass.initComponent.apply(this, arguments);

			if (getRegionNick() == 'ekb' && this.comboSubject == 'TumorStage') {
				this.showCodefield = false;
			}

			if ( Ext.isEmpty(this.codeField) && this.showCodefield) {
				this.codeField = this.comboSubject + '_Code';
			}

			if ( Ext.isEmpty(this.displayField) ) {
				this.displayField = this.comboSubject + '_Name';
			}

			if ( Ext.isEmpty(this.hiddenName) ) {
				this.hiddenName = this.comboSubject + '_id';
			}
			
			var fields = [
				{name: this.comboSubject + '_id', mapping: this.comboSubject + '_id'},
				{name: this.comboSubject + '_Code', mapping: this.comboSubject + '_Code'},
				{name: this.comboSubject + '_Name', mapping: this.comboSubject + '_Name'}
			];

			fields = fields.concat(this.moreFields);
			
			if ( this.allowSysNick === true ) {
				fields.push({name: this.comboSubject + '_SysNick', mapping: this.comboSubject + '_SysNick'});
			}

			this.store = new Ext.db.AdapterStore({
				autoLoad: this.autoLoad,
				dbFile: 'Promed.db',
				fields: fields,
				key: this.comboSubject + '_id',
				listeners: {
					'load': function(store) {
						this.setValue(this.getValue());
						this.onLoadStore(store);
					}.createDelegate(this)
				},
				sortInfo: {
					field: this.comboSubject + '_' + this.orderBy
				},
				tableName: this.prefix + this.comboSubject + this.suffix
			});
			if(!this.tpl) {
				this.tpl = new Ext.XTemplate(
					'<tpl for="."><div class="x-combo-list-item">',
					this.showCodefield?('<font color="red">{' + this.codeField + '}</font>&nbsp'):'',
					'{' + this.comboSubject + '_Name}',
					'</div></tpl>'
				);
			}
			if ( Ext.isEmpty(this.valueField) ) {
				this.valueField = this.comboSubject + '_id';
			}
		}
	}
});
Ext.reg('swcommonsprcombo', sw.Promed.SwCommonSprCombo);

sw.Promed.SwReasonCombo = Ext.extend(sw.Promed.SwCommonSprCombo, {
	allowSysNick: true,
	useCommonFilter: false,
	loadParams: null,	
	autoLoad: false,
	filterDate: null,
	initComponent: function() {
		sw.Promed.SwReasonCombo.superclass.initComponent.apply(this, arguments);
		var curArm = '';
		if(sw.Promed.MedStaffFactByUser.current){
			curArm =  sw.Promed.MedStaffFactByUser.current.ARMType
		}
		if(!curArm && sw.Promed.MedStaffFactByUser.last){
			curArm = sw.Promed.MedStaffFactByUser.last.ARMType;
		}
		if(!curArm && getGlobalOptions().curARMType){
			curArm = getGlobalOptions().curARMType;
		}
		var cmp = this,
			isNmpArm = curArm.inlist(['slneotl','dispnmp','dispcallnmp','dispdirnmp']),
			cmpfilter = "";

		if(!isNmpArm){
			cmpfilter = " and CmpReason_isCmp = '2'";
		}

		if (this.wherequery != '') {
			var filterDate = this.filterDate || getGlobalOptions().date;
			var s = Ext.util.Format.date(Date.parseDate(filterDate, 'd.m.Y'), 'Y-m-d');
			this.loadParams = {params: {where: " where (CmpReason_begDate is null or CmpReason_begDate <= '" + s + "') and (CmpReason_endDate is null or CmpReason_endDate >= '" + s + "')" + cmpfilter}};
		}

		//Удалим поводы с одинаковым кодом
		cmp.store.on('load', function(q,w,e,r){
			cmp.store.each(function(rec){
				var finded = -1;
				if(rec && rec.get('CmpReason_isCmp') == '1'){
					finded = cmp.store.findBy(function(r){
						return (r.get('CmpReason_Code') == rec.get('CmpReason_Code')) && (r.get('CmpReason_isCmp') != rec.get('CmpReason_isCmp'))
					}, cmp.store)

					if(finded != -1){
						cmp.store.removeAt(finded)
					}
				}

			})
		})
	}
});
Ext.reg('swreasoncombo', sw.Promed.SwReasonCombo);


// Класс комбобокса для справочников общего вида с поиском не только по коду, но и по наименованию
sw.Promed.SwCommonSprLikeCombo = Ext.extend(sw.Promed.SwCommonSprCombo, {
	codeField: '',
	typeCode: 'int',
	editable: true,
	autoLoad: true,
	initComponent: function() {
		sw.Promed.SwCommonSprLikeCombo.superclass.initComponent.apply(this, arguments);		
	}
});
Ext.reg('swcommonsprlikecombo', sw.Promed.SwCommonSprLikeCombo);

// Класс комбобокса для справочника 'EqualityType'
sw.Promed.SwEqualityTypeCombo = Ext.extend(sw.Promed.SwCommonSprCombo, {
	width: 40,
	comboSubject: 'EqualityType',
	showCodefield: false,
	autoLoad: true,
	fieldLabel: 'S', 
	labelStyle: 'text-align: right;', 
	labelSeparator: '',
	initComponent: function() {
		sw.Promed.SwEqualityTypeCombo.superclass.initComponent.apply(this, arguments);		
	}
});
Ext.reg('swequalitytypecombo', sw.Promed.SwEqualityTypeCombo);

sw.Promed.SwTubCommonSprCombo = Ext.extend(sw.Promed.SwCommonSprCombo, {
	isMDR: false,
	autoLoad: false,
	reload: function() {
		var combo = this;		
		combo.getStore().removeAll();
		combo.getStore().baseParams = {
			object: combo.comboSubject
		};
		combo.getStore().baseParams[combo.comboSubject + '_id'] = '';
		combo.getStore().baseParams[combo.comboSubject + '_Code'] = '';
		combo.getStore().baseParams[combo.comboSubject + '_Name'] = '';
		combo.getStore().baseParams[combo.comboSubject + '_IsMDR'] = '';
		combo.getStore().load({
			callback: function() {
				combo.getStore().each(function(rec){
					if (false == combo.isMDR && rec.get(combo.comboSubject + '_IsMDR') == 2) {
						combo.getStore().remove(rec);
					}
					if (true == combo.isMDR && rec.get(combo.comboSubject + '_IsMDR') == 1) {
						combo.getStore().remove(rec);
					}
				});
			}
		});
	},
	initComponent: function() {
		this.moreFields = [{name: this.comboSubject + '_IsMDR', mapping: this.comboSubject + '_IsMDR', type: 'int'}];
		sw.Promed.SwTubCommonSprCombo.superclass.initComponent.apply(this, arguments);		
		this.addListener('render',function(combo) {	
			combo.reload();
		});
	}
});
Ext.reg('swtubcommonsprcombo', sw.Promed.SwTubCommonSprCombo);

sw.Promed.SwPayTypeCombo = Ext.extend(sw.Promed.SwCommonSprCombo, {
	fieldLabel: langs('Вид оплаты'),
	comboSubject: 'PayType',
	typeCode: 'int',
	allowSysNick: true,
	useCommonFilter: false,
	loadParams: null,
	autoLoad: false,
	initComponent: function() {
		sw.Promed.SwPayTypeCombo.superclass.initComponent.apply(this, arguments);
		if (this.useCommonFilter){
			switch (getRegionNick()) {
				case 'penza':
					this.loadParams = {params: {where: ' where PayType_Code <= 7'}};
					break;
				case 'vologda':
				case 'adygeya':
				case 'kz':
					//
					break;
				default:
					this.loadParams = {params: {where: ' where PayType_Code < 7 or PayType_Code = 9 or PayType_Code = 10 or PayType_Code = 11'}};
					break;
			}
		}

		this.autoLoad = (typeof this.loadParams != 'object');
		this.addListener('render',function(combo) {
			if(combo.autoLoad == false) {
				if(combo.loadParams) {
					combo.getStore().removeAll();
					combo.getStore().load(combo.loadParams);
				} else if(combo.getStore().getCount() == 0) {
					combo.getStore().load();
				}
			}
		});
	}
});
Ext.reg('swpaytypecombo', sw.Promed.SwPayTypeCombo);

sw.Promed.SwToothStateTypeCombo = Ext.extend(sw.Promed.SwCommonSprCombo, {
	displayField: 'ToothStateType_Nick',
	fieldLabel: langs('Тип выносливости зуба'),
	moreFields: [
		{ name: 'ToothStateType_Nick', mapping: 'ToothStateType_Nick' }
	],
	comboSubject: 'ToothStateType',
	typeCode: 'int',
	allowSysNick: false,
	loadParams: null,
	autoLoad: false,
	hideTrigger: true,
	initComponent: function() {
		sw.Promed.SwToothStateTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swtoothstatetypecombo', sw.Promed.SwToothStateTypeCombo);

sw.Promed.SwToothStateValuesCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField: 'ToothStateValues_Values',
	fieldLabel: langs('Выносливость (ЕД)'),
	hiddenName: 'ToothStateValues_id',
	hideTrigger: true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{ToothStateValues_Values}&nbsp;',
		'</div></tpl>'
	),
	valueField: 'ToothStateValues_id',
	initComponent: function() {
		sw.Promed.SwToothStateValuesCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'ToothStateValues_id', mapping: 'ToothStateValues_id'},
				{name: 'ToothStateType_id', mapping: 'ToothStateType_id'},
				{name: 'JawPartType_id', mapping: 'JawPartType_id'},
				{name: 'ToothStateValues_NumTooth', mapping: 'ToothStateValues_NumTooth'},
				{name: 'ToothStateValues_Values', mapping: 'ToothStateValues_Values'}
			],
			key: 'ToothStateValues_id',
			sortInfo: {field: 'ToothStateValues_Values'},
			listeners: {
				'load': function(store) {
					store.each(function(rec) {
						rec.set('ToothStateValues_Values', twoDecimalsRenderer(rec.get('ToothStateValues_Values')));
						rec.commit();
					});

					this.setValue(this.getValue());
				}.createDelegate(this)
			},
			tableName: 'ToothStateValues'
		});
	}
});
Ext.reg('swtoothstatevaluescombo', sw.Promed.SwToothStateValuesCombo);

sw.Promed.SwVizitTypeCombo = Ext.extend(sw.Promed.SwCommonSprCombo, {
	comboSubject: 'VizitType',
	fieldLabel: langs('Цель посещения'),
	typeCode: 'int',
	allowSysNick: true,
	moreFields: [
		{name: 'VizitType_begDT', type: 'date', dateFormat: 'd.m.Y'},
		{name: 'VizitType_endDT', type: 'date', dateFormat: 'd.m.Y'},
		{name: 'TreatmentClass_id', type: 'int'}
	],
	loadParams: null,
	autoLoad: false,
	EvnClass_id: 10,// параметр для фильтрации в зависимости от класса посещения
	filterDate: null,
	excCodeArray: [],
	filterTreatmentClassId: null,
	setTreatmentClass: function(TreatmentClass_id) {
		if (TreatmentClass_id) {
			this.filterTreatmentClassId = TreatmentClass_id;
		} else {
			this.filterTreatmentClassId = null;
		}
	},
	setFilterByDate: function(dateValue) {
		this.excCodeArray = [];
		this.filterDate = dateValue;
		this.applyFilter();
	},
	setFilterByDateAndCode: function(dateValue,codeArray) {
		if (typeof codeArray != 'object') {
			if (!Ext.isEmpty(codeArray)) {
				this.excCodeArray = [codeArray];
			} else {
				this.excCodeArray = [];
			}
		} else {
			this.excCodeArray = codeArray;
		}

		this.filterDate = dateValue;
		this.applyFilter();
	},
	applyFilter: function() {
		var VizitType_id = this.getValue(),
			combo = this,
			index;

		this.clearValue();
		this.getStore().clearFilter();
		this.lastQuery = '';

		this.getStore().filterBy(function(rec) {
			var bool = true;

			if (!Ext.isEmpty(combo.excCodeArray)) {
				if (rec.get('VizitType_Code').inlist(combo.excCodeArray)) {
					return false;
				}
			}

			if (!Ext.isEmpty(combo.filterDate)) {
				if (!(
					(Ext.isEmpty(rec.get('VizitType_begDT')) || rec.get('VizitType_begDT') <= combo.filterDate || (rec.get('VizitType_begDT') !== null && !Ext.isEmpty(rec.get('VizitType_begDT').date) && rec.get('VizitType_begDT').date <= Ext.util.Format.date(combo.filterDate, 'Y-m-d')))
					&& (Ext.isEmpty(rec.get('VizitType_endDT')) || rec.get('VizitType_endDT') >= combo.filterDate || (rec.get('VizitType_endDT') !== null && !Ext.isEmpty(rec.get('VizitType_endDT').date) && rec.get('VizitType_endDT').date >= Ext.util.Format.date(combo.filterDate, 'Y-m-d')))
				)) {
					return false;
				}
			}

			if (getRegionNick() != 'kareliya' && !Ext.isEmpty(combo.filterTreatmentClassId)) {
				var index = swTreatmentClassVizitTypeGlobalStore.findBy(function(r) {
					return (r.get('TreatmentClass_id') == combo.filterTreatmentClassId && r.get('VizitType_id') == rec.get('VizitType_id'));
				});

				if (index < 0) {
					return false;
				}
			}

			return true;
		});

		index = this.getStore().findBy(function(rec) {
			return (rec.get('VizitType_id') == VizitType_id);
		});

		if ( index >= 0 ) {
			this.setValue(VizitType_id);
			this.fireEvent('select', this, this.findRecord('VizitType_id',VizitType_id));
		} else {
			this.clearValue();
		}
	},
	initComponent: function() {
        if ('ufa' == getGlobalOptions().region.nick) {
            this.typeCode = 'string';
        }
		sw.Promed.SwVizitTypeCombo.superclass.initComponent.apply(this, arguments);
		//this.autoLoad = (typeof this.loadParams != 'object');
        switch (getGlobalOptions().region.nick) {
            /*case 'astra':
                this.loadParams = {params: {where: ' where VizitType_Code not in (22,23) '}};
                break;
            case 'kaluga':
                this.loadParams = {params: {where: ' where VizitType_id > 0 '}};
                break;*/
            case 'kareliya':
                this.loadParams = {params: {where: ' where VizitType_Code not in (41) '}};
                break;
            /*case 'ufa':
                this.loadParams = {params: {where: ' where VizitType_id > 0 '}};
                break;
            default:
                this.loadParams = {params: {where: ' where VizitType_Code < 20'}};
                break;*/
        }
	}
});
Ext.reg('swvizittypecombo', sw.Promed.SwVizitTypeCombo);

sw.Promed.SwRiskLevelCombo = Ext.extend(sw.Promed.SwCommonSprCombo, {
	comboSubject: 'RiskLevel',
	fieldLabel: langs('Фактор риска'),
	typeCode: 'string',
	allowSysNick: true,
	loadParams: null,
	autoLoad: false,
	initComponent: function() {
		sw.Promed.SwRiskLevelCombo.superclass.initComponent.apply(this, arguments);
		///this.autoLoad = (typeof this.loadParams != 'object');
		//if ( getGlobalOptions().region.nick.inlist([ 'astra', 'kareliya' ]) )
			this.loadParams = {params: {where: ''}};
	}
});
Ext.reg('swrisklevelcombo', sw.Promed.SwRiskLevelCombo);

sw.Promed.SwVizitClassCombo = Ext.extend(sw.Promed.SwCommonSprCombo, {
	comboSubject: 'VizitClass',
	fieldLabel: langs('Прием'),
	typeCode: 'int',
	allowSysNick: true,
	loadParams: null,
	autoLoad: false,
	initComponent: function() {
		sw.Promed.SwVizitClassCombo.superclass.initComponent.apply(this, arguments);
		this.autoLoad = (typeof this.loadParams != 'object');
		this.addListener('render',function(combo) {
			if(combo.autoLoad == false) {
				if(combo.loadParams) {
					combo.getStore().removeAll();
					combo.getStore().load(combo.loadParams);
				} else if(combo.getStore().getCount() == 0) {
					combo.getStore().load();
				}
			}
		});
	}
});
Ext.reg('swvizitclasscombo', sw.Promed.SwVizitClassCombo);

// Класс комбобокса для справочника тип документов
sw.Promed.SwDocumentTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	editable: false,
	initComponent: function() {
			sw.Promed.SwDocumentTypeCombo.superclass.initComponent.apply(this, arguments);

			this.codeField = 'DocumentType_Code';
			this.displayField = 'DocumentType_Name';
			this.hiddenName = 'DocumentType_id';
			this.store = new Ext.db.AdapterStore({
				//url: C_GETOBJECTLIST,
				params: {object: 'DocumentType', order_by_field: 'DocumentType_Code'},
				autoLoad: false,
				dbFile: 'Promed.db',
				fields: [
					{name: 'DocumentType_id', type:'int', mapping: 'DocumentType_id'},
					{name: 'DocumentType_Code', type:'int', mapping: 'DocumentType_Code'},
					{name: 'DocumentType_Name', type:'string', mapping: 'DocumentType_Name'},
					{name: 'DocumentType_MaskSer', type:'string', mapping: 'DocumentType_MaskSer'},
					{name: 'DocumentType_MaskNum', type:'string', mapping: 'DocumentType_MaskNum'}
				],
				key: 'DocumentType_id',
				listeners: {
					'load': function(store) {
						this.setValue(this.getValue());
					}.createDelegate(this)
				},
				sortInfo: {
					field: 'DocumentType_Code'
				},
				tableName: 'DocumentType'
			});
			this.tpl = new Ext.XTemplate(
				'<tpl for="."><div class="x-combo-list-item">',
				'<font color="red">{DocumentType_Code}</font>&nbsp;{DocumentType_Name}',
				'</div></tpl>'
			);
			this.valueField = 'DocumentType_id';
	}
});
Ext.reg('swdocumenttypecombo', sw.Promed.SwDocumentTypeCombo);

//комбобокс для выбора доступных шаблонов

//комбобокс для выбора доступных шаблонов параклиники
sw.Promed.SwTemplatesParCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	trigger1Class: 'x-form-search-trigger',
	triggerAction: 'all',
	fieldLabel: langs('Доступные шаблоны'),
	allowBlank: true,
	emptyText: langs('Выберите шаблон...'),
	disabled: false,
	editable: false,
	enableKeyEvents: true,
	EvnClass_id: 47,
	UslugaComplex_id: null,
	listeners: {
		'beforeselect': function(combo, record){
		},
		'keydown': function(inp, e) {
			if ( e.getKey() == e.END)
			{
				this.inKeyMode = true;
				this.select(this.store.getCount() - 1);
			}

			if ( e.getKey() == e.HOME)
			{
				this.inKeyMode = true;
				this.select(0);
			}

			if ( e.getKey() == e.DELETE)
			{
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if (inp.onClearValue)
					this.onClearValue();
				e.stopEvent();
				return true;
			}

			if (e.getKey() == e.F4)
			{
				this.onTrigger1Click();
			}
		}
	},
	initComponent: function() {
		sw.Promed.SwTemplatesParCombo.superclass.initComponent.apply(this, arguments);
		this.displayField = 'XmlTemplate_Caption';
		this.valueField = 'XmlTemplate_id';
		this.hiddenName = 'XmlTemplate_id';
		this.tpl = new Ext.XTemplate(
			'<tpl for="."><div class="x-combo-list-item">',
			'{XmlTemplate_Caption}',
			'</div></tpl>'
		);
		
		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'XmlTemplate_id'
			}, [
				{name: 'XmlTemplate_id', type:'int', mapping: 'XmlTemplate_id'},
				{name: 'XmlTemplate_Caption', type:'string', mapping: 'XmlTemplate_Caption'}
			]),
			url: '/?c=XmlTemplate&m=loadCombo'
		});
	},
	onTrigger1Click: function()
	{
		var combo = this;
		var params = (combo.getStore().baseParams)?combo.getStore().baseParams:{};
		getWnd('swTemplSearchWindow').show({
			params: params,
			onSelect: function(data) {
				combo.getStore().removeAll();
				combo.getStore().load({
					callback: function(rec, opt) {
						if ( rec.length > 0 && rec[0].get('XmlTemplate_id') != '' )
						{
							combo.setValue(rec[0].get(combo.valueField));
							combo.setRawValue(rec[0].get('XmlTemplate_Caption'));
						}
						else
						{
							combo.setValue('');
							combo.setRawValue('');
						}
					}.createDelegate(this),
					params: {XmlTemplate_id: data[combo.valueField]},
					scope: this
				});
				getWnd('swTemplSearchWindow').hide();
			}.createDelegate(this),
			XmlType_id: sw.Promed.EvnXml.EVN_USLUGA_PROTOCOL_TYPE_ID,
			UslugaComplex_id: combo.UslugaComplex_id,
			EvnClass_id: combo.EvnClass_id
		});
		return true;
	}
});
Ext.reg('swtemplatesparcombo', sw.Promed.SwTemplatesParCombo);

/**
 * Причина отмены направления
 */
sw.Promed.SwDirFailTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'DirFailType',
		key: 'DirFailType_id',
		autoLoad: false,
		baseParams: {
			object: 'DirFailType',
			DirFailType_id: '',
			DirFailType_Name: ''
		},
		fields:
		[
			{name: 'DirFailType_id',    type:'int'},
			{name: 'DirFailType_Name',  type:'string'}
		],
		sortInfo:
		{
			field: 'DirFailType_id'
		}
	}),
	editable: false,
	displayField:'DirFailType_Name',
	valueField: 'DirFailType_id',
	hiddenName:'DirFailType_id',
	fieldLabel: langs('Причина отмены направления'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'{DirFailType_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwDirFailTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdirfailtypecombo', sw.Promed.SwDirFailTypeCombo);

sw.Promed.SwRegistryErrorTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.data.JsonStore({
		url: '/?c=Registry&m=loadRegistryErrorType',
		autoLoad: false,
		tableName: 'RegistryErrorType',
		key: 'RegistryErrorType_id',
		fields:
		[
			{name: 'RegistryErrorType_id',    type:'int'},
			{name: 'RegistryErrorType_Code',    type:'string'},
			{name: 'RegistryErrorType_Name',  type:'string'},
			{name: 'RegistryErrorClass_id',  type:'int'}/*,
			{name: 'RegistryErrorType_Descr',    type:'string'},
			{name: 'RegistryType_id',    type:'int'}*/
			
		],
		sortInfo:
		{
			field: 'RegistryErrorType_Code'
		}
	}),
	editable: false,
	//codeField:'RegistryErrorType_Code',
	displayField:'RegistryErrorType_Name',
	valueField: 'RegistryErrorType_id',
	hiddenName:'RegistryErrorType_id',
	fieldLabel: langs('Ошибка'),
	tpl:
		'<tpl for="."><div class="x-combo-list-item">'+
		'<font color="#444">{RegistryErrorType_Code}</font>&nbsp;{RegistryErrorType_Name}'+
		'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwRegistryErrorTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swregistryerrortypecombo', sw.Promed.SwRegistryErrorTypeCombo);

sw.Promed.SwRegistryErrorStageTypeCombo = Ext.extend(sw.Promed.SwCommonSprCombo,
{
	comboSubject: 'RegistryErrorStageType',
	fieldLabel: langs('Тип стадий ошибок'),
	typeCode: 'int',
	loadParams: null,
	autoLoad: false,
	initComponent: function()
	{
		sw.Promed.SwRegistryErrorStageTypeCombo.superclass.initComponent.apply(this, arguments);
		this.autoLoad = (typeof this.loadParams != 'object');
		this.addListener('render',function(combo) {
			if(combo.autoLoad == false) {
				if(combo.loadParams) {
					combo.getStore().removeAll();
					combo.getStore().load(combo.loadParams);
				} else if(combo.getStore().getCount() == 0) {
					combo.getStore().load();
				}
			}
		});
	}
});
Ext.reg('swregistryerrorstagetypecombo', sw.Promed.SwRegistryErrorStageTypeCombo);

sw.Promed.SwUslugaComplexMedserviceComdo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	mode: 'remote',
	editable: true,
	minChars: 3,
	codeField: 'UslugaComplex_Code',
	triggerAction: 'all',
	hiddenName:'UslugaComplex_id',
	displayField:'UslugaComplex_Name',
	valueField: 'UslugaComplex_id',
	fieldLabel: langs('Отделение'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
		'<font color="red">{UslugaComplex_Code}</font>&nbsp;{UslugaComplex_Name}'+
	'</div></tpl>',
	initComponent: function() {
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);
		
		this.store = new Ext.data.JsonStore({
			baseParams: {level:0},
			url: '/?c=Usluga&m=loadUslugaComplexMedServiceList',
			key: 'UslugaComplex_id',
			autoLoad: false,
			fields: [
				{name: 'UslugaComplex_id', type:'int'},
				{name: 'UslugaComplex_Code', type:'string'},
				{name: 'UslugaComplex_Name', type:'string'},
				{name: 'XmlTemplate_id', type:'int'}, // шаблон
				{name: 'UslugaComplex_isGenXml', type:'int'}, // признак автогенерации
				{name: 'MedService_id', type:'int'}
			]
		});
	}
});
sw.Promed.SwUslugaComplexMedserviceComdo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwUslugaComplexMedserviceComdo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwUslugaComplexMedserviceComdo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwUslugaComplexMedserviceComdo.prototype.trigger2Class = 'x-form-clear-trigger';
sw.Promed.SwUslugaComplexMedserviceComdo.prototype.onTrigger2Click = function() {
	if ( !this.disabled ) {
		this.clearValue()
		if(this.onClearValue && typeof this.onClearValue == 'function')
			this.onClearValue()
	}
};
Ext.reg('swuslugacomplexmedservicecomdo', sw.Promed.SwUslugaComplexMedserviceComdo);



sw.Promed.SwUslugaComplexPidCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	mode: 'remote',
	editable: true,
	minChars: 3,
	codeField: 'UslugaComplex_Code',
	triggerAction: 'all',
	hiddenName:'UslugaComplex_id',
	displayField:'UslugaComplex_Name',
	valueField: 'UslugaComplex_id',
	fieldLabel: langs('Отделение'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
		'<font color="red">{UslugaComplex_Code}</font>&nbsp;{UslugaComplex_Name}'+
		'</div></tpl>',
	initComponent: function() {
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			baseParams: {level:0},
			url: C_USLUGACOMPLEX_LIST,
			key: 'UslugaComplex_id',
			autoLoad: false,
			fields: [
				{name: 'UslugaComplex_id', type:'int'},
				{name: 'UslugaComplexMedService_id', type:'string'},
				{name: 'UslugaComplex_Code', type:'string'},
				{name: 'UslugaComplex_Name', type:'string'},
				{name: 'XmlTemplate_id', type:'int'}, // шаблон
				{name: 'UslugaComplex_isGenXml', type:'int'}, // признак автогенерации
				{name: 'isFunc', type:'int'} // атрибуты услуги
			]
		});
	}
});
sw.Promed.SwUslugaComplexPidCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwUslugaComplexPidCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwUslugaComplexPidCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwUslugaComplexPidCombo.prototype.trigger2Class = 'x-form-clear-trigger';
sw.Promed.SwUslugaComplexPidCombo.prototype.onTrigger2Click = function() {
	if ( !this.disabled ) {
		this.clearValue()
		if(this.onClearValue && typeof this.onClearValue == 'function')
			this.onClearValue()
	}
};
Ext.reg('swuslugacomplexpidcombo', sw.Promed.SwUslugaComplexPidCombo);


sw.Promed.SwLpuMotionCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
 store: new Ext.data.SimpleStore(
 {
  key: 'LpuMotion_id',
  autoLoad: false,
  fields:
  [
   {name:'LpuMotion_id',type:'int'},
   {name:'LpuMotion_name',type:'string'}
  ],
  data : [['1',langs('Все')],['2',langs('Между МО')],['3',langs('Внутри МО')]]
 }),
 mode: 'local',
 editable: false,
 fieldLabel: langs('Движение'),
 displayField:'LpuMotion_name',
 value: 1,
 valueField:'LpuMotion_id',
 hiddenName:'LpuMotion_id',
 tpl: '<tpl for="."><div class="x-combo-list-item">{LpuMotion_name}</div></tpl>',
 initComponent: function() {
  sw.Promed.SwLpuMotionCombo.superclass.initComponent.apply(this, arguments);
 }
});
Ext.reg('swlpumotioncombo', sw.Promed.SwLpuMotionCombo);

sw.Promed.SwPersonRegisterTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.data.SimpleStore({
		data: [
			['1',langs('Все')],
			['2',langs('Включенные в регистр')],
			['3',langs('Исключенные из регистра')]
		],
		editable: false,
		key: 'PersonRegisterType_id',
		autoLoad: false,
		fields: [
			{name: 'PersonRegisterType_id', type:'int'},
			{name: 'PersonRegisterType_Name', type:'string'}
		]
	}),
	displayField:'PersonRegisterType_Name',
	valueField: 'PersonRegisterType_id',
	hiddenName: 'PersonRegisterType_id',
	fieldLabel: langs('Тип записи регистра'),
	mode: 'local',
	editable: false,
	value: 1,
	tpl: '<tpl for="."><div class="x-combo-list-item">{PersonRegisterType_Name}</div></tpl>',
	initComponent: function() {
		sw.Promed.SwPersonRegisterTypeCombo.superclass.initComponent.apply(this, arguments);
	}	
});
Ext.reg('swpersonregistertypecombo', sw.Promed.SwPersonRegisterTypeCombo);

sw.Promed.SwRlsCountryCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'RlsCountries_id',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'rls_Countries',
		key: 'RlsCountries_id',
		autoLoad: false,
		fields: [
			{name: 'RlsCountries_id',  type:'int'},
			{name: 'RlsCountries_Name',  type:'string'}
		],
		sortInfo: {
			field: 'RlsCountries_Name'
		}
	}),
	triggerAction: 'all',
	editable: true,
	displayField: 'RlsCountries_Name',
	valueField: 'RlsCountries_id',
	fieldLabel: langs('Страна'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{RlsCountries_Name}&nbsp;'+
			'</div></tpl>',
	initComponent: function() {
		if (Ext.isEmpty(this.width) && Ext.isEmpty(this.anchor)) {
			this.anchor = '80%';
		}
		sw.Promed.SwRlsCountryCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swrlscountrycombo', sw.Promed.SwRlsCountryCombo);

sw.Promed.SwRlsFirmsCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'RlsFirms_id',
	anchor: '80%',
	trigger1Class: 'x-form-search-trigger',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'rls_Firms',
		key: 'RlsFirms_id',
		autoLoad: false,
		fields: [
			{name: 'RlsFirms_id',  type:'int'},
			{name: 'RlsFirms_Name',  type:'string'}
		],
		sortInfo: {
			field: 'RlsFirms_Name'
		}
	}),
	triggerAction: 'all',
	editable: true,
	displayField: 'RlsFirms_Name',
	valueField: 'RlsFirms_id',
	fieldLabel: langs('Фирма'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{RlsFirms_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwRlsFirmsCombo.superclass.initComponent.apply(this, arguments);

		this.rawValue = '';
		this.addListener('select', function(combo, record, index) {
			var name = record.get('RlsFirms_Name');
			var regexp = null;

			regexp = new RegExp('<[^>]+>','g');
			name = name.replace(regexp, '');
			regexp = new RegExp('&[^;]+;','g');
			name = name.replace(regexp, function(chr) {
				return htmlentities.decode(chr);
			});

			this.rawValue = name;
			this.setRawValue(name);
		},this);

		this.addListener('blur', function(combo) {
			this.setRawValue(this.rawValue);
		},this);
	}
});
Ext.reg('swrlsfirmscombo', sw.Promed.SwRlsFirmsCombo);

sw.Promed.SwRlsActmattersCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {	
	hiddenName: 'RlsActmatters_id',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'rls_Actmatters',
		key: 'RlsActmatters_id',
		autoLoad: false,
		fields: [
			{name: 'RlsActmatters_id',  type:'int'},
			{name: 'RlsActmatters_RusName',  type:'string'},
			{name: 'RlsActmatters_LatNameGen',  type:'string'}
		],
		sortInfo: {
			field: 'RlsActmatters_RusName'
		}
	}),
	triggerAction: 'all',
	editable: true,
	displayField: 'RlsActmatters_RusName',
	valueField: 'RlsActmatters_id',
	fieldLabel: langs('Действующее вещество'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{RlsActmatters_RusName}&nbsp;'+
			'</div></tpl>',
	initComponent: function() {
		if (Ext.isEmpty(this.width) && Ext.isEmpty(this.anchor)) {
			this.anchor = '80%';
		}

		sw.Promed.SwRlsActmattersCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swrlsactmatterscombo', sw.Promed.SwRlsActmattersCombo);

sw.Promed.SwRlsDesctextesCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'RlsDesctextes_id',
	anchor: '80%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'rls_Desctextes',
		key: 'RlsDesctextes_id',
		autoLoad: false,
		fields: [
			{name: 'RlsDesctextes_id',  type:'int'},
			{name: 'RlsDesctextes_Code',  type:'string'}
		],
		sortInfo: {
			field: 'RlsDesctextes_Code'
		}
	}),
	triggerAction: 'all',
	editable: true,
	displayField: 'RlsDesctextes_Code',
	valueField: 'RlsDesctextes_id',
	fieldLabel: langs('Фармдействие'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{RlsDesctextes_Code}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwRlsDesctextesCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swrlsdesctextescombo', sw.Promed.SwRlsDesctextesCombo);

sw.Promed.SwRlsClspharmagroupCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'RlsPharmagroup_id',
	anchor: '80%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'rls_Clspharmagroup',
		key: 'RlsPharmagroup_id',
		autoLoad: false,
		fields: [
			{name: 'RlsPharmagroup_id',  type:'int'},
			{name: 'RlsPharmagroup_Name',  type:'string'}
		],
		sortInfo: {
			field: 'RlsPharmagroup_Name'
		}
	}),
	triggerAction: 'all',
	editable: true,
	displayField: 'RlsPharmagroup_Name',
	valueField: 'RlsPharmagroup_id',
	fieldLabel: langs('Фармгруппа'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{RlsPharmagroup_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwRlsClspharmagroupCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swrlsclspharmagroupcombo', sw.Promed.SwRlsClspharmagroupCombo);

sw.Promed.SwRlsClspharmagroupRemoteCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: '?c=Rls&m=GetRlsPharmagroupList',
		key: 'RlsPharmagroup_id',
		autoLoad: false,
		fields: [
			{name: 'RlsPharmagroup_id',  type:'int'},
			{name: 'RlsPharmagroup_Name',  type:'string'}
		]
	}),
	hiddenName: 'RlsClsatc_id',
	triggerAction: 'all',
	editable: true,
	displayField: 'RlsPharmagroup_Name',
	valueField: 'RlsPharmagroup_id',
	fieldLabel: langs('Фармгруппа'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
		'{RlsPharmagroup_Name}'+
		'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwRlsClspharmagroupRemoteCombo.superclass.initComponent.apply(this, arguments);

		this.rawValue = '';
		this.addListener('select', function(combo, record, index) {
			var name = record.get('RlsPharmagroup_Name');
			var regexp = null;

			regexp = new RegExp('<[^>]+>','g');
			name = name.replace(regexp, '');
			regexp = new RegExp('&[^;]+;','g');
			name = name.replace(regexp, function(chr) {
				return htmlentities.decode(chr);
			});

			this.rawValue = name;
			this.setRawValue(name);
		},this);

		this.addListener('blur', function(combo) {
			this.setRawValue(this.rawValue);
		},this);
	}
});
Ext.reg('swrlsclspharmagroupremotecombo', sw.Promed.SwRlsClspharmagroupRemoteCombo);

sw.Promed.SwRlsClsPhGrLimpCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'RlsClsPhGrLimp_id',
	anchor: '80%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'rls_ClsPhGrLimp',
		key: 'RlsClsPhGrLimp_id',
		autoLoad: false,
		fields: [
			{name: 'RlsClsPhGrLimp_id',  type:'int'},
			{name: 'RlsClsPhGrLimp_pid',  type:'int'},
			{name: 'RlsClsPhGrLimp_Name',  type:'string'}
		],
		sortInfo: {
			field: 'RlsClsPhGrLimp_Name'
		}
	}),
	triggerAction: 'all',
	editable: true,
	displayField: 'RlsClsPhGrLimp_Name',
	valueField: 'RlsClsPhGrLimp_id',
	fieldLabel: langs('Фармгруппа ЖНВЛС'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
		'{RlsClsPhGrLimp_Name}'+
		'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwRlsClsPhGrLimpCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swrlsclsphgrlimpcombo', sw.Promed.SwRlsClsPhGrLimpCombo);

sw.Promed.SwRlsClsiicCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'RlsClsiic_id',
	anchor: '80%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'rls_Clsiic',
		key: 'RlsClsiic_id',
		autoLoad: false,
		fields: [
			{name: 'RlsClsiic_id',  type:'int'},
			{name: 'RlsClsiic_Name',  type:'string'}
		],
		sortInfo: {
			field: 'RlsClsiic_Name'
		}
	}),
	triggerAction: 'all',
	editable: true,
	displayField: 'RlsClsiic_Name',
	valueField: 'RlsClsiic_id',
	fieldLabel: langs('Нозология (МКБ-10)'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{RlsClsiic_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwRlsClsiicCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swrlsclsiiccombo', sw.Promed.SwRlsClsiicCombo);

sw.Promed.SwRlsClsatcCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'RlsClsatc_id',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'rls_Clsatc',
		key: 'RlsClsatc_id',
		autoLoad: false,
		fields: [
			{name: 'RlsClsatc_id',  type:'int'},
			{name: 'RlsClsatc_Name',  type:'string'}
		],
		sortInfo: {
			field: 'RlsClsatc_Name'
		}
	}),
	triggerAction: 'all',
	editable: true,
	displayField: 'RlsClsatc_Name',
	valueField: 'RlsClsatc_id',
	fieldLabel: langs('АТХ'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{RlsClsatc_Name}&nbsp;',
		'</div></tpl>'
	),
	initComponent: function() {
		if (Ext.isEmpty(this.width) && Ext.isEmpty(this.anchor)) {
			this.anchor = '80%';
		}
		sw.Promed.SwRlsClsatcCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swrlsclsatccombo', sw.Promed.SwRlsClsatcCombo);

sw.Promed.SwRlsClsatcRemoteCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: '?c=Rls&m=GetRlsAtxList',
		key: 'RlsClsatc_id',
		autoLoad: false,
		fields: [
			{name: 'RlsClsatc_id',  type:'int'},
			{name: 'RlsClsatc_Name',  type:'string'}
		]
	}),
	hiddenName: 'RlsClsatc_id',
	triggerAction: 'all',
	editable: true,
	displayField: 'RlsClsatc_Name',
	valueField: 'RlsClsatc_id',
	fieldLabel: langs('АТХ'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
		'{RlsClsatc_Name}'+
		'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwRlsClsatcRemoteCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swrlsclsatcremotecombo', sw.Promed.SwRlsClsatcRemoteCombo);

sw.Promed.SwLisOrganizationCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: '?c=Organization&m=loadLisOrganizationList',
		key: 'Organization_id',
		autoLoad: false,
		fields: [
			{name: 'Organization_id',  type:'int'},
			{name: 'Organization_Code',  type:'int'},
			{name: 'Organization_Name',  type:'string'}
		],
		sortInfo: {
			field: 'Organization_Name'
		}
	}),
	hiddenName: 'Organization_id',
	triggerAction: 'all',
	editable: true,
	displayField: 'Organization_Name',
	valueField: 'Organization_id',
	fieldLabel: langs('Организация в ЛИС'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
		'<font color="red">{Organization_Code}</font>&nbsp;{Organization_Name}'+
		'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwLisOrganizationCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swlisorganizationcombo', sw.Promed.SwLisOrganizationCombo);

sw.Promed.SwRlsClsdrugformsCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'RlsClsdrugforms_id',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'rls_Clsdrugforms',
		key: 'RlsClsdrugforms_id',
		autoLoad: false,
		fields: [
			{name: 'RlsClsdrugforms_id',  type:'int'},
			{name: 'RlsClsdrugforms_Name',  type:'string'}
		],
		sortInfo: {
			field: 'RlsClsdrugforms_Name'
		}
	}),
	triggerAction: 'all',
	editable: true,
	displayField: 'RlsClsdrugforms_Name',
	valueField: 'RlsClsdrugforms_id',
	fieldLabel: langs('Лекарственная форма'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{RlsClsdrugforms_Name}&nbsp;'+
			'</div></tpl>',
	initComponent: function() {
		if (Ext.isEmpty(this.width) && Ext.isEmpty(this.anchor)) {
			this.anchor = '80%';
		}
		sw.Promed.SwRlsClsdrugformsCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swrlsclsdrugformscombo', sw.Promed.SwRlsClsdrugformsCombo);

sw.Promed.SwNTFRCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'RlsClsntfr_id',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'rls_Clsntfr',
		key: 'RlsClsntfr_id',
		autoLoad: false,
		listeners: {
			load: function(s) {
				s.sortData('RlsClsntfr_Name');
			}
		},
		fields: [
			{name: 'RlsClsntfr_id',  type:'int'},
			{name: 'RlsClsntfr_pid',  type:'int'},
			{name: 'RlsClsntfr_Name',  type:'string'}
		],
		sortInfo: {
			field: 'RlsClsntfr_Name'
		}
	}),
	triggerAction: 'all',
	editable: true,
	minChars: 3,
	ctxSerach: true,
	displayField: 'RlsClsntfr_Name',
	valueField: 'RlsClsntfr_id',
	fieldLabel: 'Класс НТФР',
	tpl: '<tpl for="."><div class="x-combo-list-item" style="padding-left:{[values.RlsClsntfr_pid>3?"20":"0"]}px">'+
				'{RlsClsntfr_Name}&nbsp;'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwNTFRCombo.superclass.initComponent.apply(this, arguments);
		this.getStore().sortData = function (f, direction){
	        direction = direction || 'ASC';
	        var st = this.fields.get(f).sortType;
	     	var multipleSortInfo = this.fields.get(f).multipleSortInfo;
	     	var caseInsensitively = this.fields.get(f).caseInsensitively;
			if (typeof direction == 'object') {
				multipleSortInfo = direction;
				direction = 'ASC';
			}
	        var fn = function(r1, r2){
	            var v1 = st(r1.data['RlsClsntfr_Name']), v2 = st(r2.data['RlsClsntfr_Name']);
	            var v1id = r1.data.RlsClsntfr_id, v2id = r2.data.RlsClsntfr_id;
	            var v1pid = r1.data.RlsClsntfr_pid, v2pid = r2.data.RlsClsntfr_pid;
				v1 = v1.toLowerCase();
				v2 = v2.toLowerCase();

				// сравниваем конечные пункты
				if(v1pid>3 && v2pid>3){
					if(v1pid == v2pid){
						var ret = v1 > v2 ? 1 : (v1 < v2 ? -1 : 0);
						return ret;
					}
					var ret = v1pid > v2pid ? 1 : (v1pid < v2pid ? -1 : 0);
					return ret;
				} else if(v1pid == 2 && v2pid == 2){
					var ret = v1 > v2 ? 1 : (v1 < v2 ? -1 : 0);
					return ret;
				} else if(v1pid == 3 && v2pid == 3){
					var ret = v1 > v2 ? 1 : (v1 < v2 ? -1 : 0);
					return ret;
				}

				if(v1pid > v2pid){
					if(v1id < 196 && v1id > v2id){
						return -1;
					}
					return 1;
				} else if(v1pid < v2pid){
					if(v1id < 196 && v1id > v2id){
						return 1;
					}
					return -1;
				}

	            var ret = v1 > v2 ? 1 : (v1 < v2 ? -1 : 0);
	            
	            return ret;
	        };
	        this.data.sort(direction, fn);
	        if(this.snapshot && this.snapshot != this.data){
	            this.snapshot.sort(direction, fn);
	        }
	    };
	}
});
Ext.reg('swntfrcombo', sw.Promed.SwNTFRCombo);

sw.Promed.SwFirmsCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	anchor: '100%',
	store: new Ext.data.Store({
		autoLoad: false,
		listeners: {
			load: function(s) {
				var c = s.ownerCt;
				if(s.getCount() == 0) {
					c.reset();
					return false;
				}
			}
		},
		reader: new Ext.data.JsonReader({
			id: 'FIRMS_ID'
		}, [
			{ mapping: 'FIRMS_ID', name: 'FIRMS_ID', type: 'int' },
			{ mapping: 'FIRMS_NAME', name: 'FIRMS_NAME', type: 'string'	}
		]),
		url: '/?c=Rls&m=getFirm',
		baseParams:{forCombo:1}
	}),
	triggerConfig:	{
		tag:'span', cls:'x-form-twin-triggers', cn:[
		{tag: "img", src: Ext.BLANK_IMAGE_URL, cls: "x-form-trigger x-form-select-trigger"},
		{tag: "img", src: Ext.BLANK_IMAGE_URL, cls: "x-form-trigger x-form-search-trigger"}
	]},
	doQuery: function(q, fA){
		this.getStore().baseParams = {forCombo:1};
		this.getStore().baseParams[this.displayField] = q;
		this.getStore().load();
	},
	emptyText: langs('Введите наименование...'),
	triggerAction: 'none',
	valueField: 'FIRMS_ID',
	displayField: 'FIRMS_NAME',
	hiddenName: 'FIRMS_ID',
	allowBlank: false,
	fieldLabel: langs('Производитель и упаковщик'),
	initComponent: function() {
		sw.Promed.SwFirmsCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swfirmscombo', sw.Promed.SwFirmsCombo);
sw.Promed.SwFirmsCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwFirmsCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwFirmsCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwFirmsCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwFirmsCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwFirmsCombo.prototype.onTrigger2Click = function(){
	var c = this;
	getWnd('swRlsFirmsSearchWindow').show({
		onSelect: function(data){
			c.getStore().removeAll();
			c.focus(true);
			c.getStore().baseParams = {FIRMS_ID: data[c.valueField]};
			c.getStore().load({
				callback: function(){
					c.setValue(data[c.valueField]);
					c.collapse();
					c.focus(true, 100);
				}
			});
		}
	});
};


sw.Promed.TripleTriggerFieldForFirms = Ext.extend(Ext.form.TriggerField, {
	initComponent : function(){
		sw.Promed.TripleTriggerFieldForFirms.superclass.initComponent.call(this);
		
		this.trigger1Class = 'x-form-select-trigger';
		this.trigger2Class = 'x-form-search-trigger';
		this.trigger3Class = 'x-form-equil-trigger';
		
		this.triggerConfig = {
			tag:'span', cls:'x-form-twin-triggers', cn:[
			{tag: "img", src: Ext.BLANK_IMAGE_URL, cls: "x-form-trigger " + this.trigger1Class},
			{tag: "img", src: Ext.BLANK_IMAGE_URL, cls: "x-form-trigger " + this.trigger2Class},
			{tag: "img", src: Ext.BLANK_IMAGE_URL, cls: "x-form-trigger " + this.trigger3Class}
		]};
	},
	onTrigger1Click : Ext.emptyFn,
	onTrigger2Click : Ext.emptyFn,
	onTrigger3Click : Ext.emptyFn
});

Ext.reg('swtripletriggerfieldforfirms', sw.Promed.TripleTriggerFieldForFirms);

sw.Promed.SwTripleFirmsCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	anchor: '100%',
	store: new Ext.data.Store({
		autoLoad: false,
		listeners: {
			load: function(s) {
				var c = s.ownerCt;
				if(s.getCount() == 0) {
					c.reset();
					return false;
				}
			}
		},
		reader: new Ext.data.JsonReader({
			id: 'FIRMS_ID'
		}, [
			{ mapping: 'FIRMS_ID', name: 'FIRMS_ID', type: 'int' },
			{ mapping: 'FIRMS_NAME', name: 'FIRMS_NAME', type: 'string'	}
		]),
		url: '/?c=Rls&m=getFirm',
		baseParams:{forCombo:1}
	}),
	doQuery: function(q, fA){
		this.getStore().baseParams = {forCombo:1};
		this.getStore().baseParams[this.displayField] = q;
		this.getStore().load();
	},
	emptyText: langs('Введите наименование...'),
	triggerAction: 'none',
	valueField: 'FIRMS_ID',
	displayField: 'FIRMS_NAME',
	hiddenName: 'FIRMS_ID',
	allowBlank: false,
	fieldLabel: langs('Производитель и упаковщик'),
	initComponent: function() {
		sw.Promed.SwTripleFirmsCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swtriplefirmscombo', sw.Promed.SwTripleFirmsCombo);
sw.Promed.SwTripleFirmsCombo.prototype.initComponent = sw.Promed.TripleTriggerFieldForFirms.prototype.initComponent;
sw.Promed.SwTripleFirmsCombo.prototype.getTrigger = sw.Promed.TripleTriggerField.prototype.getTrigger;
sw.Promed.SwTripleFirmsCombo.prototype.initTrigger = sw.Promed.TripleTriggerField.prototype.initTrigger;
sw.Promed.SwTripleFirmsCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwTripleFirmsCombo.prototype.onTrigger2Click = function(){
	var c = this;
	getWnd('swRlsFirmsSearchWindow').show({
		onSelect: function(data){
			c.getStore().removeAll();
			c.focus(true);
			c.getStore().baseParams = {FIRMS_ID: data[c.valueField]};
			c.getStore().load({
				callback: function(){
					c.setValue(data[c.valueField]);
					c.collapse();
					c.focus(true, 100);
				}
			});
		}
	});
};
sw.Promed.SwTripleFirmsCombo.prototype.onTrigger3Click = function(){return true;};

sw.Promed.SwDrugNonpropNamesCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
    hiddenName: 'DrugNonpropNames_id',
    valueField: 'DrugNonpropNames_id',
    displayField: 'DrugNonpropNames_Name',
    fieldLabel: langs('Непатентованное наименование'),
    allowBlank: true,
    editable: true,
    minChars: 3,
    width: 200,
    tpl: new Ext.XTemplate(
        '<tpl for="."><div class="x-combo-list-item">',
        '{DrugNonpropNames_Name}&nbsp;',
        '</div></tpl>'
    ),
    store: new Ext.data.Store({
		autoLoad: false,
		reader: new Ext.data.JsonReader({
			id: 'DrugNonpropNames_id'
		},
		[
			{name: 'DrugNonpropNames_Name', mapping: 'DrugNonpropNames_Name'},
			{name: 'DrugNonpropNames_id', mapping: 'DrugNonpropNames_id'}
		]),
		listeners: {
			'load': function(store) {
				
			}.createDelegate(this)
		},
		url: '/?c=DrugNonpropNames&m=loadDrugNonpropNamesList',
		baseParams: {forCombo:1}
	}),
    initComponent: function() {
		sw.Promed.SwDrugNonpropNamesCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdrugnonpropnamescombo', sw.Promed.SwDrugNonpropNamesCombo);
sw.Promed.SwDrugNonpropNamesCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwDrugNonpropNamesCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwDrugNonpropNamesCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwDrugNonpropNamesCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwDrugNonpropNamesCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwDrugNonpropNamesCombo.prototype.onTrigger2Click = function() {
	var combo = this;
	var params = {
		mode: 'search',
		onSelect: function(data){
			if(combo.getStore().getById(data)){
				combo.setValue(data);
			} else {
				combo.getStore().load({callback:function(){
					if(combo.getStore().getById(data)){
						combo.setValue(data);
					} else {
						combo.setValue('');
					}
				}});
			}
		}
	};
	getWnd('swDrugNonpropNamesViewWindow').show(params);
};

sw.Promed.SwRlsClsMzPhgroupCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'RlsClsMzPhgroup_id',
	anchor: '80%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'rls_ClsMzPhgroup',
		key: 'RlsClsMzPhgroup_id',
		autoLoad: false,
		fields: [
			{name: 'RlsClsMzPhgroup_id',  type:'int'},
			{name: 'RlsClsMzPhgroup_Name',  type:'string'}
		],
		sortInfo: {
			field: 'RlsClsMzPhgroup_Name'
		}
	}),
	triggerAction: 'all',
	editable: true,
	displayField: 'RlsClsMzPhgroup_Name',
	valueField: 'RlsClsMzPhgroup_id',
	fieldLabel: langs('ФТГ'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
		'{RlsClsMzPhgroup_Name}'+
		'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwRlsClsMzPhgroupCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swrlsclsmzphgroupcombo', sw.Promed.SwRlsClsMzPhgroupCombo);

sw.Promed.SwRlsClsMzPhgroupRemoteCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: '?c=Rls&m=GetRlsClsMzPhgroupList',
		key: 'RlsClsMzPhgroup_id',
		autoLoad: false,
		fields: [
			{name: 'RlsClsMzPhgroup_id',  type:'int'},
			{name: 'RlsClsMzPhgroup_Name',  type:'string'}
		]
	}),
	hiddenName: 'RlsClsMzPhgroup_id',
	triggerAction: 'all',
	editable: true,
	displayField: 'RlsClsMzPhgroup_Name',
	valueField: 'RlsClsMzPhgroup_id',
	fieldLabel: langs('ФТГ'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
		'{RlsClsMzPhgroup_Name}'+
		'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwRlsClsMzPhgroupRemoteCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swrlsclsmzphgroupremotecombo', sw.Promed.SwRlsClsMzPhgroupRemoteCombo);

sw.Promed.SwRlsStronggroupsCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'RlsStronggroups_id',
	anchor: '80%',
	onLoadStore: Ext.emptyFn,
	triggerAction: 'all',
	editable: true,
	displayField: 'RlsStronggroups_Name',
	valueField: 'RlsStronggroups_id',
	fieldLabel: langs('Сильнодействующие'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
		'{RlsStronggroups_Name}'+
		'</div></tpl>',
	initComponent: function() {
		this.store = new Ext.db.AdapterStore({
			dbFile: 'Promed.db',
			tableName: 'rls_Stronggroups',
			key: 'RlsStronggroups_id',
			autoLoad: false,
			fields: [
				{name: 'RlsStronggroups_id',  type:'int'},
				{name: 'RlsStronggroups_Name',  type:'string'}
			],
			listeners: {
				'load': function(store) {
					this.onLoadStore(store);
				}.createDelegate(this)
			},
			sortInfo: {
				field: 'RlsStronggroups_Name'
			}
		});

		sw.Promed.SwRlsStronggroupsCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swrlsstronggroupscombo', sw.Promed.SwRlsStronggroupsCombo);

sw.Promed.SwRlsNarcogroupsCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'RlsNarcogroups_id',
	anchor: '80%',
	onLoadStore: Ext.emptyFn,
	triggerAction: 'all',
	editable: true,
	displayField: 'RlsNarcogroups_Name',
	valueField: 'RlsNarcogroups_id',
	fieldLabel: langs('Наркотические'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
		'{RlsNarcogroups_Name}'+
		'</div></tpl>',
	initComponent: function() {
		this.store = new Ext.db.AdapterStore({
			dbFile: 'Promed.db',
			tableName: 'rls_Narcogroups',
			key: 'RlsNarcogroups_id',
			autoLoad: false,
			fields: [
				{name: 'RlsNarcogroups_id',  type:'int'},
				{name: 'RlsNarcogroups_Name',  type:'string'}
			],
			listeners: {
				'load': function(store) {
					this.onLoadStore(store);
				}.createDelegate(this)
			},
			sortInfo: {
				field: 'RlsNarcogroups_Name'
			}
		}),

		sw.Promed.SwRlsNarcogroupsCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swrlsnarcogroupscombo', sw.Promed.SwRlsNarcogroupsCombo);

sw.Promed.SwRlsTorgNamesFilterCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'RlsTorgNamesFilter_type',
	anchor: '100%',
	store: new Ext.data.SimpleStore(
	{
		key: 'RlsTorgNamesFilter_type',
		autoLoad: false,
		setValue: "0",
		fields:
		[
			{name:'RlsTorgNamesFilter_type', type:'int'},
			{name:'RlsTorgNamesFilter_name', type:'string'}
		],
		data: [['0',langs('Все торговые названия')],
				['1',langs('Имеющие фото')],
				['2',langs('Жизненноважные')],
				['3',langs('ЛЛО')],
				['4',langs('Безрецептурные')],
				['5',langs('Лекарственные средства')],
				['6',langs('БАД(Биологически активные добавки)')]
			]
	}),
	triggerAction: 'all',
	editable: false,
	displayField: 'RlsTorgNamesFilter_name',
	valueField: 'RlsTorgNamesFilter_type',
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
					'{RlsTorgNamesFilter_name}'+
					'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwRlsTorgNamesFilterCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swrlstorgnamesfiltercombo', sw.Promed.SwRlsTorgNamesFilterCombo);


sw.Promed.SwRlsSynonimsCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'RlsSynonim_id',
	anchor: '80%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'rls_Tradenames',
		key: 'RlsSynonim_id',
		autoLoad: false,
		fields: [
			{name: 'RlsSynonim_id',  type:'int'},
			{name: 'RlsTorg_Name',  type:'string'}
		],
		sortInfo: {
			field: 'RlsTorg_Name'
		}
	}),
	triggerAction: 'all',
	editable: true,
	displayField: 'RlsTorg_Name',
	valueField: 'RlsSynonim_id',
	fieldLabel: langs('Синоним'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{RlsTorg_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwRlsSynonimsCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swrlssynonimscombo', sw.Promed.SwRlsSynonimsCombo);

sw.Promed.SwPrepSeriesCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	hiddenName: 'PrepSeries_id',
	store: new Ext.data.JsonStore({
		url: '/?c=RlsDrug&m=loadPrepSeriesList',
		key: 'PrepSeries_id',
		autoLoad: false,
		fields: [
			{name: 'PrepSeries_id', type:'int'},
			{name: 'Prep_id', type:'int'},
			{name: 'PrepSeries_Ser', type: 'string'},
			{name: 'PrepSeries_GodnDate', type: 'string'}
		],
		sortInfo: {
			field: 'PrepSeries_Ser'
		}
	}),
	minChars: 1,
	triggerAction: 'all',
	editable: true,
	displayField: 'PrepSeries_Ser',
	valueField: 'PrepSeries_id',
	fieldLabel: langs('Серия препарата'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{PrepSeries_Ser}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwPrepSeriesCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swprepseriescombo', sw.Promed.SwPrepSeriesCombo);


sw.Promed.SwPrepBlockCauseCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'PrepBlockCause_id',
	store: new Ext.data.JsonStore({
		url: '/?c=RlsDrug&m=loadPrepBlockCauseList',
		key: 'PrepBlockCause_id',
		autoLoad: false,
		fields: [
			{name: 'PrepBlockCause_id', type:'int'},
			{name: 'PrepBlockCause_Code', type:'int'},
			{name: 'PrepBlockCause_Name', type: 'string'}
		],
		sortInfo: {
			field: 'PrepBlockCause_Code'
		}
	}),
	triggerAction: 'all',
	editable: true,
	codeField: 'PrepBlockCause_Code',
	displayField: 'PrepBlockCause_Name',
	valueField: 'PrepBlockCause_id',
	fieldLabel: langs('Причина блокировки ЛС'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{PrepBlockCause_Code}</font>&nbsp;{PrepBlockCause_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwPrepBlockCauseCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swprepblockcausecombo', sw.Promed.SwPrepBlockCauseCombo);


sw.Promed.SwTradenamesCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'Tradenames_id',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'rls_Tradenames',
		key: 'Tradenames_id',
		autoLoad: false,
		fields: [
			{name: 'Tradenames_id',  type:'int'},
			{name: 'RlsTradenames_id',  type:'int'},
			{name: 'RlsTorg_Name',  type:'string'}
		],
		sortInfo: {
			field: 'RlsTorg_Name'
		}
	}),
	triggerAction: 'all',
	editable: true,
	displayField: 'RlsTorg_Name',
	valueField: 'RlsTradenames_id',
	fieldLabel: langs('Торговое наименование'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{RlsTorg_Name}&nbsp;'+
			'</div></tpl>',
	initComponent: function() {
		if (Ext.isEmpty(this.width) && Ext.isEmpty(this.anchor)) {
			this.anchor = '80%';
		}

		sw.Promed.SwTradenamesCombo.superclass.initComponent.apply(this, arguments);

		this.addListener('select', function(combo, record, index) {
			var rls_torg_name = record.get('RlsTorg_Name');
			var regexp = null;

			regexp = new RegExp('<[^>]+>','g');
			rls_torg_name = rls_torg_name.replace(regexp, '');
			regexp = new RegExp('&[^;]+;','g');
			rls_torg_name = rls_torg_name.replace(regexp, function(chr) {
				return htmlentities.decode(chr);
			});

			this.setRawValue(rls_torg_name);
		},this);
	}
});
Ext.reg('swrlstradenamescombo', sw.Promed.SwTradenamesCombo);

sw.Promed.SwOkpdCombo = Ext.extend(Ext.form.ComboBox, {
	store: new Ext.data.JsonStore({
		url: '/?c=DrugNomen&m=loadOkpdList',
		key: 'Okpd_id',
		autoLoad: false,
		fields: [
			{name: 'Okpd_id', type:'int'},
			{name: 'Okpd_Code', type:'string'},
			{name: 'Okpd_Name', type: 'string'}
		],
		sortInfo: {
			field: 'Okpd_Code'
		}
	}),
	triggerAction: 'all',
	forceSelection: true,
	resizable: true,
	selectOnFocus: true,
	mode: 'remote',
	minChars: 3,
	displayField:'Okpd_Name',
	hiddenName: 'Okpd_id',
	valueField: 'Okpd_id',
	editable: true,
	enableKeyEvents: true,
	fieldLabel: langs('ОКПД'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
		'<font color="red">{Okpd_Code}</font>&nbsp;{Okpd_Name}'+
		'</div></tpl>',

	initComponent: function() {
		if ( this.width < 500 || typeof(this.width)=='undefined' )
			this.listWidth = 300;
		sw.Promed.SwOkpdCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swokpdcombo', sw.Promed.SwOkpdCombo);

/**
 * Комбо для синонимов записи глоссария.
 */
sw.Promed.SwGlossarySynonymCombo = Ext.extend(Ext.form.ComboBox, {
	width        : 500,
	listWidth    : 500,
	editable     : true,
	hiddenName   : 'GlossarySynonym_id',
	displayField : 'GlossarySynonym_Name',
	valueField   : 'GlossarySynonym_id',
	fieldLabel   : langs('Синоним'),
	enableKeyEvents: true,
	resizable      : true,
	queryDelay     : 300,
	selectOnFocus  : true,
	tpl            : '<tpl for="."><div class="x-combo-list-item">{GlossarySynonym_Name}</div></tpl>',
	emptyText    : langs('Введите часть слова ... (не менее трех символов)'),
	queryParam   : 'GlossarySynonym_Name',
	minChars     : 3,
	mode         : 'remote',
	triggerClass: 'x-form-search-trigger',
	//trigger1Class: 'x-form-search-trigger',
	forceSelection : true,
	loadingText    : langs('Идет поиск...'),

	initComponent: function() {
		Ext.form.ComboBox.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			url: '/?c=Glossary&m=getSynonymList',
			editable: false,
			key: 'GlossarySynonym_id',
			autoLoad: false,
			params: {object: 'GlossarySynonym', order_by_field: 'GlossarySynonym_Name'},
			fields: [
				{name: 'GlossarySynonym_id',    type:'int'},
				{name: 'GlossaryTagType_id',    type:'int'},
				{name: 'pmUser_did',    type:'int'},
				{name: 'GlossarySynonym_Name',  type:'string'}
			],
			sortInfo: {
				field: 'GlossarySynonym_Name'
			}
		});
	},
	listeners : {
		'beforequery': function(q) {
			delete q.combo.lastQuery;
		},
		'select': function(combo, record, index) {
			combo.setRawValue(record.get('GlossarySynonym_Name'));
		},
		'keydown': function(inp, e) {
			if ( e.getKey() == e.DELETE)
			{
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if (inp.onClearValue)
					this.onClearValue();
				e.stopEvent();
				return true;
			}

			if (e.getKey() == e.F4)
			{
				this.onTrigger1Click();
			}
		}
	},
	onTrigger1Click: function() {
		var combo = this;
		if (!this.formList)
		{
			this.formList = new sw.Promed.swListSearchWindow({
				title: langs('Поиск и выбор синонима'),
				id: 'GlossarySynonymListWindow',
				object: 'GlossarySynonym',
				store: this.getStore()
			});
		}
		this.formList.List.loadData(null);
		this.formList.show({
			onSelect: function(data)
			{
				combo.getStore().removeAll();
				combo.getStore().loadData([data]);
				combo.setValue(data[combo.valueField]);
				var index = combo.getStore().find('GlossarySynonym_id', data.GlossarySynonym_id);
				if (index == -1)
				{
					return false;
				}
				var record = combo.getStore().getAt(index);
				combo.fireEvent('select', combo, record, 0)
			},
			onHide: function()
			{
				//combo.focus(false);
			}
		});
	}
});

Ext.reg('swglossarysynonymcombo', sw.Promed.SwGlossarySynonymCombo);





sw.Promed.SwExpertiseNameTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'ExpertiseNameType_id',
	anchor: '100%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'ExpertiseNameType',
		key: 'ExpertiseNameType_id',
		autoLoad: false,
		fields: [
			{name: 'ExpertiseNameType_id',  type:'int'},
			{name: 'ExpertiseNameType_Code',  type:'int'},
			{name: 'ExpertiseNameType_SysNick',  type:'string'},
			{name: 'ExpertiseNameType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'ExpertiseNameType_id'
		}
	}),
	triggerAction: 'all',
	displayField: 'ExpertiseNameType_Name',
	valueField: 'ExpertiseNameType_id',
	fieldLabel: langs('Вид экспертизы'),
	tpl: '<tpl for="."><div class="x-combo-list-item"><table height="20" style="border: 0;"><tr>'+
			'<td width="50"><font style="color: red;">{ExpertiseNameType_SysNick}</font></td>'+
			'<td>{ExpertiseNameType_Name}</td>'+
			'</tr></table></div></tpl>',
	initComponent: function() {
		sw.Promed.SwExpertiseNameTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swexpertisenametypecombo', sw.Promed.SwExpertiseNameTypeCombo);

sw.Promed.SwExpertiseEventTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'ExpertiseEventType_id',
	anchor: '100%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'ExpertiseEventType',
		key: 'ExpertiseEventType_id',
		autoLoad: false,
		fields: [
			{name: 'ExpertiseEventType_id',  type:'int'},
			{name: 'ExpertiseEventType_Code',  type:'string'},
			{name: 'ExpertiseEventType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'ExpertiseEventType_id'
		}
	}),
	triggerAction: 'all',
	displayField: 'ExpertiseEventType_Name',
	valueField: 'ExpertiseEventType_id',
	fieldLabel: langs('Cлучай экспертизы'),
	tpl: '<tpl for="."><div class="x-combo-list-item"><table height="20" style="border: 0;"><tr>'+
			'<td>{ExpertiseEventType_Name}</td>'+
			'</tr></table></div></tpl>',
	initComponent: function() {
		sw.Promed.SwExpertiseEventTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swexpertiseeventtypecombo', sw.Promed.SwExpertiseEventTypeCombo);

sw.Promed.SwExpertiseEventTypeLinkCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'ExpertiseEventTypeLink_id',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'ExpertiseEventTypeLink',
		key: 'ExpertiseEventTypeLink_id',
		autoLoad: false,
		fields: [
			{name: 'ExpertiseEventTypeLink_id',  type:'int'},
			{name: 'ExpertiseNameType_id',  type:'int'},
			{name: 'ExpertiseEventType_id',  type:'int'},
			{name: 'ExpertiseEventType_Name',  type:'string'},
			{name: 'ExpertiseEventType_Code',  type:'int'}
		],
		sortInfo: {
			field: 'ExpertiseEventTypeLink_id'
		}
	}),
	triggerAction: 'all',
	displayField: 'ExpertiseEventType_Name',
	valueField: 'ExpertiseEventTypeLink_id',
	fieldLabel: langs('Cлучай экспертизы'),
	tpl: '<tpl for="."><div class="x-combo-list-item"><table height="20" style="border: 0;"><tr>'+
			'<td>{ExpertiseEventType_Name}</td>'+
			'</tr></table></div></tpl>',
	initComponent: function() {
		sw.Promed.SwExpertiseEventTypeLinkCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swexpertiseeventtypelinkcombo', sw.Promed.SwExpertiseEventTypeLinkCombo);

sw.Promed.SwPatientStatusTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'PatientStatusType_id',
	anchor: '100%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'PatientStatusType',
		key: 'PatientStatusType_id',
		autoLoad: false,
		fields: [
			{name: 'PatientStatusType_id',  type:'int'},
			{name: 'PatientStatusType_SysNick',  type:'string'},
			{name: 'PatientStatusType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'PatientStatusType_id'
		}
	}),
	triggerAction: 'all',
	displayField: 'PatientStatusType_Name',
	valueField: 'PatientStatusType_id',
	fieldLabel: langs('Cлучай экспертизы'),
	tpl: '<tpl for="."><div class="x-combo-list-item"><table height="20" style="border: 0;"><tr>'+
			'<td>{PatientStatusType_Name}</td>'+
			'</tr></table></div></tpl>',
	initComponent: function() {
		sw.Promed.SwPatientStatusTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swpatientstatustypecombo', sw.Promed.SwPatientStatusTypeCombo);

sw.Promed.SwCauseTreatmentTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'CauseTreatmentType_id',
	anchor: '100%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CauseTreatmentType',
		key: 'CauseTreatmentType_id',
		autoLoad: false,
		fields: [
			{name: 'CauseTreatmentType_id',  type:'int'},
			{name: 'CauseTreatmentType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CauseTreatmentType_id'
		}
	}),
	triggerAction: 'all',
	displayField: 'CauseTreatmentType_Name',
	valueField: 'CauseTreatmentType_id',
	fieldLabel: '',
	tpl: '<tpl for="."><div class="x-combo-list-item"><table height="20" style="border: 0;"><tr>'+
			'<td>{CauseTreatmentType_Name}</td>'+
			'</tr></table></div></tpl>',
	initComponent: function() {
		sw.Promed.SwCauseTreatmentTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcausetreatmenttypecombo', sw.Promed.SwCauseTreatmentTypeCombo);

sw.Promed.SwExpertiseNameSubjectTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'ExpertiseNameSubjectType_id',
	anchor: '100%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'ExpertiseNameSubjectType',
		key: 'ExpertiseNameSubjectType_id',
		autoLoad: false,
		fields: [
			{name: 'ExpertiseNameSubjectType_id',  type:'int'},
			{name: 'ExpertiseNameSubjectType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'ExpertiseNameSubjectType_id'
		}
	}),
	triggerAction: 'all',
	displayField: 'ExpertiseNameSubjectType_Name',
	valueField: 'ExpertiseNameSubjectType_id',
	fieldLabel: '',
	tpl: '<tpl for="."><div class="x-combo-list-item"><table height="20" style="border: 0;"><tr>'+
			'<td>{ExpertiseNameSubjectType_Name}</td>'+
			'</tr></table></div></tpl>',
	initComponent: function() {
		sw.Promed.SwExpertiseNameSubjectTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swexpertisenamesubjecttypecombo', sw.Promed.SwExpertiseNameSubjectTypeCombo);

sw.Promed.SwRecipientTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'RecipientType_id',
	anchor: '100%',
	onLoadStore: Ext.emptyFn,
	triggerAction: 'all',
	displayField: 'RecipientType_Name',
	valueField: 'RecipientType_id',
	fieldLabel: langs('Получатель'),
	tpl: '<tpl for="."><div class="x-combo-list-item"><table height="20" style="border: 0;"><tr>'+
			'<td>{RecipientType_Name}</td>'+
			'</tr></table></div></tpl>',
	initComponent: function() {
		sw.Promed.SwRecipientTypeCombo.superclass.initComponent.apply(this, arguments);

		var combo = this;

		combo.store = new Ext.db.AdapterStore({
			dbFile: 'Promed.db',
			tableName: 'RecipientType',
			key: 'RecipientType_id',
			autoLoad: false,
			fields: [
				{name: 'RecipientType_id',  type:'int'},
				{name: 'RecipientType_Name',  type:'string'}
			],
			sortInfo: {
				field: 'RecipientType_id'
			},
			listeners: {
				'load': function(store){
					combo.setValue(combo.getValue());
					combo.onLoadStore(store);
				}
			}
		});
	}
});
Ext.reg('swrecipienttypecombo', sw.Promed.SwRecipientTypeCombo);

sw.Promed.SwNoticeTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'NoticeType_id',
	anchor: '100%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'NoticeType',
		key: 'NoticeType_id',
		autoLoad: false,
		fields: [
			{name: 'NoticeType_id',  type:'int'},
			{name: 'NoticeType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'NoticeType_id'
		}
	}),
	triggerAction: 'all',
	displayField: 'NoticeType_Name',
	valueField: 'NoticeType_id',
	fieldLabel: '',
	tpl: '<tpl for="."><div class="x-combo-list-item"><table height="20" style="border: 0;"><tr>'+
			'<td>{NoticeType_Name}</td>'+
			'</tr></table></div></tpl>',
	initComponent: function() {
		sw.Promed.SwNoticeTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swnoticetypecombo', sw.Promed.SwNoticeTypeCombo);

/**
 * Вариант создания расписания 
 */
sw.Promed.SwScheduleCreationTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'ScheduleCreationType',
	anchor: '100%',
	store: new Ext.data.SimpleStore(
	{
		key: 'ScheduleCreationType',
		autoLoad: false,
		setValue: "1",
		fields:
		[
			{name:'ScheduleCreationType', type:'int'},
			{name:'ScheduleCreationTypeName', type:'string'}
		],
		data: [
				['1',langs('1. Задать новое расписание')],
				['2',langs('2. Скопировать существующее расписание')]
			]
	}),
	triggerAction: 'all',
	editable: false,
	displayField: 'ScheduleCreationTypeName',
	valueField: 'ScheduleCreationType',
	fieldLabel: langs('Вариант создания'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
					'{ScheduleCreationTypeName}'+
					'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwScheduleCreationTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swschedulecreationtypecombo', sw.Promed.SwScheduleCreationTypeCombo);

/**
 * Тип бирок 
 */
sw.Promed.SwTimetableTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	mode: 'remote',
	store: new sw.Promed.Store({
		url: '/?c=Reg&m=getTimetableTypeList',
		key: 'TimetableType_id',
		autoLoad: false,
		fields: [
			{name: 'TimetableType_id', type:'int'},
			{name: 'TimetableType_Name', type:'string'}
		]
	}),
	editable: false,
	triggerAction: 'all',
	hiddenName:'TimetableType_id',
	displayField:'TimetableType_Name',
	valueField: 'TimetableType_id',
	fieldLabel: langs('Тип бирки'),
	initComponent: function() {
		sw.Promed.SwTimetableTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swtimetabletypecombo', sw.Promed.SwTimetableTypeCombo);

sw.Promed.SwLearnGroupTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'LearnGroupType_id',
	anchor: '100%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'LearnGroupType',
		key: 'LearnGroupType_id',
		autoLoad: false,
		fields: [
			{name: 'LearnGroupType_id',  type:'int'},
			{name: 'LearnGroupType_Code', type:'int'},
			{name: 'LearnGroupType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'LearnGroupType_id'
		}
	}),
	triggerAction: 'all',
	displayField: 'LearnGroupType_Name',
	valueField: 'LearnGroupType_id',
	fieldLabel: '',
	tpl: '<tpl for="."><div class="x-combo-list-item"><table height="20" style="border: 0;"><tr>'+
			'<td>{LearnGroupType_Name}</td>'+
			'</tr></table></div></tpl>',
	initComponent: function() {
		sw.Promed.SwLearnGroupTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swlearngrouptypecombo', sw.Promed.SwLearnGroupTypeCombo);

sw.Promed.SwStateNormTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'StateNormType_id',
	anchor: '100%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'StateNormType',
		key: 'StateNormType_id',
		autoLoad: false,
		fields: [
			{name: 'StateNormType_id',  type:'int'},
			{name: 'StateNormType_Code', type:'int'},
			{name: 'StateNormType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'StateNormType_id'
		}
	}),
	triggerAction: 'all',
	displayField: 'StateNormType_Name',
	valueField: 'StateNormType_id',
	fieldLabel: '',
	tpl: '<tpl for="."><div class="x-combo-list-item"><table height="20" style="border: 0;"><tr>'+
			'<td>{StateNormType_Name}</td>'+
			'</tr></table></div></tpl>',
	initComponent: function() {
		sw.Promed.SwStateNormTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swstatenormtypecombo', sw.Promed.SwStateNormTypeCombo);

sw.Promed.SwMseDirectionAimTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'MseDirectionAimType_id',
	anchor: '100%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'MseDirectionAimType',
		key: 'MseDirectionAimType_id',
		autoLoad: false,
		fields: [
			{name: 'MseDirectionAimType_id',  type:'int'},
			{name: 'MseDirectionAimType_Code', type:'int'},
			{name: 'MseDirectionAimType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'MseDirectionAimType_id'
		}
	}),
	triggerAction: 'all',
	displayField: 'MseDirectionAimType_Name',
	valueField: 'MseDirectionAimType_id',
	fieldLabel: '',
	tpl: '<tpl for="."><div class="x-combo-list-item"><table height="20" style="border: 0;"><tr>'+
			'<td>{MseDirectionAimType_Name}</td>'+
			'</tr></table></div></tpl>',
	initComponent: function() {
		sw.Promed.SwMseDirectionAimTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swmsedirectionaimtypecombo', sw.Promed.SwMseDirectionAimTypeCombo);

sw.Promed.SwClinicalForecastTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'ClinicalForecastType_id',
	anchor: '100%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'ClinicalForecastType',
		key: 'ClinicalForecastType_id',
		autoLoad: false,
		fields: [
			{name: 'ClinicalForecastType_id',  type:'int'},
			{name: 'ClinicalForecastType_Code', type:'int'},
			{name: 'ClinicalForecastType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'ClinicalForecastType_id'
		}
	}),
	triggerAction: 'all',
	displayField: 'ClinicalForecastType_Name',
	valueField: 'ClinicalForecastType_id',
	fieldLabel: '',
	tpl: '<tpl for="."><div class="x-combo-list-item"><table height="20" style="border: 0;"><tr>'+
			'<td>{ClinicalForecastType_Name}</td>'+
			'</tr></table></div></tpl>',
	initComponent: function() {
		sw.Promed.SwClinicalForecastTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swclinicalforecasttypecombo', sw.Promed.SwClinicalForecastTypeCombo);

sw.Promed.SwClinicalPotentialTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'ClinicalPotentialType_id',
	anchor: '100%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'ClinicalPotentialType',
		key: 'ClinicalPotentialType_id',
		autoLoad: false,
		fields: [
			{name: 'ClinicalPotentialType_id',  type:'int'},
			{name: 'ClinicalPotentialType_Code', type:'int'},
			{name: 'ClinicalPotentialType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'ClinicalPotentialType_id'
		}
	}),
	triggerAction: 'all',
	displayField: 'ClinicalPotentialType_Name',
	valueField: 'ClinicalPotentialType_id',
	fieldLabel: '',
	tpl: '<tpl for="."><div class="x-combo-list-item"><table height="20" style="border: 0;"><tr>'+
			'<td>{ClinicalPotentialType_Name}</td>'+
			'</tr></table></div></tpl>',
	initComponent: function() {
		sw.Promed.SwClinicalPotentialTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swclinicalpotentialtypecombo', sw.Promed.SwClinicalPotentialTypeCombo);

sw.Promed.SwInvalidGroupTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'InvalidGroupType_id',
	anchor: '100%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'InvalidGroupType',
		key: 'InvalidGroupType_id',
		autoLoad: false,
		fields: [
			{name: 'InvalidGroupType_id',  type:'int'},
			{name: 'InvalidGroupType_Code', type:'int'},
			{name: 'InvalidGroupType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'InvalidGroupType_id'
		}
	}),
	triggerAction: 'all',
	displayField: 'InvalidGroupType_Name',
	valueField: 'InvalidGroupType_id',
	fieldLabel: '',
	tpl: '<tpl for="."><div class="x-combo-list-item"><table height="20" style="border: 0;"><tr>'+
			'<td>{InvalidGroupType_Name}</td>'+
			'</tr></table></div></tpl>',
	initComponent: function() {
		sw.Promed.SwInvalidGroupTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swinvalidgrouptypecombo', sw.Promed.SwInvalidGroupTypeCombo);

// Класс комбобокса для справочника тип организации
/*
sw.Promed.SwOrgTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OrgType',
		key: 'OrgType_id',
		autoLoad: false,
		fields: [
			{name: 'OrgType_id',    type:'int'},
			{name: 'OrgType_Code', type:'int'},
			{name: 'OrgType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OrgType_Code'
		}
	}),
	codeField:'OrgType_Code',
	displayField:'OrgType_Name',
	valueField: 'OrgType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OrgType_Code}</font>&nbsp;{OrgType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOrgTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('sworgtypecombo', sw.Promed.SwOrgTypeCombo);
*/

// Класс комбобокса для справочника "Госпитализирован"
sw.Promed.SwCrazyHospTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazyHospType',
		key: 'CrazyHospType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazyHospType_id',    type:'int'},
			{name: 'CrazyHospType_Code', type:'int'},
			{name: 'CrazyHospType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazyHospType_Code'
		}
	}),
	codeField:'CrazyHospType_Code',
	displayField:'CrazyHospType_Name',
	valueField: 'CrazyHospType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazyHospType_Code}</font>&nbsp;{CrazyHospType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazyHospTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazyhosptypecombo', sw.Promed.SwCrazyHospTypeCombo);

// Класс комбобокса для справочника "Поступление"
sw.Promed.SwCrazySupplyTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazySupplyType',
		key: 'CrazySupplyType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazySupplyType_id',    type:'int'},
			{name: 'CrazySupplyType_Code', type:'int'},
			{name: 'CrazySupplyType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazySupplyType_Code'
		}
	}),
	codeField:'CrazySupplyType_Code',
	displayField:'CrazySupplyType_Name',
	valueField: 'CrazySupplyType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazySupplyType_Code}</font>&nbsp;{CrazySupplyType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazySupplyTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazysupplytypecombo', sw.Promed.SwCrazySupplyTypeCombo);

// Класс комбобокса для справочника "Кем направлен"
sw.Promed.SwCrazyDirectTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazyDirectType',
		key: 'CrazyDirectType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazyDirectType_id',    type:'int'},
			{name: 'CrazyDirectType_Code', type:'int'},
			{name: 'CrazyDirectType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazyDirectType_Code'
		}
	}),
	codeField:'CrazyDirectType_Code',
	displayField:'CrazyDirectType_Name',
	valueField: 'CrazyDirectType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazyDirectType_Code}</font>&nbsp;{CrazyDirectType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazyDirectTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazydirecttypecombo', sw.Promed.SwCrazyDirectTypeCombo);

// Класс комбобокса для справочника "Порядок поступления"
sw.Promed.SwCrazySupplyOrderTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazySupplyOrderType',
		key: 'CrazySupplyOrderType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazySupplyOrderType_id',    type:'int'},
			{name: 'CrazySupplyOrderType_Code', type:'int'},
			{name: 'CrazySupplyOrderType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazySupplyOrderType_Code'
		}
	}),
	codeField:'CrazySupplyOrderType_Code',
	displayField:'CrazySupplyOrderType_Name',
	valueField: 'CrazySupplyOrderType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazySupplyOrderType_Code}</font>&nbsp;{CrazySupplyOrderType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazySupplyOrderTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazysupplyordertypecombo', sw.Promed.SwCrazySupplyOrderTypeCombo);

// Класс комбобокса для справочника "Решение судьи по ст. 35"
sw.Promed.SwCrazyJudgeDecisionArt35TypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazyJudgeDecisionArt35Type',
		key: 'CrazyJudgeDecisionArt35Type_id',
		autoLoad: false,
		fields: [
			{name: 'CrazyJudgeDecisionArt35Type_id',    type:'int'},
			{name: 'CrazyJudgeDecisionArt35Type_Code', type:'int'},
			{name: 'CrazyJudgeDecisionArt35Type_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazyJudgeDecisionArt35Type_Code'
		}
	}),
	codeField:'CrazyJudgeDecisionArt35Type_Code',
	displayField:'CrazyJudgeDecisionArt35Type_Name',
	valueField: 'CrazyJudgeDecisionArt35Type_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazyJudgeDecisionArt35Type_Code}</font>&nbsp;{CrazyJudgeDecisionArt35Type_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazyJudgeDecisionArt35TypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazyjudgedecisionart35typecombo', sw.Promed.SwCrazyJudgeDecisionArt35TypeCombo);

// Класс комбобокса для справочника "Откуда поступил"
sw.Promed.SwCrazyDirectFromTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazyDirectFromType',
		key: 'CrazyDirectFromType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazyDirectFromType_id',    type:'int'},
			{name: 'CrazyDirectFromType_Code', type:'int'},
			{name: 'CrazyDirectFromType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazyDirectFromType_Code'
		}
	}),
	codeField:'CrazyDirectFromType_Code',
	displayField:'CrazyDirectFromType_Name',
	valueField: 'CrazyDirectFromType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazyDirectFromType_Code}</font>&nbsp;{CrazyDirectFromType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazyDirectFromTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazydirectfromtypecombo', sw.Promed.SwCrazyDirectFromTypeCombo);

// Класс комбобокса для справочника "Цель направления"
sw.Promed.SwCrazyPurposeDirectTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazyPurposeDirectType',
		key: 'CrazyPurposeDirectType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazyPurposeDirectType_id',    type:'int'},
			{name: 'CrazyPurposeDirectType_Code', type:'int'},
			{name: 'CrazyPurposeDirectType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazyPurposeDirectType_Code'
		}
	}),
	codeField:'CrazyPurposeDirectType_Code',
	displayField:'CrazyPurposeDirectType_Name',
	valueField: 'CrazyPurposeDirectType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazyPurposeDirectType_Code}</font>&nbsp;{CrazyPurposeDirectType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazyPurposeDirectTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazypurposedirecttypecombo', sw.Promed.SwCrazyPurposeDirectTypeCombo);

// Класс комбобокса для справочника "Инвалидность при выписке по псих. заболеванию"
sw.Promed.SwCrazyLeaveInvalidTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazyLeaveInvalidType',
		key: 'CrazyLeaveInvalidType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazyLeaveInvalidType_id',    type:'int'},
			{name: 'CrazyLeaveInvalidType_Code', type:'int'},
			{name: 'CrazyLeaveInvalidType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazyLeaveInvalidType_Code'
		}
	}),
	codeField:'CrazyLeaveInvalidType_Code',
	displayField:'CrazyLeaveInvalidType_Name',
	valueField: 'CrazyLeaveInvalidType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazyLeaveInvalidType_Code}</font>&nbsp;{CrazyLeaveInvalidType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazyLeaveInvalidTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazyleaveinvalidtypecombo', sw.Promed.SwCrazyLeaveInvalidTypeCombo);

// Класс комбобокса для справочника "Обследование больного на ВИЧ"
sw.Promed.SwCrazySurveyHIVTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazySurveyHIVType',
		key: 'CrazySurveyHIVType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazySurveyHIVType_id',    type:'int'},
			{name: 'CrazySurveyHIVType_Code', type:'int'},
			{name: 'CrazySurveyHIVType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazySurveyHIVType_Code'
		}
	}),
	codeField:'CrazySurveyHIVType_Code',
	displayField:'CrazySurveyHIVType_Name',
	valueField: 'CrazySurveyHIVType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazySurveyHIVType_Code}</font>&nbsp;{CrazySurveyHIVType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazySurveyHIVTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazysurveyhivtypecombo', sw.Promed.SwCrazySurveyHIVTypeCombo);

// Класс комбобокса для справочника "Выбыл"
sw.Promed.SwCrazyLeaveTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazyLeaveType',
		key: 'CrazyLeaveType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazyLeaveType_id',    type:'int'},
			{name: 'CrazyLeaveType_Code', type:'int'},
			{name: 'CrazyLeaveType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazyLeaveType_Code'
		}
	}),
	codeField:'CrazyLeaveType_Code',
	displayField:'CrazyLeaveType_Name',
	valueField: 'CrazyLeaveType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazyLeaveType_Code}</font>&nbsp;{CrazyLeaveType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazyLeaveTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazyleavetypecombo', sw.Promed.SwCrazyLeaveTypeCombo);

// Класс комбобокса для справочника "Смерть наступила"
sw.Promed.SwCrazyDeathCauseTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazyDeathCauseType',
		key: 'CrazyDeathCauseType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazyDeathCauseType_id',    type:'int'},
			{name: 'CrazyDeathCauseType_Code', type:'int'},
			{name: 'CrazyDeathCauseType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazyDeathCauseType_Code'
		}
	}),
	codeField:'CrazyDeathCauseType_Code',
	displayField:'CrazyDeathCauseType_Name',
	valueField: 'CrazyDeathCauseType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazyDeathCauseType_Code}</font>&nbsp;{CrazyDeathCauseType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazyDeathCauseTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazydeathcausetypecombo', sw.Promed.SwCrazyDeathCauseTypeCombo);

// Класс комбобокса для поля "Гуппа ЛС"
sw.Promed.SwLsGroupCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	displayField: 'LS_GROUP_NAME',
	enableKeyEvents: true,
	forceSelection: true,
	initComponent: function() {
		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
					id: 'LS_GROUP_ID'
				},
				[
					{name: 'LS_GROUP_ID', mapping: 'LS_GROUP_ID'},
					{name: 'LS_GROUP_NAME', mapping: 'LS_GROUP_NAME'},
					{name: 'ACTMATTERS_ID', type: 'int', mapping: 'ACTMATTERS_ID'},
					{name: 'TRADENAMES_ID', type: 'int', mapping: 'TRADENAMES_ID'},
					{name: 'CLSPHARMAGROUP_ID', type: 'int', mapping: 'CLSPHARMAGROUP_ID'},
					{name: 'FTGGRLS_ID', type: 'int', mapping: 'FTGGRLS_ID'}
				]),
			url: '/?c=LsLink&m=loadLsGroupCombo'
		});

		sw.Promed.SwLsGroupCombo.superclass.initComponent.apply(this, arguments);
	},
	lastQuery: '',
	minChars: 0,
	mode: 'remote',
	queryDelay: 1,
	tpl: '<tpl for="."><div class="x-combo-list-item">{LS_GROUP_NAME}</div></tpl>',
	triggerAction: 'all',
	valueField: 'LS_GROUP_ID',
});
Ext.reg('swlsgroupcombo', sw.Promed.SwLsGroupCombo);

// Класс комбобокса для справочника "Вид"
sw.Promed.SwCrazyForceTreatTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazyForceTreatType',
		key: 'CrazyForceTreatType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazyForceTreatType_id',    type:'int'},
			{name: 'CrazyForceTreatType_Code', type:'int'},
			{name: 'CrazyForceTreatType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazyForceTreatType_Code'
		}
	}),
	codeField:'CrazyForceTreatType_Code',
	displayField:'CrazyForceTreatType_Name',
	valueField: 'CrazyForceTreatType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazyForceTreatType_Code}</font>&nbsp;{CrazyForceTreatType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazyForceTreatTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazyforcetreattypecombo', sw.Promed.SwCrazyForceTreatTypeCombo);

// Класс комбобокса для справочника "В случае окончания принудительного лечения"
sw.Promed.SwCrazyForceTreatResultTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazyForceTreatResultType',
		key: 'CrazyForceTreatResultType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazyForceTreatResultType_id',    type:'int'},
			{name: 'CrazyForceTreatResultType_Code', type:'int'},
			{name: 'CrazyForceTreatResultType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazyForceTreatResultType_Code'
		}
	}),
	codeField:'CrazyForceTreatResultType_Code',
	displayField:'CrazyForceTreatResultType_Name',
	valueField: 'CrazyForceTreatResultType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazyForceTreatResultType_Code}</font>&nbsp;{CrazyForceTreatResultType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazyForceTreatResultTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazyforcetreatresulttypecombo', sw.Promed.SwCrazyForceTreatResultTypeCombo);

// Класс комбобокса для справочника "Вид амбулаторного наблюдения"
sw.Promed.SwCrazyAmbulMonitoringTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazyAmbulMonitoringType',
		key: 'CrazyAmbulMonitoringType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazyAmbulMonitoringType_id',    type:'int'},
			{name: 'CrazyAmbulMonitoringType_Code', type:'int'},
			{name: 'CrazyAmbulMonitoringType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazyAmbulMonitoringType_Code'
		}
	}),
	codeField:'CrazyAmbulMonitoringType_Code',
	displayField:'CrazyAmbulMonitoringType_Name',
	valueField: 'CrazyAmbulMonitoringType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazyAmbulMonitoringType_Code}</font>&nbsp;{CrazyAmbulMonitoringType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazyAmbulMonitoringTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazyambulmonitoringtypecombo', sw.Promed.SwCrazyAmbulMonitoringTypeCombo);

// Класс комбобокса для справочника "Образование"
sw.Promed.SwCrazyEducationTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazyEducationType',
		key: 'CrazyEducationType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazyEducationType_id',    type:'int'},
			{name: 'CrazyEducationType_Code', type:'int'},
			{name: 'CrazyEducationType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazyEducationType_Code'
		}
	}),
	codeField:'CrazyEducationType_Code',
	displayField:'CrazyEducationType_Name',
	valueField: 'CrazyEducationType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazyEducationType_Code}</font>&nbsp;{CrazyEducationType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazyEducationTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazyeducationtypecombo', sw.Promed.SwCrazyEducationTypeCombo);

// Класс комбобокса для справочника "Источник средств существования"
sw.Promed.SwCrazySourceLivelihoodTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazySourceLivelihoodType',
		key: 'CrazySourceLivelihoodType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazySourceLivelihoodType_id',    type:'int'},
			{name: 'CrazySourceLivelihoodType_Code', type:'int'},
			{name: 'CrazySourceLivelihoodType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazySourceLivelihoodType_Code'
		}
	}),
	codeField:'CrazySourceLivelihoodType_Code',
	displayField:'CrazySourceLivelihoodType_Name',
	valueField: 'CrazySourceLivelihoodType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazySourceLivelihoodType_Code}</font>&nbsp;{CrazySourceLivelihoodType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazySourceLivelihoodTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazysourcelivelihoodtypecombo', sw.Promed.SwCrazySourceLivelihoodTypeCombo);

// Класс комбобокса для справочника "Проживает"
sw.Promed.SwCrazyResideTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazyResideType',
		key: 'CrazyResideType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazyResideType_id',    type:'int'},
			{name: 'CrazyResideType_Code', type:'int'},
			{name: 'CrazyResideType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazyResideType_Code'
		}
	}),
	codeField:'CrazyResideType_Code',
	displayField:'CrazyResideType_Name',
	valueField: 'CrazyResideType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazyResideType_Code}</font>&nbsp;{CrazyResideType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazyResideTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazyresidetypecombo', sw.Promed.SwCrazyResideTypeCombo);

// Класс комбобокса для справочника "Условия проживания"
sw.Promed.SwCrazyResideConditionsTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazyResideConditionsType',
		key: 'CrazyResideConditionsType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazyResideConditionsType_id',    type:'int'},
			{name: 'CrazyResideConditionsType_Code', type:'int'},
			{name: 'CrazyResideConditionsType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazyResideConditionsType_Code'
		}
	}),
	codeField:'CrazyResideConditionsType_Code',
	displayField:'CrazyResideConditionsType_Name',
	valueField: 'CrazyResideConditionsType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazyResideConditionsType_Code}</font>&nbsp;{CrazyResideConditionsType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazyResideConditionsTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazyresideconditionstypecombo', sw.Promed.SwCrazyResideConditionsTypeCombo);

// Класс комбобокса для справочника "Исход заболевания"
sw.Promed.SwCrazyResultDeseaseTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazyResultDeseaseType',
		key: 'CrazyResultDeseaseType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazyResultDeseaseType_id',    type:'int'},
			{name: 'CrazyResultDeseaseType_Code', type:'int'},
			{name: 'CrazyResultDeseaseType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazyResultDeseaseType_Code'
		}
	}),
	codeField:'CrazyResultDeseaseType_Code',
	displayField:'CrazyResultDeseaseType_Name',
	valueField: 'CrazyResultDeseaseType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazyResultDeseaseType_Code}</font>&nbsp;{CrazyResultDeseaseType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazyResultDeseaseTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazyresultdeseasetypecombo', sw.Promed.SwCrazyResultDeseaseTypeCombo);

// Класс комбобокса для справочника "Вид вещества"
sw.Promed.SwCrazyDrugTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazyDrugType',
		key: 'CrazyDrugType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazyDrugType_id',    type:'int'},
			{name: 'CrazyDrugType_Code', type:'int'},
			{name: 'CrazyDrugType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazyDrugType_Code'
		}
	}),
	codeField:'CrazyDrugType_Code',
	displayField:'CrazyDrugType_Name',
	valueField: 'CrazyDrugType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazyDrugType_Code}</font>&nbsp;{CrazyDrugType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazyDrugTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazydrugtypecombo', sw.Promed.SwCrazyDrugTypeCombo);

// Класс комбобокса для справочника "Тип приема"
sw.Promed.SwCrazyDrugReceptTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazyDrugReceptType',
		key: 'CrazyDrugReceptType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazyDrugReceptType_id',    type:'int'},
			{name: 'CrazyDrugReceptType_Code', type:'int'},
			{name: 'CrazyDrugReceptType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazyDrugReceptType_Code'
		}
	}),
	codeField:'CrazyDrugReceptType_Code',
	displayField:'CrazyDrugReceptType_Name',
	valueField: 'CrazyDrugReceptType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazyDrugReceptType_Code}</font>&nbsp;{CrazyDrugReceptType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazyDrugReceptTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazydrugrecepttypecombo', sw.Promed.SwCrazyDrugReceptTypeCombo);

// Класс комбобокса для справочника "Полученный объем наркологической помощи в данном учреждении"
sw.Promed.SwCrazyDrugVolumeTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazyDrugVolumeType',
		key: 'CrazyDrugVolumeType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazyDrugVolumeType_id',    type:'int'},
			{name: 'CrazyDrugVolumeType_Code', type:'int'},
			{name: 'CrazyDrugVolumeType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazyDrugVolumeType_Code'
		}
	}),
	codeField:'CrazyDrugVolumeType_Code',
	displayField:'CrazyDrugVolumeType_Name',
	valueField: 'CrazyDrugVolumeType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazyDrugVolumeType_Code}</font>&nbsp;{CrazyDrugVolumeType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazyDrugVolumeTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazydrugvolumetypecombo', sw.Promed.SwCrazyDrugVolumeTypeCombo);

// Класс комбобокса для справочника "Решение суда"
sw.Promed.SwCrazyForceTreatJudgeDecisionTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'CrazyForceTreatJudgeDecisionType',
		key: 'CrazyForceTreatJudgeDecisionType_id',
		autoLoad: false,
		fields: [
			{name: 'CrazyForceTreatJudgeDecisionType_id',    type:'int'},
			{name: 'CrazyForceTreatJudgeDecisionType_Code', type:'int'},
			{name: 'CrazyForceTreatJudgeDecisionType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'CrazyForceTreatJudgeDecisionType_Code'
		}
	}),
	codeField:'CrazyForceTreatJudgeDecisionType_Code',
	displayField:'CrazyForceTreatJudgeDecisionType_Name',
	valueField: 'CrazyForceTreatJudgeDecisionType_id',
	fieldLabel: langs('Тип'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazyForceTreatJudgeDecisionType_Code}</font>&nbsp;{CrazyForceTreatJudgeDecisionType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwCrazyForceTreatJudgeDecisionTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcrazyforcetreatjudgedecisiontypecombo', sw.Promed.SwCrazyForceTreatJudgeDecisionTypeCombo);

sw.Promed.SwDiagSetPhaseCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField:'DiagSetPhase_Code',
	displayField:'DiagSetPhase_Name',
	valueField: 'DiagSetPhase_id',
	fieldLabel: langs('Стадия/фаза'),
	hiddenName: 'DiagSetPhase_id',
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{DiagSetPhase_Code}</font>&nbsp;{DiagSetPhase_Name}'+
			'</div></tpl>',
	loadParams: {params:{where:"where Region_id is null"}},//#153821

	initComponent: function() {
		this.store = new Ext.db.AdapterStore({
			dbFile: 'Promed.db',
			tableName: 'DiagSetPhase',
			key: 'DiagSetPhase_id',
			autoLoad: false,
			fields: [
				{name: 'DiagSetPhase_id', type:'int'},
				{name: 'DiagSetPhase_Code', type:'int'},
				{name: 'DiagSetPhase_Name', type:'string'},
				{name: 'DiagSetPhase_begDT', type:'date'},
				{name: 'DiagSetPhase_endDT', type:'date'},
				{name: 'Region_id', type:'int'},
			],
			sortInfo: {
				field: 'DiagSetPhase_Code'
			}/*, 
			listeners: {
				'load': function() {
					// TODO: Тут надо подумать, потому как в некоторых случаях (возможно!) лоад выполнится уже после того как вернутся значения полей из БД (проверить может такое быть или нет)
					log('load',this.getValue(), this);
					if (!this.getValue()) {
						this.setValue(1);
					}
				}.createDelegate(this)
			}*/
		});
		this.store.baseParams = {
            object:'DiagSetPhase', DiagSetPhase_id:'',DiagSetPhase_Code:'',DiagSetPhase_Name:'',DiagSetPhase_begDT:'',DiagSetPhase_endDT:'', Region_id: ''
        };
        
		this.on('render', function() {
			// TODO: Тут надо подумать, потому как в некоторых случаях (возможно!) лоад выполнится уже после того как вернутся значения полей из БД (проверить может такое быть или нет)
			// log('SwDiagSetPhaseCombo load store');
			// this.getStore().load();
			// TODO: Тут надо правильно проставлять значение, сейчас логика неправильная 
			/*
			this.getStore().on('load', function(){
				if (this.getValue()) {
					this.setValue(this.getValue());
				} else {
					this.setValue(1);
				}
			}.createDelegate(this));
			*/
		}.createDelegate(this));
		
		sw.Promed.SwDiagSetPhaseCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdiagsetphasecombo', sw.Promed.SwDiagSetPhaseCombo);


// Класс комбобокса для справочника "Обстоятельства выявления опухоли"
sw.Promed.SwTumorCircumIdentTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'TumorCircumIdentType',
		key: 'TumorCircumIdentType_id',
		autoLoad: false,
		fields: [
			{name: 'TumorCircumIdentType_id',    type:'int'},
			{name: 'TumorCircumIdentType_Code', type:'int'},
			{name: 'TumorCircumIdentType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'TumorCircumIdentType_Code'
		}
	}),
	codeField:'TumorCircumIdentType_Code',
	displayField:'TumorCircumIdentType_Name',
	valueField: 'TumorCircumIdentType_id',
	fieldLabel: langs('Обстоятельства выявления опухоли'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{TumorCircumIdentType_Code}</font>&nbsp;{TumorCircumIdentType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwTumorCircumIdentTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swtumorcircumidenttypecombo', sw.Promed.SwTumorCircumIdentTypeCombo);


// Класс комбобокса для справочника "Причины поздней диагностики"
sw.Promed.SwOnkoLateDiagCauseCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoLateDiagCause',
		key: 'OnkoLateDiagCause_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoLateDiagCause_id',    type:'int'},
			{name: 'OnkoLateDiagCause_Code', type:'int'},
			{name: 'OnkoLateDiagCause_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoLateDiagCause_Code'
		}
	}),
	codeField:'OnkoLateDiagCause_Code',
	displayField:'OnkoLateDiagCause_Name',
	valueField: 'OnkoLateDiagCause_id',
	fieldLabel: langs('Причины поздней диагностики'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoLateDiagCause_Code}</font>&nbsp;{OnkoLateDiagCause_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoLateDiagCauseCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkolatediagcausecombo', sw.Promed.SwOnkoLateDiagCauseCombo);


// Класс комбобокса для справочника "Результат аутопсии применительно к данной опухоли"
sw.Promed.SwTumorAutopsyResultTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'TumorAutopsyResultType',
		key: 'TumorAutopsyResultType_id',
		autoLoad: false,
		fields: [
			{name: 'TumorAutopsyResultType_id',    type:'int'},
			{name: 'TumorAutopsyResultType_Code', type:'int'},
			{name: 'TumorAutopsyResultType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'TumorAutopsyResultType_Code'
		}
	}),
	codeField:'TumorAutopsyResultType_Code',
	displayField:'TumorAutopsyResultType_Name',
	valueField: 'TumorAutopsyResultType_id',
	fieldLabel: langs('Результат аутопсии применительно к данной опухоли'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{TumorAutopsyResultType_Code}</font>&nbsp;{TumorAutopsyResultType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwTumorAutopsyResultTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swtumorautopsyresulttypecombo', sw.Promed.SwTumorAutopsyResultTypeCombo);


// Класс комбобокса для справочника "Аутопсия"
sw.Promed.SwAutopsyPerformTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'AutopsyPerformType',
		key: 'AutopsyPerformType_id',
		autoLoad: false,
		fields: [
			{name: 'AutopsyPerformType_id',    type:'int'},
			{name: 'AutopsyPerformType_Code', type:'int'},
			{name: 'AutopsyPerformType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'AutopsyPerformType_Code'
		}
	}),
	codeField:'AutopsyPerformType_Code',
	displayField:'AutopsyPerformType_Name',
	valueField: 'AutopsyPerformType_id',
	fieldLabel: langs('Аутопсия'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{AutopsyPerformType_Code}</font>&nbsp;{AutopsyPerformType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwAutopsyPerformTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swautopsyperformtypecombo', sw.Promed.SwAutopsyPerformTypeCombo);


// Класс комбобокса для справочника "Этническая группа"
sw.Promed.SwEthnosCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'Ethnos',
		key: 'Ethnos_id',
		autoLoad: false,
		fields: [
			{name: 'Ethnos_id',    type:'int'},
			{name: 'Ethnos_Code', type:'int'},
			{name: 'Ethnos_Name',  type:'string'}
		],
		sortInfo: {
			field: 'Ethnos_Code'
		}
	}),
	codeField:'Ethnos_Code',
	displayField:'Ethnos_Name',
	valueField: 'Ethnos_id',
	fieldLabel: langs('Этническая группа'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{Ethnos_Code}</font>&nbsp;{Ethnos_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwEthnosCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swethnoscombo', sw.Promed.SwEthnosCombo);


// Класс комбобокса для справочника "Социально-профессиональная группа"
sw.Promed.SwOnkoOccupationClassCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoOccupationClass',
		key: 'OnkoOccupationClass_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoOccupationClass_id',    type:'int'},
			{name: 'OnkoOccupationClass_Code', type:'int'},
			{name: 'OnkoOccupationClass_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoOccupationClass_Code'
		}
	}),
	codeField:'OnkoOccupationClass_Code',
	displayField:'OnkoOccupationClass_Name',
	valueField: 'OnkoOccupationClass_id',
	fieldLabel: langs('Социально-профессиональная группа'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoOccupationClass_Code}</font>&nbsp;{OnkoOccupationClass_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoOccupationClassCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkooccupationclasscombo', sw.Promed.SwOnkoOccupationClassCombo);


// Класс комбобокса для справочника "Инвалидность по основному (онкологическому) заболеванию"
sw.Promed.SwOnkoInvalidTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoInvalidType',
		key: 'OnkoInvalidType_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoInvalidType_id',    type:'int'},
			{name: 'OnkoInvalidType_Code', type:'int'},
			{name: 'OnkoInvalidType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoInvalidType_Code'
		}
	}),
	codeField:'OnkoInvalidType_Code',
	displayField:'OnkoInvalidType_Name',
	valueField: 'OnkoInvalidType_id',
	fieldLabel: langs('Инвалидность по основному (онкологическому) заболеванию'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoInvalidType_Code}</font>&nbsp;{OnkoInvalidType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoInvalidTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkoinvalidtypecombo', sw.Promed.SwOnkoInvalidTypeCombo);


// Класс комбобокса для справочника "Взят на учет в ОД"
sw.Promed.SwOnkoRegTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoRegType',
		key: 'OnkoRegType_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoRegType_id',    type:'int'},
			{name: 'OnkoRegType_Code', type:'int'},
			{name: 'OnkoRegType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoRegType_Code'
		}
	}),
	codeField:'OnkoRegType_Code',
	displayField:'OnkoRegType_Name',
	valueField: 'OnkoRegType_id',
	fieldLabel: langs('Взят на учет в ОД'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoRegType_Code}</font>&nbsp;{OnkoRegType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoRegTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkoregtypecombo', sw.Promed.SwOnkoRegTypeCombo);


// Класс комбобокса для справочника "Причина снятия с учета"
sw.Promed.SwOnkoRegOutTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoRegOutType',
		key: 'OnkoRegOutType_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoRegOutType_id',    type:'int'},
			{name: 'OnkoRegOutType_Code', type:'int'},
			{name: 'OnkoRegOutType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoRegOutType_Code'
		}
	}),
	codeField:'OnkoRegOutType_Code',
	displayField:'OnkoRegOutType_Name',
	valueField: 'OnkoRegOutType_id',
	fieldLabel: langs('Причина снятия с учета'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoRegOutType_Code}</font>&nbsp;{OnkoRegOutType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoRegOutTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkoregouttypecombo', sw.Promed.SwOnkoRegOutTypeCombo);


// Класс комбобокса для справочника "Первично-множественная опухоль"
sw.Promed.SwTumorPrimaryMultipleTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'TumorPrimaryMultipleType',
		key: 'TumorPrimaryMultipleType_id',
		autoLoad: false,
		fields: [
			{name: 'TumorPrimaryMultipleType_id',    type:'int'},
			{name: 'TumorPrimaryMultipleType_Code', type:'int'},
			{name: 'TumorPrimaryMultipleType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'TumorPrimaryMultipleType_Code'
		}
	}),
	codeField:'TumorPrimaryMultipleType_Code',
	displayField:'TumorPrimaryMultipleType_Name',
	valueField: 'TumorPrimaryMultipleType_id',
	fieldLabel: langs('Первично-множественная опухоль'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{TumorPrimaryMultipleType_Code}</font>&nbsp;{TumorPrimaryMultipleType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwTumorPrimaryMultipleTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swtumorprimarymultipletypecombo', sw.Promed.SwTumorPrimaryMultipleTypeCombo);


// Класс комбобокса для справочника "Сторона поражения"
sw.Promed.SwOnkoLesionSideCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoLesionSide',
		key: 'OnkoLesionSide_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoLesionSide_id',    type:'int'},
			{name: 'OnkoLesionSide_Code', type:'int'},
			{name: 'OnkoLesionSide_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoLesionSide_Code'
		}
	}),
	codeField:'OnkoLesionSide_Code',
	displayField:'OnkoLesionSide_Name',
	valueField: 'OnkoLesionSide_id',
	fieldLabel: langs('Сторона поражения'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoLesionSide_Code}</font>&nbsp;{OnkoLesionSide_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoLesionSideCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkolesionsidecombo', sw.Promed.SwOnkoLesionSideCombo);




// Класс комбобокса для справочника "T"
sw.Promed.SwOnkoTCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoT',
		key: 'OnkoT_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoT_id',    type:'int'},
			{name: 'OnkoT_Code', type:'int'},
			{name: 'OnkoT_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoT_Code'
		}
	}),
	//codeField:'OnkoT_Code',
	displayField:'OnkoT_Name',
	valueField: 'OnkoT_id',
	fieldLabel: 'T',
	tpl: '<tpl for="."><div class="x-combo-list-item">{OnkoT_Name}'+'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoTCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkotcombo', sw.Promed.SwOnkoTCombo);


// Класс комбобокса для справочника "N"
sw.Promed.SwOnkoNCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoN',
		key: 'OnkoN_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoN_id',    type:'int'},
			{name: 'OnkoN_Code', type:'int'},
			{name: 'OnkoN_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoN_Code'
		}
	}),
	//codeField:'OnkoN_Code',
	displayField:'OnkoN_Name',
	valueField: 'OnkoN_id',
	fieldLabel: 'N',
	tpl: '<tpl for="."><div class="x-combo-list-item">{OnkoN_Name}'+'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoNCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkoncombo', sw.Promed.SwOnkoNCombo);


// Класс комбобокса для справочника "M"
sw.Promed.SwOnkoMCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoM',
		key: 'OnkoM_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoM_id',    type:'int'},
			{name: 'OnkoM_Code', type:'int'},
			{name: 'OnkoM_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoM_Code'
		}
	}),
	//codeField:'OnkoM_Code',
	displayField:'OnkoM_Name',
	valueField: 'OnkoM_id',
	fieldLabel: langs('М'),
	tpl: '<tpl for="."><div class="x-combo-list-item">{OnkoM_Name}'+'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoMCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkomcombo', sw.Promed.SwOnkoMCombo);


// Класс комбобокса для справочника "Стадия опухолевого процесса"
sw.Promed.SwTumorStageCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'TumorStage',
		key: 'TumorStage_id',
		autoLoad: false,
		fields: [
			{name: 'TumorStage_id',    type:'int'},
			{name: 'TumorStage_Code', type:'int'},
			{name: 'TumorStage_Name',  type:'string'}
		],
		sortInfo: {
			field: 'TumorStage_Code'
		}
	}),
	//codeField:'TumorStage_Code',
	displayField:'TumorStage_Name',
	valueField: 'TumorStage_id',
	fieldLabel: langs('Стадия опухолевого процесса'),
	tpl: '<tpl for="."><div class="x-combo-list-item">{TumorStage_Name}'+'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwTumorStageCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swtumorstagecombo', sw.Promed.SwTumorStageCombo);

sw.Promed.SwEvnClassCombo = Ext.extend(Ext.form.ComboBox,
{
	autoLoad: false,
	displayField: 'EvnClass_Name',
	enableKeyEvents: true,
	fieldLabel: langs('Класс события'),
	forceSelection: true,
	hiddenName: 'EvnClass_id',
	initComponent: function() {
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);
		this.store = new Ext.data.Store({
			autoLoad: this.autoLoad,
			reader: new Ext.data.JsonReader({
				id: 'EvnClass_id'
			}, [
				{name: 'EvnClass_id', mapping: 'EvnClass_id'},
				{name: 'EvnClass_Name', mapping: 'EvnClass_Name'},
				{name: 'EvnClass_SysNick', mapping: 'EvnClass_SysNick'}
			]),
			url: '/?c=XmlTemplate&m=loadEvnClassList'
		});
	},
	mode: 'remote',
	onTrigger2Click: Ext.emptyFn,
	trigger2Class: 'hideTrigger',
	resizable: true,
	selectOnFocus: true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<h3><font color="red">{EvnClass_id}</font>&nbsp;{EvnClass_Name}&nbsp;</h3>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'EvnClass_id'
});
Ext.reg('swevnclasscombo', sw.Promed.SwEvnClassCombo);


sw.Promed.SwNephroRateTypeCombo = Ext.extend(Ext.form.ComboBox, {
	triggerAction: 'all',
	editable: false,
	isDinamic: 1,
	codeField: 'RateType_id',
	displayField:'RateType_Name',
	hiddenName: 'RateType_id',
	valueField: 'RateType_id',
	fieldLabel: langs('Показатель'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
		'{RateType_Name}'+
		'</div></tpl>',
	initComponent: function()
	{
		this.store = new Ext.data.JsonStore({
			url: '/?c=MorbusNephro&m=doLoadRateTypeList',
			baseParams: {isDinamic: this.isDinamic},
			fields: [
				{name:'RateType_id', type:'int'},
				{name:'RateType_Name', type:'string'},
				{name:'RateType_SysNick', type:'string'}
			],
			key:'RateType_id',
			sortInfo:{
				field:'RateType_Name'
			}
		});
		sw.Promed.SwNephroRateTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swnephroratetypecombo', sw.Promed.SwNephroRateTypeCombo);

sw.Promed.SwDiagGroupsCombo = Ext.extend(sw.Promed.SwDiagCombo, {
	isVZN: false,
	doQuery: function(q, forceAll){
		if(q.length < 1 || this.disabled) return false;
		
		var where = 'where DiagLevel_id = 3',
			latsym = false,
			kirsym = false;
		
		// Нннннада узнать что пользователь вводит (код или название)
		for(var i=0; i<q.length; i++) {
			var code = q.charCodeAt(q[i]);
			// В этих пределах лежат кириллические символы
			if(code >= 1040 && code <= 1103) {
				kirsym = true;
			} else {
				latsym = true;
			}
		}
		
		// Если q содержит оба типа символов (латинские и кириллические), то пока что false
		if(kirsym && latsym) {
			this.reset();
			return false;
		}
		
		if(kirsym) {
			where += ' and Diag_Name like \''+q+'%\'';
		} else if (latsym) {
			where += ' and Diag_Code like \''+q+'%\'';
		}

		this.getStore().clearFilter();
		this.getStore().removeAll();
		this.lastQuery = '';
		this.getStore().load({
			params: { where: where },
			callback: function(){
				if(this.getStore().getCount() == 0) {
					this.reset();
				} else if (this.isVZN) {
					this.getStore().filterBy(function(rec) {
						return rec.get('Diag_Code').inlist(['C82', 'C83', 'C85', 'E84']);
					}, this);
					this.restrictHeight();
				}
			}.createDelegate(this)
		});
	},
	listeners: {
		select: function(c, r, i) {
			if(r) {
				c.setRawValue(r.get('Diag_Code') + " " + r.get('Diag_Name'));
			}
		},
		blur: function(combo) {
			this.dqTask.cancel();
			combo.collapse();
			if ( combo.getRawValue() == '' ) {
				combo.setValue('');
				if ( this.onChange && typeof this.onChange == 'function' ) {
					this.onChange(this, '');
				}
			}
			else {
				var store = combo.getStore();
				var val = this.getRawValue().toString().substr(0, 3);
				// Вместо load пробежимся по найденным записям и уставим выбранное значение 
				var yes = false;
				this.getStore().each(function(r){
					if ( r.data.Diag_Code == val )
					{
						this.setValue(r.get(this.valueField));
						combo.fireEvent('select', combo, r, 0);
						
						combo.fireEvent('change', combo, r.get(this.valueField), '');
						if ( this.onChange && typeof this.onChange == 'function') {
							this.onChange(this, r.get(this.valueField));
						}
						yes = true;
						return true;
					}
				}.createDelegate(this));
				if (!yes) {
					this.setValue(null);
					combo.fireEvent('change', combo, null, '');
					if ( this.onChange && typeof this.onChange == 'function') {
						this.onChange(this, null);
					}
				}
			}
		}
	},
	fieldLabel: langs('Группа диагнозов'),
	initComponent: function() {
		sw.Promed.SwDiagGroupsCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdiaggroupscombo', sw.Promed.SwDiagGroupsCombo);


// Класс комбобокса для справочника "Общее состояние пациента"
sw.Promed.SwOnkoPersonStateTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoPersonStateType',
		key: 'OnkoPersonStateType_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoPersonStateType_id', type:'int'},
			{name: 'OnkoPersonStateType_Code', type:'int'},
			{name: 'OnkoPersonStateType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoPersonStateType_Code'
		}
	}),
	codeField:'OnkoPersonStateType_Code',
	displayField:'OnkoPersonStateType_Name',
	valueField: 'OnkoPersonStateType_id',
	fieldLabel: langs('Общее состояние пациента'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoPersonStateType_Code}</font>&nbsp;{OnkoPersonStateType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoPersonStateTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkopersonstatetypecombo', sw.Promed.SwOnkoPersonStateTypeCombo);


// Класс комбобокса для справочника "Состояние опухолевого процесса"
sw.Promed.SwOnkoTumorStatusTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoTumorStatusType',
		key: 'OnkoTumorStatusType_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoTumorStatusType_id', type:'int'},
			{name: 'OnkoTumorStatusType_Code', type:'int'},
			{name: 'OnkoTumorStatusType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoTumorStatusType_Code'
		}
	}),
	codeField:'OnkoTumorStatusType_Code',
	displayField:'OnkoTumorStatusType_Name',
	valueField: 'OnkoTumorStatusType_id',
	fieldLabel: langs('Состояние опухолевого процесса'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoTumorStatusType_Code}</font>&nbsp;{OnkoTumorStatusType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoTumorStatusTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkotumorstatustypecombo', sw.Promed.SwOnkoTumorStatusTypeCombo);


// Класс комбобокса для справочника "Состояние на конец отчетного года"
sw.Promed.SwOnkoStatusYearEndTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoStatusYearEndType',
		key: 'OnkoStatusYearEndType_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoStatusYearEndType_id', type:'int'},
			{name: 'OnkoStatusYearEndType_Code', type:'int'},
			{name: 'OnkoStatusYearEndType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoStatusYearEndType_Code'
		}
	}),
	codeField:'OnkoStatusYearEndType_Code',
	displayField:'OnkoStatusYearEndType_Name',
	valueField: 'OnkoStatusYearEndType_id',
	fieldLabel: langs('Состояние на конец отчетного года'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoStatusYearEndType_Code}</font>&nbsp;{OnkoStatusYearEndType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoStatusYearEndTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkostatusyearendtypecombo', sw.Promed.SwOnkoStatusYearEndTypeCombo);


// Класс комбобокса для справочника "Проведенное лечение первичной опухоли"
sw.Promed.SwTumorPrimaryTreatTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'TumorPrimaryTreatType',
		key: 'TumorPrimaryTreatType_id',
		autoLoad: false,
		fields: [
			{name: 'TumorPrimaryTreatType_id', type:'int'},
			{name: 'TumorPrimaryTreatType_Code', type:'int'},
			{name: 'TumorPrimaryTreatType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'TumorPrimaryTreatType_Code'
		}
	}),
	codeField:'TumorPrimaryTreatType_Code',
	displayField:'TumorPrimaryTreatType_Name',
	valueField: 'TumorPrimaryTreatType_id',
	fieldLabel: langs('Проведенное лечение первичной опухоли'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{TumorPrimaryTreatType_Code}</font>&nbsp;{TumorPrimaryTreatType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwTumorPrimaryTreatTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swtumorprimarytreattypecombo', sw.Promed.SwTumorPrimaryTreatTypeCombo);


// Класс комбобокса для справочника "Причины незавершенности радикального лечения"
sw.Promed.SwTumorRadicalTreatIncomplTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'TumorRadicalTreatIncomplType',
		key: 'TumorRadicalTreatIncomplType_id',
		autoLoad: false,
		fields: [
			{name: 'TumorRadicalTreatIncomplType_id', type:'int'},
			{name: 'TumorRadicalTreatIncomplType_Code', type:'int'},
			{name: 'TumorRadicalTreatIncomplType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'TumorRadicalTreatIncomplType_Code'
		}
	}),
	codeField:'TumorRadicalTreatIncomplType_Code',
	displayField:'TumorRadicalTreatIncomplType_Name',
	valueField: 'TumorRadicalTreatIncomplType_id',
	fieldLabel: langs('Причины незавершенности радикального лечения'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{TumorRadicalTreatIncomplType_Code}</font>&nbsp;{TumorRadicalTreatIncomplType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwTumorRadicalTreatIncomplTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swtumorradicaltreatincompltypecombo', sw.Promed.SwTumorRadicalTreatIncomplTypeCombo);


// Класс комбобокса для справочника "Способ облучения при проведении лучевой терапии"
sw.Promed.SwOnkoUslugaBeamIrradiationTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoUslugaBeamIrradiationType',
		key: 'OnkoUslugaBeamIrradiationType_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoUslugaBeamIrradiationType_id', type:'int'},
			{name: 'OnkoUslugaBeamIrradiationType_Code', type:'int'},
			{name: 'OnkoUslugaBeamIrradiationType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoUslugaBeamIrradiationType_Code'
		}
	}),
	codeField:'OnkoUslugaBeamIrradiationType_Code',
	displayField:'OnkoUslugaBeamIrradiationType_Name',
	valueField: 'OnkoUslugaBeamIrradiationType_id',
	fieldLabel: langs('Способ облучения при проведении лучевой терапии'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoUslugaBeamIrradiationType_Code}</font>&nbsp;{OnkoUslugaBeamIrradiationType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoUslugaBeamIrradiationTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkouslugabeamirradiationtypecombo', sw.Promed.SwOnkoUslugaBeamIrradiationTypeCombo);


// Класс комбобокса для справочника "Вид лучевой терапии"
sw.Promed.SwOnkoUslugaBeamKindTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoUslugaBeamKindType',
		key: 'OnkoUslugaBeamKindType_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoUslugaBeamKindType_id', type:'int'},
			{name: 'OnkoUslugaBeamKindType_Code', type:'int'},
			{name: 'OnkoUslugaBeamKindType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoUslugaBeamKindType_Code'
		}
	}),
	codeField:'OnkoUslugaBeamKindType_Code',
	displayField:'OnkoUslugaBeamKindType_Name',
	valueField: 'OnkoUslugaBeamKindType_id',
	fieldLabel: langs('Вид лучевой терапии'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoUslugaBeamKindType_Code}</font>&nbsp;{OnkoUslugaBeamKindType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoUslugaBeamKindTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkouslugabeamkindtypecombo', sw.Promed.SwOnkoUslugaBeamKindTypeCombo);

sw.Promed.SwQuoteUnitTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'QuoteUnitType',
		key: 'QuoteUnitType_id',
		autoLoad: false,
		fields: [
			{name: 'QuoteUnitType_id', type:'int'},
			{name: 'QuoteUnitType_Code', type:'int'},
			{name: 'QuoteUnitType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'QuoteUnitType_Code'
		}
	}),
	codeField:'QuoteUnitType_Code',
	displayField:'QuoteUnitType_Name',
	valueField: 'QuoteUnitType_id',
	fieldLabel: langs('Единицы измерения'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{QuoteUnitType_Code}</font>&nbsp;{QuoteUnitType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwQuoteUnitTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swquoteunittypecombo', sw.Promed.SwQuoteUnitTypeCombo);

sw.Promed.SwEvnStatusCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'EvnStatus',
		key: 'EvnStatus_id',
		autoLoad: false,
		fields: [
			{name: 'EvnStatus_id', type:'int'},
			{name: 'EvnStatus_Code', type:'int'},
			{name: 'EvnStatus_Name',  type:'string'}
		],
		sortInfo: {
			field: 'EvnStatus_Code'
		}
	}),
	codeField:'EvnStatus_Code',
	displayField:'EvnStatus_Name',
	valueField: 'EvnStatus_id',
	fieldLabel: langs('Статус'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{EvnStatus_Code}</font>&nbsp;{EvnStatus_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwEvnStatusCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swevnstatuscombo', sw.Promed.SwEvnStatusCombo);

sw.Promed.SwEvnDirectionStatusCombo = Ext.extend(sw.Promed.SwCommonSprCombo, {
	comboSubject: 'EvnStatus',
	codeField: 'EvnStatus_SortCode',
	orderBy: 'SortCode',
	moreFields: [
		{ name: 'EvnStatus_SortCode', mapping: 'EvnStatus_SortCode' }
	],
	fieldLabel: langs('Цель посещения'),
	typeCode: 'int',
	allowSysNick: true,
	loadParams: null,
	autoLoad: false,
	initComponent: function() {
		sw.Promed.SwEvnDirectionStatusCombo.superclass.initComponent.apply(this, arguments);
		
        this.loadParams = {params: {where: " where EvnClass_id = 27 and EvnStatus_SysNick not in ('DirNew')"}};
	}

});
Ext.reg('swevndirectionstatuscombo', sw.Promed.SwEvnDirectionStatusCombo);
// Класс комбобокса для справочника "При каких обстоятельствах привык к наркотику"
sw.Promed.SwNarcoUseTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'NarcoUseType',
		key: 'NarcoUseType_id',
		autoLoad: false,
		fields: [
			{name: 'NarcoUseType_id', type:'int'},
			{name: 'NarcoUseType_Code', type:'int'},
			{name: 'NarcoUseType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'NarcoUseType_Code'
		}
	}),
	codeField:'NarcoUseType_Code',
	displayField:'NarcoUseType_Name',
	valueField: 'NarcoUseType_id',
	fieldLabel: langs('При каких обстоятельствах привык к наркотику'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{NarcoUseType_Code}</font>&nbsp;{NarcoUseType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwNarcoUseTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swnarcousetypecombo', sw.Promed.SwNarcoUseTypeCombo);

// Класс комбобокса для справочника "Инициатор лечения"
sw.Promed.SwNarcoTreatInitiateCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'NarcoTreatInitiate',
		key: 'NarcoTreatInitiate_id',
		autoLoad: false,
		fields: [
			{name: 'NarcoTreatInitiate_id', type:'int'},
			{name: 'NarcoTreatInitiate_Code', type:'int'},
			{name: 'NarcoTreatInitiate_Name',  type:'string'}
		],
		sortInfo: {
			field: 'NarcoTreatInitiate_Code'
		}
	}),
	codeField:'NarcoTreatInitiate_Code',
	displayField:'NarcoTreatInitiate_Name',
	valueField: 'NarcoTreatInitiate_id',
	fieldLabel: langs('Инициатор лечения'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{NarcoTreatInitiate_Code}</font>&nbsp;{NarcoTreatInitiate_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwNarcoTreatInitiateCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swnarcotreatinitiatecombo', sw.Promed.SwNarcoTreatInitiateCombo);

sw.Promed.SwAmbulatCardLocatTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'AmbulatCardLocatType',
		key: 'AmbulatCardLocatType_id',
		autoLoad: false,
		fields: [
			{name: 'AmbulatCardLocatType_id', type:'int'},
			{name: 'AmbulatCardLocatType_Code', type:'int'},
			{name: 'AmbulatCardLocatType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'AmbulatCardLocatType_Code'
		}
	}),
	codeField:'AmbulatCardLocatType_id',
	displayField:'AmbulatCardLocatType_Name',
	valueField: 'AmbulatCardLocatType_id',
	fieldLabel: langs('Местонахождение оригинала АК'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{AmbulatCardLocatType_id}</font>&nbsp;{AmbulatCardLocatType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwAmbulatCardLocatTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swambulatcardlocattypecombo', sw.Promed.SwAmbulatCardLocatTypeCombo);

sw.Promed.SwAmbulatCardTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'AmbulatCardType',
		key: 'AmbulatCardType_id',
		autoLoad: false,
		fields: [
			{name: 'AmbulatCardType_id', type:'int'},
			{name: 'AmbulatCardType_Code', type:'int'},
			{name: 'AmbulatCardType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'AmbulatCardType_Code'
		}
	}),
	codeField:'AmbulatCardType_Code',
	displayField:'AmbulatCardType_Name',
	valueField: 'AmbulatCardType_id',
	fieldLabel: langs('Тип АК'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{AmbulatCardType_Code}</font>&nbsp;{AmbulatCardType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwAmbulatCardTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swambulatcardtypecombo', sw.Promed.SwAmbulatCardTypeCombo);

sw.Promed.SwPolisFormTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'PolisFormType',
		key: 'PolisFormType_id',
		autoLoad: false,
		fields: [
			{name: 'PolisFormType_id', type:'int'},
			{name: 'PolisFormType_Code', type:'int'},
			{name: 'PolisFormType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'PolisFormType_Code'
		}
	}),
	codeField:'PolisFormType_Code',
	displayField:'PolisFormType_Name',
	valueField: 'PolisFormType_id',
	fieldLabel: langs('Форма полиса'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{PolisFormType_Code}</font>&nbsp;{PolisFormType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwPolisFormTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swpolisformtypecombo', sw.Promed.SwPolisFormTypeCombo);

sw.Promed.SwRecordQueueCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'RecordQueue',
		key: 'RecordQueue_id',
		autoLoad: false,
		fields: [
			{name: 'RecordQueue_id', type:'int'},
			{name: 'RecordQueue_Name',  type:'string'}
		],
		sortInfo: {
			field: 'RecordQueue_id'
		}
	}),
	codeField:'RecordQueue_id',
	displayField:'RecordQueue_Name',
	valueField: 'RecordQueue_id',
	fieldLabel: langs('Запись в очередь'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{RecordQueue_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwRecordQueueCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swrecordqueuecombo', sw.Promed.SwRecordQueueCombo);

// Класс комбобокса для справочника "Способ получения наркотиков"
sw.Promed.SwNarcoReceiveTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'NarcoReceiveType',
		key: 'NarcoReceiveType_id',
		autoLoad: false,
		fields: [
			{name: 'NarcoReceiveType_id', type:'int'},
			{name: 'NarcoReceiveType_Code', type:'int'},
			{name: 'NarcoReceiveType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'NarcoReceiveType_Code'
		}
	}),
	codeField:'NarcoReceiveType_Code',
	displayField:'NarcoReceiveType_Name',
	valueField: 'NarcoReceiveType_id',
	fieldLabel: langs('Способ получения наркотиков'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{NarcoReceiveType_Code}</font>&nbsp;{NarcoReceiveType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwNarcoReceiveTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swnarcoreceivetypecombo', sw.Promed.SwNarcoReceiveTypeCombo);

// Класс комбобокса для справочника "Способ получения наркотиков"
sw.Promed.SwResourceTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'ResourceType',
		key: 'ResourceType_id',
		autoLoad: false,
		fields: [
			{name: 'ResourceType_id', type:'int'},
			{name: 'ResourceType_Code', type:'int'},
			{name: 'ResourceType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'ResourceType_Code'
		}
	}),
	codeField:'ResourceType_Code',
	displayField:'ResourceType_Name',
	valueField: 'ResourceType_id',
	fieldLabel: langs('Тип ресурса'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{ResourceType_Code}</font>&nbsp;{ResourceType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwResourceTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swresourcetypecombo', sw.Promed.SwResourceTypeCombo);


// Класс комбобокса для справочника "Метод лучевой терапии"
sw.Promed.SwOnkoUslugaBeamMethodTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoUslugaBeamMethodType',
		key: 'OnkoUslugaBeamMethodType_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoUslugaBeamMethodType_id', type:'int'},
			{name: 'OnkoUslugaBeamMethodType_Code', type:'int'},
			{name: 'OnkoUslugaBeamMethodType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoUslugaBeamMethodType_Code'
		}
	}),
	codeField:'OnkoUslugaBeamMethodType_Code',
	displayField:'OnkoUslugaBeamMethodType_Name',
	valueField: 'OnkoUslugaBeamMethodType_id',
	fieldLabel: langs('Метод лучевой терапии'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoUslugaBeamMethodType_Code}</font>&nbsp;{OnkoUslugaBeamMethodType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoUslugaBeamMethodTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkouslugabeammethodtypecombo', sw.Promed.SwOnkoUslugaBeamMethodTypeCombo);


// Класс комбобокса для справочника "Радиомодификаторы"
sw.Promed.SwOnkoUslugaBeamRadioModifTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoUslugaBeamRadioModifType',
		key: 'OnkoUslugaBeamRadioModifType_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoUslugaBeamRadioModifType_id', type:'int'},
			{name: 'OnkoUslugaBeamRadioModifType_Code', type:'int'},
			{name: 'OnkoUslugaBeamRadioModifType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoUslugaBeamRadioModifType_Code'
		}
	}),
	codeField:'OnkoUslugaBeamRadioModifType_Code',
	displayField:'OnkoUslugaBeamRadioModifType_Name',
	valueField: 'OnkoUslugaBeamRadioModifType_id',
	fieldLabel: langs('Радиомодификаторы'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoUslugaBeamRadioModifType_Code}</font>&nbsp;{OnkoUslugaBeamRadioModifType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoUslugaBeamRadioModifTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkouslugabeamradiomodiftypecombo', sw.Promed.SwOnkoUslugaBeamRadioModifTypeCombo);


// Класс комбобокса для справочника "Преимущественная направленность лучевой терапии"
sw.Promed.SwOnkoUslugaBeamFocusTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoUslugaBeamFocusType',
		key: 'OnkoUslugaBeamFocusType_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoUslugaBeamFocusType_id', type:'int'},
			{name: 'OnkoUslugaBeamFocusType_Code', type:'int'},
			{name: 'OnkoUslugaBeamFocusType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoUslugaBeamFocusType_Code'
		}
	}),
	codeField:'OnkoUslugaBeamFocusType_Code',
	displayField:'OnkoUslugaBeamFocusType_Name',
	valueField: 'OnkoUslugaBeamFocusType_id',
	fieldLabel: langs('Преимущественная направленность лучевой терапии'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoUslugaBeamFocusType_Code}</font>&nbsp;{OnkoUslugaBeamFocusType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoUslugaBeamFocusTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkouslugabeamfocustypecombo', sw.Promed.SwOnkoUslugaBeamFocusTypeCombo);


// Класс комбобокса для справочника "Грей / ТДФ (ВДФ)"
sw.Promed.SwOnkoUslugaBeamUnitTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoUslugaBeamUnitType',
		key: 'OnkoUslugaBeamUnitType_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoUslugaBeamUnitType_id', type:'int'},
			{name: 'OnkoUslugaBeamUnitType_Code', type:'int'},
			{name: 'OnkoUslugaBeamUnitType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoUslugaBeamUnitType_Code'
		}
	}),
	codeField:'OnkoUslugaBeamUnitType_Code',
	displayField:'OnkoUslugaBeamUnitType_Name',
	valueField: 'OnkoUslugaBeamUnitType_id',
	fieldLabel: langs('Грей / ТДФ (ВДФ)'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoUslugaBeamUnitType_Code}</font>&nbsp;{OnkoUslugaBeamUnitType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoUslugaBeamUnitTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkouslugabeamunittypecombo', sw.Promed.SwOnkoUslugaBeamUnitTypeCombo);


// Класс комбобокса для справочника "Вид проведенного химиотерапевтического лечения"
sw.Promed.SwOnkoUslugaChemKindTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoUslugaChemKindType',
		key: 'OnkoUslugaChemKindType_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoUslugaChemKindType_id', type:'int'},
			{name: 'OnkoUslugaChemKindType_Code', type:'int'},
			{name: 'OnkoUslugaChemKindType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoUslugaChemKindType_Code'
		}
	}),
	codeField:'OnkoUslugaChemKindType_Code',
	displayField:'OnkoUslugaChemKindType_Name',
	valueField: 'OnkoUslugaChemKindType_id',
	fieldLabel: langs('Вид проведенного химиотерапевтического лечения'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoUslugaChemKindType_Code}</font>&nbsp;{OnkoUslugaChemKindType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoUslugaChemKindTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkouslugachemkindtypecombo', sw.Promed.SwOnkoUslugaChemKindTypeCombo);


// Класс комбобокса для справочника "Преимущественная направленность химиотерапии"
sw.Promed.SwOnkoUslugaChemFocusTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoUslugaChemFocusType',
		key: 'OnkoUslugaChemFocusType_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoUslugaChemFocusType_id', type:'int'},
			{name: 'OnkoUslugaChemFocusType_Code', type:'int'},
			{name: 'OnkoUslugaChemFocusType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoUslugaChemFocusType_Code'
		}
	}),
	codeField:'OnkoUslugaChemFocusType_Code',
	displayField:'OnkoUslugaChemFocusType_Name',
	valueField: 'OnkoUslugaChemFocusType_id',
	fieldLabel: langs('Преимущественная направленность химиотерапии'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoUslugaChemFocusType_Code}</font>&nbsp;{OnkoUslugaChemFocusType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoUslugaChemFocusTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkouslugachemfocustypecombo', sw.Promed.SwOnkoUslugaChemFocusTypeCombo);


// Класс комбобокса для справочника "Препарат"
sw.Promed.SwOnkoDrugCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoDrug',
		key: 'OnkoDrug_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoDrug_id', type:'int'},
			{name: 'OnkoDrug_pid', type:'int'},
			{name: 'OnkoDrugType_id', type:'int'},
			{name: 'OnkoDrug_Code', type:'string'},
			{name: 'OnkoDrug_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoDrug_Code'
		}
	}),
	codeField:'OnkoDrug_Code',
	displayField:'OnkoDrug_Name',
	valueField: 'OnkoDrug_id',
	fieldLabel: langs('Препарат'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoDrug_Code}</font>&nbsp;{OnkoDrug_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoDrugCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkodrugcombo', sw.Promed.SwOnkoDrugCombo);

// Класс комбобокса для справочника "Преимущественная направленность гормоноиммунотерапии"
sw.Promed.SwOnkoUslugaGormunFocusTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoUslugaGormunFocusType',
		key: 'OnkoUslugaGormunFocusType_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoUslugaGormunFocusType_id', type:'int'},
			{name: 'OnkoUslugaGormunFocusType_Code', type:'int'},
			{name: 'OnkoUslugaGormunFocusType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoUslugaGormunFocusType_Code'
		}
	}),
	codeField:'OnkoUslugaGormunFocusType_Code',
	displayField:'OnkoUslugaGormunFocusType_Name',
	valueField: 'OnkoUslugaGormunFocusType_id',
	fieldLabel: langs('Преимущественная направленность гормоноиммунотерапии'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoUslugaGormunFocusType_Code}</font>&nbsp;{OnkoUslugaGormunFocusType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoUslugaGormunFocusTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkouslugagormunfocustypecombo', sw.Promed.SwOnkoUslugaGormunFocusTypeCombo);


// Класс комбобокса для справочника "Вид проведенной гормоноиммунотерапии"
sw.Promed.SwOnkoGormunTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoGormunType',
		key: 'OnkoGormunType_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoGormunType_id', type:'int'},
			{name: 'OnkoGormunType_Code', type:'int'},
			{name: 'OnkoGormunType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'OnkoGormunType_Code'
		}
	}),
	codeField:'OnkoGormunType_Code',
	displayField:'OnkoGormunType_Name',
	valueField: 'OnkoGormunType_id',
	fieldLabel: langs('Вид проведенной гормоноиммунотерапии'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoGormunType_Code}</font>&nbsp;{OnkoGormunType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwOnkoGormunTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkogormuntypecombo', sw.Promed.SwOnkoGormunTypeCombo);


// Класс комбобокса для справочника "МКБ-0"
sw.Promed.SwOnkoDiagCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'OnkoDiag',
		key: 'OnkoDiag_id',
		autoLoad: false,
		fields: [
			{name: 'OnkoDiag_id', type:'int'},
			{name: 'OnkoDiag_pid', type:'int'},
			{name: 'OnkoDiag_Code', type:'string'},
			{name: 'OnkoDiag_Name',  type:'string'},
			{name: 'OnkoDiag_begDate', type:'date', dateFormat: 'd.m.Y' },
			{name: 'OnkoDiag_endDate', type:'date', dateFormat: 'd.m.Y' }
		],
		sortInfo: {
			field: 'OnkoDiag_Code'
		}
	}),
	codeField:'OnkoDiag_Code',
	displayField:'OnkoDiag_Name',
	valueField: 'OnkoDiag_id',
	fieldLabel: langs('МКБ-0'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{OnkoDiag_Code}</font>&nbsp;{OnkoDiag_Name}'+
			'</div></tpl>',
	initComponent: function() {
			/*
		this.getStore().on('beforeload',function(store, options) {
			log(['beforeload',arguments]);
			options.params.where = 'where OnkoDiag_id = '+ this.getValue() +' or OnkoDiag_pid > 0 limit 100';
			options.params.clause = {where: 'record["OnkoDiag_id"] == "'+ this.getValue() +'" || record["OnkoDiag_pid"] > "0"', limit: 100}; // для поиска в indexeddb
		}.createDelegate(this));
			*/
		sw.Promed.SwOnkoDiagCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swonkodiagcombo', sw.Promed.SwOnkoDiagCombo);


// Класс комбобокса для справочника "Диагноз в соответствии с V классом МКБ-10"
sw.Promed.SwCrazyDiagCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'remote',
	minChars: 2,
	minLength: 2,
	queryDelay: 500,
	triggerAction: 'all',
	codeField:'CrazyDiag_Code',
	displayField:'CrazyDiag_Display',
	valueField: 'CrazyDiag_id',
	fieldLabel: langs('Диагноз в соответствии с V классом МКБ-10'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{CrazyDiag_Code}</font>&nbsp;{CrazyDiag_Name}'+
			'</div></tpl>',
    /* максимально возможное количество символов в коде, включая точку */
    countSymbolsCode: (getRegionNick().inlist([ 'msk', 'pskov', 'ufa', 'vologda' ]))?6:5,
    /**
     * Получение "чистого" кода диагноза, при вводе и поиске
     */
    getDiagCode: function(code) {
        // получаем количество возможных символов
        q = code.slice(0, this.countSymbolsCode);
        // если в этом полученном количестве есть пробел, то обрезаем по пробел
        q = (q)?q.split(' ')[0]:'';
        // если там есть русские символы, то делаем их нерусскимми (код же в английской транскрипции)
        q = LetterChange(q.charAt(0)) + q.slice(1, q.length);
        // если нет точки в коде, и код больше трех символов, то добавляем точку
        if (q.charAt(3) != '.' && q.length > 3)
        {
            q = q.slice(0, 3) + '.' + q.slice(3, this.countSymbolsCode-1);
        }
        // все пробелы заменяем на пусто // upd: после строки q = (q)?q.split(' ')[0]:''; уже не имеет актуальности
        // q = q.replace(' ', '');
        return q;
    },
	setValue: function(v) {
		sw.Promed.SwDiagCombo.superclass.setValue.apply(this, arguments);

		var record = this.getStore().getById(v);
		if (record) {
			this.setRawValue(record.get('CrazyDiag_Code')+' '+record.get('CrazyDiag_Name'));
		}
	},
    doQuery: function(q, forceAll) {
        if (q === undefined || q === null)
        {
            q = '';
        }
        else {
            q = this.getDiagCode(q);
            this.setRawValue(q);
        }
        sw.Promed.SwCrazyDiagCombo.superclass.doQuery.apply(this, [q, forceAll]);
    },
	initComponent: function() {
		sw.Promed.SwCrazyDiagCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			url: '/?c=MorbusCrazy&m=getCrazyDiag',
			key: 'CrazyDiag_id',
			autoLoad: false,
			fields: [
				{name: 'CrazyDiag_id', type:'int'},
				{name: 'Diag_id', type:'int'},
				{name: 'CrazyDiag_Code', type:'string'},
				{name: 'CrazyDiag_Name',  type:'string'},
				{name: 'CrazyDiag_begDate', type: 'date', dateFormat: 'd.m.Y'},
				{name: 'CrazyDiag_endDate', type: 'date', dateFormat: 'd.m.Y'},
				{name: 'CrazyDiag_Display',
					convert: function(val,row) {
						return row.CrazyDiag_Code + ' ' + row.CrazyDiag_Name;
					}
				}
			],
			sortInfo: {
				field: 'CrazyDiag_Code'
			}
		});
	}
});
Ext.reg('swcrazydiagcombo', sw.Promed.SwCrazyDiagCombo);

// Класс комбобокса для справочника "Диагноз по ОКС"
sw.Promed.SwAKSDiagCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	store: new Ext.data.JsonStore({
		url: '/?c=MorbusACS&m=getACSDiag',
		//tableName: 'CrazyDiag',
		key: 'Diag_id',
		autoLoad: false,
		fields: [
			{name: 'Diag_id', type:'int'},
			{name: 'Diag_Code', type:'string'},
			{name: 'Diag_Name',  type:'string'}
		],
		sortInfo: {
			field: 'Diag_Code'
		}
	}),
	mode: 'remote',
	minChars: 2,
	minLength: 2,
	queryDelay: 500,
	triggerAction: 'all',
	codeField:'Diag_Code',
	displayField:'Diag_Name',
	valueField: 'Diag_id',
	fieldLabel: langs('Диагноз по ОКС'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'<font color="red">{Diag_Code}</font>&nbsp;{Diag_Name}'+
			'</div></tpl>',
    /* максимально возможное количество символов в коде, включая точку */
    countSymbolsCode: (getRegionNick().inlist([ 'msk', 'pskov', 'ufa', 'vologda' ]))?6:5,
    /**
     * Получение "чистого" кода диагноза, при вводе и поиске
     */
    getDiagCode: function(code) {
        // получаем количество возможных символов
        q = code.slice(0, this.countSymbolsCode);
        // если в этом полученном количестве есть пробел, то обрезаем по пробел
        q = (q)?q.split(' ')[0]:'';
        // если там есть русские символы, то делаем их нерусскимми (код же в английской транскрипции)
        q = LetterChange(q.charAt(0)) + q.slice(1, q.length);
        // если нет точки в коде, и код больше трех символов, то добавляем точку
        if (q.charAt(3) != '.' && q.length > 3)
        {
            q = q.slice(0, 3) + '.' + q.slice(3, this.countSymbolsCode-1);
        }
        // все пробелы заменяем на пусто // upd: после строки q = (q)?q.split(' ')[0]:''; уже не имеет актуальности
        // q = q.replace(' ', '');
        return q;
    },
    doQuery: function(q, forceAll) {
        if (q === undefined || q === null)
        {
            q = '';
        }
        else {
            q = this.getDiagCode(q);
            this.setRawValue(q);
        }
        sw.Promed.SwAKSDiagCombo.superclass.doQuery.apply(this, [q, forceAll]);
    },
	initComponent: function() {
		sw.Promed.SwAKSDiagCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swaksdiagcombo', sw.Promed.SwAKSDiagCombo);

// комбо руководитель OrgHead
sw.Promed.OrgHeadCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	mode: 'local',
	onLoadStore: Ext.emptyFn,
	triggerAction: 'all',
	displayField:'OrgHeadPerson_Fio',
	valueField: 'OrgHead_id',
	fieldLabel: langs('Руководитель'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
			'{OrgHeadPost_Name}  {OrgHeadPerson_Fio}'+
		'</div></tpl>',
	initComponent: function() {
		this.store = new Ext.data.JsonStore({
			url: '/?c=Org&m=loadOrgHeadGrid',
			editable: false,
			key: 'OrgHead_id',
			autoLoad: false,
			fields: [
				{name: 'OrgHead_id',    type:'int'},
				{name: 'OrgHeadPerson_Fio',  type:'string'},
				{name: 'OrgHeadPost_id', type: 'int'},
				{name: 'OrgHeadPost_Name', type: 'string'},
				{name: 'Person_id', type: 'int'},
				{name: 'OrgHead_CommissDate', type: 'int'}
			],
			sortInfo: {
				field: 'OrgHeadPerson_Fio'
			},
			listeners: {
				'load': function(store){
					this.setValue(this.getValue());
					this.onLoadStore(store);
				}.createDelegate(this)
			}
		});

		sw.Promed.OrgHeadCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('orgheadcombo', sw.Promed.OrgHeadCombo);

sw.Promed.SwXmlTemplateCatCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: '/?c=XmlTemplateCat&m=loadCombo',
		key: 'XmlTemplateCat_id',
		autoLoad: false,
		fields: [
			{name: 'XmlTemplateCat_id',    type:'int'},
			{name: 'EvnClass_id',    type:'int'},
			{name: 'XmlType_id',    type:'int'},
			{name: 'XmlTemplateCat_Name',  type:'string'}
		],
		sortInfo: {
			field: 'XmlTemplateCat_Name'
		}
	}),
	editable: false,
	triggerAction: 'all',
	displayField:'XmlTemplateCat_Name',
	hiddenName: 'XmlTemplateCat_id',
	valueField: 'XmlTemplateCat_id',
	fieldLabel: langs('Папка'),
	emptyText: langs('Корневая папка'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
		'{XmlTemplateCat_Name}'+
		'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwXmlTemplateCatCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swxmltemplatecatcombo', sw.Promed.SwXmlTemplateCatCombo);

// комбо протокол ВК..
sw.Promed.SwEvnVKCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	trigger1Class: 'x-form-search-trigger',
	store: new Ext.data.JsonStore({
		url: C_GETOBJECTLIST,
		editable: false,
		key: 'EvnVK_id',
		autoLoad: false,
		fields: [
			{name: 'EvnVK_id',    type:'int'},
			{name: 'EvnClass_Name',  type:'string'}
		],
		sortInfo: {
			field: 'EvnClass_Name'
		}
	}),
	triggerAction: 'all',
	readOnly: true,
	displayField:'EvnClass_Name',
	valueField: 'EvnVK_id',
	fieldLabel: langs('Протокол ВК'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{EvnClass_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwEvnVKCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swevnvkcombo', sw.Promed.SwEvnVKCombo);

sw.Promed.SwEvnVKNolosCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: '/?c=PersonRegister&m=loadEvnVKList',	
		editable: false,
		key: 'EvnVK_id',
		autoLoad: false,
		fields: [
			{name: 'EvnVK_id',    type:'string'},
			{name: 'Lpu_id',    type:'string'},
			{name: 'PersonEvn_id',    type:'string'},
			{name: 'Server_id',    type:'string'},
			{name: 'EvnVK_protocol',  type:'string'}
		],
		sortInfo: {
			field: 'EvnVK_protocol'
		}
	}),
	triggerAction: 'all',
	displayField:'EvnVK_protocol',
	valueField: 'EvnVK_id',
	hiddenName: 'EvnVK_id',
	fieldLabel: langs('Врачебная комиссия'),
	tpl: '<tpl for="."><div class="x-combo-list-item">{EvnVK_protocol}</div></tpl>',
	initComponent: function() {
		sw.Promed.SwEvnVKNolosCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swevnvknoloscombo', sw.Promed.SwEvnVKNolosCombo);

sw.Promed.SwLpuUnitTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	//triggerAction: 'all',
	editable: false,
	codeField: 'LpuUnitType_Code',
	displayField:'LpuUnitType_Name',
	valueField: 'LpuUnitType_id',
	hiddenName:'LpuUnitType_id',
	fieldLabel: langs('Тип'),
	onLoadStore: Ext.emptyFn,
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{LpuUnitType_Code}</font>&nbsp;{LpuUnitType_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwLpuUnitTypeCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.db.AdapterStore(
		{
			dbFile: 'Promed.db',
			tableName: 'LpuUnitType',
			key: 'LpuUnitType_id',
			autoLoad: false,
			baseParams: {object:'LpuUnitType', LpuUnitType_id:'',LpuUnitType_Code:'',LpuUnitType_Name:''},
			listeners: {
				'load': function(store) {
					this.setValue(this.getValue());
					this.onLoadStore(store);
				}.createDelegate(this)
			},
			fields:
				[
					{name: 'LpuUnitType_id',    type:'int'},
					{name: 'LpuUnitType_Code', type:'int'},
					{name: 'LpuUnitType_Name',  type:'string'},
					{name: 'LpuUnitType_SysNick',  type:'string'}
				],
			sortInfo:
			{
				field: 'LpuUnitType_Code'
			}
		})
	}
});
Ext.reg('swlpuunittypecombo', sw.Promed.SwLpuUnitTypeCombo);


sw.Promed.SwLpuUnitCmpCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	mode: 'remote',
	store: new sw.Promed.Store(
	{
		url: '/?c=CmpCallCard&m=loadLpuCmpUnits',		
		key: 'LpuSection_id',
		autoLoad: false,		
		fields:
		[
			{name: 'LpuSection_id',    type:'int'},			
			{name: 'LpuSection_Code',  type:'string'},
			{name: 'LpuSection_Name',  type:'string'}
		],
		sortInfo:
		{
			field: 'LpuSection_id'
		}
	}),
	//triggerAction: 'all',
	editable: false,	
	displayField:'LpuSection_Name',
	codeField:'LpuSection_Code',
	valueField: 'LpuSection_id',
	hiddenName:'LpuSection_id',
	fieldLabel: langs('Отделение'),
	initComponent: function()
	{
		sw.Promed.SwLpuUnitCmpCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swlpuunitcmpcombo', sw.Promed.SwLpuUnitCmpCombo);


sw.Promed.SwLabSampleDefectiveTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'LabSampleDefectiveType',
		key: 'LabSampleDefectiveType_id',
		autoLoad: false,
		baseParams: {object:'LabSampleDefectiveType', LabSampleDefectiveType_id:'',LabSampleDefectiveType_Code:'',LabSampleDefectiveType_Name:''},
		fields:
		[
			{name: 'LabSampleDefectiveType_id',    type:'int'},
			{name: 'LabSampleDefectiveType_Code', type:'int'},
			{name: 'LabSampleDefectiveType_Name',  type:'string'}
		],
		sortInfo:
		{
			field: 'LabSampleDefectiveType_Code'
		}
	}),
	//triggerAction: 'all',
	editable: false,
	codeField: 'LabSampleDefectiveType_Code',
	displayField:'LabSampleDefectiveType_Name',
	valueField: 'LabSampleDefectiveType_id',
	hiddenName:'LabSampleDefectiveType_id',
	fieldLabel: langs('Брак пробы'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{LabSampleDefectiveType_Code}</font>&nbsp;{LabSampleDefectiveType_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwLabSampleDefectiveTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swlabsampledefectivetypecombo', sw.Promed.SwLabSampleDefectiveTypeCombo);

sw.Promed.SwUslugaExecutionTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'UslugaExecutionType',
		key: 'UslugaExecutionType_id',
		autoLoad: false,
		baseParams: {object:'UslugaExecutionType', UslugaExecutionType_id:'',UslugaExecutionType_Code:'',UslugaExecutionType_Name:''},
		fields:
		[
			{name: 'UslugaExecutionType_id',    type:'int'},
			{name: 'UslugaExecutionType_Code', type:'int'},
			{name: 'UslugaExecutionType_Name',  type:'string'}
		],
		sortInfo:
		{
			field: 'UslugaExecutionType_Code'
		}
	}),
	//triggerAction: 'all',
	editable: false,
	codeField: 'UslugaExecutionType_Code',
	displayField:'UslugaExecutionType_Name',
	valueField: 'UslugaExecutionType_id',
	hiddenName:'UslugaExecutionType_id',
	fieldLabel: langs('Выполнение услуги'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{UslugaExecutionType_Code}</font>&nbsp;{UslugaExecutionType_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwUslugaExecutionTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swuslugaexecutiontypecombo', sw.Promed.SwUslugaExecutionTypeCombo);

sw.Promed.SwRefSampleCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'RefSample',
		key: 'RefSample_id',
		autoLoad: false,
		baseParams: {object:'RefSample', RefSample_id:'',RefMaterial_id:'',RefSample_Name:''},
		fields:
		[
			{name: 'RefSample_id',    type:'int'},
			{name: 'RefMaterial_id', type:'int'},
			{name: 'RefSample_Name',  type:'string'}
		],
		sortInfo:
		{
			field: 'RefSample_Name'
		}
	}),
	//triggerAction: 'all',
	editable: false,
	//codeField: 'RefSample_id',
	displayField:'RefSample_Name',
	valueField: 'RefSample_id',
	hiddenName:'RefSample_id',
	fieldLabel: langs('Биоматериал'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'{RefSample_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwRefSampleCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swrefsamplecombo', sw.Promed.SwRefSampleCombo);

// Класс комбобокса SwDurationTypeCombo
sw.Promed.SwDurationTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	editable: false,
	codeField: null,
	displayField: 'DurationType_Nick',
	hiddenName: 'DurationType_id',
	valueField: 'DurationType_id',
	hideLabel: true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{DurationType_Nick}',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.SwDurationTypeCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'DurationType_id', mapping: 'DurationType_id'},
				{name: 'DurationType_Code', mapping: 'DurationType_Code'},
				{name: 'DurationType_Nick', mapping: 'DurationType_Nick'},
				{name: 'DurationType_SysNick', mapping: 'DurationType_SysNick'},
				{name: 'DurationType_Name', mapping: 'DurationType_Name'}
			],
			key: 'DurationType_id',
			listeners: {
				'load': function(store) {
					this.setValue(this.getValue());
				}.createDelegate(this)
			},
			sortInfo: {
				field: 'DurationType_id'
			},
			tableName: 'DurationType'
		});
	}
});
Ext.reg('swdurationtypecombo', sw.Promed.SwDurationTypeCombo);

sw.Promed.SwMethodInputDrugCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	anchor: '100%',
	store: new Ext.data.SimpleStore(
	{
		key: 'MethodInputDrug_id',
		autoLoad: false,
		fields:
		[
			{name: 'MethodInputDrug_id', type: 'int'},
			{name: 'MethodInputDrug_Name', type: 'string'}
		],
		data: [
			[1,langs('По МНН')], 
			[2,langs('По торговому наименованию')]
		]
	}),
	fieldLabel: langs('Ввод препарата'),
	mode: 'local',
	editable: false,
	triggerAction: 'all',
	hiddenName: 'MethodInputDrug_id',
	displayField: 'MethodInputDrug_Name',
	valueField: 'MethodInputDrug_id',
	tpl: '<tpl for="."><div class="x-combo-list-item">{MethodInputDrug_Name}</div></tpl>',
	initComponent: function() {
		sw.Promed.SwMethodInputDrugCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swmethodinputdrugcombo', sw.Promed.SwMethodInputDrugCombo);

sw.Promed.SwDrugDocumentClassCombo = Ext.extend(Ext.form.ComboBox, {
	mode: 'local',
	forceSelection: true,
	resizable: true,
	selectOnFocus: true,
	editable: false,
	triggerAction: 'all',
	displayField: 'DrugDocumentClass_Name',
	valueField: 'DrugDocumentClass_id',
	hiddenField: 'DrugDocumentClass_id',
	codeField: 'DrugDocumentClass_Code',
	fieldLabel: langs('Вид заявки'),

	tpl: '<tpl for="."><div class="x-combo-list-item">' +
		'<font color="red">{DrugDocumentClass_Code}</font>&nbsp;{DrugDocumentClass_Name}' +
		'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwDrugDocumentClassCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			url: '/?c=DrugDocument&m=loadDrugDocumentClassList',
			key: 'DrugDocumentClass_id',
			autoLoad: false,
			fields: [
				{name: 'DrugDocumentClass_id',    type:'int'},
				{name: 'DrugDocumentClass_Code',    type:'int'},
				{name: 'DrugDocumentClass_Name',  type:'string'},
				{name: 'DrugDocumentClass_Nick',  type:'string'}
			],
			sortInfo: {
				field: 'DrugDocumentClass_Code'
			}
		});
	}
});
Ext.reg('swdrugdocumentclasscombo', sw.Promed.SwDrugDocumentClassCombo);

sw.Promed.SwDrugDocumentStatusCombo = Ext.extend(Ext.form.ComboBox, {
	mode: 'local',
	forceSelection: true,
	resizable: true,
	selectOnFocus: true,
	editable: false,
	triggerAction: 'all',
	displayField: 'DrugDocumentStatus_Name',
	valueField: 'DrugDocumentStatus_id',
	hiddenField: 'DrugDocumentStatus_id',
	codeField: 'DrugDocumentStatus_Code',
	fieldLabel: langs('Статус'),
	tpl: '<tpl for="."><div class="x-combo-list-item">' +
		'<font color="red">{DrugDocumentStatus_Code}</font>&nbsp;{DrugDocumentStatus_Name}' +
		'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwDrugDocumentStatusCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			url: '/?c=DrugDocument&m=loadDrugDocumentStatusList',
			key: 'DrugDocumentStatus_id',
			autoLoad: false,
			fields: [
				{name: 'DrugDocumentStatus_id',    type:'int'},
				{name: 'DrugDocumentStatus_Code',    type:'int'},
				{name: 'DrugDocumentStatus_Name',  type:'string'},
				{name: 'DrugDocumentType_id',  type:'int'}
			],
			sortInfo: {
				field: 'DrugDocumentStatus_Code'
			}
		});
	}
});
Ext.reg('swdrugdocumentstatuscombo', sw.Promed.SwDrugDocumentStatusCombo);

sw.Promed.SwDrugSimpleCombo = Ext.extend(Ext.form.ComboBox, {
	store: new Ext.data.JsonStore({
		url: '/?c=RlsDrug&m=loadDrugSimpleList',
		key: 'Drug_id',
		autoLoad: false,
		fields: [
			{name: 'Drug_id', type:'int'},
			{name: 'Drug_Code', type:'int'},
            {name: 'DrugForm_Name', type: 'string'},
            {name: 'Drug_Dose', type: 'string'},
            {name: 'DrugPrep_id', type: 'int'},
            {name: 'Tradenames_id', type: 'int'},
			{name: 'DrugComplexMnn_id', type:'int'},
			{name: 'DrugComplexMnnDose_Mass', type: 'string'},
			{name: 'Drug_Name', type: 'string'},
			{name: 'Ostat_Kolvo', type: 'string'},
			{name: 'DrugOstatRegistry_Kolvo', type: 'string'},
			{name: 'EvnCourseTreatDrug_Count', type: 'string'}
		],
		sortInfo: {
			field: 'Drug_Name'
		}
	}),
	triggerAction: 'all',
	forceSelection: true,
	resizable: true,
	selectOnFocus: true,
	mode: 'remote',
	minChars: 3,
	displayField:'Drug_Name',
	hiddenName: 'Drug_id',
	valueField: 'Drug_id',
	editable: true,
	enableKeyEvents: true,
	fieldLabel: langs('Медикамент'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{Drug_Name}&nbsp;'+
			'</div></tpl>',
    onTrigger2Click: function() {
        if (this.disabled)
            return false;

        var searchWindow = 'swEvnPrescrDrugTorgSearchWindow';
        var combo = this;
        combo.disableBlurAction = true;
        getWnd(searchWindow).show({
			hideIsFromDocumentUcOst: combo.hideIsFromDocumentUcOst,
            formParams: {
                Drug_Name: combo.getRawValue(),
                LpuSection_id: combo.getStore().baseParams.LpuSection_id||null,
                Storage_id: combo.getStore().baseParams.Storage_id||null,
                UserLpuSection_id: combo.getStore().baseParams.UserLpuSection_id||null,
                isFromDocumentUcOst: combo.getStore().baseParams.isFromDocumentUcOst||false,
                isFromCentralStorageOst: combo.getStore().baseParams.isFromCentralStorageOst||false
            },
            onHide: function() {
                combo.focus(false);
                combo.disableBlurAction = false;
            },
            onSelect: function (drugData) {
				combo.fireEvent('beforeselect', combo);

                combo.getStore().removeAll();
                combo.getStore().loadData([{
                    Drug_id: drugData.Drug_id,
                    Drug_Dose: drugData.Drug_Dose,
                    DrugComplexMnnDose_Mass: drugData.DrugComplexMnnDose_Mass,
                    DrugComplexMnn_id: drugData.DrugComplexMnn_id,
                    DrugForm_Name: drugData.DrugForm_Name,
                    Drug_Name: drugData.Drug_Name,
                    Drug_Code: drugData.Drug_Code,
					Ostat_Kolvo: drugData.Ostat_Kolvo,
					DrugOstatRegistry_Kolvo: drugData.DrugOstatRegistry_Kolvo,
					EvnCourseTreatDrug_Count: drugData.EvnCourseTreatDrug_Count
                }], true);

                combo.setValue(drugData.Drug_id);
                var index = combo.getStore().find('Drug_id', drugData.Drug_id);

                if (index == -1)
                {
                    return false;
                }

                var record = combo.getStore().getAt(index);

                if ( typeof record == 'object' ) {
                    combo.fireEvent('select', combo, record, 0);
                    combo.fireEvent('change', combo, record.get('Drug_id'));
                }

                getWnd(searchWindow).hide();
            }
        });
    },
	initComponent: function() {
		this.hideIsFromDocumentUcOst = false;
		if ( this.width < 500 || typeof(this.width)=='undefined' )
			this.listWidth = 300;
		sw.Promed.SwDrugSimpleCombo.superclass.initComponent.apply(this, arguments);
	}
});
sw.Promed.SwDrugSimpleCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwDrugSimpleCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwDrugSimpleCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwDrugSimpleCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwDrugSimpleCombo.prototype.trigger2Class = 'x-form-search-trigger';
/*sw.Promed.SwDrugSimpleCombo.prototype.onTrigger2Click = function() {
    if ( !this.disabled ) {
        this.clearValue()
        if(this.onClearValue && typeof this.onClearValue == 'function')
            this.onClearValue()
    }
};*/
Ext.reg('swdrugsimplecombo', sw.Promed.SwDrugSimpleCombo);


sw.Promed.SwDrugNomenSimpleCombo = Ext.extend(Ext.form.ComboBox, {
	store: new Ext.data.JsonStore({
		url: '/?c=RlsDrug&m=loadDrugNomenSimpleList',
		key: 'DrugNomen_id',
		autoLoad: false,
		fields: [
			{name: 'DrugNomen_id', type:'int'},
			{name: 'DrugNomen_Code', type:'int'},
			{name: 'DrugNomen_Name', type: 'string'}
		],
		sortInfo: {
			field: 'DrugNomen_Name'
		}
	}),
	triggerAction: 'all',
	forceSelection: true,
	resizable: true,
	selectOnFocus: true,
	mode: 'remote',
	minChars: 3,
	displayField:'DrugNomen_Name',
	hiddenName: 'DrugNomen_id',
	valueField: 'DrugNomen_id',
	editable: true,
	enableKeyEvents: true,
	fieldLabel: langs('Реактив'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{DrugNomen_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwDrugNomenSimpleCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdrugnomensimplecombo', sw.Promed.SwDrugNomenSimpleCombo);

sw.Promed.SwDrugNomenCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	mode: 'remote',
	minChars: 1,
	editable: true,
	triggerAction: 'all',
	hiddenName:'DrugNomen_id',
	valueField: 'DrugNomen_id',
	displayField: 'DrugNomen_Name',
	codeField: 'DrugNomen_Code',
	fieldLabel: langs('Номелклатура'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{DrugNomen_Code}</font>&nbsp;{DrugNomen_Name}',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.SwDrugNomenCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			url: '/?c=DrugNomen&m=loadDrugNomenList',
			key: 'DrugNomen_id',
			autoLoad: false,
			fields: [
				{name: 'DrugNomen_id', type:'int'},
				{name: 'DrugNomen_Code', type:'string'},
				{name: 'DrugNomen_Name', type: 'string'},
				{name: 'Drug_id', type: 'int'},
				{name: 'Drug_Ean', type: 'int'},
				{name: 'Drug_Dose', type: 'string'},
				{name: 'DrugForm_Name', type: 'string'},
				{name: 'DrugForm_Name', type: 'string'},
				{name: 'DrugTorg_id', type: 'int'},
				{name: 'DrugComplexMnn_id', type: 'int'},
				{name: 'DrugComplexMnnCode_Code', type: 'int'}
			],
			sortInfo: {
				field: 'DrugNomen_Name'
			}
		});

		if (this.includeCode) {
			this.store.baseParams.includeCode = true;
		}
	}
});
Ext.reg('swdrugnomencombo', sw.Promed.SwDrugNomenCombo);

sw.Promed.SwDrugComplexMnnCombo = Ext.extend(Ext.form.ComboBox, {
	store: new Ext.data.JsonStore({
		url: '/?c=RlsDrug&m=loadDrugComplexMnnList',
		key: 'DrugComplexMnn_id',
		autoLoad: false,
		fields: [
			{name: 'DrugComplexMnn_id', type:'int'},
			{name: 'RlsClsdrugforms_id', type:'int'},
            {name: 'RlsClsdrugforms_Name', type: 'string'},
            {name: 'RlsClsdrugforms_RusName', type: 'string'},
            {name: 'DrugComplexMnn_Dose', type: 'string'},
			{name: 'DrugComplexMnnDose_Mass', type: 'string'},
			{name: 'DrugComplexMnn_Name', type: 'string'},
			{name: 'RlsActmatters_id', type: 'int'},
			{name: 'Ostat_Kolvo', type: 'string'},
			{name: 'DrugOstatRegistry_Kolvo', type: 'string'},
			{name: 'EvnCourseTreatDrug_Count', type: 'string'}
		],
		sortInfo: {
			field: 'DrugComplexMnn_Name'
		}
	}),
	triggerAction: 'all',
	forceSelection: true,
	resizable: true,
	selectOnFocus: true,
	mode: 'remote',
	minChars: 3,
	displayField:'DrugComplexMnn_Name',
	hiddenName: 'DrugComplexMnn_id',
	valueField: 'DrugComplexMnn_id',
	editable: true,
	enableKeyEvents: true,
	fieldLabel: langs('МНН'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{DrugComplexMnn_Name}'+
			'</div></tpl>',
    onTrigger2Click: function() {
        if (this.disabled)
            return false;

        var searchWindow = 'swEvnPrescrDrugMnnSearchWindow';
        var combo = this;
        combo.disableBlurAction = true;
        getWnd(searchWindow).show({
			hideIsFromDocumentUcOst: combo.hideIsFromDocumentUcOst,
            formParams: {
                DrugComplexMnn_Name: combo.getRawValue(),
                LpuSection_id: combo.getStore().baseParams.LpuSection_id||null,
                Storage_id: combo.getStore().baseParams.Storage_id||null,
                UserLpuSection_id: combo.getStore().baseParams.UserLpuSection_id||null,
                isFromDocumentUcOst: combo.getStore().baseParams.isFromDocumentUcOst||false,
                isFromCentralStorageOst: combo.getStore().baseParams.isFromCentralStorageOst||false
            },
            onHide: function() {
                combo.focus(false);
                combo.disableBlurAction = false;
            },
            onSelect: function (drugData) {
                combo.getStore().removeAll();
                combo.getStore().loadData([{
                    DrugComplexMnn_id: drugData.DrugComplexMnn_id,
					RlsActmatters_id: drugData.RlsActmatters_id,
                    RlsClsdrugforms_id: drugData.RlsClsdrugforms_id,
                    RlsClsdrugforms_Name: drugData.RlsClsdrugforms_Name,
					RlsClsdrugforms_RusName: drugData.RlsClsdrugforms_RusName,
                    DrugComplexMnn_Dose: drugData.DrugComplexMnn_Dose,
                    DrugComplexMnnDose_Mass: drugData.DrugComplexMnnDose_Mass,
                    DrugComplexMnn_Name: drugData.DrugComplexMnn_Name,
					Ostat_Kolvo: drugData.Ostat_Kolvo,
					DrugOstatRegistry_Kolvo: drugData.DrugOstatRegistry_Kolvo,
					EvnCourseTreatDrug_Count: drugData.EvnCourseTreatDrug_Count
                }], true);

                combo.setValue(drugData.DrugComplexMnn_id);
                var index = combo.getStore().find('DrugComplexMnn_id', drugData.DrugComplexMnn_id);

                if (index == -1)
                {
                    return false;
                }

                var record = combo.getStore().getAt(index);

                if ( typeof record == 'object' ) {
                    combo.fireEvent('select', combo, record, 0);
                    combo.fireEvent('change', combo, record.get('DrugComplexMnn_id'));
                }

                getWnd(searchWindow).hide();
            }
        });
    },
	initComponent: function() {
		if ( this.width < 500 || typeof(this.width)=='undefined' )
			this.listWidth = 300;
		sw.Promed.SwDrugComplexMnnCombo.superclass.initComponent.apply(this, arguments);
	}
});
sw.Promed.SwDrugComplexMnnCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwDrugComplexMnnCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwDrugComplexMnnCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwDrugComplexMnnCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwDrugComplexMnnCombo.prototype.trigger2Class = 'x-form-search-trigger';
/*sw.Promed.SwDrugComplexMnnCombo.prototype.onTrigger2Click = function() {
 if ( !this.disabled ) {
 this.clearValue()
 if(this.onClearValue && typeof this.onClearValue == 'function')
 this.onClearValue()
 }
 };*/

Ext.reg('swdrugcomplexmnncombo', sw.Promed.SwDrugComplexMnnCombo);

sw.Promed.SwFirmNamesCombo = Ext.extend(Ext.form.ComboBox, {
	store: new Ext.data.JsonStore({
		url: '/?c=RlsDrug&m=loadFirmNamesList',
		key: 'FIRMNAMES_ID',
		autoLoad: false,
		fields: [
			{name: 'FIRMNAMES_ID', type:'int'},
			{name: 'NAME', type: 'string'}
		],
		sortInfo: {
			field: 'NAME'
		}
	}),
	triggerAction: 'all',
	forceSelection: true,
	resizable: true,
	selectOnFocus: true,
	mode: 'remote',
	minChars: 3,
	displayField:'NAME',
	hiddenName: 'FIRMNAMES_ID',
	valueField: 'FIRMNAMES_ID',
	editable: true,
	enableKeyEvents: true,
	fieldLabel: langs('Производитель'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{NAME}'+
			'</div></tpl>',
	initComponent: function() {
		if ( this.width < 500 || typeof(this.width)=='undefined' )
			this.listWidth = 300;
		sw.Promed.SwFirmNamesCombo.superclass.initComponent.apply(this, arguments);
	}
});
sw.Promed.SwFirmNamesCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwFirmNamesCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwFirmNamesCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwFirmNamesCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwFirmNamesCombo.prototype.trigger2Class = 'x-form-clear-trigger';
sw.Promed.SwFirmNamesCombo.prototype.onTrigger2Click = function() {
	if ( !this.disabled ) {
		this.clearValue()
		if(this.onClearValue && typeof this.onClearValue == 'function')
			this.onClearValue()
	}
};
Ext.reg('swfirmnamescombo', sw.Promed.SwFirmNamesCombo);

sw.Promed.SwOkeiCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	autoLoad: false,
	loadParams: null,
	editable: false,
	codeField: null,
	displayField: 'Okei_NationSymbol',
	hiddenName: 'Okei_id',
	valueField: 'Okei_id',
	fieldLabel: langs('Ед.измерения'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{Okei_NationSymbol}&nbsp;',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.SwOkeiCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.db.AdapterStore({
			autoLoad: this.autoLoad,
			dbFile: 'Promed.db',
			fields: [
				{ name: 'Okei_id', type: 'int' },
				{ name: 'OkeiType_id', type: 'int' },
				{ name: 'Okei_Code', type: 'int' },
				{ name: 'Okei_Name', type: 'string' },
				{ name: 'Okei_NationSymbol', type: 'string' },
				{ name: 'Okei_InterNationSymbol', type: 'string' },
				{ name: 'Okei_NationCode', type: 'string' },
				{ name: 'Okei_InterNationCode', type: 'string' },
				{ name: 'Okei_cid', type: 'int' },
				{ name: 'Okei_UnitConversion', type: 'int' }
			],
			key: 'Okei_id',
			listeners: {
				'load': function(store) {
					this.setValue(this.getValue());
				}.createDelegate(this)
			},
			sortInfo: {
				field: 'Okei_id'
			},
			tableName: 'Okei'
		});
		this.autoLoad = (typeof this.loadParams != 'object');
		this.addListener('render',function(combo) {
			if(combo.autoLoad == false) {
				if(combo.loadParams) {
					combo.getStore().removeAll();
					combo.getStore().load(combo.loadParams);
				} else if(combo.getStore().getCount() == 0) {
					combo.getStore().load();
				}
			}
		});
	}
});
Ext.reg('swokeicombo', sw.Promed.SwOkeiCombo);

/*
 * Комбо для выбора котировочной заявки
 */
sw.Promed.SwWhsDocumentProcurementRequestCombo = Ext.extend(Ext.form.ComboBox, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: '/?c=WhsDocumentSupply&m=loadWhsDocumentProcurementRequestList',
		key: 'WhsDocumentProcurementRequest_id',
		autoLoad: false,
		fields: [
			{name: 'WhsDocumentProcurementRequest_id', type:'int'},
			{name: 'WhsDocumentUc_Name', type:'string'},
			{name: 'DrugFinance_id', type:'int'},
			{name: 'WhsDocumentCostItemType_id', type:'int'},
			{name: 'BudgetFormType_id', type:'int'},
			{name: 'WhsDocumentProcurementRequestSpec_Name', type: 'string'},
			{name: 'Org_id', type: 'int'},
			{name: 'OrgType_SysNick', type: 'int'}
		],
		sortInfo: {
			field: 'WhsDocumentUc_Name'
		}
	}),
	displayField:'WhsDocumentUc_Name',
	valueField: 'WhsDocumentProcurementRequest_id',
	fieldLabel: langs('Котировачная заявка'),
	resizable: true,
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{WhsDocumentUc_Name}&nbsp; / {WhsDocumentProcurementRequestSpec_Name}&nbsp;'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwWhsDocumentProcurementRequestCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swwhsdocumentprocurementrequestcombo', sw.Promed.SwWhsDocumentProcurementRequestCombo);

/*
 * Комбо для выбора № ГК
 */
sw.Promed.SwWhsDocumentSupplyNumCombo = Ext.extend(Ext.form.ComboBox, {
	mode: 'local',
	allowBlank: true,
	store: new Ext.data.JsonStore({
		url: '/?c=WhsDocumentSupply&m=loadWhsDocumentSupplyCombo',
		key: 'WhsDocumentUc_Num',
		baseParams: {
			WhsDocumentType_ids: Ext.util.JSON.encode([3,6])
		},
		autoLoad: false,
		fields: [
			{name: 'WhsDocumentUc_Num',  type:'string'}
		],
		sortInfo: {
			field: 'WhsDocumentUc_Num'
		}
	}),
	editable: true,
	displayField:'WhsDocumentUc_Num',
	valueField: 'WhsDocumentUc_Num',
	fieldLabel: langs('№ ГК'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{WhsDocumentUc_Num}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwWhsDocumentSupplyNumCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swwhsdocumentsupplynumcombo', sw.Promed.SwWhsDocumentSupplyNumCombo);

sw.Promed.SwWhsDocumentSupplyCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	displayField: 'WhsDocumentSupply_Num',
	valueField: 'WhsDocumentSupply_id',
	hiddenName: 'WhsDocumentSupply_id',
	fieldLabel: 'Контракт',
	mode: 'remote',
	triggerAction: 'all',

	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<p style="font-weight: bold;">{WhsDocumentSupply_Num} {[this.printDate(values.WhsDocumentSupply_Date)]}&nbsp;</p>',
		'{[this.printRow(values)]}',
		'</div></tpl>',
		{
			printDate: function(date) {
				return date instanceof Date ? date.format('d.m.Y') : date;
			},
			printRow: function(values) {
				var items = [];
				if (values.DrugRequest_Name) {
					items.push(values.DrugRequest_Name);
				}
				if (values.WhsDocumentProcurementRequest_Name) {
					items.push(values.WhsDocumentProcurementRequest_Name);
				}
				if (items.length == 0 && values.WhsDocumentSupply_ProtNum) {
					items.push(values.WhsDocumentSupply_ProtNum);
				}
				return items.length > 0 ? '<p>'+items.join(', ')+'</p>' : '';
			}
		}
	),

	initComponent: function() {
		this.store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{name: 'WhsDocumentSupply_id', type: 'int'},
				{name: 'WhsDocumentSupply_Num', type: 'string'},
				{name: 'WhsDocumentSupply_Date', type: 'date', dateFormat: 'd.m.Y'},
				{name: 'WhsDocumentSupply_ProtNum', type: 'string'},
				{name: 'DrugRequest_Name', type: 'string'},							//Наименование заявки
				{name: 'WhsDocumentProcurementRequest_Name', type: 'string'}		//Наименование лота
			],
			key: 'WhsDocumentSupply_id',
			sortInfo: {
				field: 'WhsDocumentSupply_Num'
			},
			baseParams: {
				WhsDocumentType_ids: Ext.util.JSON.encode([3,6])
			},
			url: '/?c=WhsDocumentSupply&m=loadWhsDocumentSupplySecondCombo'
		});

		sw.Promed.SwWhsDocumentSupplyCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swwhsdocumentsupplycombo', sw.Promed.SwWhsDocumentSupplyCombo);

sw.Promed.SwWhsDocumentSupplyStrCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField: 'Drug_Name',
	valueField: 'WhsDocumentSupplyStr_id',
	hiddenName: 'WhsDocumentSupplyStr_id',
	fieldLabel: 'Медикамент',
	triggerAction: 'all',

	tpl: new Ext.XTemplate(
		'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold;">',
		'<td style="padding: 2px; width: 13%;">Кол-во по контракту</td>',
		'<td style="padding: 2px; width: 13%;">Ставка НДС</td>',
		'<td style="padding: 2px; width: 13%;">Цена с НДС</td>',
		'<td style="padding: 2px; width: 61%;">Наименование</td>',
		'<tpl for=".">',
		'<tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
		'<td style="padding: 2px;">{WhsDocumentSupplyStr_KolvoUnit}&nbsp;</td>',
		'<td style="padding: 2px;">{WhsDocumentSupplyStr_NDS}&nbsp;</td>',
		'<td style="padding: 2px;">{WhsDocumentSupplyStr_PriceNDS}&nbsp;</td>',
		'<td style="padding: 2px;">{Drug_Name}&nbsp;</td>',
		'</tr></tpl>',
		'</table>'
	),

	initComponent: function() {
		this.store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{name: 'WhsDocumentSupplyStr_id', type: 'string'},
				{name: 'WhsDocumentSupplyStrType', type: 'string'},
				{name: 'WhsDocumentSupplySpec_id', type: 'int'},
				{name: 'WhsDocumentSupplySpecDrug_id', type: 'int'},
				{name: 'Drug_id', type: 'int'},
				{name: 'Drug_Name', type: 'string'},
				{name: 'DrugComplexMnn_id', type: 'int'},
				{name: 'DrugComplexMnn_Name', type: 'string'},
				{name: 'WhsDocumentSupplyStr_KolvoUnit', type: 'float'},
				{name: 'WhsDocumentSupplyStr_NDS', type: 'float'},
				{name: 'WhsDocumentSupplyStr_PriceNDS', type: 'float'},
				{name: 'GoodsUnit_id', type: 'int'},
				{name: 'GoodsUnit_Name', type: 'string'}
			],
			key: 'WhsDocumentSupplyStr_id',
			sortInfo: {
				field: 'Drug_Name'
			},
			url: '/?c=WhsDocumentSupplySpec&m=loadWhsDocumentSupplyStrCombo'
		});

		sw.Promed.SwWhsDocumentSupplyStrCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swwhsdocumentsupplystrcombo', sw.Promed.SwWhsDocumentSupplyStrCombo);

/**
 * Комбобокс выбора типа МО по возрасту приема взрослые/детские
 */
sw.Promed.SwLpuAgeTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.data.SimpleStore(
	{
		key: 'LpuAgeType_id',
		autoLoad: false,
		fields:
		[
			{name: 'LpuAgeType_id', type: 'int'},
			{name: 'LpuAgeType_Name', type: 'string'}
		],
		data: [
			[0,langs('ВСЕ МО')],
			[1,langs('Взрослые МО')],
			[2,langs('Детские МО')],
			[3,langs('МО смешанного типа')]
		]
	}),
	//triggerAction: 'all',
	editable: false,
	displayField:'LpuAgeType_Name',
	valueField: 'LpuAgeType_id',
	hiddenName:'LpuAgeType_id',
	fieldLabel: langs('Тип МО'),
	//value: 0,
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{LpuAgeType_Name}&nbsp;'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwLpuAgeTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swlpuagetypecombo', sw.Promed.SwLpuAgeTypeCombo);

/**
 * Комбобокс выбора типа вызова (смп/нмп)
 */
sw.Promed.SwCmpCallCardTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.data.SimpleStore(
	{
		key: 'CmpCallCardType_id',
		autoLoad: true,
		fields:
		[
			{name: 'CmpCallCardType_id', type: 'int'},
			{name: 'CmpCallCardType_Name', type: 'string'}
		],
		data: [
			[1,langs('СМП')],
			[2,langs('НМП')]			
		]
	}),
	//triggerAction: 'all',
	editable: false,
	displayField:'CmpCallCardType_Name',
	valueField: 'CmpCallCardType_id',
	hiddenName:'CmpCallCardType_id',
	fieldLabel: langs('Вид вызова'),
	value: 1,
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{CmpCallCardType_Name}&nbsp;'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwCmpCallCardTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcmpcallcardtypecombo', sw.Promed.SwCmpCallCardTypeCombo);

/**
 * Комбобокс выбора типа вызова доп. для Крыма (экстренный/неотложный)
 */
sw.Promed.SwCmpCloseCardIsExtraCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.data.SimpleStore(
	{
		key: 'CmpCloseCardIsExtra',
		autoLoad: true,
		fields:
		[
			{name: 'CmpCloseCardIsExtra', type: 'int'},
			{name: 'CmpCloseCardIsExtra_Name', type: 'string'}
		],
		data: [
			[1,langs('Экстренный')],
			[2,langs('Неотложный')]			
		]
	}),
	//triggerAction: 'all',
	editable: false,
	displayField:'CmpCloseCardIsExtra_Name',
	valueField: 'CmpCloseCardIsExtra',
	hiddenName:'CmpCloseCard_IsExtra',
	fieldLabel: langs('Вид вызова'),
	value: 1,
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{CmpCloseCardIsExtra_Name}&nbsp;'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwCmpCloseCardIsExtraCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcmpclosecardisextracombo', sw.Promed.SwCmpCloseCardIsExtraCombo);

/**
 * Комбобокс выбора обоснованности вызова для Крыма (профильный, непрофильный)
 */
sw.Promed.SwCmpCloseCardIsProfileCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.data.SimpleStore(
	{
		key: 'CmpCloseCardIsProfile',
		autoLoad: true,
		fields:
		[
			{name: 'CmpCloseCardIsProfile', type: 'int'},
			{name: 'CmpCloseCardIsProfile_Name', type: 'string'}
		],
		data: [
			[1,langs('Непрофильный')],
			[2,langs('Профильный')]
		]
	}),
	//triggerAction: 'all',
	editable: false,
	displayField:'CmpCloseCardIsProfile_Name',
	valueField: 'CmpCloseCardIsProfile',
	hiddenName:'CmpCloseCard_IsProfile',
	fieldLabel: langs('Обоснованность вызова'),
	value: 2,
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{CmpCloseCardIsProfile_Name}&nbsp;'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwCmpCloseCardIsProfileCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcmpclosecardisprofilecombo', sw.Promed.SwCmpCloseCardIsProfileCombo);

sw.Promed.SwUslugaComplexAllCombo = Ext.extend(Ext.form.ComboBox, {
	beforeBlur: function() {
		// медитируем
		return true;
	},
	codeField: 'UslugaComplex_Code',
	displayField: 'UslugaComplex_Name',
	editable: true,
	emptyText: langs('Введите код или название услуги...'),
	enableKeyEvents: true,
	fieldLabel: langs('Услуга'),
	forceSelection: true,
	hiddenName: 'UslugaComplex_id',
	listeners: {
		'select': function(combo, record, index) {
			if ( record.get(combo.valueField) ) {
				combo.setRawValue(record.get('UslugaComplex_Code') + ". " + record.get('UslugaComplex_Name'));
			}
		},
		'keydown': function(inp, e) {
			if ( e.getKey() == e.END ) {
				this.inKeyMode = true;
				this.select(this.getStore().getCount() - 1);
			}

			if ( e.getKey() == e.HOME ) {
				this.inKeyMode = true;
				this.select(0);
			}

			if ( e.getKey() == e.PAGE_UP ) {
				this.inKeyMode = true;
				var ct = this.getStore().getCount();

				if ( ct > 0 ) {
					if ( this.selectedIndex == -1 ) {
						this.select(0);
					}
					else if ( this.selectedIndex != 0 ) {
						if ( this.selectedIndex - 10 >= 0 )
							this.select(this.selectedIndex - 10);
						else
							this.select(0);
					}
				}
			}

			if ( e.getKey() == e.PAGE_DOWN ) {
				if ( !this.isExpanded() ) {
					this.onTriggerClick();
				}
				else {
					this.inKeyMode = true;
					var ct = this.getStore().getCount();

					if ( ct > 0 ) {
						if ( this.selectedIndex == -1 ) {
							this.select(0);
						}
						else if ( this.selectedIndex != ct - 1 ) {
							if ( this.selectedIndex + 10 < ct - 1 )
								this.select(this.selectedIndex + 10);
							else
								this.select(ct - 1);
						}
					}
				}
			}

			if ( e.altKey || e.ctrlKey || e.shiftKey )
				return true;

			if ( e.getKey() == e.DELETE) {
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if ( inp.onClearValue ) {
					this.onClearValue();
				}
				e.stopEvent();
				return true;
			}
		},
		'blur': function(combo) {
			if (combo.getValue() == null || combo.getValue().toString().length == 0 || combo.getRawValue().toString().length == 0) {
				combo.setRawValue(null);
				combo.setValue('');
				combo.fireEvent('change', combo, 0, 1);
			}
		}
	},
	minChars: 1,
	minLength: 0,
	mode: 'remote',
	resizable: true,
	selectOnFocus: true,
	setUslugaCategoryList: function(list) {
		if ( typeof list != 'object' ) {
			list = new Array();
		}
		this.getStore().baseParams.uslugaCategoryList = Ext.util.JSON.encode(list);
		this.lastQuery = 'This query sample that is not will never appear';
		return true;
	},
	triggerAction: 'all',
	date: null,
	valueField: 'UslugaComplex_id',
	initComponent: function() {
		sw.Promed.SwUslugaComplexAllCombo.superclass.initComponent.apply(this, arguments);

		this.tpl = new Ext.XTemplate(
			'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: center;">',
			'<td style="padding: 2px; width: 10%;">Код</td>',
			'<td style="padding: 2px; width: 40%;">Наименование</td>',
			'<td style="padding: 2px; width: 26%;">Категория</td>',
			'<td style="padding: 2px; width: 12%;">Начало</td>',
			'<td style="padding: 2px; width: 12%;">Окончание</td>',
			'<tpl for=".">',
			'<tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip; {[this.decorateByDate(values.UslugaComplex_endDT)]}">',
			'<td style="padding: 2px;">{UslugaComplex_Code}&nbsp;</td>',
			'<td style="padding: 2px;">{UslugaComplex_Name}&nbsp;</td>',
			'<td style="padding: 2px;">{UslugaCategory_Name}&nbsp;</td>',
			'<td style="padding: 2px;">{UslugaComplex_begDT}&nbsp;</td>',
			'<td style="padding: 2px;">{[Ext.isEmpty(values.UslugaComplex_endDT)?"":values.UslugaComplex_endDT]}&nbsp;</td>',
			'</tr></tpl>',
			'</table>',
			{
				decorateByDate: function(endDate) {
					var result = '';
					if (this.date && endDate) {
						result = (Date.parseDate(endDate, 'd.m.Y') <= Date.parseDate(this.date, 'd.m.Y')) ? 'color: gray;' : '';
					}
					return result;
				}.createDelegate(this)
			}
		);

		if ( this.mode == 'local' ) {
			this.store = new Ext.db.AdapterStore({
				autoLoad: false,
				dbFile: 'Promed.db',
				fields: [
					{ name: 'UslugaComplex_id', type: 'int' },
					{ name: 'UslugaCategory_id', type: 'int' },
					{ name: 'UslugaCategory_Name', type: 'string' },
					{ name: 'UslugaComplex_pid', type: 'int' },
					{ name: 'UslugaComplex_begDT', type: 'date' },
					{ name: 'UslugaComplex_endDT', type: 'date' },
					{ name: 'UslugaComplex_Code', type: 'string' },
					{ name: 'UslugaComplex_Name', type: 'string' },
					{ name: 'UslugaComplex_UET', type: 'float' },
					{ name: 'Lpu_Nick', type: 'string' },
					{ name: 'CompositionCount', type: 'int' }
				],
				key: 'UslugaComplex_id',
				listeners: {
					'load': function(store) {
						this.setValue(this.getValue());
						this.fireEvent('storeload', store);
					}.createDelegate(this)
				},
				sortInfo: {
					field: 'UslugaComplex_id'
				},
				tableName: 'UslugaComplex'
			});
		}
		else  {
			this.store = new Ext.data.Store({
				autoLoad: false,
				reader: new Ext.data.JsonReader({
					id: 'UslugaComplex_id'
				}, [
					{ name: 'UslugaComplex_id', mapping: 'UslugaComplex_id' },
					{ name: 'UslugaCategory_id', mapping: 'UslugaCategory_id' },
					{ name: 'UslugaCategory_Name', mapping: 'UslugaCategory_Name' },
					{ name: 'UslugaComplex_pid', mapping: 'UslugaComplex_pid' },
					{ name: 'UslugaComplex_begDT', mapping: 'UslugaComplex_begDT' },
					{ name: 'UslugaComplex_endDT', mapping: 'UslugaComplex_endDT' },
					{ name: 'UslugaComplex_Code', mapping: 'UslugaComplex_Code' },
					{ name: 'UslugaComplex_Name', mapping: 'UslugaComplex_Name' },
					{ name: 'UslugaComplex_UET', mapping: 'UslugaComplex_UET' },
					{ name: 'Lpu_Nick', mapping: 'Lpu_Nick' },
					{ name: 'CompositionCount', mapping: 'CompositionCount' }
				]),
				listeners: {
					'load': function(store) {
						this.fireEvent('storeload', store);
					}.createDelegate(this)
				},
				url: '/?c=UslugaComplex&m=loadUslugaComplexCombo'
			});
		}
	}
});
Ext.reg('swuslugacomplexallcombo', sw.Promed.SwUslugaComplexAllCombo);

sw.Promed.SwUslugaComplexNewCombo = Ext.extend(Ext.form.ComboBox, {
	reload: function() {
		var combo = this;
		var usluga_complex_id = combo.getValue();
		combo.clearValue();
		combo.lastQuery = '';
		combo.getStore().removeAll();
		combo.getStore().baseParams.query = '';

		combo.getStore().load({
			callback: function() {
				index = combo.getStore().findBy(function(rec) {
					return (rec.get('UslugaComplex_id') == usluga_complex_id);
				});

				if ( index >= 0 ) {
					combo.setValue(usluga_complex_id);
				}
			}
		});
	},
	showCodeField: true,
	setValue: function(v) {
		sw.Promed.SwBaseLocalCombo.superclass.setValue.apply(this, arguments);
		if ( (this.codeField) && (this.editable == false || this.showCodeField) ) {
			var r = this.findRecord(this.valueField, v);

			if ( r ) {
				if ( r.get(this.codeField).toString().length > 0 && r.get(this.codeField) != -1 ) {
					var text = r.get(this.codeField).toString() + '. ' + r.get(this.displayField);
				}
				else {
					var text = r.get(this.displayField);
				}

				if ( r.get(this.valueField).toString().length > 0 && this.el) {
					Ext.form.ComboBox.superclass.setRawValue.call(this, text);
				}
			}
		}
	},
	isAttribute: function (name) {
		var me = this;
		var AttributeList = me.getFieldValue('UslugaComplex_AttributeList');
		return typeof AttributeList == 'string' && AttributeList.split(',').in_array(name);
	},
	clearBaseParams: function() {
		this.lastQuery = 'This query sample that is not will never appear';

		this.getStore().baseParams.allowedUslugaComplexAttributeList = null;
		this.getStore().baseParams.allowedUslugaComplexAttributeMethod = 'or';
		this.getStore().baseParams.allowMorbusVizitCodesGroup88 = 0;
		this.getStore().baseParams.allowMorbusVizitOnly = 0;
		this.getStore().baseParams.allowNonMorbusVizitOnly = 0;
		this.getStore().baseParams.ignoreUslugaComplexDate = 0;
		this.getStore().baseParams.disallowedUslugaComplexAttributeList = null;
		this.getStore().baseParams.Mes_id = null;
		this.getStore().baseParams.MesOldVizit_id = null;
		this.getStore().baseParams.LpuLevel_Code = null;
		this.getStore().baseParams.LpuSection_id = null;
		this.getStore().baseParams.LpuSectionProfile_id = null;
		this.getStore().baseParams.PayType_id = null;
		this.getStore().baseParams.Person_id = null;
		this.getStore().baseParams.uslugaCategoryList = null;
		this.getStore().baseParams.uslugaComplexCodeList = null;
		this.getStore().baseParams.UslugaComplex_Date = null;
        this.getStore().baseParams.UslugaComplex_2011id = null;
        this.getStore().baseParams.to = this.to;
	},
	to: null,
	DispClass_id: null,
	dispOnly: false,
	nonDispOnly: true,
	codeField: 'UslugaComplex_Code',
	displayField: 'UslugaComplex_Name',
	editable: true,
	emptyText: langs('Введите код или название услуги...'),
	enableKeyEvents: true,
	fieldLabel: langs('Услуга'),
	forceSelection: true,
	hiddenName: 'UslugaComplex_id',
	minChars: 1,
	minLength: 0,
	mode: 'remote',
	resizable: true,
	selectOnFocus: true,
	setVizitCodeFilters: function(params) {
		if ( false == sw.Promed.EvnVizitPL.isSupportVizitCode() ) {
			return true;
		}

		this.getStore().baseParams.isVizitCode = 1;

		if (params.allowMorbusVizitOnly) {
			this.getStore().baseParams.allowMorbusVizitOnly = 1;
			if (params.allowMorbusVizitCodesGroup88) {
				this.getStore().baseParams.allowMorbusVizitCodesGroup88 = 1;
			}
		}
		if (params.allowNonMorbusVizitOnly) {
			this.getStore().baseParams.allowNonMorbusVizitOnly = 1;
		}
		switch ( getRegionNick() ) {
			case 'perm':
				this.setUslugaCategoryList([ 'gost2011' ]);
				this.setAllowedUslugaComplexAttributeList([ 'vizit' ]);
				if (params.isStom) {
					this.setAllowedUslugaComplexAttributeList([ 'stom', 'vizit' ]);
					this.setAllowedUslugaComplexAttributeMethod('and');
					this.getStore().baseParams.isStomVizitCode = 1;
				}
				break;

            case 'buryatiya':
				var addArray = [];
				/*if (this.getStore().baseParams.isInoter) {
					var addArray = ['mur'];
				} else {
                    //this.setDisallowedUslugaComplexAttributeList([ 'mur' ]);
					var addArray = [];
				}*/
                if (params.isStom) {
                    this.setAllowedUslugaComplexAttributeList([ 'vizit', 'stom' ].concat(addArray));
                } else if (params.isStac) {
                    this.setAllowedUslugaComplexAttributeList([ 'stac_kd' ].concat(addArray));
                } else {
                    this.setAllowedUslugaComplexAttributeList([ 'vizit' ].concat(addArray));
                }
				this.setAllowedUslugaComplexAttributeMethod('and');
                this.setUslugaCategoryList([ 'tfoms' ]);
                break;

			case 'kz':
				this.setUslugaCategoryList([ 'classmedus' ]);
			break;

			case 'pskov':
				if (params.isStom) {
					this.setAllowedUslugaComplexAttributeList([ 'vizit', 'stom' ]);
					this.setAllowedUslugaComplexAttributeMethod('and');
				} else if (params.isStac) {
					this.setAllowedUslugaComplexAttributeList([ 'stac_kd' ]);
				} else {
					this.setAllowedUslugaComplexAttributeList([ 'vizit', 'obr' ]);
				}
				this.setUslugaCategoryList([ 'pskov_foms' ]);
			break;

			case 'ufa':
				this.setUslugaCategoryList([ 'lpusection' ]);
				if (params.isStom) {
					this.setAllowedUslugaComplexAttributeList([ 'stom' ]);
					this.getStore().baseParams.isStomVizitCode = 1;
					this.getStore().baseParams.allowMorbusVizitCodesGroup88 = 0;
					this.getStore().baseParams.allowMorbusVizitOnly = 0;
					this.getStore().baseParams.allowNonMorbusVizitOnly = 0;
				}
			break;
			
			case 'ekb':
				this.getStore().baseParams.UslugaComplexPartition_CodeList = Ext.util.JSON.encode([300,301]);
				this.getStore().baseParams.filterByLpuSection = 1;
			break;
		}
		return true;
	},
	setAllowedUslugaComplexAttributeList: function(list) {
		if ( typeof list != 'object' ) {
			list = new Array();
		}

		this.getStore().baseParams.allowedUslugaComplexAttributeList = Ext.util.JSON.encode(list);
		this.lastQuery = 'This query sample that is not will never appear';

		return true;
	},
	// Метод учета допустимых типов атрибутов комплексной услуги
	// Допустимые значения:
	// and - должны иметься все перечисленные атрибуты
	// or - должен иметься хотя бы один из перечисленных атрибутов (по умолчанию)
	setAllowedUslugaComplexAttributeMethod: function(method) {
		if ( typeof method != 'string' || !method.inlist([ 'and', 'or' ]) ) {
			method = 'or';
		}

		this.getStore().baseParams.allowedUslugaComplexAttributeMethod = method;

		return true;
	},
	setDisallowedUslugaComplexAttributeList: function(list) {
		if ( typeof list != 'object' ) {
			list = new Array();
		}

		this.getStore().baseParams.disallowedUslugaComplexAttributeList = Ext.util.JSON.encode(list);
		this.lastQuery = 'This query sample that is not will never appear';

		return true;
	},
	setLpuLevelCode: function(lpu_level_code) {
		this.getStore().baseParams.LpuLevel_Code = lpu_level_code;
	},
	setMesOldVizit_id: function(MesOldVizit_id){
		this.getStore().baseParams.MesOldVizit_id = MesOldVizit_id;
	},
	setMedSpecOms_id: function(MedSpecOms_id){
		this.getStore().baseParams.MedSpecOms_id = MedSpecOms_id;
	},
	setFedMedSpec_id: function(FedMedSpec_id){
		this.getStore().baseParams.FedMedSpec_id = FedMedSpec_id;
	},
	setLpuSectionProfile_id: function(LpuSectionProfile_id){
		this.getStore().baseParams.LpuSectionProfile_id = LpuSectionProfile_id;
	},
	setLpuSectionProfileByLpuSection_id: function(LpuSection_id){
		this.getStore().baseParams.LpuSectionProfileByLpuSection_id = LpuSection_id;
	},
	
	setPayType: function(PayType_id) {
		this.getStore().baseParams.PayType_id = PayType_id;
	},
	setPersonId: function(Person_id) {
		this.getStore().baseParams.Person_id = Person_id;
	},
	setUslugaComplexDate: function(date) {
		this.getStore().baseParams.UslugaComplex_Date = date;
	},
	setUslugaCategoryList: function(list) {
		if ( typeof list != 'object' ) {
			list = new Array();
		}

		this.getStore().baseParams.uslugaCategoryList = Ext.util.JSON.encode(list);
		this.lastQuery = 'This query sample that is not will never appear';

		return true;
	},
	setUslugaComplexCodeList: function(list) {
		if ( typeof list != 'object' ) {
			list = new Array();
		}

		this.getStore().baseParams.uslugaComplexCodeList = Ext.util.JSON.encode(list);
		this.lastQuery = 'This query sample that is not will never appear';

		return true;
	},
    setUslugaComplex2011Id: function(id) {
        this.getStore().baseParams.UslugaComplex_2011id = id;
    },
    /*
     * @var int Тип назначения
     */
    PrescriptionType_Code: null,
    setPrescriptionTypeCode: function(code) {
        this.PrescriptionType_Code = parseInt(code);
        switch(this.PrescriptionType_Code) {
            case 6: //Манипуляции и процедуры
                this.setAllowedUslugaComplexAttributeList([ 'manproc' ]);
                break;
            case 7: //Оперативное лечение
                this.setAllowedUslugaComplexAttributeList([ 'oper' ]);
                break;
            case 11: //Лабораторная диагностика
                this.setAllowedUslugaComplexAttributeList([ 'lab' ]);
                break;
            case 12: //Функциональная диагностика
                this.setAllowedUslugaComplexAttributeList([ 'func' ]);
                break;
            case 13: //Консультационная услуга
                this.setAllowedUslugaComplexAttributeList([ 'consult' ]);
                break;
            default:
                this.setAllowedUslugaComplexAttributeList();
                break;
        }
    },
	showUslugaComplexEndDate: false,
	showUslugaComplexLpuSection: true,
	valueField: 'UslugaComplex_id',
    triggerAction: 'all',
    hideTrigger: false,
    disableBlurAction: false,
    onBeforeShowSearchWindow: function(win, showParams)
    {
        this.disableBlurAction = true;
        if (!showParams) {
            showParams = {};
        }
        if (win && win.List && win.List.loadData) { 
            win.List.loadData(null);
            showParams.params = {
                //query: this.getRawValue()
            };
        } else {
            showParams.query = this.getRawValue();
            showParams.store = this.getStore();
        }
        return showParams;
    },
    onHideSearchWindow: function()
    {
        this.disableBlurAction = false;
        this.focus(false);
    },
    onSelectSearchWindow: function(win, obj)
    {
        this.getStore().removeAll();
        this.getStore().loadData([obj], true);
        var index = this.getStore().find(this.valueField, obj[this.valueField]);
        if (index == -1) {
            this.getStore().removeAll();
            return false;
        }
        this.setValue(obj[this.valueField]);
        var record = this.getStore().getAt(index);
        if ( typeof record == 'object' ) {
            this.disableBlurAction = false;
            this.fireEvent('select', this, record, index);
            this.fireEvent('change', this, record.get(this.valueField));
        }
        win.hide();
    },
    getSearchWindow: function()
    {
        if (!this._searchWindow) {
            this._searchWindow = getWnd('swUslugaComplexSearchWindow');
            /*this._searchWindow = new sw.Promed.swListSearchWindow({
                title: langs('Услуга: Поиск'),
                id: this.getId() + 'SearchWindow',
                object: 'UslugaComplex',
                actions:[
                    {name:'action_add', hidden: true, disabled: true},
                    {name:'action_edit', hidden: true, disabled: true},
                    {name:'action_view', hidden: true, disabled: true},
                    {name:'action_delete', hidden: true, disabled: true},
                    {name:'action_refresh', hidden: true, disabled: true},
                    {name:'action_print', hidden: true, disabled: true}
                ],
                store: this.getStore(),
                useBaseParams: true
            });*/
        }
        return this._searchWindow;
    },
    onTrigger2Click: function()
    {
        if (this.disabled) return false;
        var combo = this,
            win = this.getSearchWindow(),
            params = this.onBeforeShowSearchWindow(win, {
                onHide: function() {
                    combo.onHideSearchWindow();
                },
                onSelect: function (obj) {
                    combo.onSelectSearchWindow(win, obj);
                }
            });
        if (!win) return false;
        win.show(params);
        return true;
    },
	initComponent: function() {
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);
		
		this.addListener('select', function(combo, record, index) {
			if ( typeof record == 'object' && !Ext.isEmpty(record.get(combo.valueField)) ) {
				if (combo.showCodeField) {
					combo.setRawValue(record.get('UslugaComplex_Code') + ". " + record.get('UslugaComplex_Name'));
				} else {
					combo.setRawValue(record.get('UslugaComplex_Name'));
				}
			}
		});

		this.addListener('blur', function(inp) {
			if ( inp.getRawValue() == '' ) {
				inp.setValue('');
				inp.fireEvent('change', inp, inp.getValue());
				inp.selectIndex = -1;
				if (inp.onClearValue) {
					inp.onClearValue();
				}
			}
		});

		this.addListener('keydown', function(inp, e) {
			if ( e.getKey() == e.END ) {
				this.inKeyMode = true;
				this.select(this.getStore().getCount() - 1);
			}

			if ( e.getKey() == e.F4 ) {
				this.inKeyMode = true;
				inp.onTrigger2Click();
			}

			if ( e.getKey() == e.HOME ) {
				this.inKeyMode = true;
				this.select(0);
			}

			if ( e.getKey() == e.PAGE_UP ) {
				this.inKeyMode = true;
				var ct = this.getStore().getCount();

				if ( ct > 0 ) {
					if ( this.selectedIndex == -1 ) {
						this.select(0);
					}
					else if ( this.selectedIndex != 0 ) {
						if ( this.selectedIndex - 10 >= 0 )
							this.select(this.selectedIndex - 10);
						else
							this.select(0);
					}
				}
			}

			if ( e.getKey() == e.PAGE_DOWN ) {
				if ( !this.isExpanded() ) {
					this.onTriggerClick();
				}
				else {
					this.inKeyMode = true;
					var ct = this.getStore().getCount();

					if ( ct > 0 ) {
						if ( this.selectedIndex == -1 ) {
							this.select(0);
						}
						else if ( this.selectedIndex != ct - 1 ) {
							if ( this.selectedIndex + 10 < ct - 1 )
								this.select(this.selectedIndex + 10);
							else
								this.select(ct - 1);
						}
					}
				}
			}

			if ( e.altKey || e.ctrlKey || e.shiftKey )
				return true;

			if ( e.getKey() == e.DELETE/*||e.getKey() == e.BACKSPACE*/) {
				inp.setValue('');
				inp.fireEvent('change', inp, inp.getValue());
				inp.setRawValue("");
				inp.selectIndex = -1;
				if ( inp.onClearValue ) {
					this.onClearValue();
				}
				e.stopEvent();
				return true;
			}
		});
		
        var usluga_complex_name_tpl = '<td style="padding: 2px;'
            + '<tpl if="typeof UslugaComplexLevel_id !== \'undefined\' && UslugaComplexLevel_id == 9"> font-weight: bold;<</tpl>'
            + '">{UslugaComplex_Name}&nbsp;</td>';
		var me = this,
			usluga_complex_code_head_tpl = '<tpl if="this.enableShowCode()"><td style="padding: 2px; width: 10%;">Код</td></tpl>',
			usluga_complex_code_row_tpl = '<tpl if="this.enableShowCode()"><td style="padding: 2px;">{UslugaComplex_Code}&nbsp;</td></tpl>',
			functions_tpl = {
				enableShowCode: function() { return me.showCodeField; }
			};
		if ( this.showUslugaComplexEndDate == true ) {
			this.tpl = new Ext.XTemplate(
				'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: center;">',
				usluga_complex_code_head_tpl,
				'<td style="padding: 2px; width: 45%;">Наименование</td>',
				'<td style="padding: 2px; width: 20%;">Категория</td>',
				'<td style="padding: 2px; width: 25%;">Дата закрытия</td>',
				'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
				usluga_complex_code_row_tpl,
				usluga_complex_name_tpl,
				'<td style="padding: 2px;">{UslugaCategory_Name}&nbsp;</td>',
				'<td style="padding: 2px;">{[Ext.util.Format.date(values.UslugaComplex_endDT, "d.m.Y")]}&nbsp;</td>',
				'</tr></tpl>',
				'</table>',
				functions_tpl
			);
		}
		else if ( this.useEvnUslugaData == true ) {
			this.tpl = new Ext.XTemplate(
				'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: center;">',
				usluga_complex_code_head_tpl,
				'<td style="padding: 2px; width: 45%;">Наименование</td>',
				'<td style="padding: 2px; width: 25%;">Категория</td>',
				'<td style="padding: 2px; width: 20%;">Дата выполнения</td>',
				'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
				usluga_complex_code_row_tpl,
				usluga_complex_name_tpl,
				'<td style="padding: 2px;">{UslugaCategory_Name}&nbsp;</td>',
				'<td style="padding: 2px;">{[Ext.util.Format.date(values.EvnUsluga_setDate, "d.m.Y")]}&nbsp;</td>',
				'</tr></tpl>',
				'</table>',
				functions_tpl
			);
		}
		else if (this.showUslugaComplexLpuSection == true) {
			this.tpl = new Ext.XTemplate(
				'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: center;">',
				usluga_complex_code_head_tpl,
				'<td style="padding: 2px; width: 45%;">Наименование</td>',
				'<td style="padding: 2px; width: 20%;">Категория</td>',
				'<td style="padding: 2px; width: 25%;">Отделение</td>',
				'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
				usluga_complex_code_row_tpl,
				usluga_complex_name_tpl,
				'<td style="padding: 2px;">{UslugaCategory_Name}&nbsp;</td>',
				'<td style="padding: 2px;">{LpuSection_Name}&nbsp;</td>',
				'</tr></tpl>',
				'</table>',
				functions_tpl
			);
		} else {
			this.tpl = new Ext.XTemplate(
				'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: center;">',
				usluga_complex_code_head_tpl,
				'<td style="padding: 2px; width: 70%;">Наименование</td>',
				'<td style="padding: 2px; width: 20%;">Категория</td>',
				'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
				usluga_complex_code_row_tpl,
				usluga_complex_name_tpl,
				'<td style="padding: 2px;">{UslugaCategory_Name}&nbsp;</td>',
				'</tr></tpl>',
				'</table>',
				functions_tpl
			);
		}

		if ( this.mode == 'local' ) {
			this.store = new Ext.db.AdapterStore({
				autoLoad: false,
				dbFile: 'Promed.db',
				fields: [
					{ name: 'UslugaComplex_id', type: 'int' },
                    { name: 'UslugaComplex_2011id', type: 'int' },
                    { name: 'UslugaComplex_AttributeList', type: 'string' },
					{ name: 'UslugaCategory_id', type: 'int' },
					{ name: 'UslugaCategory_Name', type: 'string' },
					{ name: 'UslugaCategory_SysNick', type: 'string' },
					{ name: 'UslugaComplex_pid', type: 'int' },
                    { name: 'UslugaComplexLevel_id', type: 'int' },
					{ name: 'UslugaComplex_begDT', type: 'date' },
					{ name: 'UslugaComplex_endDT', type: 'date' },
					{ name: 'UslugaComplex_Code', type: 'string' },
					{ name: 'UslugaComplex_Name', type: 'string' },
					{ name: 'UslugaComplex_UET', type: 'float' },
					{ name: 'UslugaComplex_AgeGroupId', type: 'int'},
					{ name: 'LpuSection_Name', type: 'string' },
					{ name: 'UslugaComplex_hasComposition', type: 'int' },
					{ name: 'LpuSectionProfile_id', type: 'int' },
					{ name: 'MedSpecOms_id', type: 'int' },
					{ name: 'SurveyTypeLink_IsPay', type: 'int' },
					{ name: 'EvnUsluga_setDate', type: 'date' }
				],
				key: 'UslugaComplex_id',
				listeners: {
					'load': function(store) {
						this.setValue(this.getValue());
					}.createDelegate(this)
				},
				sortInfo: {
					field: 'UslugaComplex_id'
				},
				tableName: 'UslugaComplex'
			});
		}
		else  {
			this.store = new Ext.data.Store({
				autoLoad: false,
				reader: new Ext.data.JsonReader({
					id: 'UslugaComplex_id'
				}, [
                    { name: 'UslugaComplex_id', mapping: 'UslugaComplex_id' },
                    { name: 'UslugaComplex_2011id', mapping: 'UslugaComplex_2011id' },
                    { name: 'UslugaComplex_AttributeList', mapping: 'UslugaComplex_AttributeList' },
					{ name: 'UslugaCategory_id', mapping: 'UslugaCategory_id' },
					{ name: 'UslugaCategory_Name', mapping: 'UslugaCategory_Name' },
					{ name: 'UslugaCategory_SysNick', mapping: 'UslugaCategory_SysNick' },
					{ name: 'UslugaComplex_pid', mapping: 'UslugaComplex_pid' },
                    { name: 'UslugaComplexLevel_id',  mapping: 'UslugaComplexLevel_id' },
					{ name: 'UslugaComplex_begDT', mapping: 'UslugaComplex_begDT', type: 'date', dateFormat: 'd.m.Y' },
					{ name: 'UslugaComplex_endDT', mapping: 'UslugaComplex_endDT', type: 'date', dateFormat: 'd.m.Y' },
					{ name: 'UslugaComplex_Code', mapping: 'UslugaComplex_Code' },
					{ name: 'UslugaComplex_Name', mapping: 'UslugaComplex_Name' },
					{ name: 'UslugaComplex_UET', mapping: 'UslugaComplex_UET' },
					{ name: 'UslugaComplex_AgeGroupId', type: 'int'},
					{ name: 'Fedswuslugacomplexnewcombo', mapping: 'FedUslugaComplex_id' },
					{ name: 'LpuSection_Name', mapping: 'LpuSection_Name' },
					{ name: 'UslugaComplex_hasComposition', type: 'int' },
					{ name: 'LpuSectionProfile_id', mapping: 'LpuSectionProfile_id', type: 'int' },
					{ name: 'MedSpecOms_id', mapping: 'MedSpecOms_id', type: 'int' },
					{ name: 'MedSpecOmsList', mapping: 'MedSpecOmsList', type: 'string' },
					{ name: 'SurveyTypeLink_IsPay', mapping: 'SurveyTypeLink_IsPay', type: 'int' },
                    { name: 'UslugaTypeAttributeValue', mapping: 'UslugaTypeAttributeValue' },
					{ name: 'EvnUsluga_setDate', mapping: 'EvnUsluga_setDate', type: 'date', dateFormat: 'd.m.Y' }
				]),
				url: '/?c=Usluga&m=loadNewUslugaComplexList'
			});
		}
		if ( getGlobalOptions().region ) {
			switch ( getGlobalOptions().region.nick ) {
				case 'perm':
				case 'ufa':
					this.getStore().baseParams.withoutLpuFilter = 2;
				break;
			}
		}
		this.getStore().baseParams.to = this.to;
                
        if (this.registryType) 
            this.getStore().baseParams.registryType = this.registryType;
        
		this.getStore().baseParams.DispClass_id = this.DispClass_id;
		if (this.dispOnly) {
			this.getStore().baseParams.dispOnly = 1;
		}
		else if (this.nonDispOnly) {
			this.getStore().baseParams.nonDispOnly = 1;
		}
	}
});
Ext.reg('swuslugacomplexnewcombo', sw.Promed.SwUslugaComplexNewCombo);
sw.Promed.SwUslugaComplexNewCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwUslugaComplexNewCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwUslugaComplexNewCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwUslugaComplexNewCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;


sw.Promed.SwUslugaComplexGroupCombo = Ext.extend(Ext.form.ComboBox, {
	beforeBlur: function() {
		// медитируем
		return true;
	},
	reload: function() {
		var combo = this;
		var usluga_complex_id = combo.getValue();
		combo.clearValue();
		combo.lastQuery = '';
		combo.getStore().removeAll();
		combo.getStore().baseParams.query = '';

		combo.getStore().load({
			callback: function() {
				index = combo.getStore().findBy(function(rec) {
					return (rec.get('UslugaComplex_id') == usluga_complex_id);
				});

				if ( index >= 0 ) {
					combo.setValue(usluga_complex_id);
				}
			}
		});
	},
	codeField: 'UslugaComplex_Code',
	displayField: 'UslugaComplex_Name',
	editable: true,
	emptyText: 'Введите код или название услуги...',
	enableKeyEvents: true,
	fieldLabel: langs('Услуга'),
	forceSelection: true,
	hiddenName: 'UslugaComplex_id',
	minChars: 1,
	minLength: 0,
	mode: 'remote',
	resizable: true,
	selectOnFocus: true,
	valueField: 'UslugaComplex_id',
    triggerAction: 'all',
    hideTrigger: false,
    disableBlurAction: false,
	initComponent: function() {
		sw.Promed.SwUslugaComplexGroupCombo.superclass.initComponent.apply(this, arguments);

		this.addListener('select', function(combo, record, index) {
			if ( record.get(combo.valueField) ) {
				combo.setRawValue(record.get('UslugaComplex_Code') + ". " + record.get('UslugaComplex_Name'));
			}
		});

		this.addListener('keydown', function(inp, e) {
			if ( e.getKey() == e.END ) {
				this.inKeyMode = true;
				this.select(this.getStore().getCount() - 1);
			}

			if ( e.getKey() == e.F4 ) {
				this.inKeyMode = true;
				inp.onTrigger2Click();
			}

			if ( e.getKey() == e.HOME ) {
				this.inKeyMode = true;
				this.select(0);
			}

			if ( e.getKey() == e.PAGE_UP ) {
				this.inKeyMode = true;
				var ct = this.getStore().getCount();

				if ( ct > 0 ) {
					if ( this.selectedIndex == -1 ) {
						this.select(0);
					}
					else if ( this.selectedIndex != 0 ) {
						if ( this.selectedIndex - 10 >= 0 )
							this.select(this.selectedIndex - 10);
						else
							this.select(0);
					}
				}
			}

			if ( e.getKey() == e.PAGE_DOWN ) {
				if ( !this.isExpanded() ) {
					this.onTriggerClick();
				}
				else {
					this.inKeyMode = true;
					var ct = this.getStore().getCount();

					if ( ct > 0 ) {
						if ( this.selectedIndex == -1 ) {
							this.select(0);
						}
						else if ( this.selectedIndex != ct - 1 ) {
							if ( this.selectedIndex + 10 < ct - 1 )
								this.select(this.selectedIndex + 10);
							else
								this.select(ct - 1);
						}
					}
				}
			}

			if ( e.altKey || e.ctrlKey || e.shiftKey )
				return true;

			if ( e.getKey() == e.DELETE||e.getKey() == e.BACKSPACE) {
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if ( inp.onClearValue ) {
					this.onClearValue();
				}
				e.stopEvent();
				return true;
			}
		});

		this.tpl = new Ext.XTemplate(
			'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: center;">',
			'<td style="padding: 2px; width: 10%;">Код</td>',
			'<td style="padding: 2px; width: 70%;">Наименование</td>',
			'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
			'<td style="padding: 2px;">{UslugaComplex_Code}&nbsp;</td>',
			'<td style="padding: 2px;">{UslugaComplex_Name}&nbsp;</td>',
			'</tr></tpl>',
			'</table>'
		);

		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'UslugaComplex_id'
			}, [
				{ name: 'UslugaComplex_id', mapping: 'UslugaComplex_id' },
				{ name: 'UslugaCategory_id', mapping: 'UslugaCategory_id' },
				{ name: 'UslugaCategory_Name', mapping: 'UslugaCategory_Name' },
				{ name: 'UslugaCategory_SysNick', mapping: 'UslugaCategory_SysNick' },
				{ name: 'UslugaComplex_pid', mapping: 'UslugaComplex_pid' },
				{ name: 'UslugaComplexLevel_id',  mapping: 'UslugaComplexLevel_id' },
				{ name: 'UslugaComplex_begDT', mapping: 'UslugaComplex_begDT', type: 'date', dateFormat: 'd.m.Y' },
				{ name: 'UslugaComplex_endDT', mapping: 'UslugaComplex_endDT', type: 'date', dateFormat: 'd.m.Y' },
				{ name: 'UslugaComplex_Code', mapping: 'UslugaComplex_Code' },
				{ name: 'UslugaComplex_Name', mapping: 'UslugaComplex_Name' }
			]),
			url: '/?c=UslugaComplex&m=loadUslugaComplexGroupList'
		});
	}
});
Ext.reg('swuslugacomplexgroupcombo', sw.Promed.SwUslugaComplexGroupCombo);

sw.Promed.SwUslugaComplexGostCombo = Ext.extend(Ext.form.ComboBox, {
	beforeBlur: function() {
		// медитируем
		return true;
	},
	reload: function() {
		var combo = this;
		var usluga_complex_id = combo.getValue();
		combo.clearValue();
		combo.lastQuery = '';
		combo.getStore().removeAll();
		combo.getStore().baseParams.query = '';

		combo.getStore().load({
			callback: function() {
				index = combo.getStore().findBy(function(rec) {
					return (rec.get('UslugaComplex_id') == usluga_complex_id);
				});

				if ( index >= 0 ) {
					combo.setValue(usluga_complex_id);
				}
			}
		});
	},
	clearBaseParams: function() {
		this.lastQuery = 'This query sample that is not will never appear';

		this.getStore().baseParams.allowedUslugaComplexAttributeList = null;
		this.getStore().baseParams.allowedUslugaComplexAttributeMethod = 'or';
		this.getStore().baseParams.allowMorbusVizitCodesGroup88 = 0;
		this.getStore().baseParams.allowMorbusVizitOnly = 0;
		this.getStore().baseParams.allowNonMorbusVizitOnly = 0;
		this.getStore().baseParams.disallowedUslugaComplexAttributeList = null;
		this.getStore().baseParams.Mes_id = null;
		this.getStore().baseParams.MesOldVizit_id = null;
		this.getStore().baseParams.LpuLevel_Code = null;
		this.getStore().baseParams.LpuSection_id = null;
		this.getStore().baseParams.LpuSectionProfile_id = null;
		this.getStore().baseParams.PayType_id = null;
		this.getStore().baseParams.Person_id = null;
		this.getStore().baseParams.uslugaCategoryList = null;
		this.getStore().baseParams.UslugaComplex_Date = null;
        this.getStore().baseParams.UslugaComplex_2011id = null;
	},
	codeField: 'UslugaComplex_Code',
	displayField: 'UslugaComplex_Name',
	editable: true,
	emptyText: 'Введите код или название услуги...',
	enableKeyEvents: true,
	fieldLabel: langs('Услуга ГОСТ'),
	forceSelection: true,
	hiddenName: 'UslugaComplex_id',
	minChars: 1,
	minLength: 0,
	mode: 'remote',
	resizable: true,
	selectOnFocus: true,
	setAllowedUslugaComplexAttributeList: function(list) {
		if ( typeof list != 'object' ) {
			list = new Array();
		}

		this.getStore().baseParams.allowedUslugaComplexAttributeList = Ext.util.JSON.encode(list);
		this.lastQuery = 'This query sample that is not will never appear';

		return true;
	},
	// Метод учета допустимых типов атрибутов комплексной услуги
	// Допустимые значения:
	// and - должны иметься все перечисленные атрибуты
	// or - должен иметься хотя бы один из перечисленных атрибутов (по умолчанию)
	setAllowedUslugaComplexAttributeMethod: function(method) {
		if ( typeof method != 'string' || !method.inlist([ 'and', 'or' ]) ) {
			method = 'or';
		}

		this.getStore().baseParams.allowedUslugaComplexAttributeMethod = method;

		return true;
	},
	setDisallowedUslugaComplexAttributeList: function(list) {
		if ( typeof list != 'object' ) {
			list = new Array();
		}

		this.getStore().baseParams.disallowedUslugaComplexAttributeList = Ext.util.JSON.encode(list);
		this.lastQuery = 'This query sample that is not will never appear';

		return true;
	},
	setLpuLevelCode: function(lpu_level_code) {
		this.getStore().baseParams.LpuLevel_Code = lpu_level_code;
	},
	setMesOldVizit_id: function(MesOldVizit_id){
		this.getStore().baseParams.MesOldVizit_id = MesOldVizit_id;
	},

	setPayType: function(PayType_id) {
		this.getStore().baseParams.PayType_id = PayType_id;
	},
	setPersonId: function(Person_id) {
		this.getStore().baseParams.Person_id = Person_id;
	},
	setUslugaComplexDate: function(date) {
		this.getStore().baseParams.UslugaComplex_Date = date;
	},
	setUslugaCategoryList: function(list) {
		if ( typeof list != 'object' ) {
			list = new Array();
		}

		this.getStore().baseParams.uslugaCategoryList = Ext.util.JSON.encode(list);
		this.lastQuery = 'This query sample that is not will never appear';

		return true;
	},
    setUslugaComplex2011Id: function(id) {
        this.getStore().baseParams.UslugaComplex_2011id = id;
    },
    /*
     * @var int Тип назначения
     */
    PrescriptionType_Code: null,
    setPrescriptionTypeCode: function(code) {
        this.PrescriptionType_Code = parseInt(code);
        switch(this.PrescriptionType_Code) {
            case 6: //Манипуляции и процедуры
                this.setAllowedUslugaComplexAttributeList([ 'manproc' ]);
                break;
            case 7: //Оперативное лечение
                this.setAllowedUslugaComplexAttributeList([ 'oper' ]);
                break;
            case 11: //Лабораторная диагностика
                this.setAllowedUslugaComplexAttributeList([ 'lab' ]);
                break;
            case 12: //Функциональная диагностика
                this.setAllowedUslugaComplexAttributeList([ 'func' ]);
                break;
            case 13: //Консультационная услуга
                this.setAllowedUslugaComplexAttributeList([ 'consult' ]);
                break;
            default:
                this.setAllowedUslugaComplexAttributeList();
                break;
        }
    },
	showUslugaComplexEndDate: false,
	showUslugaComplexLpuSection: true,
	valueField: 'UslugaComplex_id',
    triggerAction: 'all',
    hideTrigger: false,
    disableBlurAction: false,
    onBeforeShowSearchWindow: function(win, showParams)
    {
        this.disableBlurAction = true;
        if (!showParams) {
            showParams = {};
        }
        if (win && win.List && win.List.loadData) {
            win.List.loadData(null);
            showParams.params = {
                //query: this.getRawValue()
            };
        } else {
            showParams.query = this.getRawValue();
            showParams.store = this.getStore();
        }
        return showParams;
    },
    onHideSearchWindow: function()
    {
        this.focus(false);
    },
    onSelectSearchWindow: function(win, obj)
    {
        this.getStore().removeAll();
        this.getStore().loadData([obj], true);
        var index = this.getStore().find(this.valueField, obj[this.valueField]);
        if (index == -1) {
            this.getStore().removeAll();
            return false;
        }
        this.setValue(obj[this.valueField]);
        var record = this.getStore().getAt(index);
        if ( typeof record == 'object' ) {
            this.disableBlurAction = false;
            this.fireEvent('select', this, record, index);
            this.fireEvent('change', this, record.get(this.valueField));
        }
        win.hide();
    },
    getSearchWindow: function()
    {
        if (!this._searchWindow) {
            this._searchWindow = getWnd('swUslugaComplexSearchWindow');
            /*this._searchWindow = new sw.Promed.swListSearchWindow({
                title: langs('Услуга: Поиск'),
                id: this.getId() + 'SearchWindow',
                object: 'UslugaComplex',
                actions:[
                    {name:'action_add', hidden: true, disabled: true},
                    {name:'action_edit', hidden: true, disabled: true},
                    {name:'action_view', hidden: true, disabled: true},
                    {name:'action_delete', hidden: true, disabled: true},
                    {name:'action_refresh', hidden: true, disabled: true},
                    {name:'action_print', hidden: true, disabled: true}
                ],
                store: this.getStore(),
                useBaseParams: true
            });*/
        }
        return this._searchWindow;
    },
    onTrigger2Click: function()
    {
        if (this.disabled) return false;
        var combo = this,
            win = this.getSearchWindow(),
            params = this.onBeforeShowSearchWindow(win, {
                onHide: function() {
                    combo.onHideSearchWindow();
                },
                onSelect: function (obj) {
                    combo.onSelectSearchWindow(win, obj);
                },
                UslugaCategory_id: 4
            });
        if (!win) return false;
        win.show(params);
        return true;
    },
	initComponent: function() {
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);

		this.addListener('select', function(combo, record, index) {
			if ( record.get(combo.valueField) ) {
				combo.setRawValue(record.get('UslugaComplex_Code') + ". " + record.get('UslugaComplex_Name'));
			}
		});

		this.addListener('keydown', function(inp, e) {
			if ( e.getKey() == e.END ) {
				this.inKeyMode = true;
				this.select(this.getStore().getCount() - 1);
			}

			if ( e.getKey() == e.F4 ) {
				this.inKeyMode = true;
				inp.onTrigger2Click();
			}

			if ( e.getKey() == e.HOME ) {
				this.inKeyMode = true;
				this.select(0);
			}

			if ( e.getKey() == e.PAGE_UP ) {
				this.inKeyMode = true;
				var ct = this.getStore().getCount();

				if ( ct > 0 ) {
					if ( this.selectedIndex == -1 ) {
						this.select(0);
					}
					else if ( this.selectedIndex != 0 ) {
						if ( this.selectedIndex - 10 >= 0 )
							this.select(this.selectedIndex - 10);
						else
							this.select(0);
					}
				}
			}

			if ( e.getKey() == e.PAGE_DOWN ) {
				if ( !this.isExpanded() ) {
					this.onTriggerClick();
				}
				else {
					this.inKeyMode = true;
					var ct = this.getStore().getCount();

					if ( ct > 0 ) {
						if ( this.selectedIndex == -1 ) {
							this.select(0);
						}
						else if ( this.selectedIndex != ct - 1 ) {
							if ( this.selectedIndex + 10 < ct - 1 )
								this.select(this.selectedIndex + 10);
							else
								this.select(ct - 1);
						}
					}
				}
			}

			if ( e.altKey || e.ctrlKey || e.shiftKey )
				return true;

			if ( e.getKey() == e.DELETE||e.getKey() == e.BACKSPACE) {
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if ( inp.onClearValue ) {
					this.onClearValue();
				}
				e.stopEvent();
				return true;
			}
		});

        var usluga_complex_name_tpl = '<td style="padding: 2px;'
            + '<tpl if="typeof UslugaComplexLevel_id !== \'undefined\' && UslugaComplexLevel_id == 9"> font-weight: bold;<</tpl>'
            + '">{UslugaComplex_Name}&nbsp;</td>';
		if ( this.showUslugaComplexEndDate == true ) {
			this.tpl = new Ext.XTemplate(
				'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: center;">',
				'<td style="padding: 2px; width: 10%;">Код</td>',
				'<td style="padding: 2px; width: 45%;">Наименование</td>',
				'<td style="padding: 2px; width: 20%;">Категория</td>',
				'<td style="padding: 2px; width: 25%;">Дата закрытия</td>',
				'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
				'<td style="padding: 2px;">{UslugaComplex_Code}&nbsp;</td>',
				usluga_complex_name_tpl,
				'<td style="padding: 2px;">{UslugaCategory_Name}&nbsp;</td>',
				'<td style="padding: 2px;">{[Ext.util.Format.date(values.UslugaComplex_endDT, "d.m.Y")]}&nbsp;</td>',
				'</tr></tpl>',
				'</table>'
			);
		}
		else {
			if (this.showUslugaComplexLpuSection == true) {
				this.tpl = new Ext.XTemplate(
					'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: center;">',
					'<td style="padding: 2px; width: 10%;">Код</td>',
					'<td style="padding: 2px; width: 45%;">Наименование</td>',
					'<td style="padding: 2px; width: 20%;">Категория</td>',
					'<td style="padding: 2px; width: 25%;">Отделение</td>',
					'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
					'<td style="padding: 2px;">{UslugaComplex_Code}&nbsp;</td>',
					usluga_complex_name_tpl,
					'<td style="padding: 2px;">{UslugaCategory_Name}&nbsp;</td>',
					'<td style="padding: 2px;">{LpuSection_Name}&nbsp;</td>',
					'</tr></tpl>',
					'</table>'
				);
			} else {
				this.tpl = new Ext.XTemplate(
					'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: center;">',
					'<td style="padding: 2px; width: 10%;">Код</td>',
					'<td style="padding: 2px; width: 70%;">Наименование</td>',
					'<td style="padding: 2px; width: 20%;">Категория</td>',
					'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
					'<td style="padding: 2px;">{UslugaComplex_Code}&nbsp;</td>',
					usluga_complex_name_tpl,
					'<td style="padding: 2px;">{UslugaCategory_Name}&nbsp;</td>',
					'</tr></tpl>',
					'</table>'
				);
			}
		}

		if ( this.mode == 'local' ) {
			this.store = new Ext.db.AdapterStore({
				autoLoad: false,
				dbFile: 'Promed.db',
				fields: [

                    { name: 'UslugaComplex_id', mapping: 'UslugaComplex_id' },
					{ name: 'UslugaCategory_id', mapping: 'UslugaCategory_id' },
					{ name: 'UslugaCategory_Name', mapping: 'UslugaCategory_Name' },
					{ name: 'UslugaComplex_Code', mapping: 'UslugaComplex_Code' },
					{ name: 'UslugaComplex_Name', mapping: 'UslugaComplex_Name' }
                    /*
					{ name: 'UslugaComplex_id', type: 'int' },
                    { name: 'UslugaComplex_2011id', type: 'int' },
                    { name: 'UslugaComplex_AttributeList', type: 'string' },
					{ name: 'UslugaCategory_id', type: 'int' },
					{ name: 'UslugaCategory_Name', type: 'string' },
					{ name: 'UslugaCategory_SysNick', type: 'string' },
					{ name: 'UslugaComplex_pid', type: 'int' },
                    { name: 'UslugaComplexLevel_id', type: 'int' },
					{ name: 'UslugaComplex_begDT', type: 'date' },
					{ name: 'UslugaComplex_endDT', type: 'date' },
					{ name: 'UslugaComplex_Code', type: 'string' },
					{ name: 'UslugaComplex_Name', type: 'string' },
					{ name: 'UslugaComplex_UET', type: 'float' },
					{ name: 'LpuSection_Name', type: 'string' },
					{ name: 'LpuSectionProfile_id', type: 'int' },
					{ name: 'MedSpecOms_id', type: 'int' }*/
				],
				key: 'UslugaComplex_id',
				listeners: {
					'load': function(store) {
						this.setValue(this.getValue());
					}.createDelegate(this)
				},
				sortInfo: {
					field: 'UslugaComplex_id'
				},
				tableName: 'UslugaComplex'
			});
		}
		else  {
			this.store = new Ext.data.Store({
				autoLoad: false,
				reader: new Ext.data.JsonReader({
					id: 'UslugaComplex_id'
				}, [
                    { name: 'UslugaComplex_id', mapping: 'UslugaComplex_id' },
					{ name: 'UslugaCategory_id', mapping: 'UslugaCategory_id' },
					{ name: 'UslugaCategory_Name', mapping: 'UslugaCategory_Name' },
					{ name: 'UslugaComplex_Code', mapping: 'UslugaComplex_Code' },
					{ name: 'UslugaComplex_Name', mapping: 'UslugaComplex_Name' }
                    /*{ name: 'UslugaComplex_2011id', mapping: 'UslugaComplex_2011id' },
                    { name: 'UslugaComplex_AttributeList', mapping: 'UslugaComplex_AttributeList' },
					{ name: 'UslugaCategory_Name', mapping: 'UslugaCategory_Name' },
					{ name: 'UslugaCategory_SysNick', mapping: 'UslugaCategory_SysNick' },
					{ name: 'UslugaComplex_pid', mapping: 'UslugaComplex_pid' },
                    { name: 'UslugaComplexLevel_id',  mapping: 'UslugaComplexLevel_id' },
					{ name: 'UslugaComplex_begDT', mapping: 'UslugaComplex_begDT', type: 'date', dateFormat: 'd.m.Y' },
					{ name: 'UslugaComplex_endDT', mapping: 'UslugaComplex_endDT', type: 'date', dateFormat: 'd.m.Y' },
					{ name: 'UslugaComplex_UET', mapping: 'UslugaComplex_UET' },
					{ name: 'Fedswuslugacomplexnewcombo', mapping: 'FedUslugaComplex_id' },
					{ name: 'LpuSection_Name', mapping: 'LpuSection_Name' },
					{ name: 'LpuSectionProfile_id', mapping: 'LpuSectionProfile_id', type: 'int' },
					{ name: 'MedSpecOms_id', mapping: 'MedSpecOms_id', type: 'int' }*/
				]),
				url: '/?c=UslugaComplex&m=loadUslugaComplexGost'
			});
		}

		/*if ( getGlobalOptions().region ) {
			switch ( getGlobalOptions().region.nick ) {
				case 'perm':
				case 'ufa':
					this.getStore().baseParams.withoutLpuFilter = 2;
				break;
			}
		}*/
	}
});
Ext.reg('swuslugacomplexgostcombo', sw.Promed.SwUslugaComplexGostCombo);
sw.Promed.SwUslugaComplexGostCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwUslugaComplexGostCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwUslugaComplexGostCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwUslugaComplexGostCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;


sw.Promed.SwUslugaComplexSmpCombo = Ext.extend(Ext.form.ComboBox, {
	beforeBlur: function() {
		// медитируем
		return true;
	},
	codeField: 'UslugaComplex_Code',
	displayField: 'UslugaComplex_Display',
	editable: true,
	emptyText: langs('Введите код или название услуги...'),
	enableKeyEvents: true,
	fieldLabel: langs('Услуга'),
	forceSelection: true,
	hiddenName: 'UslugaComplex_id',
	setPayType: function(PayType_id) {
		this.getStore().baseParams.PayType_id = PayType_id;
	},
	setUslugaComplexCodeList: function(list) {
		if ( typeof list != 'object' ) {
			list = new Array();
		}

		this.getStore().baseParams.uslugaComplexCodeList = Ext.util.JSON.encode(list);
		this.lastQuery = 'This query sample that is not will never appear';

		return true;
	},
	listeners: {
		'keydown': function(inp, e) {
			if ( e.getKey() == e.END ) {
				this.inKeyMode = true;
				this.select(this.getStore().getCount() - 1);
			}

			if ( e.getKey() == e.HOME ) {
				this.inKeyMode = true;
				this.select(0);
			}

			if ( e.getKey() == e.PAGE_UP ) {
				this.inKeyMode = true;
				var ct = this.getStore().getCount();

				if ( ct > 0 ) {
					if ( this.selectedIndex == -1 ) {
						this.select(0);
					}
					else if ( this.selectedIndex != 0 ) {
						if ( this.selectedIndex - 10 >= 0 )
							this.select(this.selectedIndex - 10);
						else
							this.select(0);
					}
				}
			}

			if ( e.getKey() == e.PAGE_DOWN ) {
				if ( !this.isExpanded() ) {
					this.onTriggerClick();
				}
				else {
					this.inKeyMode = true;
					var ct = this.getStore().getCount();

					if ( ct > 0 ) {
						if ( this.selectedIndex == -1 ) {
							this.select(0);
						}
						else if ( this.selectedIndex != ct - 1 ) {
							if ( this.selectedIndex + 10 < ct - 1 )
								this.select(this.selectedIndex + 10);
							else
								this.select(ct - 1);
						}
					}
				}
			}

			if ( e.altKey || e.ctrlKey || e.shiftKey )
				return true;

			if ( e.getKey() == e.DELETE) {
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if ( inp.onClearValue ) {
					this.onClearValue();
				}
				e.stopEvent();
				return true;
			}
		},
		'blur': function(combo) {
			if (combo.getValue() == null || combo.getValue().toString().length == 0 || combo.getRawValue().toString().length == 0) {
				combo.setRawValue(null);
				combo.setValue('');
				combo.fireEvent('change', combo, 0, 1);
			}
		}
	},
	minChars: 1,
	minLength: 0,
	mode: 'remote',
	resizable: true,
	selectOnFocus: true,
	setUslugaCategoryList: function(list) {
		if ( typeof list != 'object' ) {
			list = new Array();
		}
		this.getStore().baseParams.uslugaCategoryList = Ext.util.JSON.encode(list);
		this.lastQuery = 'This query sample that is not will never appear';
		return true;
	},
	triggerAction: 'all',
	date: null,
	valueField: 'UslugaComplex_id',
	initComponent: function() {
		sw.Promed.SwUslugaComplexSmpCombo.superclass.initComponent.apply(this, arguments);

		this.tpl = new Ext.XTemplate(
			'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: center;">',
			'<td style="padding: 2px; width: 10%;">Код</td>',
			'<td style="padding: 2px; width: 40%;">Наименование</td>',
			'<td style="padding: 2px; width: 26%;">Категория</td>',
			'<td style="padding: 2px; width: 12%;">Начало</td>',
			'<td style="padding: 2px; width: 12%;">Окончание</td>',
			'<tpl for=".">',
			'<tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip; {[this.decorateByDate(values.UslugaComplex_endDT)]}">',
			'<td style="padding: 2px;">{UslugaComplex_Code}&nbsp;</td>',
			'<td style="padding: 2px;">{UslugaComplex_Name}&nbsp;</td>',
			'<td style="padding: 2px;">{UslugaCategory_Name}&nbsp;</td>',
			'<td style="padding: 2px;">{UslugaComplex_begDT}&nbsp;</td>',
			'<td style="padding: 2px;">{[Ext.isEmpty(values.UslugaComplex_endDT)?"":values.UslugaComplex_endDT]}&nbsp;</td>',
			'</tr></tpl>',
			'</table>',
			{
				decorateByDate: function(endDate) {
					var result = '';
					if (this.date && endDate) {
						result = (Date.parseDate(endDate, 'd.m.Y') <= Date.parseDate(this.date, 'd.m.Y')) ? 'color: gray;' : '';
					}
					return result;
				}.createDelegate(this)
			}
		);

		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'UslugaComplex_id'
			}, [
				{ name: 'UslugaComplex_id', mapping: 'UslugaComplex_id' },
				{ name: 'UslugaCategory_id', mapping: 'UslugaCategory_id' },
				{ name: 'UslugaCategory_Name', mapping: 'UslugaCategory_Name' },
				{ name: 'UslugaComplex_pid', mapping: 'UslugaComplex_pid' },
				{ name: 'UslugaComplex_begDT', mapping: 'UslugaComplex_begDT' },
				{ name: 'UslugaComplex_endDT', mapping: 'UslugaComplex_endDT' },
				{ name: 'UslugaComplex_Code', mapping: 'UslugaComplex_Code' },
				{ name: 'UslugaComplex_Name', mapping: 'UslugaComplex_Name' },
				{ name: 'UslugaComplex_UET', mapping: 'UslugaComplex_UET' },
				{ name: 'Lpu_Nick', mapping: 'Lpu_Nick' },
				{ name: 'UslugaComplex_Display',
					convert: function(val, row) {
						return row.UslugaComplex_Code + '. ' + row.UslugaComplex_Name;
					}	
				},
				{ name: 'CompositionCount', mapping: 'CompositionCount' }
			]),
			url: '/?c=UslugaComplex&m=loadUslugaSMPCombo'
		});
		
	}
});
Ext.reg('swuslugacomplexsmpcombo', sw.Promed.SwUslugaComplexSmpCombo);


sw.Promed.SwKsgEkbCombo = Ext.extend(Ext.form.ComboBox, {
	beforeBlur: function() {
		// медитируем
		return true;
	},
	reload: function() {
		var combo = this;
		var mes_id = combo.getValue();
		combo.clearValue();
		combo.lastQuery = '';
		combo.getStore().removeAll();
		combo.getStore().baseParams.query = '';

		combo.getStore().load({
			callback: function() {
				index = combo.getStore().findBy(function(rec) {
					return (rec.get('Mes_id') == mes_id);
				});

				if ( index >= 0 ) {
					combo.setValue(mes_id);
				}
			}
		});
	},
	clearBaseParams: function() {
		this.lastQuery = 'This query sample that is not will never appear';

		this.getStore().baseParams.allowedUslugaComplexAttributeList = null;
		this.getStore().baseParams.allowedUslugaComplexAttributeMethod = 'or';
		this.getStore().baseParams.allowMorbusVizitCodesGroup88 = 0;
		this.getStore().baseParams.allowMorbusVizitOnly = 0;
		this.getStore().baseParams.allowNonMorbusVizitOnly = 0;
		this.getStore().baseParams.disallowedUslugaComplexAttributeList = null;
		this.getStore().baseParams.LpuLevel_Code = null;
		this.getStore().baseParams.LpuSection_id = null;
		this.getStore().baseParams.PayType_id = null;
		this.getStore().baseParams.Person_id = null;
		this.getStore().baseParams.uslugaCategoryList = null;
		this.getStore().baseParams.UslugaComplex_Date = null;
        this.getStore().baseParams.UslugaComplex_2011id = null;
	},
	codeField: 'UslugaComplex_Code',
	displayField: 'UslugaComplex_Name',
	editable: true,
	emptyText: langs('Введите код или название услуги...'),
	enableKeyEvents: true,
	fieldLabel: langs('Услуга'),
	forceSelection: true,
	hiddenName: 'Mes_id',
	minChars: 1,
	minLength: 0,
	mode: 'remote',
	resizable: true,
	selectOnFocus: true,
	setAllowedUslugaComplexAttributeList: function(list) {
		if ( typeof list != 'object' ) {
			list = new Array();
		}

		this.getStore().baseParams.allowedUslugaComplexAttributeList = Ext.util.JSON.encode(list);
		this.lastQuery = 'This query sample that is not will never appear';

		return true;
	},
	// Метод учета допустимых типов атрибутов комплексной услуги
	// Допустимые значения:
	// and - должны иметься все перечисленные атрибуты
	// or - должен иметься хотя бы один из перечисленных атрибутов (по умолчанию)
	setAllowedUslugaComplexAttributeMethod: function(method) {
		if ( typeof method != 'string' || !method.inlist([ 'and', 'or' ]) ) {
			method = 'or';
		}

		this.getStore().baseParams.allowedUslugaComplexAttributeMethod = method;

		return true;
	},
	setDisallowedUslugaComplexAttributeList: function(list) {
		if ( typeof list != 'object' ) {
			list = new Array();
		}

		this.getStore().baseParams.disallowedUslugaComplexAttributeList = Ext.util.JSON.encode(list);
		this.lastQuery = 'This query sample that is not will never appear';

		return true;
	},
	setLpuLevelCode: function(lpu_level_code) {
		this.getStore().baseParams.LpuLevel_Code = lpu_level_code;
	},
	setPayType: function(PayType_id) {
		this.getStore().baseParams.PayType_id = PayType_id;
	},
	setPersonId: function(Person_id) {
		this.getStore().baseParams.Person_id = Person_id;
	},
	setUslugaComplexDate: function(date) {
		this.getStore().baseParams.UslugaComplex_Date = date;
	},
	setUslugaCategoryList: function(list) {
		if ( typeof list != 'object' ) {
			list = new Array();
		}

		this.getStore().baseParams.uslugaCategoryList = Ext.util.JSON.encode(list);
		this.lastQuery = 'This query sample that is not will never appear';

		return true;
	},
    setUslugaComplex2011Id: function(id) {
        this.getStore().baseParams.UslugaComplex_2011id = id;
    },
    /*
     * @var int Тип назначения
     */
    PrescriptionType_Code: null,
    setPrescriptionTypeCode: function(code) {
        this.PrescriptionType_Code = parseInt(code);
        switch(this.PrescriptionType_Code) {
            case 6: //Манипуляции и процедуры
                this.setAllowedUslugaComplexAttributeList([ 'manproc' ]);
                break;
            case 7: //Оперативное лечение
                this.setAllowedUslugaComplexAttributeList([ 'oper' ]);
                break;
            case 11: //Лабораторная диагностика
                this.setAllowedUslugaComplexAttributeList([ 'lab' ]);
                break;
            case 12: //Функциональная диагностика
                this.setAllowedUslugaComplexAttributeList([ 'func' ]);
                break;
            case 13: //Консультационная услуга
                this.setAllowedUslugaComplexAttributeList([ 'consult' ]);
                break;
            default:
                this.setAllowedUslugaComplexAttributeList();
                break;
        }
    },
	checkEnableUslugaComplexFilter: function() {
		return true;
	},
	disableBlurAction: false,
	showUslugaComplexEndDate: false,
	showUslugaComplexLpuSection: true,
	triggerAction: 'all',
	valueField: 'Mes_id',
	initComponent: function() {
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);

		this.addListener('select', function(combo, record, index) {
			if ( record.get(combo.valueField) ) {
				combo.setRawValue(record.get('UslugaComplex_Code') + ". " + record.get('UslugaComplex_Name'));
			}
		});

		this.addListener('keydown', function(inp, e) {
			if ( e.getKey() == e.END ) {
				this.inKeyMode = true;
				this.select(this.getStore().getCount() - 1);
			}

			if ( e.getKey() == e.HOME ) {
				this.inKeyMode = true;
				this.select(0);
			}

			if ( e.getKey() == e.PAGE_UP ) {
				this.inKeyMode = true;
				var ct = this.getStore().getCount();

				if ( ct > 0 ) {
					if ( this.selectedIndex == -1 ) {
						this.select(0);
					}
					else if ( this.selectedIndex != 0 ) {
						if ( this.selectedIndex - 10 >= 0 )
							this.select(this.selectedIndex - 10);
						else
							this.select(0);
					}
				}
			}

			if ( e.getKey() == e.PAGE_DOWN ) {
				if ( !this.isExpanded() ) {
					this.onTriggerClick();
				}
				else {
					this.inKeyMode = true;
					var ct = this.getStore().getCount();

					if ( ct > 0 ) {
						if ( this.selectedIndex == -1 ) {
							this.select(0);
						}
						else if ( this.selectedIndex != ct - 1 ) {
							if ( this.selectedIndex + 10 < ct - 1 )
								this.select(this.selectedIndex + 10);
							else
								this.select(ct - 1);
						}
					}
				}
			}

			if ( e.altKey || e.ctrlKey || e.shiftKey )
				return true;
			
			if ( e.getKey() == e.DELETE||e.getKey() == e.BACKSPACE) {
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if ( inp.onClearValue ) {
					this.onClearValue();
				}
				e.stopEvent();
				return true;
			}
		});
			
		this.tpl = new Ext.XTemplate(
			'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: center;">',
			'<td style="padding: 2px; width: 10%;">Код</td>',
			'<td style="padding: 2px; width: 90%;">Наименование</td></tr>',
			'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
			'<td style="padding: 2px;">{UslugaComplex_Code}&nbsp;</td>',
			'<td style="padding: 2px;">{UslugaComplex_Name}&nbsp;</td>',
			'</tr></tpl>',
			'</table>'
		);

		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'Mes_id'
			}, [
				{ name: 'Mes_id', mapping: 'Mes_id' },
				{ name: 'UslugaComplex_2011id', mapping: 'UslugaComplex_2011id' },
				//{ name: 'UslugaComplex_AttributeList', mapping: 'UslugaComplex_AttributeList' },
				{ name: 'UslugaCategory_id', mapping: 'UslugaCategory_id' },
				{ name: 'UslugaCategory_Name', mapping: 'UslugaCategory_Name' },
				{ name: 'UslugaCategory_SysNick', mapping: 'UslugaCategory_SysNick' },
				{ name: 'UslugaComplex_pid', mapping: 'UslugaComplex_pid' },
                { name: 'UslugaComplexLevel_id',  mapping: 'UslugaComplexLevel_id' },
				{ name: 'UslugaComplex_begDT', mapping: 'UslugaComplex_begDT', type: 'date', dateFormat: 'd.m.Y' },
				{ name: 'UslugaComplex_endDT', mapping: 'UslugaComplex_endDT', type: 'date', dateFormat: 'd.m.Y' },
				{ name: 'UslugaComplex_Code', mapping: 'UslugaComplex_Code' },
				{ name: 'UslugaComplex_Name', mapping: 'UslugaComplex_Name' },
				{ name: 'UslugaComplex_UET', mapping: 'UslugaComplex_UET' },
				{ name: 'FedUslugaComplex_id', mapping: 'FedUslugaComplex_id' },
				{ name: 'LpuSection_Name', mapping: 'LpuSection_Name' },
				{ name: 'LpuSectionProfile_id', mapping: 'LpuSectionProfile_id', type: 'int' },
				{ name: 'MedSpecOms_id', mapping: 'MedSpecOms_id', type: 'int' }
			]),
			url: '/?c=Usluga&m=loadKsgEkbList'
		});
	}
});
Ext.reg('swksgekbcombo', sw.Promed.SwKsgEkbCombo);
sw.Promed.SwKsgEkbCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwKsgEkbCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwKsgEkbCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwKsgEkbCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwKsgEkbCombo.prototype.onTrigger2Click = function() {
	if ( this.disabled ) {
		return;
	}

	var combo = this;
	combo.disableBlurAction = true;

	var combo = this;
	getWnd('swKsgEkbSearchWindow').show({
		enableUslugaComplexFilter: combo.checkEnableUslugaComplexFilter(),
		onHide: function() {
			combo.disableBlurAction = false;
			combo.focus(true, 200);
		},
		baseParams: swCloneObject(combo.getStore().baseParams), // базовые параметры комбо менять не нужно, поэтому клонируем объект
		onSelect: function(data) {
			// вставляем в комбо КСГ с формы поиска
			if(data && data.Mes_id) {
				combo.getStore().removeAll();
				combo.getStore().load({
					params: {
						Mes_id: data.Mes_id
					},
					callback: function(rec, opt) {
						index = combo.getStore().findBy(function(rec) {
							return (rec.get('Mes_id') == data.Mes_id);
						});

						if ( index >= 0 ) {
							combo.setValue(data.Mes_id);
						}
						else {
							combo.clearValue();
						}

						combo.disableBlurAction = false;
						combo.fireEvent('change', combo, combo.getValue());
					}
				});
			} else {
				combo.disableBlurAction = false;
			}
		}
	});
};

sw.Promed.SwKsgCombo = Ext.extend(Ext.form.ComboBox, {
	beforeBlur: function() {
		// медитируем
		return true;
	},
	codeField: 'Mes_Code',
	displayField: 'Mes_Display',
	editable: true,
	emptyText: langs('Введите код или название ...'),
	enableKeyEvents: true,
	fieldLabel: langs('Услуга'),
	forceSelection: true,
	hiddenName: 'Mes_id',
	listWidth: 600,
	minChars: 1,
	mesType: '',//KSG/KPG
	minLength: 0,
	mode: 'remote',
	resizable: true,
	selectOnFocus: true,
	triggerAction: 'all',
	valueField: 'Mes_id',
	initComponent: function() {
		sw.Promed.SwKsgCombo.superclass.initComponent.apply(this, arguments);

		this.addListener('keydown', function(inp, e) {
			if ( e.getKey() == e.END ) {
				this.inKeyMode = true;
				this.select(this.getStore().getCount() - 1);
			}

			if ( e.getKey() == e.HOME ) {
				this.inKeyMode = true;
				this.select(0);
			}

			if ( e.getKey() == e.PAGE_UP ) {
				this.inKeyMode = true;
				var ct = this.getStore().getCount();

				if ( ct > 0 ) {
					if ( this.selectedIndex == -1 ) {
						this.select(0);
					}
					else if ( this.selectedIndex != 0 ) {
						if ( this.selectedIndex - 10 >= 0 )
							this.select(this.selectedIndex - 10);
						else
							this.select(0);
					}
				}
			}

			if ( e.getKey() == e.PAGE_DOWN ) {
				if ( !this.isExpanded() ) {
					this.onTriggerClick();
				}
				else {
					this.inKeyMode = true;
					var ct = this.getStore().getCount();

					if ( ct > 0 ) {
						if ( this.selectedIndex == -1 ) {
							this.select(0);
						}
						else if ( this.selectedIndex != ct - 1 ) {
							if ( this.selectedIndex + 10 < ct - 1 )
								this.select(this.selectedIndex + 10);
							else
								this.select(ct - 1);
						}
					}
				}
			}

			if ( e.altKey || e.ctrlKey || e.shiftKey )
				return true;

			if ( e.getKey() == e.DELETE||e.getKey() == e.BACKSPACE) {
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if ( inp.onClearValue ) {
					this.onClearValue();
				}
				e.stopEvent();
				return true;
			}
		});

		this.tpl = new Ext.XTemplate(
			'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: center;">',
			'<td style="padding: 2px; width: 10%;">Номер</td>',
			'<td style="padding: 2px; width: 10%;">Код</td>',
			'<td style="padding: 2px; width: 50%;">Наименование</td>',
			'<td style="padding: 2px; width: 10%;">Дата начала</td>',
			'<td style="padding: 2px; width: 10%;">Дата окончания</td>',
			'<td style="padding: 2px; width: 10%;">Тип КСГ</td></tr>',
			'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
			'<td style="padding: 2px;">{Mes_Code}&nbsp;</td>',
			'<td style="padding: 2px;">{MesOld_Num}&nbsp;</td>',
			'<td style="padding: 2px;">{Mes_Name}&nbsp;</td>',
			'<td style="padding: 2px;">{Mes_begDT}&nbsp;</td>',
			'<td style="padding: 2px;">{Mes_endDT}&nbsp;</td>',
			'<td style="padding: 2px;">{MesType_Name}&nbsp;</td>',
			'</tr></tpl>',
			'</table>'
		);

		var params = {};

		if (!Ext.isEmpty(this.mesType)) {
			switch (this.mesType) {
				case 'KSG':
					params.mesTypeList = Ext.util.JSON.encode([2, 3, 5, 9, 10, 13, 14]);
					break;
				case 'KSG_KSS':
					params.mesTypeList = Ext.util.JSON.encode([10]);
					break;
				case 'KPG':
					params.mesTypeList = Ext.util.JSON.encode([4]);
					break;
				case 'STOMATKSG':
					params.mesTypeList = Ext.util.JSON.encode([7]);
					params.groupByCode = 1;
					break;
			}
		}

		if (!Ext.isEmpty(this.startYear)){
			params.startYear = this.startYear;
		}

		this.store = new Ext.data.Store({
			autoLoad: false,
			baseParams: params,
			reader: new Ext.data.JsonReader({
				id: 'Mes_id'
			}, [
				{ name: 'Mes_id', mapping: 'Mes_id' },
				{ name: 'Mes_Code', mapping: 'Mes_Code' },
				{ name: 'MesOld_Num', mapping: 'MesOld_Num' },
				{ name: 'Mes_Name', mapping: 'Mes_Name' },
				{ name: 'Mes_Display',
					convert: function(val,row) {
						return row.Mes_Code + '. ' + row.MesOld_Num + '. ' + row.Mes_Name;
					}
				},
				{ name: 'Mes_begDT', mapping: 'Mes_begDT' },
				{ name: 'Mes_endDT', mapping: 'Mes_endDT' },
				{ name: 'MesType_Name', mapping: 'MesType_Name' }
			]),
			url: '/?c=MesOld&m=loadKsgList'
		});
	}
});
Ext.reg('swksgcombo', sw.Promed.SwKsgCombo);

sw.Promed.SwUslugaComplexEvnPrescrCombo = Ext.extend(sw.Promed.SwUslugaComplexNewCombo, {
	clearBaseParams: function() {
		this.lastQuery = '';
		//this.getStore().baseParams.allowedUslugaComplexAttributeList = null;
		//this.getStore().baseParams.uslugaCategoryList = null;
		this.getStore().baseParams.disallowedUslugaComplexAttributeList = null;
		this.getStore().baseParams.LpuLevel_Code = null;
		this.getStore().baseParams.UslugaComplex_Date = null;
	},
	getBaseParams: function() {
		return this.getStore().baseParams;
	},
	setUslugaComplexDate: function(date_str) {
		if(!date_str) date_str = getGlobalOptions().date;
		this.getStore().baseParams.UslugaComplex_Date = date_str;
	},
	initComponent: function() {
		sw.Promed.SwUslugaComplexEvnPrescrCombo.superclass.initComponent.apply(this, arguments);
		//to-do нужно опциональное отключения фильтра:
		//а) по атрибутам.
		//б) по МО для категории «Услуги МО»
		//this.getStore().baseParams.isEvnPrescr = 2;
                
		this.getStore().baseParams.withoutLpuFilter = 2;
		var uslugacategorylist = [
			// Категории услуг, доступные для назначений всем
			'gost2011','syslabprofile',
			// Только для своей МО
			'lpu','lpulabprofile'
		];
		//региональные категории
		switch ( getRegionNick() ) {
			case 'kz': // Казахстан - только 13. Классификатор мед.услуг
				uslugacategorylist = [ 'classmedus', 'MedOp' ];
			break;

			case 'perm': //услуги пермского ТФОМС
				uslugacategorylist.push('tfoms');
			break;

			case 'pskov': //услуги Псковского ТФОМС
				uslugacategorylist.push('pskov_foms');
			break;
		}
		this.setUslugaCategoryList(uslugacategorylist);
		this.setPrescriptionTypeCode(this.PrescriptionType_Code);
	}
});
Ext.reg('swuslugacomplexevnprescrcombo', sw.Promed.SwUslugaComplexEvnPrescrCombo);

sw.Promed.SwOrgStructLevelTypeCombo = Ext.extend(Ext.form.ComboBox, {
	beforeBlur: function() {
		// медитируем
		return true;
	},
	clearBaseParams: function() {
		this.lastQuery = '';
		this.getStore().baseParams.Org_id = null;
	},
	codeField: 'OrgStructLevelType_Code',
	displayField: 'OrgStructLevelType_Name',
	editable: false,
	emptyText: '',
	enableKeyEvents: true,
	fieldLabel: langs('Услуга'),
	forceSelection: true,
	hiddenName: 'OrgStructLevelType_id',
	listeners: {
		'select': function(combo, record, index) {
			if ( record.get(combo.valueField) ) {
				combo.setRawValue(record.get('OrgStructLevelType_Code') + ". " + record.get('OrgStructLevelType_Name'));
			}
		}
	},
	minChars: 1,
	minLength: 0,
	resizable: true,
	selectOnFocus: true,
	setLevelNumber: function(level) {
		this.getStore().baseParams.OrgStructLevelType_LevelNumber = level;
	},
	setOrgId: function(org_id) {
		this.getStore().baseParams.Org_id = org_id;
	},
	tpl: new Ext.XTemplate(
		'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: left;">',
		'<td style="padding: 2px; width: 15%;">Код</td>',
		'<td style="padding: 2px; width: 65%;">Наименование</td>',
		'<td style="padding: 2px; width: 20%;">Уровень</td>',
		'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
		'<td style="padding: 2px;">{OrgStructLevelType_Code}&nbsp;</td>',
		'<td style="padding: 2px;">{OrgStructLevelType_Name}&nbsp;</td>',
		'<td style="padding: 2px;">{OrgStructLevelType_LevelNumber}&nbsp;</td>',
		'</tr></tpl>',
		'</table>'
	),
	triggerAction: 'all',
	valueField: 'OrgStructLevelType_id',
	initComponent: function() {
		sw.Promed.SwOrgStructLevelTypeCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'OrgStructLevelType_id'
			}, [
				{ name: 'OrgStructLevelType_id', mapping: 'OrgStructLevelType_id' },
				{ name: 'OrgStructLevelType_Code', mapping: 'OrgStructLevelType_Code' },
				{ name: 'OrgStructLevelType_Name', mapping: 'OrgStructLevelType_Name' },
				{ name: 'OrgStructLevelType_LevelNumber', mapping: 'OrgStructLevelType_LevelNumber' }
			]),
			url: '/?c=OrgStruct&m=loadOrgStructLevelTypeList'
		});
		
		this.getStore().baseParams.Org_id = null;
		this.getStore().baseParams.OrgStructLevelType_LevelNumber = null;
	}
});
Ext.reg('sworgstructleveltypecombo', sw.Promed.SwOrgStructLevelTypeCombo);

sw.Promed.SwOrgStructCombo = Ext.extend(Ext.form.ComboBox, {
	hiddenName: 'OrgStruct_id',
	displayField: 'OrgStruct_Nick',
	valueField: 'OrgStruct_id',
	fieldLabel: langs('Структурный уровень организации'),
	enableKeyEvents: true,
	resizable: true,
	selectOnFocus: true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{OrgStruct_Code}</font>&nbsp;{OrgStruct_Nick}',
		'</div></tpl>'
	),
	triggerAction: 'all',
	mode: 'local',

	initComponent: function() {
		sw.Promed.SwOrgStructCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			url: '/?c=OrgStruct&m=loadOrgStructList',
			key: 'OrgStruct_id',
			autoLoad: false,
			fields: [
				{name: 'OrgStruct_id',    type:'int'},
				{name: 'Org_id',    type:'int'},
				{name: 'OrgStruct_Code',    type:'int'},
				{name: 'OrgStruct_Nick',  type:'string'},
				{name: 'OrgStruct_Name',  type:'string'}
			]
		})
	}
});
Ext.reg('sworgstructcombo', sw.Promed.SwOrgStructCombo);

sw.Promed.SwMedServiceCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	fieldLabel: langs('Служба'),
	hiddenName: 'MedService_id',
	triggerAction: 'all',
	sortField:'MedService_Name',
	params: null,
	autoLoad: false,
	displayField:'MedService_Name',
	valueField:'MedService_id',
	initComponent: function() {
		sw.Promed.SwMedServiceCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.Store({
			autoLoad: this.autoLoad,
			baseParams: this.params,
			reader:new Ext.data.JsonReader({
				id:'MedService_id'
			}, [
				{name: 'MedService_id', mapping: 'MedService_id'},
				{name: 'MedService_Nick', mapping: 'MedService_Nick'},
				{name: 'MedService_Name', mapping: 'MedService_Name'},
				{name: 'Lpu_id_Nick', mapping: 'Lpu_id_Nick'},
				{name: 'Address_Address', mapping: 'Address_Address'},
				{name: 'Org_id', mapping: 'Org_id'},
				{name: 'OrgStruct_id', mapping: 'OrgStruct_id'},
				{name: 'Lpu_id', mapping: 'Lpu_id'},
				{name: 'LpuBuilding_id', mapping: 'LpuBuilding_id'},
				{name: 'LpuBuilding_Name', mapping: 'LpuBuilding_Name'},
				{name: 'LpuUnit_id', mapping: 'LpuUnit_id'},
				{name: 'LpuUnit_Name', mapping: 'LpuUnit_id_Name'},
				{name: 'LpuSectionProfile_id_List', mapping: 'LpuSectionProfile_id_List'},
				{name: 'LpuSectionLpuSectionProfileList', mapping: 'LpuSectionLpuSectionProfileList'},
				{name: 'LpuSection_id', mapping: 'LpuSection_id'},
				{name: 'LpuSection_Name', mapping: 'LpuSection_id_Name'}
			]),
			url:'/?c=MedService&m=loadList'
		});
	},
	tpl: '<tpl for="."><div class="x-combo-list-item">{[(values.MedService_Name) ? values.MedService_Name+" / " : ""]}{[(values.Lpu_id_Nick) ? values.Lpu_id_Nick+" / " : ""]}{Address_Address}</div></tpl>',
	width: 300,
	listWidth:600
});
Ext.reg('swmedservicecombo', sw.Promed.SwMedServiceCombo);

sw.Promed.SwPersonCardAttachStatusTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	initComponent: function() {
		sw.Promed.SwPersonCardAttachStatusTypeCombo.superclass.initComponent.apply(this, arguments);
		
		this.store = new Ext.db.AdapterStore({
			dbFile: 'Promed.db',
			tableName: 'PersonCardAttachStatusType',
			key: 'PersonCardAttachStatusType_id',
			autoLoad: false,
			fields: [
				{name: 'PersonCardAttachStatusType_id', type:'int'},
				{name: 'PersonCardAttachStatusType_Code', type:'int'},
				{name: 'PersonCardAttachStatusType_Name', type:'string'}
			],
			sortInfo: {
				field: 'PersonCardAttachStatusType_Code'
			}
		});
	},
	valueField: 'PersonCardAttachStatusType_id',
	codeField: 'PersonCardAttachStatusType_Code',
	displayField: 'PersonCardAttachStatusType_Name',
	tpl: '<tpl for="."><div class="x-combo-list-item"><font color="red">{PersonCardAttachStatusType_Code}</font>&nbsp;{PersonCardAttachStatusType_Name}</div></tpl>',
	fieldLabel: langs('Состояние')
});
Ext.reg('swpersoncardattachstatustypecombo', sw.Promed.SwPersonCardAttachStatusTypeCombo);

sw.Promed.SwGetAttachmentCaseCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	initComponent: function() {
		sw.Promed.SwGetAttachmentCaseCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			dbFile: 'Promed.db',
			tableName: 'GetAttachmentCase',
			key: 'GetAttachmentCase_id',
			autoLoad: false,
			fields: [
				{name: 'GetAttachmentCase_id', type:'int'},
				{name: 'GetAttachmentCase_Code', type:'int'},
				{name: 'GetAttachmentCase_Name', type:'string'}
			],
			sortInfo: {
				field: 'GetAttachmentCase_Code'
			},
			listeners: {
				'load': function(store) {
					this.onLoadStore(store);
				}.createDelegate(this)
			}
		});
	},
	onLoadStore: Ext.emptyFn,
	valueField: 'GetAttachmentCase_id',
	codeField: 'GetAttachmentCase_Code',
	displayField: 'GetAttachmentCase_Name',
	tpl: '<tpl for="."><div class="x-combo-list-item"><font color="red">{GetAttachmentCase_Code}</font>&nbsp;{GetAttachmentCase_Name}</div></tpl>',
	fieldLabel: langs('Причина прикрепления/открепления')
});
Ext.reg('swgetattachmentcasecombo', sw.Promed.SwGetAttachmentCaseCombo);

sw.Promed.swStoreInConfigCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	valueField: '',
	hiddenName: null,
	comboData: [],
	comboFields: [],
	recordIdIsValue: true,
	fieldLabel: null,
	mode: 'local',
	editable: false,
	initComponent: function() {
		this.displayField = this.displayField || (this.valueField +'_Name');
		this.hiddenName = this.hiddenName || this.valueField;
		this.storeKey = this.storeKey || this.valueField;
		this.tpl = '<tpl for="."><div class="x-combo-list-item">{'+ this.displayField +'}</div></tpl>';
		if(this.recordIdIsValue) {
			var data = [];
			for(var i=0; i < this.comboData.length; i++)
			{
				var record_id;
				var item_config = {};
				for(var j=0; j < this.comboFields.length; j++) {
					var f = this.comboFields[j];
					var value = this.comboData[i][j];
					switch(f.type){
						case 'int':
							value = parseInt(value);
							break;
						case 'string':
							value = ''+ value;//new String(value);
							break;
						case 'date':
							value = Date.parseDate(value, f.format?f.format:'d.m.Y');
							break;
					}
					item_config[f.name] = value;
					if(f.name == this.valueField) {
						record_id = this.comboData[i][j];
					}
				}
				data.push(new Ext.data.Record(item_config,record_id));
			}
			this.comboData = [];
		}
		this.store = new Ext.data.SimpleStore({
			data: this.comboData,
			editable: false,
			key: this.storeKey,
			autoLoad: false,
			fields: this.comboFields
		});
		if(this.recordIdIsValue) {
			this.store.add(data);
		}
		sw.Promed.swStoreInConfigCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swstoreinconfigcombo', sw.Promed.swStoreInConfigCombo);

// Комбобокс выбора специальности в зависимости от услуги
sw.Promed.swMedSpecOmsRemoteCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	triggerAction: 'all',
	displayField: 'MedSpecOms_Name',
	valueField: 'MedSpecOms_id',
	fieldLabel: langs('Специальность'),
	tpl: '<tpl for="."><div class="x-combo-list-item">{MedSpecOms_Name}</div></tpl>',
	initComponent: function() {
		sw.Promed.swMedSpecOmsRemoteCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			url: '/?c=EvnUslugaDispDop&m=loadMedSpecOmsList',
			editable: false,
			key: 'MedSpecOms_id',
			autoLoad: false,
			fields: [
				{name: 'MedSpecOms_id',    type:'int'},
				{name: 'MedSpecOms_Name',  type:'string'}
			],
			sortInfo: {
				field: 'MedSpecOms_Name'
			}
		});
	}
});

Ext.reg('swmedspecomsremotecombo', sw.Promed.swMedSpecOmsRemoteCombo);

// Комбобокс выбора профиля отделения в зависимости от услуги
sw.Promed.swLpuSectionProfileRemoteCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	triggerAction: 'all',
	displayField: 'LpuSectionProfile_Name',
	valueField: 'LpuSectionProfile_id',
	fieldLabel: langs('Специальность'),
	url: '/?c=EvnUslugaDispDop&m=loadLpuSectionProfileList',
	fields: [
		{name: 'LpuSectionProfile_id',    type:'int'},
		{name: 'LpuSectionProfile_Code',  type:'string'},
		{name: 'LpuSectionProfile_Name',  type:'string'}
	],
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table><tr><td style="width: 40px;"><font color="red">{LpuSectionProfile_Code}</font>&nbsp;</td><td>{LpuSectionProfile_Name}&nbsp;</td></tr></table>',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.swLpuSectionProfileRemoteCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			url: this.url,
			editable: false,
			key: 'LpuSectionProfile_id',
			autoLoad: false,
			fields: this.fields,
			sortInfo: {
				field: 'LpuSectionProfile_Name'
			}
		});
	}
});

Ext.reg('swlpusectionprofileremotecombo', sw.Promed.swLpuSectionProfileRemoteCombo);

// Комбобокс выбора дополнительного профиля
sw.Promed.swLpuSectionProfileDopRemoteCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	triggerAction: 'all',
	displayField: 'LpuSectionProfile_Name',
	valueField: 'LpuSectionProfile_id',
	fieldLabel: langs('Специальность'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table><tr><td style="width: 40px;"><font color="red">{LpuSectionProfile_Code}</font>&nbsp;</td><td>{LpuSectionProfile_Name}&nbsp;</td></tr></table>',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.swLpuSectionProfileDopRemoteCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			url: '/?c=Common&m=loadLpuSectionProfileDopList',
			editable: false,
			key: 'LpuSectionProfile_id',
			autoLoad: false,
			fields: [
				{name: 'LpuSectionProfile_id',    type:'int'},
				{name: 'LpuSectionProfile_Code',  type:'string'},
				{name: 'LpuSectionProfile_Name',  type:'string'}
			],
			listeners: {
				load: function(store) {
					this.setValue(this.getValue());
				}.createDelegate(this)
			},
			sortInfo: {
				field: 'LpuSectionProfile_Name'
			}
		});
	}
});

Ext.reg('swlpusectionprofiledopremotecombo', sw.Promed.swLpuSectionProfileDopRemoteCombo);

// Комбобокс выбора специальности в зависимости от профиля
sw.Promed.swMedSpecOmsWithFedCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
    listWidth: 600,
	store: new Ext.data.JsonStore({
		url: '/?c=EvnUsluga&m=loadMedSpecOmsList',
		editable: false,
		key: 'MedSpecOms_id',
		autoLoad: false,
		fields: [
			{name: 'MedSpecOms_id',    type:'int'},
			{name: 'MedSpec_fedid',    type:'int'},
			{name: 'MedSpecOms_Code',  type:'int'},
            {name: 'MedSpecOms_Name',  type:'string'},
            {name: 'MedSpecOms_FullName',  type:'string'}
		],
		sortInfo: {
			field: 'MedSpecOms_Code'
		}
	}),
	triggerAction: 'all',
	displayField: 'MedSpecOms_FullName',
	valueField: 'MedSpecOms_id',
	hiddenName: 'MedSpecOms_id',
	fieldLabel: langs('Специальность'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table><tr><td style="width: 40px;"><font color="red">{MedSpecOms_Code}</font>&nbsp;</td><td>{MedSpecOms_Name}&nbsp;</td></tr></table>',
		'</div></tpl>'
	),
	listeners: {
		'change': function (combo, newValue) {
			combo.getBaseForm().findField('LpuSectionProfile_id').onChangeMsoField(combo, newValue);
		}
	},
	getBaseForm: function() {
		return this.findParentByType('form').getForm();// === this.up('form').getForm();
	},
	onChangeDateField: function(field, newValue) {
		var	cb = this;
		cb.getStore().baseParams.onDate = newValue ? Ext.util.Format.date(newValue, 'd.m.Y') : null;
		if (false == cb.hidden) {
			cb.getStore().removeAll();								
			cb.getStore().load({
				callback: function() {
					if (cb.getStore().getById(cb.getValue())) {
						cb.setValue(cb.getValue());
					} else {
						cb.clearValue();
					}
				}
			});
		}
	},
	onChangeLspField: function(field, newValue) {
		var	cb = this;
		cb.getStore().baseParams.LpuSectionProfile_id = newValue || null;
		if (false == cb.hidden) {
			cb.getStore().removeAll();								
			cb.getStore().load({
				callback: function() {
					if (cb.getStore().getById(cb.getValue())) {
						cb.setValue(cb.getValue());
					} else {
						cb.clearValue();
					}
				}
			});
		}
	},
	onChangePayTypeField: function(field, sys_nick) {
		this.setAllowBlank(this.hidden || 'oms' != sys_nick);
	},
    setAllowInput: function(isAllow) {
        var	cb = this;
        cb.setContainerVisible(isAllow);
        if (cb.hidden) {
            cb.getStore().removeAll();
            cb.clearValue();
        }
        cb.setAllowBlank(cb.hidden || 'oms' != cb.getBaseForm().findField('PayType_id').getFieldValue('PayType_SysNick'));
        if (false == cb.hidden && 0 == cb.getStore().getCount()) {
            cb.getStore().load({
                callback: function() {
                    if (cb.getStore().getById(cb.getValue())) {
                        cb.setValue(cb.getValue());
                    } else {
                        cb.clearValue();
                    }
                }
            });
        }
    },
    onChangeUslugaPlaceField: function(field, code) {
        this.setAllowInput(getRegionNick() == 'perm' && code && 1 != code);
    },
	onShowWindow: function(win) {
		var	cb = this;
		cb.setAllowBlank(true);
		cb.setContainerVisible(false);
        cb.lastQuery = '';
		cb.getStore().baseParams = {};
		cb.getStore().removeAll();
		cb.clearValue();
	},
	initComponent: function() {
		sw.Promed.swMedSpecOmsWithFedCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swmedspecomswithfedcombo', sw.Promed.swMedSpecOmsWithFedCombo);

// Комбобокс выбора профиля отделения в зависимости от специальности врача
sw.Promed.swLpuSectionProfileWithFedCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
    listWidth: 600,
	store: new Ext.data.JsonStore({
		url: '/?c=EvnUsluga&m=loadLpuSectionProfileList',
		editable: false,
		key: 'LpuSectionProfile_id',
		autoLoad: false,
		fields: [
			{name: 'LpuSectionProfile_id',    type:'int'},
			{name: 'LpuSectionProfile_fedid',    type:'int'},
			{name: 'LpuSectionProfile_Code',  type:'string'},
            {name: 'LpuSectionProfile_Name',  type:'string'},
            {name: 'LpuSectionProfile_FullName',  type:'string'}
		],
		sortInfo: {
			field: 'LpuSectionProfile_Code'
		}
	}),
	triggerAction: 'all',
    displayField: 'LpuSectionProfile_FullName',
	valueField: 'LpuSectionProfile_id',
	hiddenName: 'LpuSectionProfile_id',
	fieldLabel: langs('Профиль'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table><tr><td style="width: 40px;"><font color="red">{LpuSectionProfile_Code}</font>&nbsp;</td><td>{LpuSectionProfile_Name}&nbsp;</td></tr></table>',
		'</div></tpl>'
	),
	listeners: {
		'change': function (combo, newValue) {
			if (combo.getBaseForm().findField('MedSpecOms_id')) {
				combo.getBaseForm().findField('MedSpecOms_id').onChangeLspField(combo, newValue);
			}
		}
	},
	getBaseForm: function() {
		return this.findParentByType('form').getForm();// === this.up('form').getForm();
	},
	disableLoad: false,
	isStom: false,
	loadStore: function() {
		var	cb = this;
		if (false == cb.hidden && !cb.disableLoad) {
			cb.getStore().baseParams.isStom = this.isStom;
			cb.getStore().removeAll();
			cb.getStore().load({
				callback: function() {
					if (cb.getStore().getById(cb.getValue())) {
						cb.setValue(cb.getValue());
					} else {
						cb.clearValue();
					}
				}
			});
		}
	},
	onChangeDateField: function(field, newValue) {
		var	cb = this;
        cb.setAllowInput();
		cb.getStore().baseParams.onDate = newValue ? Ext.util.Format.date(newValue, 'd.m.Y') : null;
		cb.loadStore();
	},
	onChangeMsoField: function(field, newValue) {
		var	cb = this;
		cb.getStore().baseParams.MedSpecOms_id = newValue || null;
		cb.loadStore();
	},
	onChangeLpuSectionId: function(field, newValue) {
		var	cb = this;
		cb.getStore().baseParams.LpuSection_id = newValue || null;
		cb.loadStore();
	},
	onChangePayTypeField: function(field, sys_nick) {
		this.setAllowBlank(this.hidden || 'oms' != sys_nick);
    },
    setAllowInput: function(isAllow) {
        var	cb = this;
		if (cb.getBaseForm().findField('UslugaPlace_id')) {
			var uslugaplace_id = cb.getBaseForm().findField('UslugaPlace_id').getValue();
		} else {
			var uslugaplace_id = null;
		}
		cb.setContainerVisible(true);

		if (!cb.hidden && !getRegionNick().inlist(['astra', 'perm'])) {
			if (getRegionNick() == 'ekb') {
				cb.setDisabled(uslugaplace_id && !uslugaplace_id.inlist([1,2]));
			} else {
				cb.setDisabled(uslugaplace_id && uslugaplace_id != 1);
			}
		}
        if (cb.hidden) {
            cb.getStore().removeAll();
            cb.clearValue();
        }
        cb.setAllowBlank(
			cb.hidden || 
			'oms' != cb.getBaseForm().findField('PayType_id').getFieldValue('PayType_SysNick') || 
			!(getRegionNick() != 'perm' && uslugaplace_id && uslugaplace_id == 1)
		);
        if (0 == cb.getStore().getCount()) {
			cb.loadStore();
        }
    },
    onChangeUslugaPlaceField: function(field, code) {
        this.setAllowInput();
    },
	onShowWindow: function(win) {
		var	cb = this;
		cb.setAllowBlank(true);
		cb.setContainerVisible(false);
        cb.lastQuery = '';
		cb.getStore().baseParams = {};
		cb.getStore().removeAll();
		cb.clearValue();
	},
	initComponent: function() {
		sw.Promed.swLpuSectionProfileWithFedCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swlpusectionprofilewithfedcombo', sw.Promed.swLpuSectionProfileWithFedCombo);

// Комбобокс выбора профиля отделения для Екб
sw.Promed.swLpuSectionProfileEkbRemoteCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'local',
	triggerAction: 'all',
	displayField: 'LpuSectionProfile_Name',
	valueField: 'LpuSectionProfile_id',
	fieldLabel: langs('Профиль'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table><tr><td style="width: 40px;"><font color="red">{LpuSectionProfile_Code}</font>&nbsp;</td><td>{LpuSectionProfile_Name}&nbsp;</td></tr></table>',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.swLpuSectionProfileEkbRemoteCombo.superclass.initComponent.apply(this, arguments);
		
        this.store = new Ext.data.JsonStore({
			url: '/?c=Common&m=loadLpuSectionProfileList',
			editable: false,
			key: 'LpuSectionProfile_id',
			autoLoad: false,
			fields: [
				{name: 'LpuSectionProfile_id',    type:'int'},
				{name: 'LpuSectionProfile_Code',  type:'string'},
				{name: 'LpuSectionProfile_Name',  type:'string'}
			],
			listeners: {
				load: function(store) {
					this.setValue(this.getValue());
				}.createDelegate(this)
			},
			sortInfo: {
				field: 'LpuSectionProfile_Name'
			}
		});
	}
});

Ext.reg('swlpusectionprofileekbremotecombo', sw.Promed.swLpuSectionProfileEkbRemoteCombo);

//комбобокс выбора файла для документов
sw.Promed.SwEvnMediaDataCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	allowBlank: true,
	filterType: null, // устанавливает фильтр на тип файлов. image - только картинки
	saveOnce: false,
	emptyText: langs('выберите файл...'),
	fieldLabel: langs('Доступные файлы'),
	mode: 'local',
	trigger1Class: 'x-form-search-trigger',
	triggerAction: 'all',
	disabled: false,
	editable: false,
	enableKeyEvents: true,
	listeners: {
		'beforeselect': function(combo, record){
		},
		'keydown': function(inp, e) {
			if ( e.getKey() == e.END)
			{
				this.inKeyMode = true;
				this.select(this.store.getCount() - 1);
			}

			if ( e.getKey() == e.HOME)
			{
				this.inKeyMode = true;
				this.select(0);
			}

			if ( e.getKey() == e.DELETE)
			{
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if (inp.onClearValue)
					this.onClearValue();
				e.stopEvent();
				return true;
			}

			if (e.getKey() == e.F4)
			{
				this.onTrigger1Click();
			}
		}
	},
	initComponent: function() {
		sw.Promed.SwEvnMediaDataCombo.superclass.initComponent.apply(this, arguments);
		this.displayField = 'EvnMediaData_FileName';
		this.valueField = 'EvnMediaData_id';
		this.hiddenName = 'EvnMediaData_id';
		this.tpl = new Ext.XTemplate(
			'<tpl for="."><div class="x-combo-list-item">',
			'{EvnMediaData_FileName} {EvnMediaData_Comment}',
			'</div></tpl>'
		);
		
		this.store = new Ext.data.Store({
			autoLoad: false,
			baseParams: {
				filterType: this.filterType
			},
			reader: new Ext.data.JsonReader({
				id: 'EvnMediaData_id'
			}, [
				{name: 'EvnMediaData_id', type:'int', mapping: 'EvnMediaData_id'},
				{name: 'Evn_id', type:'int', mapping: 'Evn_id'},
				{name: 'EvnMediaData_FileName', type:'string', mapping: 'EvnMediaData_FileName'},
				{name: 'EvnMediaData_FilePath', type:'string', mapping: 'EvnMediaData_FilePath'},
				{name: 'EvnMediaData_Src', type:'string', mapping: 'EvnMediaData_Src'},
				{name: 'EvnMediaData_Comment', type:'string', mapping: 'EvnMediaData_Comment'}
			]),
			url: '/?c=EvnMediaFiles&m=loadList'
		});
	},
	onTrigger1Click: function()
	{
		var combo = this;
		combo.getStore().baseParams = (combo.getStore().baseParams)?combo.getStore().baseParams:{};
		var params = combo.getStore().baseParams;
		var openWindow = function() {
			getWnd('swEMFListEditWindow').show({
				Evn_id: params.Evn_id,
				EvnXml_id: params.EvnXml_id || null,
				filterType: params.filterType || null,
				saveOnce: combo.saveOnce,
				onHide: function() {
				},
				onSave: function() {
					combo.getStore().removeAll();
					combo.getStore().load({
						callback: function(rec, opt) {
							if ( combo.getValue() && combo.getStore().getById(combo.getValue()))
							{
								combo.setValue(combo.getValue());
							}
							else
							{
								combo.setValue(null);
							}
						}
					});
				},
				onSelect: function(record) {
					if(record) {
						combo.getStore().removeAll();
						combo.getStore().load({
							callback: function(rec, opt) {
								var id = record.get(combo.valueField);
								var r = combo.getStore().getById(id);
								var i = combo.getStore().indexOf(r);
								if ( id && i >= 0 )
								{
									combo.setValue(id);
									combo.fireEvent('select', combo, r, i);
								}
								else
								{
									combo.setValue(null);
									combo.fireEvent('select', combo, false, null);
								}
							}
						});
					}
				}
			});
		};
		if(params.Evn_id && params.Evn_id > 0) {
			openWindow();
		} else if(params.EvnXml_id && params.EvnXml_id > 0) {
			Ext.Ajax.request({
				url: '/?c=EvnMediaFiles&m=getEvnByEvnXml',
				callback: function(opt, success, response) {
					if (success && response.responseText != '') {
						var response_obj = Ext.util.JSON.decode(response.responseText);
						if(Ext.isArray(response_obj) && response_obj.length > 0 && response_obj[0].Evn_id) {
							params.Evn_id = response_obj[0].Evn_id;
							combo.getStore().baseParams.Evn_id = response_obj[0].Evn_id;
							openWindow();
						}
					}
				}.createDelegate(this),
				params: params
			});
		} else {
			return false;
		}
		return true;
	}
});
Ext.reg('swevnmediadatacombo', sw.Promed.SwEvnMediaDataCombo);

sw.Promed.SwAnalyzerTestCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
	{
		allowBlank: false,
		displayField: 'AnalyzerTest_Name',
		codeField: 'AnalyzerTest_Code',
		editable: false,
		enableKeyEvents: true,
		fieldLabel: langs('Тест'),
		hiddenName: 'AnalyzerTest_id',
		lastQuery: '',
		anchor: '100%',
		initComponent: function()
		{
			sw.Promed.SwAnalyzerTestCombo.superclass.initComponent.apply(this, arguments);
		},
		//onTrigger2Click: Ext.emptyFn,
		resizable: true,
		selectOnFocus: true,
		store: new Ext.data.Store(
			{
				//autoLoad: false,
				reader: new Ext.data.JsonReader(
					{
						id: 'AnalyzerTest_id'
					},
					[
						{name: 'AnalyzerTest_id', mapping: 'AnalyzerTest_id'},
						{name: 'AnalyzerTest_Code', mapping: 'AnalyzerTest_Code'},
						{name: 'AnalyzerTest_Name', mapping: 'AnalyzerTest_Name'}
					]),
				url: '?c=AnalyzerTest&m=loadList'
			}),
		tpl: new Ext.XTemplate(
			'<tpl for="."><div class="x-combo-list-item">',
			'{AnalyzerTest_Name}',
			'</div></tpl>'
		),
		triggerAction: 'all',
		valueField: 'AnalyzerTest_id'
	});
Ext.reg('swanalyzertestcombo', sw.Promed.SwAnalyzerTestCombo);

sw.Promed.SwAnalyzerModelCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
	{
		allowBlank: false,
		displayField: 'AnalyzerModel_Name',
		codeField: 'AnalyzerModel_Code',
		editable: false,
		enableKeyEvents: true,
		fieldLabel: langs('Тест'),
		hiddenName: 'AnalyzerModel_id',
		lastQuery: '',
		anchor: '100%',
		initComponent: function()
		{
			sw.Promed.SwAnalyzerModelCombo.superclass.initComponent.apply(this, arguments);
		},
		//onTrigger2Click: Ext.emptyFn,
		resizable: true,
		selectOnFocus: true,
		store: new Ext.data.Store(
			{
				//autoLoad: false,
				reader: new Ext.data.JsonReader(
					{
						id: 'AnalyzerModel_id'
					},
					[
						{name: 'AnalyzerModel_id', mapping: 'AnalyzerModel_id'},
						{name: 'AnalyzerModel_Code', mapping: 'AnalyzerModel_Code'},
						{name: 'AnalyzerModel_Name', mapping: 'AnalyzerModel_Name'}
					]),
				url: '?c=AnalyzerModel&m=loadList'
			}),
		tpl: new Ext.XTemplate(
			'<tpl for="."><div class="x-combo-list-item">',
			'{AnalyzerModel_Name}',
			'</div></tpl>'
		),
		triggerAction: 'all',
		valueField: 'AnalyzerModel_id'
	});
Ext.reg('swanalyzermodelcombo', sw.Promed.SwAnalyzerModelCombo);

/**
 * Комбобокс выбора реагента с учетом модели и теста анализатора
 */
sw.Promed.SwReagentOnModelTestCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
	{
		//allowBlank: false,
		displayField: 'DrugNomen_Name',
		codeField: 'ReagentNormRate_id',
		editable: false,
		enableKeyEvents: true,
		fieldLabel: lang['test'],
		hiddenName: 'ReagentNormRate_id',
		lastQuery: '',
		//anchor: '100%',
		initComponent: function()
		{
			sw.Promed.SwReagentOnModelTestCombo.superclass.initComponent.apply(this, arguments);
		},
		//onTrigger2Click: Ext.emptyFn,
		resizable: true,
		selectOnFocus: true,
		store: new Ext.data.Store(
			{
				autoLoad: false,
				reader: new Ext.data.JsonReader(
					{
						id: 'ReagentNormRate_id'
					},
					[
						{name: 'ReagentNormRate_id', mapping: 'ReagentNormRate_id'},
						{name: 'DrugNomen_Name', mapping: 'DrugNomen_Name'}
					]),
				url: '?c=ReagentNormRate&m=loadReagentListForTest'
			}),
		tpl: new Ext.XTemplate(
			'<tpl for="."><div class="x-combo-list-item">',
			'{DrugNomen_Name}',
			'</div></tpl>'
		),
		triggerAction: 'all',
		valueField: 'ReagentNormRate_id'
	});
Ext.reg('swreagentonmodeltestcombo', sw.Promed.SwReagentOnModelTestCombo);

sw.Promed.SwAnalyzerWorksheetTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
	{
		allowBlank: false,
		displayField: 'AnalyzerWorksheetType_Name',
		codeField: 'AnalyzerWorksheetType_Code',
		editable: false,
		enableKeyEvents: true,
		fieldLabel: langs('Тест'),
		hiddenName: 'AnalyzerWorksheetType_id',
		lastQuery: '',
		anchor: '100%',
		initComponent: function()
		{
			sw.Promed.SwAnalyzerWorksheetTypeCombo.superclass.initComponent.apply(this, arguments);
		},
		//onTrigger2Click: Ext.emptyFn,
		resizable: true,
		selectOnFocus: true,
		store: new Ext.data.Store(
			{
				//autoLoad: false,
				reader: new Ext.data.JsonReader(
					{
						id: 'AnalyzerWorksheetType_id'
					},
					[
						{name: 'AnalyzerWorksheetType_id', mapping: 'AnalyzerWorksheetType_id'},
						{name: 'AnalyzerWorksheetType_Code', mapping: 'AnalyzerWorksheetType_Code'},
						{name: 'AnalyzerWorksheetType_Name', mapping: 'AnalyzerWorksheetType_Name'}
					]),
				url: '?c=AnalyzerWorksheetType&m=loadList'
			}),
		tpl: new Ext.XTemplate(
			'<tpl for="."><div class="x-combo-list-item">',
			'{AnalyzerWorksheetType_Name}',
			'</div></tpl>'
		),
		triggerAction: 'all',
		valueField: 'AnalyzerWorksheetType_id'
	});
Ext.reg('swanalyzerworksheettypecombo', sw.Promed.SwAnalyzerWorksheetTypeCombo);

sw.Promed.SwAnalyzerRackCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
	{
		allowBlank: false,
		displayField: 'AnalyzerRack_Name',
		codeField: 'AnalyzerRack_Code',
		editable: false,
		enableKeyEvents: true,
		fieldLabel: langs('Тест'),
		hiddenName: 'AnalyzerRack_id',
		lastQuery: '',
		anchor: '100%',
		initComponent: function()
		{
			sw.Promed.SwAnalyzerRackCombo.superclass.initComponent.apply(this, arguments);
		},
		//onTrigger2Click: Ext.emptyFn,
		resizable: true,
		selectOnFocus: true,
		store: new Ext.data.Store(
			{
				//autoLoad: false,
				reader: new Ext.data.JsonReader(
					{
						id: 'AnalyzerRack_id'
					},
					[
						{name: 'AnalyzerRack_id', mapping: 'AnalyzerRack_id'},
						{name: 'AnalyzerRack_Code', mapping: 'AnalyzerRack_Code'},
						{name: 'AnalyzerRack_Name', mapping: 'AnalyzerRack_Name'},
						{name: 'AnalyzerRack_DimensionX', mapping: 'AnalyzerRack_DimensionX'},
						{name: 'AnalyzerRack_DimensionY', mapping: 'AnalyzerRack_DimensionY'}
					]),
				url: '?c=AnalyzerRack&m=loadList'
			}),
		tpl: new Ext.XTemplate(
			'<tpl for="."><div class="x-combo-list-item">',
			'{AnalyzerRack_Name}',
			'</div></tpl>'
		),
		triggerAction: 'all',
		valueField: 'AnalyzerRack_id'
	});
Ext.reg('swanalyzerrackcombo', sw.Promed.SwAnalyzerRackCombo);

sw.Promed.SwAnalyzerCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	allowBlank: false,
	displayField: 'Analyzer_Name',
	codeField: 'Analyzer_Code',
	editable: false,
	enableKeyEvents: true,
	fieldLabel: langs('Тест'),
	hiddenName: 'Analyzer_id',
	lastQuery: '',
	anchor: '100%',
	initComponent: function()
	{
		var me = this;
		if(me.separateStore) {
			me.store = new Ext.data.JsonStore({
				fields: [
					{ name: 'Analyzer_id' },
					{ name: 'Analyzer_Code' },
					{ name: 'Analyzer_begDT' },
					{ name: 'Analyzer_Name' },
					{ name: 'AnalyzerModel_id' }
				],
				url: '?c=Analyzer&m=loadList',
				listeners: {
					load: function() {
						me.setValue(me.getValue());
					}
				}
			});
		}
		sw.Promed.SwAnalyzerCombo.superclass.initComponent.apply(this, arguments);
	},
	//onTrigger2Click: Ext.emptyFn,
	resizable: true,
	selectOnFocus: true,
	store: new Ext.data.Store(
	{
		//autoLoad: false,
		reader: new Ext.data.JsonReader(
			{
				id: 'Analyzer_id'
			},
			[
				{name: 'Analyzer_id', mapping: 'Analyzer_id'},
				{name: 'Analyzer_Code', mapping: 'Analyzer_Code'},
				{name: 'Analyzer_begDT', mapping: 'Analyzer_begDT'},
				{name: 'Analyzer_Name', mapping: 'Analyzer_Name'},
				{name: 'AnalyzerModel_id', mapping: 'AnalyzerModel_id'},
				{name: 'Analyzer_IsUseAutoReg', mapping: 'Analyzer_IsUseAutoReg'}
			]),
		url: '?c=Analyzer&m=loadList'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{Analyzer_Name}&nbsp',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'Analyzer_id'
});
Ext.reg('swanalyzercombo', sw.Promed.SwAnalyzerCombo);


sw.Promed.SwPMUserCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	allowBlank: false,
	displayField: 'PMUser_Name',
	editable: false,
	enableKeyEvents: true,
	fieldLabel: langs('Пользователь'),
	hiddenName: 'pmUser_id',
	lastQuery: '',
	anchor: '100%',
	initComponent: function()
	{
		sw.Promed.SwAnalyzerCombo.superclass.initComponent.apply(this, arguments);
	},
	//onTrigger2Click: Ext.emptyFn,
	resizable: true,
	selectOnFocus: true,
	store: new Ext.data.Store(
	{
		//autoLoad: false,
		reader: new Ext.data.JsonReader(
			{
				id: 'pmUser_id'
			},
			[
				{name: 'pmUser_id', mapping: 'pmUser_id'},
				{name: 'login', mapping: 'login'},
				{name: 'PMUser_Name', mapping: 'PMUser_Name'},
				{name: 'IsMedPersonal', mapping: 'IsMedPersonal'},
				{name: 'groups', mapping: 'groups'},
				{name: 'pmUser_desc', mapping: 'pmUser_desc'},
				{name: 'Lpu_id', mapping: 'Lpu_id'}
			]),
            params: {
                withoutPaging: true,
                org: getGlobalOptions().org_id
            },
		url: '?c=User&m=getUsersList'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
			'<table><tr><td style="width: 40px;"><font color="red">{login}</font>&nbsp;</td><td>{PMUser_Name}&nbsp;</td></tr></table>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'pmUser_id'
});
Ext.reg('swpmusercombo', sw.Promed.SwPMUserCombo);

sw.Promed.SwPMUserCacheOrgCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	//codeField: 'pmUser_Login',
	displayField: 'pmUser_Name',
	valueField: 'pmUserCacheOrg_id',
	hiddenName: 'pmUserCacheOrg_id',
	fieldLabel: 'Учетная запись',
	lastQuery: '',
	triggerAction: 'all',

	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
			'<table><tr><td style="width: 40px;"><font color="red">{pmUser_Login}</font>&nbsp;</td><td>{pmUser_Name}&nbsp;</td></tr></table>',
		'</div></tpl>'
	),

	initComponent: function() {
		this.store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{name: 'pmUserCacheOrg_id', type: 'int'},
				{name: 'Org_id', type: 'int'},
				{name: 'pmUser_id', type: 'int'},
				{name: 'pmUser_Login', type: 'string'},
				{name: 'pmUser_Name', type: 'string'}
			],
			key: 'pmUserCacheOrg_id',
			sortInfo: {
				field: 'pmUser_Login'
			},
			url: '/?c=User&m=loadPMUserCacheOrgList'
		});

		sw.Promed.SwPMUserCacheOrgCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swpmusercacheorgcombo', sw.Promed.SwPMUserCacheOrgCombo);

sw.Promed.SwUnitCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	allowBlank: false,
	displayField: 'Unit_Name',
	codeField: 'Unit_Code',
	editable: false,
	enableKeyEvents: true,
	fieldLabel: langs('Единица измерения'),
	hiddenName: 'Unit_id',
	lastQuery: '',
	anchor: '100%',
	initComponent: function()
	{
		sw.Promed.SwUnitCombo.superclass.initComponent.apply(this, arguments);
	},
	//onTrigger2Click: Ext.emptyFn,
	resizable: true,
	selectOnFocus: true,
	store: new Ext.data.Store(
	{
		//autoLoad: false,
		reader: new Ext.data.JsonReader(
			{
				id: 'Unit_id'
			},
			[
				{name: 'Unit_id', mapping: 'Unit_id'},
				{name: 'Unit_Code', mapping: 'Unit_Code'},
				{name: 'Unit_Name', mapping: 'Unit_Name'}
			]),
		url: '?c=LisSpr&m=loadUnitList'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{Unit_Name}',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'Unit_id'
});
Ext.reg('swunitcombo', sw.Promed.SwUnitCombo);

sw.Promed.SwTestUnitCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	allowBlank: false,
	displayField: 'Unit_Name',
	codeField: 'Unit_Code',
	editable: false,
	enableKeyEvents: true,
	fieldLabel: langs('Единица измерения'),
	hiddenName: 'Unit_id',
	lastQuery: '',
	anchor: '100%',
	initComponent: function()
	{
		sw.Promed.SwTestUnitCombo.superclass.initComponent.apply(this, arguments);
	},
	//onTrigger2Click: Ext.emptyFn,
	resizable: true,
	selectOnFocus: true,
	store: new Ext.data.Store(
	{
		//autoLoad: false,
		reader: new Ext.data.JsonReader(
			{
				id: 'Unit_id'
			},
			[
				{name: 'Unit_id', mapping: 'Unit_id'},
				{name: 'Unit_Code', mapping: 'Unit_Code'},
				{name: 'Unit_Name', mapping: 'Unit_Name'},
				{name: 'Unit_Coeff', mapping: 'Unit_Coeff'}
			]),
		url: '?c=LisSpr&m=loadTestUnitList'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{Unit_Name}',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'Unit_id'
});
Ext.reg('swtestunitcombo', sw.Promed.SwTestUnitCombo);

sw.Promed.SwDirectoryImportCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	allowBlank: false,
	displayField: 'file_field_name',
	codeField: 'file_field_name',
	editable: false,
	enableKeyEvents: true,
	fieldLabel: langs('Соответствующее поле в файле'),
	hiddenName: 'file_field_name',
	lastQuery: '',
	anchor: '100%',
	initComponent: function()
	{
		sw.Promed.SwTestUnitCombo.superclass.initComponent.apply(this, arguments);
	},
	resizable: true,
	selectOnFocus: true,
	store: new Ext.data.SimpleStore({
        key: 'file_field_name',
        autoLoad: false,
        fields:
        [
            {name:'file_field_name',type:'string'}
        ]
    }),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{file_field_name}',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'file_field_name'
});
Ext.reg('swdirectoryimportcombo', sw.Promed.SwDirectoryImportCombo);

sw.Promed.SwAnalyzerTestRefValuesCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	allowBlank: false,
	displayField: 'RefValues_Name',
	// codeField: 'RefValues_Code',
	editable: false,
	enableKeyEvents: true,
	fieldLabel: langs('Референсное значение'),
	hiddenName: 'AnalyzerTestRefValues_id',
	lastQuery: '',
	anchor: '100%',
	initComponent: function()
	{
		sw.Promed.SwAnalyzerTestRefValuesCombo.superclass.initComponent.apply(this, arguments);
	},
	//onTrigger2Click: Ext.emptyFn,
	resizable: true,
	selectOnFocus: true,
	store: new Ext.data.Store(
	{
		//autoLoad: false,
		reader: new Ext.data.JsonReader(
			{
				id: 'AnalyzerTestRefValues_id'
			},
			[
				{name: 'AnalyzerTestRefValues_id', mapping: 'AnalyzerTestRefValues_id'},
				{name: 'RefValues_id', mapping: 'RefValues_id'},
				{name: 'Unit_id', mapping: 'Unit_id'},
				{name: 'RefValues_Name', mapping: 'RefValues_Name'},
				{name: 'AnalyzerTestType_id', mapping: 'AnalyzerTestType_id'},
				{name: 'UslugaTest_ResultQualitativeNorms', mapping: 'UslugaTest_ResultQualitativeNorms'},
				{name: 'UslugaTest_ResultLower', mapping: 'UslugaTest_ResultLower'},
				{name: 'UslugaTest_ResultUpper', mapping: 'UslugaTest_ResultUpper'},
				{name: 'UslugaTest_ResultLowerCrit', mapping: 'UslugaTest_ResultLowerCrit'},
				{name: 'UslugaTest_ResultUpperCrit', mapping: 'UslugaTest_ResultUpperCrit'},
				{name: 'UslugaTest_ResultUnit', mapping: 'UslugaTest_ResultUnit'},
				{name: 'UslugaTest_Comment', mapping: 'UslugaTest_Comment'}
			]),
		url: '?c=AnalyzerTestRefValues&m=loadRefValuesList'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{RefValues_Name}',
		'</div></tpl>'
	),
	triggerAction: 'all',
	valueField: 'AnalyzerTestRefValues_id'
});
Ext.reg('swanalyzertestrefvaluescombo', sw.Promed.SwAnalyzerTestRefValuesCombo);

sw.Promed.SwUslugaCategoryCombo = Ext.extend(sw.Promed.SwCommonSprCombo, {
	additionalCategoryList: [],
	comboSubject: 'UslugaCategory',
	fieldLabel: langs('Категория услуги'),
	typeCode: 'int',
	isStom: false,
	allowSysNick: true,
	loadParams: null,
	autoLoad: false,
	initComponent: function() {
		sw.Promed.SwUslugaCategoryCombo.superclass.initComponent.apply(this, arguments);
		this.autoLoad = (typeof this.loadParams != 'object');
		if ( getGlobalOptions().region && !this.loadParams  ) {
			var categoryList = (typeof this.additionalCategoryList == 'object' ? this.additionalCategoryList : []);

			switch ( getRegionNick() ) {
				case 'kareliya':
					categoryList = categoryList.concat([ 'gost2011', 'tfoms', 'stomoms', 'stomklass' ]);
				break;

				case 'kz':
					categoryList = categoryList.concat([ 'classmedus', 'lpu', 'MedOp' ]);
				break;

				case 'penza':
					categoryList = categoryList.concat([ 'gost2011', 'tfoms' ]);
				break;

				case 'perm':
					categoryList = categoryList.concat([ 'lpu', 'tfoms', 'gost2011'/*, 'gost2011r'*/ ]);
				break;

				case 'pskov':
					categoryList = categoryList.concat([ 'pskov_foms', 'gost2011', 'lpu' ]);
				break;

				case 'ufa':
					categoryList = categoryList.concat([ 'gost2011' ]);
				break;

				case 'ekb':
					categoryList = categoryList.concat([ 'gost2011', 'tfoms' ]);
				break;

				default:
					categoryList = categoryList.concat([ 'tfoms', 'promed', 'gost2011', 'lpu', 'syslabprofile', 'lpulabprofile' ]);
				break;
			}

			this.loadParams = {params: {where: "where UslugaCategory_SysNick in ('" + categoryList.join("', '") + "')"}};
		}
	},
	listeners: {
		'change': function (combo, newValue, oldValue) {
			var index = combo.getStore().findBy(function (rec) {
				if ( rec.get('UslugaCategory_id') == newValue ) {
					if(combo.isFromReports){
						combo.ownerCt.items.each(function(i){
							if (i.codeField == 'UslugaComplex_Code')
							{
								var index = combo.getStore().findBy(function(rec) {
									return (rec.get('UslugaCategory_id') == newValue);
								});
								var record = combo.getStore().getAt(index);
								i.setUslugaCategoryList([record.get('UslugaCategory_SysNick')]);
							}
						});
					}
					return true;
				}
				else {
					return false;
				}
			});

			combo.fireEvent('select', combo, combo.getStore().getAt(index));
		}.createDelegate(this),

		'render' :function(combo) {
			if(combo.autoLoad == false) {
				if (combo.loadParams) {
					combo.getStore().removeAll();
					combo.getStore().load(combo.loadParams);
				} else if(combo.getStore().getCount() == 0) {
					combo.getStore().load();
				}
			}
		}.createDelegate(this)
	}
});
Ext.reg('swuslugacategorycombo', sw.Promed.SwUslugaCategoryCombo);

sw.Promed.SwUslugaComplexTariffCombo = Ext.extend(Ext.form.ComboBox, {
	allowLoadMask: false,
	beforeBlur: function() {
		// медитируем
		return true;
	},
	clearParams: function() {
		this.params = {
			 LpuSection_id: null
			,PayType_id: null
			,Person_id: null
			,UEDAboveZero: null
			,UslugaComplex_id: null
			,UslugaComplexTariff_Date: null
		};
	},
	codeField: 'UslugaComplexTariff_Code',
	displayField: 'UslugaComplexTariff_Name',
	editable: true,
	enableKeyEvents: true,
	fieldLabel: langs('Тариф'),
	forceSelection: true,
	isStom: false,
	hiddenName: 'UslugaComplexTariff_id',
	listeners: {
		'keydown': function(inp, e) {
			switch ( e.getKey() ) {
				case e.END:
					this.inKeyMode = true;
					this.select(this.getStore().getCount() - 1);
				break;

				case e.F4:
					this.onTrigger2Click();
				break;

				case e.HOME:
					this.inKeyMode = true;
					this.select(0);
				break;

				case e.PAGE_UP:
					this.inKeyMode = true;
					var ct = this.getStore().getCount();

					if ( ct > 0 ) {
						if ( this.selectedIndex == -1 ) {
							this.select(0);
						}
						else if ( this.selectedIndex != 0 ) {
							if ( this.selectedIndex - 10 >= 0 )
								this.select(this.selectedIndex - 10);
							else
								this.select(0);
						}
					}
				break;

				case e.PAGE_DOWN:
					if ( !this.isExpanded() ) {
						this.onTriggerClick();
					}
					else {
						this.inKeyMode = true;
						var ct = this.getStore().getCount();

						if ( ct > 0 ) {
							if ( this.selectedIndex == -1 ) {
								this.select(0);
							}
							else if ( this.selectedIndex != ct - 1 ) {
								if ( this.selectedIndex + 10 < ct - 1 )
									this.select(this.selectedIndex + 10);
								else
									this.select(ct - 1);
							}
						}
					}
				break;

				case e.DELETE:
					inp.clearValue();
				break;
			}
		}
	},
    isAllowSetFirstValue: true,
	loadMaskArea: null,
    isLpuFilter: false,
	loadUslugaComplexTariffList: function() {
		var UslugaComplexTariff_id = this.getValue();

		this.clearValue();
		this.fireEvent('change', this, null);

		this.getStore().removeAll();

		if ( Ext.isEmpty(this.params.PayType_id) || Ext.isEmpty(this.params.Person_id)
			|| Ext.isEmpty(this.params.UslugaComplex_id) || Ext.isEmpty(this.params.UslugaComplexTariff_Date)
		) {
			this.fireEvent('change', this, null);
			return false;
		}

		if ( this.allowLoadMask == true && typeof this.loadMaskArea == 'object' && typeof this.loadMaskArea.getEl == 'function' ) {
			var loadMask = new Ext.LoadMask(this.loadMaskArea.getEl(), { msg: "Загрузка тарифов..." });
			loadMask.show();
		}

		this.getStore().load({
			callback: function(records) {
				if ( typeof loadMask == 'object' ) {
					loadMask.hide();
				}
				this.getStore().clearFilter();
				this.lastQuery = '';
				if (this.getStore().getCount() > 1 && this.isLpuFilter) {
					this.getStore().filterBy(function(rec) {
						return Ext.isEmpty(rec.get('Lpu_id'));
					}, this);
				}
				if ( this.getStore().getCount() > 0 ) {
					var index;
					var record;
					
					if (this.isStom) {
						this.getStore().filterBy(function(rec) {
							return (!Ext.isEmpty(rec.get('UslugaComplexTariff_UED')) && rec.get('UslugaComplexTariff_UED') != 0) || (!Ext.isEmpty(rec.get('UslugaComplexTariff_UEM')) && rec.get('UslugaComplexTariff_UEM') != 0);
						}, this);
					} else {
						this.getStore().filterBy(function(rec) {
							return !Ext.isEmpty(rec.get('UslugaComplexTariff_Tariff')) && rec.get('UslugaComplexTariff_Tariff') != 0;
						}, this);
					}

					if ( this.isAllowSetFirstValue
                    && this.getStore().getCount() == 1
                    ) {
						index = 0;
					} else if ( this.isAllowSetFirstValue
                    && this.getStore().getCount() == 2
                    && Ext.isEmpty(this.getStore().getAt(0).get(this.valueField))
                    ) {
						index = 1;
					}
					else {
						index = this.getStore().findBy(function(rec) {
							return (rec.get(this.valueField) == UslugaComplexTariff_id);
						}.createDelegate(this));
					}

					record = this.getStore().getAt(index);
	
					if ( record && !Ext.isEmpty(record.get(this.valueField)) ) {
						this.setValue(record.get(this.valueField));
						this.fireEvent('change', this, record.get(this.valueField));
					}

					this.collapse();
				}
			}.createDelegate(this),
			params: this.params
		});
	},
	mode: 'local',
	onTrigger2Click: function() {
		if ( this.disabled ) {
			return false;
		}
		else if ( Ext.isEmpty(this.params.PayType_id) ) {
			sw.swMsg.alert(langs('Ошибка'), langs('Не указан вид оплаты'));
			return false;
		}
		else if ( Ext.isEmpty(this.params.Person_id) ) {
			sw.swMsg.alert(langs('Ошибка'), langs('Не указан идентификатор пациента'));
			return false;
		}
		else if ( Ext.isEmpty(this.params.UslugaComplex_id) ) {
			sw.swMsg.alert(langs('Ошибка'), langs('Не указана услуга'));
			return false;
		}
		else if ( Ext.isEmpty(this.params.UslugaComplexTariff_Date) ) {
			sw.swMsg.alert(langs('Ошибка'), langs('Не указана дата выполнения услуги'));
			return false;
		}

		var combo = this;

		getWnd('swUslugaComplexTariffViewWindow').show({
			callback: function(data) {
				var index = combo.getStore().findBy(function(rec) {
					return (rec.get(combo.valueField) == data[combo.valueField]);
				});

				if ( index == -1 ) {
					combo.getStore().loadData([{
						 UslugaComplexTariff_id: data.UslugaComplexTariff_id
						,UslugaComplexTariff_begDate: data.UslugaComplexTariff_begDate
						,UslugaComplexTariff_endDate: data.UslugaComplexTariff_endDate
						,UslugaComplexTariff_Code: data.UslugaComplexTariff_Code
						,UslugaComplexTariff_Name: data.UslugaComplexTariff_Name
						,UslugaComplexTariff_Tariff: data.UslugaComplexTariff_Tariff
						,UslugaComplexTariff_UED: data.UslugaComplexTariff_UED
						,UslugaComplexTariff_UEM: data.UslugaComplexTariff_UEM
						,UslugaComplexTariffType_Name: data.UslugaComplexTariffType_Name
					}], true);

					index = combo.getStore().findBy(function(rec) {
						return (rec.get(combo.valueField) == data[combo.valueField]);
					});
				}

				combo.setValue(data[combo.valueField]);
				combo.fireEvent('select', combo, combo.getStore().getAt(index));

				getWnd('swUslugaComplexTariffViewWindow').hide();
			},
			formParams: combo.params,
			onHide: function() {
				combo.focus(false);
			}
		});
	},
	params: {
		 LpuSection_id: null
		,PayType_id: null
		,Person_id: null
		,UslugaComplex_id: null
		,UEDAboveZero: null
		,UslugaComplexTariff_Date: null
	},
	resizable: true,
	selectOnFocus: true,
	setParams: function(params) {
		this.clearParams();

		if ( !Ext.isEmpty(params.LpuSection_id) ) {
			this.params.LpuSection_id = params.LpuSection_id;
		}

		if ( !Ext.isEmpty(params.PayType_id) ) {
			this.params.PayType_id = params.PayType_id;
		}

		if ( !Ext.isEmpty(params.Person_id) ) {
			this.params.Person_id = params.Person_id;
		}

		if ( !Ext.isEmpty(params.UEDAboveZero) ) {
			this.params.UEDAboveZero = params.UEDAboveZero;
		}

		if ( !Ext.isEmpty(params.UslugaComplex_id) ) {
			this.params.UslugaComplex_id = params.UslugaComplex_id;
		}

		if ( !Ext.isEmpty(params.UslugaComplexTariff_Date) ) {
			this.params.UslugaComplexTariff_Date = (typeof params.UslugaComplexTariff_Date == 'object' ? Ext.util.Format.date(params.UslugaComplexTariff_Date, 'd.m.Y') : params.UslugaComplexTariff_Date);
		}
	},
	tpl: new Ext.XTemplate(
		'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold;">',
		'<td style="padding: 2px; width: 10%;">Код</td>',
		'<td style="padding: 2px; width: 45%;">Наименование</td>',
		'<td style="padding: 2px; width: 15%;">Тип</td>',
		'<td style="padding: 2px; width: 15%;">Тариф</td>',
		'<td style="padding: 2px; width: 15%;">Вид МП</td>',
		'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
		'<td style="padding: 2px;">{UslugaComplexTariff_Code}&nbsp;</td>',
		'<td style="padding: 2px;">{UslugaComplexTariff_Name}&nbsp;</td>',
		'<td style="padding: 2px;">{UslugaComplexTariffType_Name}&nbsp;</td>',
		'<td style="padding: 2px;">{UslugaComplexTariff_Tariff}&nbsp;</td>',
		'<td style="padding: 2px;">{LpuUnitType_Name}&nbsp;</td>',
		'</tr></tpl>',
		'</table>'
	),
	triggerAction: 'all',
	valueField: 'UslugaComplexTariff_id',
	initComponent: function() {

		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);

        if ( this.isStom == true ) {
            this.codeField = 'UslugaComplexTariff_UED';
            this.setValue = function(v) {
                Ext.form.ComboBox.superclass.setValue.apply(this, arguments);
                var r = this.findRecord(this.valueField, v), text;
                if ( r ) {
                    if ( r.get(this.codeField).toString().length > 0 && r.get(this.codeField) != -1 ) {
                        text = r.get(this.codeField).toString() + '. ' + r.get(this.displayField);
                    } else {
                        text = r.get(this.displayField);
                    }
                    if ( r.get(this.valueField).toString().length > 0 && this.el) {
                        Ext.form.ComboBox.superclass.setRawValue.call(this, text);
                    }
                }
            };
            this.tpl = new Ext.XTemplate(
                '<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold;">',
                '<td style="padding: 2px; width: 10%;">Код</td>',
                '<td style="padding: 2px; width: 50%;">Наименование</td>',
                '<td style="padding: 2px; width: 20%;">Тип</td>',
                '<td style="padding: 2px; width: 20%;">УЕТ</td>',
                '<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
                '<td style="padding: 2px;">{UslugaComplexTariff_Code}&nbsp;</td>',
                '<td style="padding: 2px;">{UslugaComplexTariff_Name}&nbsp;</td>',
                '<td style="padding: 2px;">{UslugaComplexTariffType_Name}&nbsp;</td>',
                '<td style="padding: 2px;">{UslugaComplexTariff_UED}&nbsp;</td>',
                '</tr></tpl>',
                '</table>'
            );
        }

		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'UslugaComplexTariff_id'
			}, [
				{ name: 'UslugaComplexTariff_id', mapping: 'UslugaComplexTariff_id' },
				{ name: 'UslugaComplexTariff_begDate', mapping: 'UslugaComplexTariff_begDate' },
				{ name: 'UslugaComplexTariff_endDate', mapping: 'UslugaComplexTariff_endDate' },
				{ name: 'UslugaComplexTariff_Code', mapping: 'UslugaComplexTariff_Code' },
				{ name: 'UslugaComplexTariff_Name', mapping: 'UslugaComplexTariff_Name' },
				{ name: 'UslugaComplexTariff_Tariff', mapping: 'UslugaComplexTariff_Tariff' },
				{ name: 'UslugaComplexTariff_UED', mapping: 'UslugaComplexTariff_UED' },
				{ name: 'UslugaComplexTariff_UEM', mapping: 'UslugaComplexTariff_UEM' },
				{ name: 'UslugaComplexTariffType_Name', mapping: 'UslugaComplexTariffType_Name' },
				{ name: 'LpuUnitType_Name', mapping: 'LpuUnitType_Name' },
				{ name: 'Lpu_id', mapping: 'Lpu_id' }
			]),
			url: '/?c=Usluga&m=loadUslugaComplexTariffList'
		});
	}
});
Ext.reg('swuslugacomplextariffcombo', sw.Promed.SwUslugaComplexTariffCombo);

sw.Promed.SwUslugaComplexTariffCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwUslugaComplexTariffCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwUslugaComplexTariffCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwUslugaComplexTariffCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;


sw.Promed.SwReceptDrugRlsCombo = Ext.extend(Ext.form.ComboBox, {
	allowBlank: false,
	clearBaseParams: function() {
		this.getStore().baseParams.Date = null;
		this.getStore().baseParams.DrugComplexMnn_id = null;
		this.getStore().baseParams.DrugFinance_id = null;
		this.getStore().baseParams.PrivilegeType_id = null;
		this.getStore().baseParams.ReceptType_Code = null;
		this.getStore().baseParams.WhsDocumentCostItemType_id = null;
        this.getStore().baseParams.is_mi_1 = false;
	},
	displayField: 'Drug_Name',
	enableKeyEvents: true,
	fieldLabel: langs('Торговое наимен-е'),
	forceSelection: true,
	hiddenName: 'Drug_rlsid',
	initComponent: function() {
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);

		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'Drug_rlsid'
			}, [
				{ name: 'Drug_Name', mapping: 'Drug_Name' },
				{ name: 'Drug_Code', mapping: 'Drug_Code' },
				{ name: 'Drug_rlsid', mapping: 'Drug_rlsid' },
				{ name: 'DrugComplexMnn_id', mapping: 'DrugComplexMnn_id' },
				{ name: 'Drug_Price', mapping: 'Drug_Price' },
				{ name: 'Drug_IsKEK', mapping: 'Drug_IsKEK' },
				{ name: 'DrugOstat_Flag', mapping: 'DrugOstat_Flag' },
				{ name: 'DrugOstatRegistry_id', mapping: 'DrugOstatRegistry_id' },
				{ name: 'WhsDocumentUc_id', mapping: 'WhsDocumentUc_id' }
			]),
			url: C_DRUG_RLS_LIST
		});
	},
	minChars: 2,
	minLength: 1,
	minLengthText: langs('Поле должно быть заполнено'),
	mode: 'remote',
	onTrigger2Click: Ext.emptyFn,
	resizable: true,
	selectOnFocus: true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<h3>{Drug_Name}&nbsp;</h3>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	validateOnBlur: true,
	valueField: 'Drug_rlsid'
});
Ext.reg('swreceptdrugrlscombo', sw.Promed.SwReceptDrugRlsCombo);

sw.Promed.SwReceptDrugRlsCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwReceptDrugRlsCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwReceptDrugRlsCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwReceptDrugRlsCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwReceptDrugRlsCombo.prototype.onTrigger2Click = Ext.emptyFn;

sw.Promed.SwReceptDrugComplexMnnCombo = Ext.extend(Ext.form.ComboBox, {
	allowBlank: false,
	clearBaseParams: function() {
		this.getStore().baseParams.Date = null;
		this.getStore().baseParams.DrugFinance_Code = null;
		this.getStore().baseParams.EvnRecept_Is7Noz_Code = null;
		this.getStore().baseParams.PrivilegeType_id = null;
		this.getStore().baseParams.ReceptType_Code = null;
	},
	displayField: 'DrugComplexMnn_Name',
	emptyText: langs('Начните вводить МНН...'),
	enableKeyEvents: true,
	fieldLabel: langs('МНН'),
	forceSelection: true,
	hiddenName: 'DrugComplexMnn_id',
	initComponent: function() {
		Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{ name: 'DrugComplexMnn_id', type: 'int' },
				{ name: 'DrugComplexMnn_Name', type: 'string' },
				{ name: 'Actmatters_id', type: 'string' },
				{ name: 'DrugRequestRow_id', type: 'int' },
				{ name: 'DrugOstatRegistry_id', type: 'int' },
				{ name: 'WhsDocumentSupply_id', type: 'int' }
			],
			key: 'DrugComplexMnn_id',
			sortInfo: {
				field: 'DrugComplexMnn_Name'
			},
			url: C_DRUG_COMPLEX_MNN_LIST
		});
	},
	minChars: 2,
	minLength: 1,
	minLengthText: langs('Поле должно быть заполнено'),
	mode: 'remote',
	onTrigger2Click: Ext.emptyFn,
	queryDelay: 1000,
	resizable: true,
	selectOnFocus: true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<h3>{DrugComplexMnn_Name}&nbsp;</h3>',
		'</div></tpl>'
	),
	triggerAction: 'all',
	validateOnBlur: true,
	valueField: 'DrugComplexMnn_id'
});
Ext.reg('swreceptdrugcomplexmnncombo', sw.Promed.SwReceptDrugComplexMnnCombo);

sw.Promed.SwReceptDrugComplexMnnCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwReceptDrugComplexMnnCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwReceptDrugComplexMnnCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwReceptDrugComplexMnnCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwReceptDrugComplexMnnCombo.prototype.onTrigger2Click = Ext.emptyFn;

sw.Promed.SwSmpDispatchCallCombo = Ext.extend(Ext.form.ComboBox, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: C_LOAD_SMPDISPATCHCALLCOMBO,
		key: 'pmUser_id',
		autoLoad: false,
		fields: [
			{name: 'pmUser_id',    type:'string'},
			{name: 'pmUser_Name',    type:'string'}			
		],
		sortInfo: {
			field: 'pmUser_Name'
		}
	}),
	editable: false,
	triggerAction: 'all',
	displayField:'pmUser_Name',
	valueField: 'pmUser_id',
	fieldLabel: langs('Диспетчер вызовов'),
	tpl: '<tpl for="."><div class="x-combo-list-item" style="height:16px;">'+'{pmUser_Name} '+'</div></tpl>',
	
	initComponent: function() {
		sw.Promed.SwSmpDispatchCallCombo.superclass.initComponent.apply(this, arguments);
	}
});

sw.Promed.SwSmpDispatchCallCombo.prototype.initComponent = Ext.form.TriggerField.prototype.initComponent;
sw.Promed.SwSmpDispatchCallCombo.prototype.getTrigger = Ext.form.TriggerField.prototype.getTrigger;
sw.Promed.SwSmpDispatchCallCombo.prototype.initTrigger = Ext.form.TriggerField.prototype.initTrigger;

Ext.reg('swsmpdispatchcallcombo', sw.Promed.SwSmpDispatchCallCombo);


// Reusable combobox renderer
// Return RawValue instead of Value
// @see sw.Promed.swSmpEmergencyTeamRelWindow for example
Ext.util.Format.comboRenderer = function(combo){
	return function(value){
		var record = combo.findRecord(combo.valueField, value);
		return record ? record.get(combo.displayField) : combo.valueNotFoundText;
	}
}

/**
 * Комбобокс выбора статуса вызова на дом
 */
sw.Promed.SwHomeVisitStatusCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'HomeVisitStatus',
		key: 'HomeVisitStatus_id',
		autoLoad: false,
		baseParams: {object:'HomeVisitStatus', HomeVisitStatus_id:'',HomeVisitStatus_Code:'',HomeVisitStatus_Name:''},
		fields:
		[
			{name: 'HomeVisitStatus_id', type:'int'},
			{name: 'HomeVisitStatus_Code', type:'int'},
			{name: 'HomeVisitStatus_Name', type:'string'}
		],
		sortInfo:
		{
			field: 'HomeVisitStatus_Code'
		}
	}),
	//triggerAction: 'all',
	editable: false,
	displayField:'HomeVisitStatus_Name',
	valueField: 'HomeVisitStatus_id',
	hiddenName:'HomeVisitStatus_id',
	fieldLabel: langs('Статус вызова'),
	value: null,
	tpl: '<tpl for="."><div class="x-combo-list-item">{HomeVisitStatus_Name}&nbsp;</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwHomeVisitStatusCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swhomevisitstatuscombo', sw.Promed.SwHomeVisitStatusCombo);
 
 
/**
 * Комбобокс выбора единицы времени
 */
sw.Promed.SwTimeTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.data.JsonStore({
		url: C_TIMETYPES_COMBO,
		key: 'TimeType_id',
		autoLoad: false,
		fields: [
			{name: 'TimeType_id',    type:'int'},
			{name: 'TimeType_Code',    type:'int'},
			{name: 'TimeType_Name',    type:'string'}			
		],
		sortInfo: {
			field: 'TimeType_id'
		}
	}),
	//triggerAction: 'all',
	width: 40,
	allowEmpty: false,
	editable: false,
	displayField:'TimeType_Name',
	valueField: 'TimeType_id',
	hiddenName:'TimeType_id',
	fieldLabel: langs('Ед. времени'),
	initComponent: function()
	{
		sw.Promed.SwTimeTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swtimetypecombo', sw.Promed.SwTimeTypeCombo);

/**
 * Комбобокс выбора типа компрессии для PACS
 */
sw.Promed.SwPacsCompressionTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.data.JsonStore({
		url: C_PACSCOMPRESSIONTYPES_COMBO,
		key: 'LpuPacsCompressionType_id',
		autoLoad: false,
		fields: [
			{name: 'LpuPacsCompressionType_id',    type:'int'},
			{name: 'LpuPacsCompressionType_Name',    type:'string'}			
		],
		sortInfo: {
			field: 'LpuPacsCompressionType_id'
		}
	}),
	//triggerAction: 'all',
	width: 40,
	allowEmpty: false,
	editable: false,
	displayField:'LpuPacsCompressionType_Name',
	valueField: 'LpuPacsCompressionType_id',
	hiddenName:'LpuPacsCompressionType_id',
	fieldLabel: langs('Тип компрессии'),
	initComponent: function()
	{
		sw.Promed.SwPacsCompressionTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swpacscompressiontypecombo', sw.Promed.SwPacsCompressionTypeCombo);


sw.Promed.SwEvnPrescrCombo = Ext.extend(Ext.form.ComboBox, {
    displayField: 'EvnPrescr_Text',
    //editable: true,
    emptyText: '',
    enableKeyEvents: true,
    fieldLabel: langs('Назначение'),
    forceSelection: true,
    hiddenName: 'EvnPrescr_id',
    minChars: 1,
    minLength: 0,
    mode: 'remote',
    resizable: true,
    selectOnFocus: true,
    triggerAction: 'all',
    valueField: 'EvnPrescr_id',
    uslugaCombo: null,
    uslugaCatCombo: null,
    hasLoaded: false,
    beforeBlur: function() {
        // медитируем
        return true;
    },
    clearBaseParams: function() {
        this.lastQuery = 'This query sample that is not will never appear';
        this.getStore().baseParams.PrescriptionType_Code = null;
        this.getStore().baseParams.savedEvnPrescr_id = null;
        this.getStore().baseParams.newEvnPrescr_id = null;
        this.getStore().baseParams.EvnPrescr_pid = null;
        this.getStore().baseParams.withoutEvnDirection = null;
    },
    setPrescriptionTypeCode: function(code) {
        this.getStore().baseParams.PrescriptionType_Code = code;
        if (this.uslugaCombo) {
            this.getStore().baseParams.withoutEvnDirection = 1;
        }
    },
    filterAndAutoComplite: function(action, rec) {
        //log({filterAndAutoComplite: rec});
        var me = this;
        if (me.uslugaCombo) {
            var pr_rec = me.getStore().getById(me.getValue()),
                uc2011id = null;
            if (rec) {
                // услуга изменена, накладываем фильтр для назначений по ГОСТ-11
                uc2011id = rec.get('UslugaComplex_2011id');
                me.getStore().filter('UslugaComplex_2011id', uc2011id);
                // очищаем назначение, если оно не совпадает по ГОСТ-11
                if (!pr_rec || pr_rec.get('UslugaComplex_2011id') != uc2011id) {
                    me.setValue(null);
                    pr_rec = null;
                }
            } else {
                // выбранная услуга убрана
                uc2011id = -1;
            }
            if (pr_rec) {
                return false;
            }
            // При изменении услуги она должна связываться с назначением
            // при совпадении ИД услуги или совпадении по коду ГОСТ-11
            // автоматически, если подходящих назначений одно.
            if (me.getStore().getCount() == 1) {
                me.setValue(me.getStore().getAt(0).get('EvnPrescr_id'));
            }
        }
        return true;
    },
    onChangedUslugaCombo: function(action, rec) {
        //log({onChangedUslugaCombo: action});
        var me = this;
        if (me.uslugaCombo) {
            // восстанавливаем список назначений
            me.getStore().clearFilter();
            if (me.hasLoaded) {
                me.filterAndAutoComplite(action, rec);
            } else {
                me.getStore().load({
                    callback: function(){
                        me.hasLoaded = true;
                        me.filterAndAutoComplite(action, rec);
                    }
                });
            }
        }
    },
    applyChanges: function(newValue) {
        //log({applyChanges: newValue});
        var me = this,
            rec = me.getStore().getById(newValue);
        if (me.uslugaCombo && me.uslugaCatCombo) {
            var code = null,
                uc2011id = null,
                index = -1,
                uc_rec = null;
            if (rec && rec.get('PrescriptionType_Code')) {
                code = rec.get('PrescriptionType_Code');
            }
            me.uslugaCombo.setPrescriptionTypeCode(code);
            if (rec && rec.get('UslugaComplex_2011id')) {
                uc2011id = rec.get('UslugaComplex_2011id');
            }
            me.uslugaCombo.setUslugaComplex2011Id(uc2011id);
            if (uc2011id > 0) {
                me.uslugaCombo.getStore().load({
                    callback: function() {
                        if ( me.uslugaCombo.getStore().getCount() == 1 ) {
                            index = 0;
                        }
                        if ( me.uslugaCombo.getStore().getCount() > 1 ) {
                            index = me.uslugaCombo.getStore().find('UslugaComplex_2011id', uc2011id);
                        }
                        if (index >= 0) {
                            uc_rec = me.uslugaCombo.getStore().getAt(index);
                        }
                        if ( uc_rec ) {
                            me.uslugaCombo.setValue(uc_rec.get('UslugaComplex_id'));
							if ( Ext.isEmpty(me.uslugaCatCombo.getValue()) ) {
								index = me.uslugaCatCombo.getStore().findBy(function(rec) {
									return (rec.get('UslugaCategory_id') == uc_rec.get('UslugaCategory_id'));
								})
								if ( index >= 0 ) {
									me.uslugaCatCombo.setValue(uc_rec.get('UslugaCategory_id'));
								}
							}
                            //me.uslugaCombo.setUslugaCategoryList([uc_rec.get('UslugaCategory_SysNick')]);
                        } else {
                            me.uslugaCombo.clearValue();
                        }
                    }
                });
            }
        }
        return true;
    },
    initComponent: function() {
        var me = this;

        sw.Promed.SwEvnPrescrCombo.superclass.initComponent.apply(me, arguments);

        me.tpl = new Ext.XTemplate(
            '<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: center;">',
            '<td style="padding: 2px; width: 70%;">Назначение</td>',
            '<td style="padding: 2px; width: 30%;">Тип</td>',
            '<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
            '<td style="padding: 2px;">{EvnPrescr_Text}&nbsp;</td>',
            '<td style="padding: 2px;">{PrescriptionType_Name}&nbsp;</td>',
            '</tr></tpl>',
            '</table>'
        );


        me.store = new Ext.data.Store({
            autoLoad: false,
            reader: new Ext.data.JsonReader({
                id: 'EvnPrescr_id'
            }, [
                { name: 'EvnPrescr_id', mapping: 'EvnPrescr_id' },
                { name: 'PrescriptionType_id', mapping: 'PrescriptionType_id' },
                { name: 'PrescriptionType_Name', mapping: 'PrescriptionType_Name' },
                { name: 'PrescriptionType_Code', mapping: 'PrescriptionType_Code' },
                { name: 'EvnPrescr_pid', mapping: 'EvnPrescr_pid' },
                { name: 'Lpu_id', mapping: 'Lpu_id' },
                { name: 'UslugaComplex_2011id', mapping: 'UslugaComplex_2011id' },
                { name: 'EvnPrescr_setDate', mapping: 'EvnPrescr_setDate', type: 'date', dateFormat: 'd.m.Y' },
                { name: 'EvnPrescr_Text', mapping: 'EvnPrescr_Text' }
            ]),
            url: '/?c=EvnPrescr&m=loadEvnPrescrCombo'
        });

        me.getStore().on('beforeload', function(store, options) {
            if (options.params && options.params.EvnPrescr_id) {
                return options;
            }
            if (!me.getStore().baseParams.EvnPrescr_pid) {
                return false;
            }
            if (me.hasLoaded && me.uslugaCombo) {
                if (typeof options.callback == 'function') {
                    options.callback(me.getStore().getRange(), options, true);
                }
                return false;
            }
            return options;
        });

        me.on('select', function(combo, record, index) {
            if ( record.get(combo.valueField) ) {
                //combo.setRawValue(record.get('EvnPrescr_Text'));
            }
        });

        me.on('keydown', function(inp, e) {
            if ( e.getKey() == e.END ) {
                this.inKeyMode = true;
                this.select(this.getStore().getCount() - 1);
            }

            if ( e.getKey() == e.HOME ) {
                this.inKeyMode = true;
                this.select(0);
            }

            if ( e.getKey() == e.PAGE_UP ) {
                this.inKeyMode = true;
                var ct = this.getStore().getCount();

                if ( ct > 0 ) {
                    if ( this.selectedIndex == -1 ) {
                        this.select(0);
                    }
                    else if ( this.selectedIndex != 0 ) {
                        if ( this.selectedIndex - 10 >= 0 )
                            this.select(this.selectedIndex - 10);
                        else
                            this.select(0);
                    }
                }
            }

            if ( e.getKey() == e.PAGE_DOWN ) {
                if ( !this.isExpanded() ) {
                    this.onTriggerClick();
                }
                else {
                    this.inKeyMode = true;
                    var ct = this.getStore().getCount();

                    if ( ct > 0 ) {
                        if ( this.selectedIndex == -1 ) {
                            this.select(0);
                        }
                        else if ( this.selectedIndex != ct - 1 ) {
                            if ( this.selectedIndex + 10 < ct - 1 )
                                this.select(this.selectedIndex + 10);
                            else
                                this.select(ct - 1);
                        }
                    }
                }
            }

            if ( e.altKey || e.ctrlKey || e.shiftKey )
                return true;

            if ( e.getKey() == e.DELETE) {
                inp.setValue('');
                inp.setRawValue("");
                inp.selectIndex = -1;
                if ( inp.onClearValue ) {
                    inp.onClearValue();
                }
                e.stopEvent();
                return true;
            }
        });
    }
});
Ext.reg('swevnprescrcombo', sw.Promed.SwEvnPrescrCombo);

/**
 * Комбо для поля «Запись» в назначении услуги, отображаем в нем данные о записи/очереди.
 */
sw.Promed.SwEvnPrescrEvnDirectionCombo = Ext.extend(Ext.form.ComboBox, {
    anchor: '99%',
    listWidth    : 500,
    editable     : false,
    hiddenName   : 'EvnDirection_id',
    displayField : 'EvnDirection_Text',
    valueField   : 'EvnDirection_id',
    fieldLabel   : langs('Запись'),
    enableKeyEvents: true,
    resizable      : true,
    selectOnFocus  : true,
    tpl            : '<tpl for="."><div class="x-combo-list-item">{EvnDirection_Text}</div></tpl>',
    emptyText    : langs('Нажмите на кнопку справа для записи или F4'),
    mode         : 'remote',
    triggerClass: 'x-form-search-trigger',
    forceSelection : true,
    loadingText    : langs('Идет поиск...'),

    ownerWin: null,
    ident: null,
    UslugaComplex_2011id: null,
    userMedStaffFact: null,
    EvnPrescr_id: null,
    EvnPrescr_pid: null,
    PrescriptionType_id: null,
    PrescriptionType_Code: null,
    EvnPrescr_IsCito: null,
    PersonEvn_id: null,
    Person_id: null,
    Server_id: null,
    Person_Firname: null,
    Person_Surname: null,
    Person_Secname: null,
    Person_Birthday: null,
    Diag_id: null,
    isOnlyPolka: 0,

    initComponent: function() {
        this.store = new Ext.data.Store({
            editable: false,
            key: 'EvnDirection_id',
            autoLoad: false,
            reader: new Ext.data.JsonReader({
                id: 'EvnDirection_id'
            }, [
                { name: 'EvnDirection_id', mapping: 'EvnDirection_id' },
                { name: 'EvnPrescr_id', mapping: 'EvnPrescr_id' },
                { name: 'TimetableMedService_id', mapping: 'TimetableMedService_id' },
                { name: 'TimetableResource_id', mapping: 'TimetableResource_id' },
                { name: 'EvnQueue_id', mapping: 'EvnQueue_id' },
                { name: 'MedService_id', mapping: 'MedService_id' },
                { name: 'UslugaComplexMedService_id', mapping: 'UslugaComplexMedService_id' },
                { name: 'UslugaComplex_id', mapping: 'UslugaComplex_id' },
                { name: 'EvnUslugaOrder_UslugaChecked', mapping: 'EvnUslugaOrder_UslugaChecked' },
                { name: 'EvnUslugaOrder_id', mapping: 'EvnUslugaOrder_id' },
                { name: 'RecDate', mapping: 'RecDate' },
                { name: 'timetable', mapping: 'timetable' },
                { name: 'timetable_id', mapping: 'timetable_id' },
                { name: 'EvnDirection_Text', mapping: 'EvnDirection_Text' }
            ]),
            url: '/?c=EvnPrescr&m=loadEvnPrescrEvnDirectionCombo'
        });

        Ext.form.ComboBox.superclass.initComponent.apply(this, arguments);

        this.on('select', function(combo, record, index) {
            if ( record.get(combo.valueField) ) {
                combo.setValue(record.get(combo.valueField));
                combo.setRawValue(record.get(combo.displayField));
            }
        });

        this.on('keydown', function(inp, e) {
            if ( e.getKey() == e.DELETE)
            {
                inp.setValue(null);
                inp.setRawValue('');
                inp.selectIndex = -1;
                if (inp.getStore().getCount() > 0) {
                    var rec = inp.getStore().getAt(0);
                    if (rec) {
                    	if (rec.get('EvnDirection_id')>0 && !Ext.isEmpty(rec.get('timetable')) && !Ext.isEmpty(rec.get('timetable_id')) ) {
                            //при сохранении формы будем отменять старое направление
                            inp.ident = rec.get('timetable')+'_'+rec.get('timetable_id');
                        } else if (rec.get('TimetableMedService_id')>0) {
                            //разблокируем бирку старого направления
                            inp.unlockTimetable('TimetableMedService', rec.get('TimetableMedService_id'));
                        } else if (rec.get('TimetableResource_id')>0) {
                            //разблокируем бирку старого направления
                            inp.unlockTimetable('TimetableResource', rec.get('TimetableResource_id'));
                        }
                    }
                    inp.getStore().removeAll();
                }
                if (inp.onClearValue) {
                    inp.onClearValue();
                }
                e.stopEvent();
                return true;
            }

            if (e.getKey() == e.F4)
            {
                this.onTriggerClick(e, inp);
            }
        });
    },
    /**
     * Открытие формы ввода данных направления
     */
    _createDirection: function(sel_rec, callback){
        var combo = this;
        var direction = {
            LpuUnitType_SysNick: 'parka'
            ,PrehospDirect_id: (getRegionNick() == 'kz')
				? (sel_rec.get('Lpu_id') == getGlobalOptions().lpu_id) ? 15 : 16
				: (sel_rec.get('Lpu_id') == getGlobalOptions().lpu_id) ? 1 : 2
            ,PrescriptionType_Code: combo.PrescriptionType_Code
            ,EvnDirection_pid: combo.EvnPrescr_pid
            ,Evn_id: combo.EvnPrescr_pid
            ,DirType_id: sw.Promed.Direction.defineDirTypeByPrescrType(combo.PrescriptionType_id)
            ,Diag_id: combo.Diag_id || null
            ,MedPersonal_id: combo.userMedStaffFact.MedPersonal_id //ид медперсонала, который направляет
            ,Lpu_id: combo.userMedStaffFact.Lpu_id
            ,LpuSection_id: combo.userMedStaffFact.LpuSection_id
            ,From_MedStaffFact_id: combo.userMedStaffFact.MedStaffFact_id
            ,UslugaComplex_id: sel_rec.get('UslugaComplex_id')
            ,LpuSection_Name: sel_rec.get('LpuSection_Name')
            ,LpuSection_did: sel_rec.get('LpuSection_id')
            ,LpuSection_uid: sel_rec.get('LpuSection_id')
            ,LpuSectionProfile_id: sel_rec.get('LpuSectionProfile_id')
            ,EvnPrescr_id: combo.EvnPrescr_id
            ,MedService_id: sel_rec.get('MedService_id')
            ,MedService_did: sel_rec.get('MedService_id')
            ,MedService_Nick: sel_rec.get('MedService_Nick')
            ,MedServiceType_SysNick: sel_rec.get('MedServiceType_SysNick')
            ,Lpu_did: sel_rec.get('Lpu_id')
            ,LpuUnit_did: sel_rec.get('LpuUnit_id')
            ,time: sel_rec.get('TimetableMedService_begTime')||null
            ,Server_id: combo.Server_id
            ,Person_id: combo.Person_id
            ,PersonEvn_id: combo.PersonEvn_id
            ,MedStaffFact_id: combo.userMedStaffFact.MedStaffFact_id //ид медперсонала, который направляет
            ,MedPersonal_did: null //ид медперсонала, куда направили
            ,timetable: 'TimetablePar'
            ,TimetableMedService_id: sel_rec.get('TimetableMedService_id')
            ,TimetableResource_id: sel_rec.get('TimetableResource_id')
            ,EvnQueue_id: null//
            ,QueueFailCause_id: null//
            ,EvnUsluga_id: null//Сохраненный заказ
            ,EvnDirection_id: null
        };
        // параметры для формы выписки эл.направления
        var form_params = direction;
        form_params.Person_Surname = combo.Person_Surname;
        form_params.Person_Firname = combo.Person_Firname;
        form_params.Person_Secname = combo.Person_Secname;
        form_params.Person_Birthday = combo.Person_Birthday;
        var params = {
            action: 'add',
            mode: 'nosave',
            callback: function(data){
                if (data && data.evnDirectionData) {
                    var o = data.evnDirectionData;
                    //принимаем только то, что могло измениться
                    direction.EvnDirection_Num = o.EvnDirection_Num;
                    direction.DirType_id = o.DirType_id;
                    direction.Diag_id = o.Diag_id;
                    direction.LpuSectionProfile_id = o.LpuSectionProfile_id;
                    direction.EvnDirection_Descr = o.EvnDirection_Descr;
                    direction.EvnDirection_setDate = o.EvnDirection_setDate;
                    direction.MedStaffFact_id = o.MedStaffFact_id;
                    direction.MedPersonal_id = o.MedPersonal_id;
                    direction.LpuSection_id = o.LpuSection_id;
                    direction.MedStaffFact_zid = o.MedStaffFact_zid;
                    direction.MedPersonal_zid = o.MedPersonal_zid;
                    direction.Lpu_did = o.Lpu_did;
                    direction.From_MedStaffFact_id = o.From_MedStaffFact_id;
                    callback(direction);
                }
            },
            params: form_params
        };
        if (getGlobalOptions().lpu_id == sel_rec.get('Lpu_id')) {
            //возвращаем параметры автоматического направления
            direction.EvnDirection_IsAuto = 2;
            direction.EvnDirection_setDate = getGlobalOptions().date;
            direction.EvnDirection_Num = '0';
            direction.MedPersonal_zid = '0';
            callback(direction);
        } else {
            sw.Promed.Direction.openDirectionEditWindow(params);
        }
        return true;
    },
    getRec: function() {
        var combo = this,
            rec = null;
        if (combo.getStore().getCount() > 0) {
            rec = combo.getStore().getAt(0);
        }
        if (!rec) {
            return false;
        }
        return rec;
    },
    unlockTimetable: function(time_type, time_id) {
        sw.Promed.Direction.unlockTime(this.ownerWin, time_type, time_id, function(){
            //callback
        });
    },
    onTriggerClick: function(event, node) {
        if (event.type == 'mousedown' || this.disabled) {
            return false;
        }
        // По клику  на «лупу» открывается форма направления на службы, отфильтрованная по ГОСТ-11 выбранной услуги
        var combo = this,
            rec = null;
        if (!combo.UslugaComplex_id || !combo.userMedStaffFact) {
            log(['onTriggerClick has error: UslugaComplex_id or userMedStaffFact is undefined', combo]);
            return false;
        }
        if (combo.getStore().getCount() > 0) {
            rec = combo.getStore().getAt(0);
        }
        var oldValue = combo.getValue();
        var win = getWnd('swMedServiceSelectWindow');
        if (win.isVisible()) {
            win.hide();
        }
        win.show({
            isOnlyPolka: combo.isOnlyPolka,
            PrescriptionType_Code: combo.PrescriptionType_Code,
            UslugaComplex_id: combo.UslugaComplex_id,
            userMedStaffFact: combo.userMedStaffFact,
            callback: function(sel_rec) {
				log('sel_rec', sel_rec);
                if (rec) {
                    if (rec.get('EvnDirection_id')>0 && !Ext.isEmpty(rec.get('timetable')) && !Ext.isEmpty(rec.get('timetable_id')) ) {
                        //при сохранении формы будем отменять старое направление
                        combo.ident = rec.get('timetable')+'_'+rec.get('timetable_id');
                    } else if (rec.get('TimetableMedService_id')>0) {
                        //разблокируем бирку старого направления
                        combo.unlockTimetable('TimetableMedService', rec.get('TimetableMedService_id'));
                    } else if (rec.get('TimetableResouce_id')>0) {
                        //разблокируем бирку старого направления
                        combo.unlockTimetable('TimetableResouce', rec.get('TimetableResouce_id'));
                    }
                }
                combo.getStore().removeAll();

				var timetable = 'EvnQueue';
				var timetable_id = null;
				var tt_begtime = null
				if (sel_rec.get('TimetableMedService_id') > 0) {
					timetable = 'TimetableMedService';
					timetable_id = sel_rec.get('TimetableMedService_id')
					tt_begtime = sel_rec.get('TimetableMedService_begTime');
				} else if (sel_rec.get('TimetableResouce_id') > 0) {
					timetable = 'TimetableResouce';
					timetable_id = sel_rec.get('TimetableResouce_id')
					tt_begtime = sel_rec.get('TimetableResouce_begTime');
				}

                var new_rec_data = {
                    EvnDirection_id: -1
                    ,EvnQueue_id: null
                    ,EvnPrescr_id: combo.EvnPrescr_id
                    ,TimetableMedService_id: sel_rec.get('TimetableMedService_id')
                    ,TimetableResource_id: sel_rec.get('TimetableResource_id')
                    ,MedService_id: sel_rec.get('MedService_id')
                    ,UslugaComplexMedService_id: sel_rec.get('UslugaComplexMedService_id')
                    ,UslugaComplex_id: sel_rec.get('UslugaComplex_id')
                    ,EvnUslugaOrder_UslugaChecked: '[]'
                    ,EvnUslugaOrder_id: null
                    ,RecDate: tt_begtime
                    ,timetable: timetable
                    ,timetable_id: timetable_id
                    ,EvnDirection_Text: sel_rec.get('MedService_Name')
                        +' / '+ sel_rec.get('LpuSection_Name')
                        +' / '+ sel_rec.get('LpuUnit_Name')
                        +' / '+ sel_rec.get('Lpu_Nick')
                        +' '+ tt_begtime
                };
                rec = new Ext.data.Record(new_rec_data);
                //получаем данные автоматического или электронного направления
                combo._createDirection(sel_rec, function(data){
                    //осуществляем блокировку бирки
                    if (sel_rec.get('TimetableMedService_id')>0) {
                        sw.Promed.Direction.lockTime(combo.ownerWin, 'TimetableMedService', sel_rec.get('TimetableMedService_id'), function(){
                            rec.directionData = data;
                            rec.MedServiceRecord = sel_rec;
                            combo.getStore().add([rec]);
                            combo.setValue(new_rec_data.EvnDirection_id);
                            combo.setRawValue(new_rec_data.EvnDirection_Text);
                            combo.fireEvent('select', combo, rec, 0);
                            //log([combo,new_rec_data]);
                        });
                    } else if (sel_rec.get('TimetableResouce_id')>0) {
                        sw.Promed.Direction.lockTime(combo.ownerWin, 'TimetableResouce', sel_rec.get('TimetableResouce_id'), function(){
                            rec.directionData = data;
                            rec.MedServiceRecord = sel_rec;
                            combo.getStore().add([rec]);
                            combo.setValue(new_rec_data.EvnDirection_id);
                            combo.setRawValue(new_rec_data.EvnDirection_Text);
                            combo.fireEvent('select', combo, rec, 0);
                            //log([combo,new_rec_data]);
                        });
                    } else {
                        rec.directionData = data;
                        rec.MedServiceRecord = sel_rec;
                        combo.getStore().add([rec]);
                        combo.setValue(new_rec_data.EvnDirection_id);
                        combo.setRawValue(new_rec_data.EvnDirection_Text);
                        combo.fireEvent('select', combo, rec, 0);
                    }
                });
                /*
                rec.directionData = {
                    UslugaComplexMedService_id: sel_rec.get('UslugaComplexMedService_id')
                    ,UslugaComplex_id: sel_rec.get('UslugaComplex_id')
                    ,UslugaComplex_Code: sel_rec.get('UslugaComplex_Code')
                    ,UslugaComplex_Name: sel_rec.get('UslugaComplex_Name')
                    ,MedService_id: sel_rec.get('MedService_id')
                    ,MedServiceType_id: sel_rec.get('MedServiceType_id')
                    ,MedServiceType_SysNick: sel_rec.get('MedServiceType_SysNick')
                    ,MedService_Nick: sel_rec.get('MedService_Nick')
                    ,MedService_Name: sel_rec.get('MedService_Name')
                    ,Lpu_id: sel_rec.get('Lpu_id')
                    ,Lpu_Nick: sel_rec.get('Lpu_Nick')
                    ,LpuBuilding_id: sel_rec.get('LpuBuilding_id')
                    ,LpuBuilding_Name: sel_rec.get('LpuBuilding_Name')
                    ,LpuUnit_id: sel_rec.get('LpuUnit_id')
                    ,LpuUnit_Name: sel_rec.get('LpuUnit_Name')
                    ,LpuUnitType_id: sel_rec.get('LpuUnitType_id')
                    ,LpuUnitType_SysNick: sel_rec.get('LpuUnitType_SysNick')
                    ,LpuSection_id: sel_rec.get('LpuSection_id')
                    ,LpuSection_Name: sel_rec.get('LpuSection_Name')
                    ,LpuSectionProfile_id: sel_rec.get('LpuSectionProfile_id')
                    ,ttms_MedService_id: sel_rec.get('ttms_MedService_id')
                    ,TimetableMedService_id: sel_rec.get('TimetableMedService_id')
                    ,TimetableMedService_begTime: sel_rec.get('TimetableMedService_begTime')
                };
                if (combo.PrescriptionType_Code == 11) {
                    rec.directionData['isComposite'] = sel_rec.get('isComposite');
                    rec.directionData['MedService_id'] = sel_rec.get('lab_MedService_id');
                    rec.directionData['pzm_Lpu_id'] = sel_rec.get('pzm_Lpu_id');
                    rec.directionData['pzm_MedService_id'] = sel_rec.get('pzm_MedService_id');
                    rec.directionData['pzm_MedServiceType_id'] = sel_rec.get('pzm_MedServiceType_id');
                    rec.directionData['pzm_MedServiceType_SysNick'] = sel_rec.get('pzm_MedServiceType_SysNick');
                    rec.directionData['pzm_MedService_Nick'] = sel_rec.get('pzm_MedService_Nick');
                    rec.directionData['pzm_MedService_Name'] = sel_rec.get('pzm_MedService_Name');
                }
                */
            }
        });
        return true;
    }
});

Ext.reg('swevnprescrevndirectioncombo', sw.Promed.SwEvnPrescrEvnDirectionCombo);


sw.Promed.SwEdUnitsCombo = Ext.extend(Ext.form.ComboBox, {
    enableKeyEvents: true,
    fieldLabel: langs('Ед.измерения'),
    forceSelection: true,
    initComponent: function() {
        Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);
        this.store = new Ext.data.Store({
            autoLoad: false,
            reader: new Ext.data.JsonReader({
                id: 'EdUnits_id'
            }, [
                {name: 'EdUnits_id', mapping: 'EdUnits_id'},
                {name: 'EdUnits_Code', mapping: 'EdUnits_Code', type: 'int'},
                {name: 'EdUnits_Name', mapping: 'EdUnits_Name'},
                {name: 'EdUnits_FullName', mapping: 'EdUnits_FullName'}
            ]),
            listeners: {
                load: function(store) {
                    this.setValue(this.getValue());
                }.createDelegate(this)
            },
            url: '/?c=EvnPrescr&m=loadEdUnitsList'
        });
    },
    mode: 'remote',
    onTrigger2Click: Ext.emptyFn,
    trigger2Class: 'hideTrigger',
    resizable: true,
    selectOnFocus: true,
    tpl: new Ext.XTemplate(
        '<tpl for="."><div class="x-combo-list-item">',
        '<h3>{EdUnits_Name}</h3>',
        '</div></tpl>'
    ),
    triggerAction: 'all',
    displayField: 'EdUnits_Name',
    hiddenName: 'EdUnits_id',
    valueField: 'EdUnits_id'
});
Ext.reg('swedunitscombo', sw.Promed.SwEdUnitsCombo);


sw.Promed.SwMesCombo = Ext.extend(Ext.form.ComboBox, {
	initComponent: function() {
		this.tpl = new Ext.XTemplate(
			'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold;">',
			'<td style="padding: 2px; width: 50%;">Код</td>',
			'<td style="padding: 2px; width: 50%;">Норматив</td></tr>',
			'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
			'<td style="padding: 2px;">{Mes_Code}&nbsp;</td>',
			'<td style="padding: 2px;">{Mes_KoikoDni}&nbsp;</td>',
			'</tr></tpl>',
			'</table>'
		);
		
		if ( getGlobalOptions().region && getGlobalOptions().region.nick == 'perm' ) {
			this.tpl = new Ext.XTemplate(
				'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold;">',
				'<td style="padding: 2px; width: 30%;">Код, наименование</td>',
				'<td style="padding: 2px; width: 20%;">Возрастная группа</td>',
				'<td style="padding: 2px; width: 30%;">Порядковый № посещения</td>',
				'<td style="padding: 2px; width: 20%;">Норматив</td></tr>',
				'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
				'<td style="padding: 2px;">{Mes_Code}{[!Ext.isEmpty(values.Mes_Name) ? ".&nbsp;" + values.Mes_Name : ""]}&nbsp;</td>',
				'<td style="padding: 2px;">{MesAgeGroup_Name}&nbsp;</td>',
				'<td style="padding: 2px;">{Mes_VizitNumber}&nbsp;</td>',
				'<td style="padding: 2px;">{[!Ext.isEmpty(values.Mes_KoikoDni) ? twoDecimalsRenderer(values.Mes_KoikoDni) : ""]}&nbsp;</td>',
				'</tr></tpl>',
				'</table>'
			);
		}
		
		if ( getRegionNick().inlist([ 'astra', 'vologda' ]) ) {
			this.tpl = new Ext.XTemplate(
				'<tpl for="."><div class="x-combo-list-item">',
				'<table><tr><td style="width: 40px;">{Mes_Code}{[!Ext.isEmpty(values.Mes_Name) ? ".&nbsp;" + values.Mes_Name : ""]}&nbsp;</td></tr></table>',
				'</div></tpl>'
			);
		}
		
		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id:'Mes_id'
			}, [
				{ name: 'Mes_id', mapping: 'Mes_id' },
				{ name: 'Mes_Code', mapping: 'Mes_Code' },
				{ name: 'Mes_Name', mapping: 'Mes_Name' },
				{ name: 'Mes_KoikoDni', mapping: 'Mes_KoikoDni' },
				{ name: 'MedicalCareKind_Name', mapping: 'MedicalCareKind_Name' },
				{ name: 'MesAgeGroup_Name', mapping: 'MesAgeGroup_Name' },
				{ name: 'MesNewUslovie', mapping: 'MesNewUslovie', type: 'int' },
				{ name: 'MesOperType_Name', mapping: 'MesOperType_Name' },
				{ name: 'Mes_VizitNumber', mapping: 'Mes_VizitNumber', type: 'int' },
				{ name: 'MesOld_IsNeedTooth', mapping: 'MesOld_IsNeedTooth', type: 'int' }
			]),
			url: '/?c=EvnVizit&m=loadMesList',
			listeners: {
				load: function(store) {
					this.setValue(this.getValue());
				}.createDelegate(this)
			}
		});
		sw.Promed.SwMesCombo.superclass.initComponent.apply(this, arguments);
	},
	
	beforeBlur: function () {
		// медитируем
		return true;
	},
	editable: true,
	enableKeyEvents: true,
	fieldLabel: langs('МЭС'),
	forceSelection:false,
	mode: 'remote',
	resizable: true,
	selectOnFocus: true,
	triggerAction: 'all',
	width: 450,
	displayField: 'Mes_Code',
	hiddenName: 'Mes_id',
	setValue: function(v) {
		sw.Promed.SwMesCombo.superclass.setValue.apply(this, arguments);

		var record = this.getStore().getById(v);
		if (record) {
			this.setRawValue(record.get('Mes_Code')+'. '+record.get('Mes_Name'));
		}
	},
	valueField: 'Mes_id'
});
Ext.reg('swmescombo', sw.Promed.SwMesCombo);

sw.Promed.SwLpuDispContractCombo = Ext.extend(Ext.form.ComboBox, {
	initComponent: function() {
		this.store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{ name: 'LpuDispContract_id', type: 'int' },
				{ name: 'LpuDispContract_setDate', type: 'date', dateFormat: 'd.m.Y' },
				{ name: 'LpuDispContract_disDate', type: 'date', dateFormat: 'd.m.Y' },
				{ name: 'SideContractType_Name', type: 'string' },
				{ name: 'LpuDispContract_Num', type: 'string' },
				{ name: 'Lpu_Nick', type: 'string' },
				{ name: 'LpuSection_Name', type: 'string' },
				{ name: 'LpuSectionProfile_id', type: 'int' }
			],
			key: 'LpuDispContract_id',
			sortInfo: {
				field: 'LpuDispContract_setDate'
			},
			url: '/?c=LpuPassport&m=loadLpuDispContractCombo'
		});

		this.addListener('blur', function(combo) {
			var record = this.getStore().getById(combo.getValue());
			if (record) {
				this.setRawValue(record.get('SideContractType_Name')+' '+record.get('LpuDispContract_Num'));
			}
		},this);

		sw.Promed.SwLpuDispContractCombo.superclass.initComponent.apply(this, arguments);
	},
	mode: 'remote',
	triggerAction: 'all',
	valueField: 'LpuDispContract_id',
	displayField: 'LpuDispContract_Num',
	tpl: new Ext.XTemplate(
		'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: left;">',
		'<td style="padding: 2px; width: 15%;">Дата начала</td>',
		'<td style="padding: 2px; width: 15%;">Дата окончания</td>',
		'<td style="padding: 2px; width: 20%;">Сторона договора</td>',
		'<td style="padding: 2px; width: 10%;">Номер</td>',
		'<td style="padding: 2px; width: 20%;">МО</td>',
		'<td style="padding: 2px; width: 20%;">Отделение</td>',
		'</tr><tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
		'<td style="padding: 2px;">{LpuDispContract_setDate:date("d.m.Y")}&nbsp;</td>',
		'<td style="padding: 2px;">{LpuDispContract_disDate:date("d.m.Y")}&nbsp;</td>',
		'<td style="padding: 2px;">{SideContractType_Name}&nbsp;</td>',
		'<td style="padding: 2px;">{LpuDispContract_Num}&nbsp;</td>',
		'<td style="padding: 2px;">{Lpu_Nick}&nbsp;</td>',
		'<td style="padding: 2px;">{LpuSection_Name}&nbsp;</td>',
		'</tr></tpl>',
		'</table>'
	),
	editable: true,
	forceSelection: true,
	hiddenName: 'LpuDispContract_id',
	fieldLabel: langs('По договору'),
	width: 250,
	listWidth: 700,
	setValue: function(v) {
		sw.Promed.SwLpuDispContractCombo.superclass.setValue.apply(this, arguments);

		var record = this.getStore().getById(v);
		if (record) {
			this.setRawValue(record.get('SideContractType_Name')+' '+record.get('LpuDispContract_Num'));
		}
	}
});
Ext.reg('swlpudispcontractcombo', sw.Promed.SwLpuDispContractCombo);

sw.Promed.SwMesEkbCombo = Ext.extend(Ext.form.ComboBox, {
	initComponent: function() {
		this.tpl = new Ext.XTemplate(
			'<tpl for="."><div class="x-combo-list-item">',
			'<table><tr><td style="width: 40px;"><font color="red">{Mes_Code}</font>&nbsp;</td><td>{Mes_Name}&nbsp;</td></tr></table>',
			'</div></tpl>'
		);

		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id:'Mes_id'
			}, [
				{ name: 'Mes_id', mapping: 'Mes_id' },
				{ name: 'Mes_Code', mapping: 'Mes_Code' },
				{ name: 'Mes_Name', mapping: 'Mes_Name' }
			]),
			url: '/?c=EvnVizit&m=loadMesEkbList',
			listeners: {
				load: function(store) {
					this.setValue(this.getValue());
				}.createDelegate(this)
			}
		});
		sw.Promed.SwMesEkbCombo.superclass.initComponent.apply(this, arguments);
	},

	beforeBlur: function () {
		// медитируем
		return true;
	},
	//onTrigger2Click: Ext.emptyFn,
	//trigger2Class: 'none',
	editable: true,
	enableKeyEvents: true,
	fieldLabel: langs('МЭС'),
	forceSelection:false,
	resizable: true,
	selectOnFocus: true,
	triggerAction: 'all',
	width: 450,
	displayField: 'Mes_Name',
	codeField: 'Mes_Code',
	hiddenName: 'Mes_id',
	valueField: 'Mes_id'
});
Ext.reg('swmesekbcombo', sw.Promed.SwMesEkbCombo);

sw.Promed.SwMesOldVizitCombo = Ext.extend(Ext.form.ComboBox, {
	initComponent: function() {
		var par = this;
		if(!this.tpl) {
				this.tpl = new Ext.XTemplate(
					'<tpl for="."><div class="x-combo-list-item">',
					'<font color="red">{MesOldVizit_Code}</font>&nbsp;{MesOldVizit_Name}',
					'</div></tpl>'
				);
			}
		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id:'MesOldVizit_id'
			}, [
				{ name: 'MesOldVizit_id', mapping: 'MesOldVizit_id' },
				{ name: 'MesOldVizit_Code', mapping: 'MesOldVizit_Code' },
				{ name: 'MesOldVizit_Name', mapping: 'MesOldVizit_Name' }
			]),
			url: '/?c=Mes&m=loadMesOldVizit',
			listeners: {
				load: function(store) {
					
					this.setValue(this.getValue());
				}.createDelegate(this)
			}
		});
		sw.Promed.SwMesOldVizitCombo.superclass.initComponent.apply(this, arguments);
	},
	listeners : {
		'select'  : function(combo, record, index) {
			combo.setRawValue(record.get('MesOldVizit_Name'));
		},
		'keydown' : function(inp, e) {
			if ( e.getKey() == e.DELETE ||e.getKey() == e.BACKSPACE )
			{
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if (inp.onClearValue)
					this.onClearValue();
				e.stopEvent();
				return true;
			}

			if (e.getKey() == e.F4)
			{
				this.onTriggerClick();
			}
		}
	},

	beforeBlur: function() {
		// медитируем
		return true;
	},
	reload: function() {
		var combo = this;
		var MesOldVizit_id = combo.getValue();
		combo.clearValue();
		combo.lastQuery = '';
		combo.getStore().removeAll();
		combo.getStore().baseParams.query = '';

		combo.getStore().load({
			callback: function() {
				index = combo.getStore().findBy(function(rec) {
					return (rec.get('MesOldVizit_id') == MesOldVizit_id);
				});

				if ( index >= 0 ) {
					combo.setValue(MesOldVizit_id);
				}
			}
		});
	},
	setMesType_id:function(n){
		this.getStore().baseParams.MesType_id = n;
	},
	setUslugaComplex_id:function(n){
		this.getStore().baseParams.UslugaComplex_id = n;
	},
	setEvnDate: function(d){
		this.getStore().baseParams.EvnDate = d;
	},
	setMesCodeList:function(n){
		if (Ext.isArray(n)) {
			this.getStore().baseParams.Mes_Codes = Ext.util.JSON.encode(n);
		} else {
			this.getStore().baseParams.Mes_Codes = null;
		}
	},
	setUslugaComplexPartitionCodeList:function(n){
		if (Ext.isArray(n)) {
			this.getStore().baseParams.UslugaComplexPartition_CodeList = Ext.util.JSON.encode(n);
		} else {
			this.getStore().baseParams.UslugaComplexPartition_CodeList = null;
		}
	},
	clearBaseParams: function() {
		this.lastQuery = 'This query sample that is not will never appear';
		this.getStore().baseParams.UslugaComplex_id = null;
		this.getStore().baseParams.MesType_id = null;
		this.getStore().baseParams.Mes_Codes = null;
		this.getStore().baseParams.UslugaComplexPartition_CodeList = null;
	},
	editable: true,
	enableKeyEvents: true,
	fieldLabel: langs('МЭС'),
	forceSelection:false,
	mode: 'remote',
	resizable: true,
	selectOnFocus: true,
	triggerAction: 'all',
	width: 450,
	displayField: 'MesOldVizit_Name',
	hiddenName: 'MesOldVizit_id',
	valueField: 'MesOldVizit_id'
	
});
Ext.reg('swmesoldvizitcombo', sw.Promed.SwMesOldVizitCombo);

sw.Promed.SwStorageCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'remote',
	minChars: 1,
	editable: true,
	codeField: 'Storage_Code',
	triggerAction: 'all',
	hiddenName:'Storage_id',
	displayField:'Storage_Name',
	valueField: 'Storage_id',
	fieldLabel: langs('Склад'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table><tr><td style="width: 40px;"><font color="red">{Storage_Code}</font>&nbsp;</td><td>{Storage_Name}&nbsp;</td></tr></table>',
		'</div></tpl>'
	),
    onLoadStore: Ext.emptyFn,
	resetCombo: function() {
		this.lastQuery = '';
		this.getStore().removeAll();
		this.getStore().baseParams.query = '';
		this.getStore().baseParams.Storage_id = null;
	},
	setValueById: function(id) {
		var combo = this;
		combo.store.baseParams.Storage_id = id;
		combo.store.load({
			callback: function(){
				combo.setValue(id);
				combo.store.baseParams.Storage_id = null;
				combo.filterByDate();
			}
		});
	},
	validator: function() {
		var combo = this;
		if (combo.getStore().indexOfId(combo.getValue()) < 0) {
			return true;
		}
		var date = new Date();
		var begDate = combo.getFieldValue('Storage_begDate');
		var endDate = combo.getFieldValue('Storage_endDate');
		var inDate = (
			Ext.isEmpty(begDate) && Ext.isEmpty(endDate)
			|| Ext.isEmpty(begDate) && endDate >= date
			|| Ext.isEmpty(endDate) && begDate < date
			|| begDate < date && endDate >= date
		);
		if (!inDate) {
			return langs('Склад закрыт на текущую дату');
		} else {
			return true;
		}
	},
	filterByDate: function(date) {
		var combo = this;
		if (!(date instanceof Date)) {
			date = new Date();
		}
		var value = combo.getValue();
		combo.getStore().filterBy(function(rec) {
			var id = rec.get('Storage_id');
			var begDate = rec.get('Storage_begDate');
			var endDate = rec.get('Storage_endDate');
			var inDate = (
				Ext.isEmpty(begDate) && Ext.isEmpty(endDate)
				|| Ext.isEmpty(begDate) && endDate >= date
				|| Ext.isEmpty(endDate) && begDate < date
				|| begDate < date && endDate >= date
			);
			return (value == id || inDate);
		});
	},
	initComponent: function() {
		sw.Promed.SwStorageCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			url: '/?c=DocumentUc&m=loadStorageList',
			key: 'Storage_id',
			autoLoad: false,
			fields: [
				{name: 'Storage_id', type:'int'},
				{name: 'StorageType_id', type:'int'},
				{name: 'StorageType_Code', type:'int'},
				{name: 'Storage_Code', type:'int'},
				{name: 'Storage_Name', type:'string'},
				{name: 'Storage_begDate', type:'date', dateFormat: 'd.m.Y'},
				{name: 'Storage_endDate', type:'date', dateFormat: 'd.m.Y'},
				{name: 'StorageStructLevel', type:'string'},
				{name: 'LpuSection_id', type:'int'},
				{name: 'MedService_id', type:'int'},
				{name: 'Org_id', type:'int'}
			],
            listeners: {
                'load': function(store) {
                    this.onLoadStore(store);
                }.createDelegate(this)
            }
		});
	}
});
Ext.reg('swstoragecombo', sw.Promed.SwStorageCombo);


sw.Promed.SwStorageZoneCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'remote',
	minChars: 1,
	editable: true,
	codeField: 'StorageZone_Code',
	triggerAction: 'all',
	hiddenName:'StorageZone_id',
	displayField:'StorageZone_Address',
	valueField: 'StorageZone_id',
	fieldLabel: 'Место хранения',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table><tr><td style="width: 40px;"><font color="red">{StorageZone_Address}</font>&nbsp;</td><td>{StorageZone_Name}&nbsp;</td></tr></table>',
		'</div></tpl>'
	),
    onLoadStore: Ext.emptyFn,
	resetCombo: function() {
		this.lastQuery = '';
		this.getStore().removeAll();
		this.getStore().baseParams.query = '';
		this.getStore().baseParams.StorageZone_id = null;
	},
	setValueById: function(id) {
		var combo = this;
		combo.store.baseParams.StorageZone_id = id;
		combo.store.load({
			callback: function(){
				combo.setValue(id);
				combo.store.baseParams.StorageZone_id = null;
			}
		});
	},
	initComponent: function() {
		sw.Promed.SwStorageZoneCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			url: '/?c=StorageZone&m=loadStorageZoneList',
			key: 'StorageZone_id',
			autoLoad: false,
			fields: [
				{name: 'StorageZone_id', type:'int'},
				{name: 'StorageZone_Code', type:'int'},
				{name: 'StorageZone_Address', type:'string'},
				{name: 'StorageZone_Name', type:'string'}
			],
            listeners: {
                'load': function(store) {
                    this.onLoadStore(store);
                }.createDelegate(this)
            }
		});
	}
});
Ext.reg('swstoragezonecombo', sw.Promed.SwStorageZoneCombo);


sw.Promed.swStorage2LpuCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'remote',
	minChars: 1,
	editable: true,
	codeField: 'Storage_Code',
	triggerAction: 'all',
	hiddenName:'Storage_id',
	displayField:'Storage_Name',
	valueField: 'Storage_id',
	fieldLabel: langs('Склад'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table><tr><td style="width: 40px;"><font color="red">{Storage_Code}</font>&nbsp;</td><td>{Storage_Name}&nbsp;</td></tr></table>',
		'</div></tpl>'
	),
	resetCombo: function() {
		this.lastQuery = '';
		this.getStore().removeAll();
		this.getStore().baseParams.query = '';
		this.getStore().baseParams.Storage_id = null;
	},
	setValueById: function(id) {
		var combo = this;
		combo.store.baseParams.Storage_id = id;
		combo.store.load({
			callback: function(){
				combo.setValue(id);
				combo.store.baseParams.Storage_id = null;
			}
		});
	},
	initComponent: function() {
		sw.Promed.swStorage2LpuCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			url: '/?c=DocumentUc&m=loadStorage2LpuList',
			key: 'Storage_id',
			autoLoad: false,
			fields: [
				{name: 'Storage_id', type:'int'},
				{name: 'StorageType_id', type:'int'},
				{name: 'StorageType_Code', type:'int'},
				{name: 'Storage_Code', type:'int'},
				{name: 'Storage_Name', type:'string'},
                                {name: 'Lpu_id', type:'int'},
                                {name: 'Lpu_Nick', type:'string'}
			]
		});
	}
});
Ext.reg('swStorage2LpuCombo', sw.Promed.swStorage2LpuCombo);


sw.Promed.SwStorageStructLevelCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	mode: 'remote',
	minChars: 1,
	editable: true,
	codeField: 'Storage_Code',
	triggerAction: 'all',
	hiddenName:'StorageStructLevel_id',
	displayField:'Storage_Name',
	valueField: 'StorageStructLevel_id',
	fieldLabel: langs('Склад'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table><tr>',
		'<tpl if="values.StorageStructLevel_id &gt; 0">',
		'<td style="width: 40px;"><font color="red">{Storage_Code}</font>&nbsp;</td>',
		'<td>{Storage_Name}&nbsp;/</td>',
		'<td>{LpuSection_Name}&nbsp;/</td>',
		'<td>{LpuBuilding_Name}&nbsp;</td>',
		'</tpl>',
		'<td>&nbsp;</td>',
		'</tr></table>',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.SwStorageStructLevelCombo.superclass.initComponent.apply(this, arguments);
		this.listWidth = 680;
		this.store = new Ext.data.JsonStore({
			url: '/?c=Storage&m=loadStorageStructLevelList',
			key: 'StorageStructLevel_id',
			autoLoad: false,
			fields: [
				{name: 'StorageStructLevel_id', type:'int'},
				{name: 'Storage_id', type:'int'},
				{name: 'StorageType_id', type:'int'},
				{name: 'StorageType_Code', type:'int'},
				{name: 'Storage_Code', type:'int'},
				{name: 'Storage_Name', type:'string'},
				{name: 'LpuSection_id', type:'int'},
				{name: 'LpuSection_Name', type:'string'},
				{name: 'LpuBuilding_id', type:'int'},
				{name: 'LpuBuilding_Name', type:'string'}
			]
		});
	}
});
Ext.reg('swstoragestructlevelcombo', sw.Promed.SwStorageStructLevelCombo);

sw.Promed.SwStorageZoneCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	editable: true,
	enableKeyEvents: true,
	forceSelection: true,
	fieldLabel: 'Место хранения',
	valueField: 'StorageZone_id',
	hiddenName: 'StorageZone_id',
	displayField: 'StorageZone_Address',
	queryDelay: 1,
	triggerAction: 'all',
	trigger2Class: 'x-form-clear-trigger',
	onTrigger2Click: function() {
		this.clearValue();
	},
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table><tr><td style="width: 40px;"><td>{StorageZone_Address}&nbsp;</td><td>{StorageZone_Name}&nbsp;</td></tr></table>',
		'</div></tpl>'
	),

	initComponent: function() {
		sw.Promed.SwStorageZoneCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader(
				{
					id: 'StorageZone_id'
				},
				[
					{name: 'StorageZone_id', mapping: 'StorageZone_id'},
					{name: 'StorageZone_Name', mapping: 'StorageZone_Name'},
					{name: 'StorageZone_Address', mapping: 'StorageZone_Address'}
				]
			),
			url: '/?c=StorageZone&m=loadStorageZoneList'
		});
	}
});
Ext.reg('swstoragezonecombo', sw.Promed.SwStorageZoneCombo);

sw.Promed.SwInventoryItemCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	mode: 'remote',
	minChars: 1,
	editable: true,
	codeField: 'InventoryItem_Code',
	triggerAction: 'all',
	hiddenName:'InventoryItem_id',
	displayField:'InventoryItem_Name',
	valueField: 'InventoryItem_id',
	fieldLabel: langs('ТМЦ'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{InventoryItem_Name}&nbsp;',
		'</div></tpl>'
	),
	setValueById: function(id) {
		var combo = this;
		combo.store.baseParams.InventoryItem_id = id;
		combo.store.load({
			callback: function(){
				combo.setValue(id);
				combo.store.baseParams.InventoryItem_id = null;
			}
		});
	},
	initComponent: function() {
		sw.Promed.SwInventoryItemCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			url: '/?c=InventoryItem&m=loadInventoryItemList',
			key: 'InventoryItem_id',
			autoLoad: false,
			fields: [
				{name: 'InventoryItem_id', type:'int'},
				{name: 'InventoryItemType_id', type:'int'},
				{name: 'InventoryItem_Code', type:'int'},
				{name: 'InventoryItem_Name', type:'string'},
				{name: 'Org_id', type:'int'},
				{name: 'Okei_id', type:'int'}
			]
		});
	}
});
Ext.reg('swinventoryitemcombo', sw.Promed.SwInventoryItemCombo);

sw.Promed.SwInvoiceSubjectCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	mode: 'remote',
	minChars: 1,
	store: new Ext.data.JsonStore({
		url: '/?c=Invoice&m=loadInvoiceSubjectList',
		key: 'InvoiceSubject_id',
		autoLoad: false,
		fields: [
			{name: 'InvoiceSubject_id',  type:'int'},
			{name: 'InvoiceSubject_Code',  type:'int'},
			{name: 'InvoiceSubject_Name',  type:'string'},
			{name: 'InvoiceSubject_begDate',  type:'date'},
			{name: 'InvoiceSubject_endDate',  type:'date'},
			{name: 'InvoiceSubject_pid',  type:'int'},
			{name: 'InvoiceSubject_IsLevel',  type:'int'}
		]
	}),
	hiddenName: 'InvoiceSubject_id',
	triggerAction: 'all',
	editable: true,
	displayField: 'InvoiceSubject_Name',
	valueField: 'InvoiceSubject_id',
	fieldLabel: langs('Объект аналитичекого учета'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
		'<font color="red">{InvoiceSubject_Code}</font>&nbsp;{InvoiceSubject_Name}'+
		'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwDecisionVKTemplateCombo.superclass.initComponent.apply(this, arguments);
	},
	width: 280
});
Ext.reg('swinvoicesubjectcombo', sw.Promed.SwInvoiceSubjectCombo);

sw.Promed.SwMesKsgCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	triggerAction: 'all',
	hiddenName: 'Mes_id',
	displayField: 'Mes_Code',
	showCodeField: false,
	valueField: 'Mes_id',
	fieldLabel: langs('КСГ/КПГ для расчета'),
	initComponent: function() {
		this.displayField = 'Mes_Display';
		this.tpl = new Ext.XTemplate(
			'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: center;">',
			'<td style="padding: 2px; width: 20%;">№</td>',
			'<td style="padding: 2px; width: 20%;">Код</td>',
			'<td style="padding: 2px; width: 55%;">Наименование</td>',
			'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
			'<td style="padding: 2px;">{Mes_Code}&nbsp;</td>',
			'<td style="padding: 2px;">{MesOld_Num}&nbsp;</td>',
			'<td style="padding: 2px;">{Mes_Name}&nbsp;</td>',
			'</tr></tpl>',
			'</table>'
		);

		sw.Promed.SwMesKsgCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			url: '/?c=EvnSection&m=loadKSGKPGKOEFCombo',
			key: 'Mes_id',
			autoLoad: false,
			fields: [
				{name: 'Mes_id', type:'int'},
				{name: 'Mes_sid', type:'int'},
				{name: 'Mes_tid', type:'int'},
				{name: 'Mes_Code', type:'string'},
				{name: 'MesOld_Num', type:'string'},
				{name: 'MesKpg_Code', type:'string'},
				{name: 'Mes_Name', type:'string'},
				{name: 'Mes_Display', convert: function(val,row) {
					return (row.Mes_Code ? row.Mes_Code + '. ' : '') + (row.MesOld_Num ? row.MesOld_Num + '. ' : '') + (row.Mes_Name ? row.Mes_Name : ' ');
				}},
				{name: 'MesTariff_id', type:'int'},
				{name: 'MesTariff_sid', type:'int'},
				{name: 'MesType_id', type:'int'},
				{name: 'Mes_IsRehab', type:'int'},
				{name: 'Mes_IsDefault', type:'int'},
				{name: 'MesTariff_Value', type:'float'},
				{name: 'MesTariff_sValue', type:'float'},
				{name: 'EvnSection_CoeffCTP', type:'float'}
			]
		});
	}
});
Ext.reg('swmesksgcombo', sw.Promed.SwMesKsgCombo);

sw.Promed.SwEvnSectionUslugas = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	triggerAction: 'all',
	hiddenName: 'EDHUslugaComplex_id',
	displayField: 'UslugaComplex_Name',
	valueField: 'UslugaComplex_id',
	fieldLabel: langs('КСГ/КПГ для расчета'),
	initComponent: function() {
		sw.Promed.SwMesKsgCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			url: '/?c=EvnDirectionHistologic&m=loadEDHUslugaComplexCombo',
			key: 'UslugaComplex_id',
			autoLoad: false,
			fields: [
				{name: 'UslugaComplex_id', type:'int'},
				{name: 'UslugaComplex_Code', type:'string'},
				{name: 'UslugaComplex_Name', type:'string'},
				{name: 'UslugaCategory_id', type:'int'},
				{name: 'UslugaCategory_SysNick', type:'string'}
			]
		});
	}
});
Ext.reg('swevnsectionuslugas', sw.Promed.SwEvnSectionUslugas);

sw.Promed.SwTableDirectInfoCombo = Ext.extend(Ext.form.ComboBox, {
	mode: 'local',
	minChars: 1,
	editable: true,
	codeField: 'TableDirectInfo_Code',
	triggerAction: 'all',
	hiddenName:'TableDirectInfo_id',
	displayField:'TableDirectInfo_Name',
	valueField: 'TableDirectInfo_id',
	fieldLabel: langs('Базовый справочник'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border:0;"><td style="width:25px;color:red;">{TableDirectInfo_Code}</td><td nowrap>{TableDirectInfo_Name}&nbsp;</td></tr></table>',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.SwTableDirectInfoCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			url: '/?c=TableDirect&m=loadTableDirectInfoList',
			key: 'TableDirectInfo_id',
			autoLoad: false,
			fields: [
				{name: 'TableDirectInfo_id', type:'int'},
				{name: 'TableDirectInfo_Code', type:'int'},
				{name: 'TableDirectInfo_Name', type:'string'},
				{name: 'TableDirectInfo_SysNick', type:'string'},
				{name: 'TableDirectInfo_Descr', type:'string'}
			]
		});
	}
});
Ext.reg('swtabledirectinfocombo', sw.Promed.SwTableDirectInfoCombo);

sw.Promed.SwTableDirectCombo = Ext.extend(Ext.form.ComboBox, {
	mode: 'local',
	minChars: 1,
	editable: true,
	codeField: 'TableDirect_Code',
	triggerAction: 'all',
	hiddenName:'TableDirect_id',
	displayField:'TableDirect_Name',
	valueField: 'TableDirect_id',
	fieldLabel: '',
	TableDirectInfo_id: null,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border:0;"><td style="width:25px;color:red;">{TableDirect_Code}</td><td nowrap>{TableDirect_Name}&nbsp;</td></tr></table>',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.SwTableDirectCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			url: '/?c=TableDirect&m=loadTableDirectList',
			baseParams: {TableDirectInfo_id: this.TableDirectInfo_id},
			key: 'TableDirect_id',
			autoLoad: false,
			fields: [
				{name: 'TableDirect_id', type:'int'},
				{name: 'TableDirect_Code', type:'int'},
				{name: 'TableDirect_Name', type:'string'},
				{name: 'TableDirect_SysNick', type:'string'}
				/*,{name: 'TableDirect_begDate', type:'date'}
				,{name: 'TableDirect_endDate', type:'date'}*/
			],
			sortInfo: {
				field: 'TableDirect_Code'
			}
		});
	}
});
Ext.reg('swtabledirectcombo', sw.Promed.SwTableDirectCombo);

sw.Promed.SwAttributeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	editable: true,
	hiddenName:'Attribute_id',
	displayField:'Attribute_Display',
	valueField: 'Attribute_id',
	fieldLabel: langs('Атрибут'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border:0;"><td style="width:25px;color:red;">{Attribute_Code}</td><td nowrap>{Attribute_Name}&nbsp;</td></tr></table>',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.SwAttributeCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			url: '/?c=Attribute&m=loadAttributeList',
			key: 'Attribute_id',
			autoLoad: false,
			fields: [
				{name: 'Attribute_id', type:'int'},
				{name: 'Attribute_Code', type:'int'},
				{name: 'Attribute_Name', type:'string'},
				{name: 'Attribute_Display',
					convert: function(val,row) {
						return row.Attribute_Code + '. ' + row.Attribute_Name;
					}	
				}
				/*{name: 'Attribute_SysNick', type:'string'},
				{name: 'AttributeValueType_id', type:'id'},
				{name: 'Attribute_begDate', type:'date'},
				{name: 'Attribute_endDate', type:'date'},
				{name: 'Attribute_TableName', type:'string'},
				{name: 'Attribute_TablePKey', type:'int'}*/
			]
		});
	}
});
Ext.reg('swattributecombo', sw.Promed.SwAttributeCombo);

sw.Promed.SwAttributeSignCombo = Ext.extend(Ext.form.ComboBox, {
	mode: 'remote',
	minChars: 1,
	editable: true,
	codeField: 'AttributeSign_Code',
	triggerAction: 'all',
	hiddenName:'AttributeSign_id',
	displayField:'AttributeSign_Name',
	valueField: 'AttributeSign_id',
	fieldLabel: langs('Признак атрибута'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border:0;"><td style="width:25px;color:red;">{AttributeSign_Code}</td><td nowrap>{AttributeSign_Name}&nbsp;</td></tr></table>',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.SwAttributeSignCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			url: '/?c=Attribute&m=loadAttributeSignList',
			key: 'AttributeSign_id',
			autoLoad: false,
			fields: [
				{name: 'AttributeSign_id', type:'int'},
				{name: 'AttributeSign_Code', type:'int'},
				{name: 'AttributeSign_Name', type:'string'},
				{name: 'AttributeSign_TableName', type:'string'}
			]
		});
	}
});
Ext.reg('swattributesigncombo', sw.Promed.SwAttributeSignCombo);

sw.Promed.swOgrSmoCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField: 'OrgSMO_Nick',
	editable: true,
	fieldLabel: langs('МО'),
	hiddenName: 'Org_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{OrgSMO_Nick}&nbsp;',
		'</div></tpl>'
	),
	valueField: 'Org_id',
	initComponent: function() {
		sw.Promed.swOgrSmoCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			url: '/?c=AccessRights&m=loadSmoActualList',
			key: 'OrgSMO_id',
			autoLoad: false,
			fields: [
                {name: 'OrgSMO_id', type:'int'},
                {name: 'Org_id', type:'int'},
                {name: 'OrgSMO_RegNomC', type:'int'},
                {name: 'OrgSMO_RegNomN', type:'int'},
                {name: 'OrgSMO_Nick', type:'string'},
                {name: 'OrgSMO_isDMS', type:'int'},
                {name: 'KLRgn_id', type:'int'},
                {name: 'OrgSMO_endDate', type: 'string'}
			],
			listeners: {
				'load': function(store) {
					this.setValue(this.getValue());
				}.createDelegate(this)
			}
		});
	},
	setValue: function(v) {
		var text = v;
		if(this.valueField){
			var r = this.findRecord(this.valueField, v);
			if(r){
				text = r.data[this.displayField];
				if ( r.data['OrgSMO_endDate'] != '' && Date.parseDate(r.data['OrgSMO_endDate'], 'Y-m-d') < Date.parseDate(getGlobalOptions().date, 'd.m.Y') )
				{
					text = text + ' (закрыта '+ Ext.util.Format.date(Date.parseDate(r.data['OrgSMO_endDate'], "Y-m-d"), "d.m.Y") + ' )';
				}
			} else if(this.valueNotFoundText !== undefined){
				text = this.valueNotFoundText;
			}
		}
		this.lastSelectionText = text;
		if(this.hiddenField){
			this.hiddenField.value = v;
		}
		Ext.form.ComboBox.superclass.setValue.call(this, text);
		this.value = v;
	}
});
Ext.reg('swogrsmocombo', sw.Promed.swOgrSmoCombo);

sw.Promed.SwDecisionVKTemplateCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	mode: 'local',
	store: new Ext.data.JsonStore({
		url: '/?c=ClinExWork&m=loadDecisionVKTemplateList',
		key: 'DecisionVKTemplate_id',
		autoLoad: false,
		fields: [
			{name: 'DecisionVKTemplate_id',  type:'int'},
			{name: 'DecisionVKTemplate_Code',  type:'int'},
			{name: 'DecisionVKTemplate_Name',  type:'string'},
			{name: 'ExpertiseNameType_id',  type:'int'}
		]
	}),
	hiddenName: 'DecisionVKTemplate_id',
	triggerAction: 'all',
	editable: true,
	displayField: 'DecisionVKTemplate_Name',
	valueField: 'DecisionVKTemplate_id',
	fieldLabel: langs('Шаблон решения ВК'),
	tpl: '<tpl for="."><div class="x-combo-list-item" style="white-space:normal;">'+
		'{DecisionVKTemplate_Name}&nbsp;'+
		'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwDecisionVKTemplateCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdecisionvktemplatecombo', sw.Promed.SwDecisionVKTemplateCombo);

sw.Promed.colorPicker = Ext.extend(Ext.ColorPalette, {
	allowReselect: true,
	style: 'height: 18px; width: 18px;',
	selColor: '000000',
	colors: ["000000"],
	colorMenu: null,
	setColor: function(val){
		this.selColor = val;
		this.el.query('span')[0].style.background = val;
	},
	getColor: function(){
		return this.selColor;
	},
	setSize: function(){
						
	},
	select : function(color){
        color = color.replace("#", "");
        if(color != this.value || this.allowReselect){
            var el = this.el;
            this.value = color;
            this.fireEvent("select", this, color);
        }
    },
	initComponent: function() {
		var conf = this.initialConfig,
			contain = conf.galleryContainer,
			me = this;
			
		this.addEvents({
			'changeColor' : true
		});
			
		this.addListener('select', function(c) {
			if(!this.colorMenu){
				var localCoords = [this.el.getX(), this.el.getY()];
				this.colorMenu = new Ext.ColorPalette({
					hidden: true,
					renderTo: Ext.getBody(),
					autoEl: {},
					style: 'position: absolute; top:'+localCoords[1]+'px; left:'+localCoords[0]+'px; z-index: 9999;',
					autoShow: true,				
					listeners: {
						'select': function(cmp, color){
							me.setColor('#'+color);
							me.value = color;
							me.fireEvent("changeColor", me, '#'+color);
							
							cmp.hide();			
						}
					}
				});				
			}
			this.colorMenu.show();
		});
		sw.Promed.colorPicker.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swcolorPicker', sw.Promed.colorPicker);

// Справочник использованной аппаратуры в машине и на месте вызова
sw.Promed.swCmpEquipmentCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'CmpEquipment_id',
	codeField: 'CmpEquipment_Code',
	displayField: 'CmpEquipment_Name',
	valueField: 'CmpEquipment_id',
	editable: true,
	fieldLabel: langs('Оборудование'),
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'CmpEquipment_id' },
			{ name: 'CmpEquipment_Code' },
			{ name: 'CmpEquipment_Name' }
		],
		key: 'CmpEquipment_id',
		tableName: 'CmpEquipment'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		//'<font color="red">{CmpEquipment_Code}</font>&nbsp;{CmpEquipment_Name}',
		'{CmpEquipment_Name}',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.swCmpEquipmentCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swCmpEquipmentCombo', sw.Promed.swCmpEquipmentCombo);

sw.Promed.swDocNormativeSearchCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'remote',
	triggerAction: 'all',
	forceSelection: true,
	editable: true,
	fieldLabel: langs('Нормативный документ'),
	displayField: 'DocNormative_Name',
	valueField: 'DocNormative_id',
	hiddenName: 'DocNormative_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="width: 100%;border: 0;"><tr>',
		'<td style="width: 160px;">{DocNormative_Num}</td>',
		'<td style="width: 90px;">{DocNormative_begDate}</td>',
		'<td>{DocNormative_Name}&nbsp;</td>',
		'</tr></table>',
		'</div></tpl>'
	),
	width: 120,
	onSelectDocNormative: Ext.emptyFn,
	onTrigger2Click: function() {
		getWnd('swDocNormativeViewWindow').show({
			mode: 'select',
			onSelect: function(data) {
				if (data.DocNormative_id) {
					this.getStore().load({
						params: {DocNormative_id: data.DocNormative_id},
						callback: function() {
							this.lastQuery = 'This query sample that is not will never appear';
							this.setValue(data.DocNormative_id);
							this.onSelectDocNormative(data);
						}.createDelegate(this)
					});
					getWnd('swDocNormativeViewWindow').hide();
				}
			}.createDelegate(this)
		});
	},
	initComponent: function() {
		this.store = new Ext.data.JsonStore({
			url: '/?c=DocNormative&m=loadDocNormativeList',
			key: 'DocNormative_id',
			autoLoad: false,
			fields: [
				{name: 'DocNormative_id', type:'int'},
				{name: 'DocNormativeType_id', type:'int'},
				{name: 'DocNormativeType_Code', type:'int'},
				{name: 'DocNormative_Editor', type:'string'},
				{name: 'DocNormative_Num', type:'string'},
				{name: 'DocNormative_Name', type: 'string'},
				{name: 'DocNormative_begDate', type: 'string'},
				{name: 'DocNormative_endDate', type: 'string'},
				{name: 'DocNormative_File', type: 'string'}
			],
			sortInfo: {
				field: 'DocNormative_Num'
			}
		});

		sw.Promed.swDocNormativeSearchCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdocnormativesearchcombo', sw.Promed.swDocNormativeSearchCombo);
sw.Promed.swDocNormativeSearchCombo.prototype.trigger2Class = 'x-form-search-trigger';

sw.Promed.swDocNormativeCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	mode: 'local',
	triggerAction: 'all',
	forceSelection: false,
	editable: true,
	fieldLabel: langs('Нормативный документ'),
	displayField: 'DocNormative_Name',
	valueField: 'DocNormative_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="width: 100%;border: 0;"><tr>',
		'<td style="width: 160px;">{DocNormative_Num}</td>',
		'<td style="width: 90px;">{DocNormative_begDate}</td>',
		'<td>{DocNormative_Name}&nbsp;</td>',
		'</tr></table>',
		'</div></tpl>'
	),
	width: 120,
	initComponent: function() {
		this.store = new Ext.data.JsonStore({
			url: '/?c=DocNormative&m=loadDocNormativeList',
			key: 'DocNormative_id',
			autoLoad: false,
			fields: [
				{name: 'DocNormative_id', type:'int'},
				{name: 'DocNormativeType_id', type:'int'},
				{name: 'DocNormativeType_Code', type:'int'},
				{name: 'DocNormative_Editor', type:'string'},
				{name: 'DocNormative_Num', type:'string'},
				{name: 'DocNormative_Name', type: 'string'},
				{name: 'DocNormative_begDate', type: 'string'},
				{name: 'DocNormative_endDate', type: 'string'},
				{name: 'DocNormative_File', type: 'string'}
			],
			sortInfo: {
				field: 'DocNormative_Num'
			}
		});

		if (this.comboField) {
			this.displayField = this.comboField;
			this.valueField = this.comboField;
		}

		if (Ext.isEmpty(this.hiddenName)) {
			this.hiddenName = this.valueField;
		}

		sw.Promed.swDocNormativeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swdocnormativecombo', sw.Promed.swDocNormativeCombo);

sw.Promed.swDocNormativeDateCombo = Ext.extend(sw.Promed.swDocNormativeCombo, {
	selectOnFocus: false,
	maskRe: /[.0-9]/,
	parseDate: function() {
		var v = Date.parseDate(this.getRawValue(), 'd.m.Y');
		v = Ext.util.Format.date(v,'d.m.Y');
		if(v){
			return v;
		} else {
			var s = this.getRawValue();
			s = s.replace(/\./g,'');
			s = s.replace(/\_/g,'');
			v = Date.parseDate(this.getRawValue(), 'd.m.Y');
			v = Ext.util.Format.date(v,'d.m.Y');
			if(v){
				return v;
			} else {
				return '';
			}
		}
	},
	beforeBlur : function(){
		this.setValue(this.parseDate());
	},
	initComponent: function() {
		this.plugins = [ new Ext.ux.InputTextMask('99.99.9999', true) ];

		sw.Promed.swDocNormativeDateCombo.superclass.initComponent.apply(this, arguments);

		this.doQuery = function(q, forceAll) {
			q = q.replace(/\./g,'');
			q = q.replace(/\_/g,'');
			var s1, s2;
			if (q.length > 2) {
				s1 = q.slice(0, 2);
				s2 = q.slice(2);
				q = s1+'.'+s2;
			}
			if (q.length > 5) {
				s1 = q.slice(0, 5);
				s2 = q.slice(5);
				q = s1+'.'+s2;
			}

			sw.Promed.swDocNormativeDateCombo.superclass.doQuery.apply(this, [q, forceAll]);
		};
	}
});
Ext.reg('swdocnormativedatecombo', sw.Promed.swDocNormativeDateCombo);

sw.Promed.SwRegistryEUStatus = Ext.extend(Ext.form.ComboBox, {
	store: new Ext.data.JsonStore({
		url: '/?c=RegistryEU&m=loadRegistryEUStatus',
		fields: [
			{name:'RegistryEUStatus_id', type:'int'},
			{name:'RegistryEUStatus_Code', type: 'int'},
			{name:'RegistryEUStatus_Name', type:'string'}
		],
		key:'RegistryEUStatus_id',
		sortInfo:{
			field:'RegistryEUStatus_Code'
		}
	}),
	triggerAction: 'all',
	editable: false,
	codeField: 'RegistryEUStatus_Code',
	displayField:'RegistryEUStatus_Name',
	hiddenName: 'RegistryEUStatus_id',
	valueField: 'RegistryEUStatus_id',
	fieldLabel: langs('Статус реестра'),
	tpl:
		'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{RegistryEUStatus_Code}</font>&nbsp;{RegistryEUStatus_Name}'+
			'</div></tpl>',
	initComponent: function()
	{
		sw.Promed.SwRegistryEUStatus.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swregistryeustatus', sw.Promed.SwRegistryEUStatus);

/**
 * Компонент для поиска адреса, используется только на форме swAddressEditWindow
 */
sw.Promed.SearchAddressCombo = Ext.extend(Ext.form.ComboBox, {
	beforeBlur: function() {
		return true;
	},
	fieldLabel: langs('Поиск'),
	hiddenName: 'SearchText',
	displayField: 'KladrCache_Text',
	editable: true,
	enableKeyEvents: true,
	minChars: 3,
	minLength: 0,
	mode: 'remote',
	resizable: true,
	selectOnFocus: true,
	emptyText: langs('Введите текст для поиска...'),
	store: new Ext.data.JsonStore({
		autoLoad: false,
		url: '/?c=Address&m=searchAddress',
		fields: [
			{name:'KladrCache_id', type:'int'},
			{name:'KLCountry_id', type:'int'},
			{name:'KLRgn_id', type:'int'},
			{name:'KLSubRgn_id', type:'int'},
			{name:'KLCity_id', type:'int'},
			{name:'KLTown_id', type:'int'},
			{name:'KLStreet_id', type:'int'},
			{name:'KladrCache_Text', type:'string'}
		],
		key:'KladrCache_id',
		sortInfo:{
			field:'KladrCache_Text'
		}
	}),
	triggerAction: 'all',
	hideTrigger: true,
	initComponent: function() {
		sw.Promed.SearchAddressCombo.superclass.initComponent.apply(this, arguments);
		this.addListener('keydown', function(inp, e) {
		if ( e.getKey() == e.DELETE ) {
				inp.setValue('');
				inp.setRawValue("");
				inp.selectIndex = -1;
				if ( inp.onClearValue ) {
					this.onClearValue();
				}
				e.stopEvent();
				return true;
			}
		});
	}
});
Ext.reg('swsearchaddresscombo', sw.Promed.SearchAddressCombo);

sw.Promed.SwResourceRemoteCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	codeField: '',
	displayField: 'Resource_Name',
	fieldLabel: langs('Ресурс'),
	hiddenName: 'Resource_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<div><h3>{Resource_Name}&nbsp;</h3></div><div style="font-size: 10px;">{MedService_Name}</div>',
		'</div></tpl>'
	),
	valueField: 'Resource_id',
	lastQuery: '',
	minChars: 1,
	minLength: 0,
	forceSelection: true,
	selectOnFocus: true,
	mode: 'remote',
	triggerAction: 'all',
	initComponent: function() {
		sw.Promed.SwResourceRemoteCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.Store({
			autoLoad: false,
			key: 'Resource_id',
			reader: new Ext.data.JsonReader({
				id: 'Resource_id'
			}, [
				{ name: 'Resource_id', mapping: 'Resource_id' },
				{ name: 'Resource_Name', mapping: 'Resource_Name' },
				{ name: 'MedService_id', mapping: 'MedService_id' },
				{ name: 'MedService_Name', mapping: 'MedService_Name' }
			]),
			sortInfo: {
				field: 'Resource_Name'
			},
			url: '/?c=Resource&m=loadResourceList'
		});
	}
});
Ext.reg('swresourceremotecombo', sw.Promed.SwResourceRemoteCombo);

sw.Promed.SwResourceCombo = Ext.extend(sw.Promed.SwLpuListsBaseCombo, {
	codeField: '',
	displayField: 'Resource_Name',
	fieldLabel: langs('Ресурс'),
	hiddenName: 'Resource_id',
	tpl: new Ext.XTemplate(
			'<tpl for="."><div class="x-combo-list-item">',
			'<div><h3>{Resource_Name}&nbsp;</h3></div><div style="font-size: 10px;">{MedService_Name}</div>',
			'</div></tpl>'
	),
	valueField: 'Resource_id',
	linkedElementsDisabled: true,
	parentElementDisabled: true,
	initComponent: function() {
		sw.Promed.SwResourceCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.Store({
			autoLoad: false,
			key: 'Resource_id',
			reader: new Ext.data.JsonReader({
				id: 'Resource_id'
			}, [
				{ name: 'Resource_id', mapping: 'Resource_id' },
				{ name: 'Resource_Name', mapping: 'Resource_Name' },
				{ name: 'MedService_Name', mapping: 'MedService_Name' }
			]),
			sortInfo: {
				field: 'Resource_Name'
			},
			url: '/?c=Resource&m=loadResourceList'
		});
	}
});
Ext.reg('swresourcecombo', sw.Promed.SwResourceCombo);

sw.Promed.SwDiagDeseaseCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	mode: 'local',
	minChars: 0,
	fieldLabel: langs('Диагноз'),
	forceSelection: true,
	triggerAction: 'all',
	tpl: new Ext.XTemplate(
		'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: center;">',
		'<td style="padding: 2px; width: 10%;">Код диагноза</td>',
		'<td style="padding: 2px; width: 70%;">Диагноз</td>',
		'<td style="padding: 2px; width: 20%;">Характер заболевания</td></tr>',
		'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
		'<td style="padding: 2px;">{Diag_Code}&nbsp;</td>',
		'<td style="padding: 2px;">{Diag_Name}&nbsp;</td>',
		'<td style="padding: 2px;">{DeseaseType_Name}&nbsp;</td>',
		'</tr></tpl>',
		'</table>'
	),
	listWidth: 600,
	displayField: 'Diag_Name',
	valueField: 'Diag_id',
	setValue: function(v) {
		var text = v;
		if(this.valueField){
			var r = this.findRecord(this.valueField, v);
			if(r){
				text = r.data[this.displayField];
			}else if(this.valueNotFoundText !== undefined){
				text = this.valueNotFoundText;
			}
		}
		this.lastSelectionText = text;
		if(this.hiddenField){
			this.hiddenField.value = v;
		}
		Ext.form.ComboBox.superclass.setValue.call(this, text);
		this.value = v;

		var index = this.getStore().findBy(function(rec) {
			return (rec.get(this.valueField) == v);
		}.createDelegate(this));

		if (index >= 0) {
			var record = this.getStore().getAt(index);
			if (!Ext.isEmpty(record.get('Diag_id'))) {
				this.lastSelectionText = record.get('Diag_Code') + ' ' + record.get('Diag_Name');
				this.setRawValue(record.get('Diag_Code') + ' ' + record.get('Diag_Name'));
			}
		}
	},
	initComponent: function() {
		sw.Promed.SwDiagDeseaseCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			url: '/?c=EvnVizit&m=loadDiagCombo',
			autoLoad: false,
			key: 'Diag_id',
			sortInfo: {field: 'Diag_Code'},
			fields: [
				{name: 'Diag_id', type:'int'},
				{name: 'Diag_Code', type:'string'},
				{name: 'Diag_Name', type:'string'},
				{name: 'DeseaseType_id', type:'int'},
				{name: 'Diag_IsCurrent', type:'int'},
				{name: 'DeseaseType_Name', type:'string'}
			]
		});
	}
});
Ext.reg('swdiagdeseasecombo', sw.Promed.SwDiagDeseaseCombo);

sw.Promed.SwReagentListCombo = Ext.extend(Ext.form.ComboBox, {
	store: new Ext.data.JsonStore({
		url: '/?c=ReagentModel&m=loadReagentList',
		key: 'DrugNomen_id',
		autoLoad: false,
		fields: [
			{name: 'DrugNomen_id', type:'int'},
			{name: 'DrugNomen_Code', type:'int'},
			{name: 'DrugNomen_Name', type: 'string'}
		],
		sortInfo: {
			field: 'DrugNomen_Name'
		}
	}),
	triggerAction: 'all',
	forceSelection: true,
	resizable: true,
	selectOnFocus: true,
	mode: 'remote',
	minChars: 3,
	displayField:'DrugNomen_Name',
	hiddenName: 'DrugNomen_id',
	valueField: 'DrugNomen_id',
	editable: true,
	enableKeyEvents: true,
	fieldLabel: langs('Реактив'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{DrugNomen_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwReagentListCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swreagentlistcombo', sw.Promed.SwReagentListCombo);

/*
 * Комбобокс "Список лабораторий" на форме статистики расхода реактивов
 */
sw.Promed.SwMedServiceListComboStat = Ext.extend(Ext.form.ComboBox, {
	store: new Ext.data.JsonStore({
		url: '/?c=MedService&m=loadMedServiceListStat',
		key: 'MedService_id',
		autoLoad: false,
		fields: [
			{name: 'MedService_id', type:'int'},
			{name: 'MedService_Code', type:'int'},
			{name: 'MedService_Name', type: 'string'}
		],
		sortInfo: {
			field: 'MedService_Name'
		}
	}),
	triggerAction: 'all',
	forceSelection: true,
	resizable: true,
	selectOnFocus: true,
	mode: 'remote',
	minChars: 3,
	displayField:'MedService_Name',
	hiddenName: 'MedService_id',
	valueField: 'MedService_id',
	editable: true,
	enableKeyEvents: true,
	fieldLabel: langs('Медикамент'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{MedService_Code}</font>&nbsp;{MedService_Name}&nbsp;'+
		'</div></tpl>',
	onTrigger2Click: function() {
		if (this.disabled) return false;

		var searchWindow = 'swEvnPrescrDrugTorgSearchWindow';
		var combo = this;
		combo.disableBlurAction = true;
		getWnd(searchWindow).show({
			hideIsFromDocumentUcOst: combo.hideIsFromDocumentUcOst,
			formParams: {
				MedService_Name: combo.getRawValue()
				,isFromDocumentUcOst: combo.getStore().baseParams.isFromDocumentUcOst||false
			},
			onHide: function() {
				combo.focus(false);
				combo.disableBlurAction = false;
			},
			onSelect: function (MedServiceData) {
				combo.fireEvent('beforeselect', combo);

				combo.getStore().removeAll();
				combo.getStore().loadData([{
					MedService_id: MedServiceData.MedService_id,
					MedService_Name: MedServiceData.MedService_Name,
					MedService_Code: MedServiceData.MedService_Code
				}], true);

				combo.setValue(MedServiceData.MedService_id);
				var index = combo.getStore().find('MedService_id', MedServiceData.MedService_id);

				if (index == -1)
				{
					return false;
				}

				var record = combo.getStore().getAt(index);

				if ( typeof record == 'object' ) {
					combo.fireEvent('select', combo, record, 0);
					combo.fireEvent('change', combo, record.get('MedService_id'));
				}

				getWnd(searchWindow).hide();
			}
		});
	},
	initComponent: function() {
		this.hideIsFromDocumentUcOst = false;
		if ( this.width < 500 || typeof(this.width)=='undefined' )
			this.listWidth = 300;
		sw.Promed.SwMedServiceListComboStat.superclass.initComponent.apply(this, arguments);
	}
});
sw.Promed.SwMedServiceListComboStat.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwMedServiceListComboStat.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwMedServiceListComboStat.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwMedServiceListComboStat.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwMedServiceListComboStat.prototype.trigger2Class = 'x-form-search-trigger';
Ext.reg('swmedservicelistcombostat', sw.Promed.SwMedServiceListComboStat);

sw.Promed.SwPromedRegionCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	mode: 'local',
	store: new Ext.data.SimpleStore({
		fields: ['Region_id','Region_Name'],
		data: [
			['1'  , langs('Адыгея')],
			['2'  , langs('Уфа')],
			['3'  , langs('Бурятия ')],
			['10' , langs('Карелия')],
			['11' , langs('Сыктывкар')],
			['12' , langs('Марий Эл')],
			['19' , langs('Хакасия')],
			['24' , langs('Красноярский край')],
			['26' , langs('Ставропольский край')],
			['28' , langs('Белогорск')],
			['30' , langs('Астрахань')],
			['40' , langs('Калуга ')],
			['58' , langs('Пенза ')],
			['59' , langs('Пермь')],
			['60' , langs('Псков')],
			['63' , langs('Самара')],
			['64' , langs('Саратов')],
			['66' , langs('Екатеринбург')],
			['68' , langs('Тамбов')],
			['76' , langs('Ярославль')],
			['77' , langs('Москва')],
			['50' , langs('Московская область')],
			['91' , langs('Крым ')],
			['101', langs('Казахстан')],
			['201', langs('Беларусь ')]
		]
	}),
	triggerAction: 'all',
	editable: false,
	displayField:'Region_Name',
	valueField: 'Region_id',
	hiddenName:'Region_id',
	fieldLabel: langs('Регион'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{Region_id}</font>&nbsp;{Region_Name}',
		'</div></tpl>'
	),
	initComponent: function()
	{
		sw.Promed.SwPromedRegionCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swpromedregioncombo', sw.Promed.SwPromedRegionCombo);

sw.Promed.SwDrugFinanceRemoteCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	mode: 'remote',
	minChars: 1,
	store: new Ext.data.JsonStore({
		url: '/?c=Farmacy&m=loadDrugFinanceList',
		key: 'DrugFinance_id',
		autoLoad: false,
		fields: [
			{name: 'DrugFinance_id',  type:'int'},
			{name: 'DrugFinance_Code',  type:'int'},
			{name: 'DrugFinance_Name',  type:'string'},
			{name: 'DrugFinance_SysNick',  type:'string'}
		]
	}),
	hiddenName: 'DrugFinance_id',
	triggerAction: 'all',
	editable: false,
	codeField: 'DrugFinance_Code',
	displayField: 'DrugFinance_Name',
	valueField: 'DrugFinance_id',
	fieldLabel: langs('Целевая статья'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
		'<font color="red">{DrugFinance_Code}</font>&nbsp;{DrugFinance_Name}'+
		'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwDrugFinanceRemoteCombo.superclass.initComponent.apply(this, arguments);
	},
	width: 280
});
Ext.reg('swdrugfinanceremotecombo', sw.Promed.SwDrugFinanceRemoteCombo);

sw.Promed.SwWhsDocumentCostItemTypeRemoteCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	mode: 'remote',
	minChars: 1,
	store: new Ext.data.JsonStore({
		url: '/?c=Farmacy&m=loadWhsDocumentCostItemTypeList',
		key: 'DrugFinance_id',
		autoLoad: false,
		fields: [
			{name: 'WhsDocumentCostItemType_id',  type:'int'},
			{name: 'WhsDocumentCostItemType_Code',  type:'int'},
			{name: 'WhsDocumentCostItemType_Name',  type:'string'}
		]
	}),
	hiddenName: 'WhsDocumentCostItemType_id',
	triggerAction: 'all',
	editable: false,
	codeField: 'WhsDocumentCostItemType_Code',
	displayField: 'WhsDocumentCostItemType_Name',
	valueField: 'WhsDocumentCostItemType_id',
	fieldLabel: langs('Целевая статья'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
		'<font color="red">{WhsDocumentCostItemType_Code}</font>&nbsp;{WhsDocumentCostItemType_Name}'+
		'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwWhsDocumentCostItemTypeRemoteCombo.superclass.initComponent.apply(this, arguments);
	},
	width: 280
});
Ext.reg('swwhsdocumentcostitemtyperemotecombo', sw.Promed.SwWhsDocumentCostItemTypeRemoteCombo);

sw.Promed.SwBudgetFormTypeCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	mode: 'remote',
	minChars: 1,
	store: new Ext.data.JsonStore({
		url: '/?c=Farmacy&m=loadBudgetFormTypeList',
		key: 'BudgetFormType_id',
		autoLoad: false,
		fields: [
			{name: 'BudgetFormType_id',  type:'int'},
			{name: 'BudgetFormType_Code',  type:'int'},
			{name: 'BudgetFormType_Name',  type:'string'}
		]
	}),
	hiddenName: 'BudgetFormType_id',
	triggerAction: 'all',
	editable: false,
	codeField: 'BudgetFormType_Code',
	displayField: 'BudgetFormType_Name',
	valueField: 'BudgetFormType_id',
	fieldLabel: langs('Целевая статья'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
		'<font color="red">{BudgetFormType_Code}</font>&nbsp;{BudgetFormType_Name}'+
		'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwBudgetFormTypeCombo.superclass.initComponent.apply(this, arguments);
	},
	width: 280
});
Ext.reg('swbudgetformtypecombo', sw.Promed.SwBudgetFormTypeCombo);

sw.Promed.SwGoodsPackCountCombo = Ext.extend(Ext.form.ComboBox, {
	beforeBlur: function() {
		// медитируем
		return true;
	},
	clearBaseParams: function() {
		this.lastQuery = '';
		//this.getStore().baseParams.Org_id = null;
	},
	codeField: '',
	displayField: 'GoodsPackCount_Count',
	editable: false,
	emptyText: '',
	enableKeyEvents: true,
	fieldLabel: langs('Кол-во товара в уп.'),
	forceSelection: true,
	hiddenName: 'GoodsPackCount_id',
	listeners: {
		'load': function(store) {
			this.setValue(this.getValue());
			this.onLoadStore(store);
		}.createDelegate(this)
	},
	minChars: 1,
	minLength: 0,
	resizable: true,
	selectOnFocus: true,
	onLoadStore: Ext.emptyFn,
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
		'{GoodsPackCount_Count}'+
		'</div></tpl>',
	triggerAction: 'all',
	valueField: 'GoodsPackCount_Count',
	initComponent: function() {
		sw.Promed.SwGoodsPackCountCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'GoodsPackCount_id'
			}, [
				{ name: 'GoodsPackCount_id', mapping: 'GoodsPackCount_id' },
				{ name: 'GoodsPackCount_Count', mapping: 'GoodsPackCount_Count' },
				{ name: 'GoodsUnit_id', mapping: 'GoodsUnit_id' }
			]),
			url: '/?c=DrugNomen&m=loadGoodsPackCountList',
			listeners: {
				'load': function(store) {
					this.setValue(this.getValue());
					this.onLoadStore(store);
				}.createDelegate(this)
			}
		});
		
	}
});
Ext.reg('swgoodspackcountcombo', sw.Promed.SwGoodsPackCountCombo);

sw.Promed.SwHeadMedSpecTypeCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
	mode: 'remote',
	baseFilterFn: null,
	baseFilterScope: null,
	clearBaseFilter: function()
	{
		this.baseFilterFn = null;
		this.baseFilterScope = null;
	},
	setBaseFilter: function(fn, scope)
	{
		this.baseFilterFn = fn;
		this.baseFilterScope = scope || this;
		this.store.filterBy(fn, scope);
	},
	store: new Ext.data.JsonStore({
		url: '/?c=HeadMedSpec&m=loadHeadMedSpecTypeList',
		key: 'HeadMedSpecType_id',
		autoLoad: false,
		fields: [
			{name: 'HeadMedSpecType_id',    type:'int'},
			{name: 'HeadMedSpecType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'HeadMedSpecType_Name'
		}
	}),
	triggerAction: 'all',
	displayField:'HeadMedSpecType_Name',
	valueField: 'HeadMedSpecType_id',
	fieldLabel: 'Специальность',
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{HeadMedSpecType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwHeadMedSpecTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});


sw.Promed.SwHeadMedSpecTypeCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwHeadMedSpecTypeCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwHeadMedSpecTypeCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwHeadMedSpecTypeCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwHeadMedSpecTypeCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwHeadMedSpecTypeCombo.prototype.onTrigger2Click = function() {
    if ( this.disabled ) {
        return;
    }

    var combo = this;
    combo.getStore().clearFilter();
    if(this.isExpanded()){
        this.collapse();
    }

    getWnd('swHeadMedSpecTypeListWindow').show({
        onClose: function() {
            combo.focus(true, 200);
        },
        onSelect: function(Data) {
            if ( Data.HeadMedSpecType_id > 0 ) {
            	if(combo.getStore().getById(Data.HeadMedSpecType_id) == null){
            		var dataLoad = [Data];
            		combo.getStore().loadData(dataLoad,true);
            	}
                combo.setValue(Data.HeadMedSpecType_id);
                combo.focus(true, 250);
                combo.fireEvent('change', combo);
            }
            getWnd('swHeadMedSpecTypeListWindow').hide();
        }
    });
};
sw.Promed.SwHeadMedSpecTypeCombo.prototype.doQuery = function(q, forceAll){
	if(q === undefined || q === null){
		q = '';
	}
	var qe = {
		query: q,
		forceAll: forceAll,
		combo: this,
		cancel:false
	};
	if(this.fireEvent('beforequery', qe)===false || qe.cancel){
		return false;
	}
	q = qe.query;
	forceAll = qe.forceAll;
	if(forceAll === true || (q.length >= this.minChars)){
		if(this.lastQuery !== q){
			this.lastQuery = q;
			if(this.mode == 'local'){
				this.selectedIndex = -1;
				if(forceAll){
					this.store.clearFilter();
					if (this.baseFilterFn != null)
					{
						this.getStore().filterBy(function(record, id) {
							var result = true;
							result = this.baseFilterFn.call(this.baseFilterScope, record, id);
							return result;
						}, this);
					}
				}else{
					if (q.length >= this.minChars)
					{
						this.lastQuery = q;
						this.selectedIndex = -1;

						this.getStore().filterBy(function(record, id) {
							var result = true;

							if (this.baseFilterFn != null)
							{
								result = this.baseFilterFn.call(this.baseFilterScope, record, id);
							}

							if (result)
							{
								var patt = new RegExp('^' + String(q).toLowerCase());
								result = patt.test(String(record.data[this.displayField]).toLowerCase());
							}
							return result;
						}, this);

						this.onLoad();
					}
				}
				this.onLoad();
			}else{
				this.store.baseParams[this.queryParam] = q;
				this.store.load({
					params: this.getParams(q)
				});
				this.expand();
			}
		}else{
			this.selectedIndex = -1;
			this.onLoad();
		}
	}
}

Ext.reg('swheadmedspectypecombo', sw.Promed.SwHeadMedSpecTypeCombo);

sw.Promed.SwPersisPostCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	allowSysNick: false,
	autoLoad: false,
	comboSubject: 'persis_Post',
	editable: false,
	typeCode: 'string',
	orderBy: 'Code',
	prefix: '',
	suffix: '',
	moreFields: [],
	onLoadStore: Ext.emptyFn,
	initComponent: function() {
		if ( this.comboSubject != '' ) {

			this.addListener('keydown', function(inp, e) { //В рамках задачи https://redmine.swan.perm.ru/issues/85359
				if ( e.getKey() == e.DELETE||e.getKey() == e.BACKSPACE){
					inp.clearValue();
					inp.setRawValue(null);
				}
			});

			sw.Promed.SwPersisPostCombo.superclass.initComponent.apply(this, arguments);

			if ( Ext.isEmpty(this.codeField) ) {
				this.codeField = 'code';
			}

			if ( Ext.isEmpty(this.displayField) ) {
				this.displayField = 'name';
			}

			if ( Ext.isEmpty(this.hiddenName) ) {
				this.hiddenName = 'Post_id';
			}
			
			var fields = [
				{name: 'id', mapping: 'id'},
				{name: 'code', mapping: 'code', type: 'int'},
				{name: 'name', mapping: 'name'}
			];

			fields = fields.concat(this.moreFields);
			
			if ( this.allowSysNick === true ) {
				fields.push({name: this.comboSubject + '_SysNick', mapping: this.comboSubject + '_SysNick'});
			}

			this.store = new Ext.db.AdapterStore({
				autoLoad: this.autoLoad,
				dbFile: 'Promed.db',
				fields: fields,
				key: 'id',
				listeners: {
					'load': function(store) {
						this.setValue(this.getValue());
						this.onLoadStore(store);
					}.createDelegate(this)
				},
				sortInfo: {
					field: 'name'
				},
				tableName: 'persis_Post'
			});
			if(!this.tpl) {
				this.tpl = new Ext.XTemplate(
					'<tpl for="."><div class="x-combo-list-item">',
					'<font color="red">{' + this.codeField + '}</font>&nbsp;{name}',
					'</div></tpl>'
				);
			}
			this.valueField = 'id';
		}
	}
});
Ext.reg('swpersispostcombo', sw.Promed.SwPersisPostCombo);

sw.Promed.SwQTDispClassCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	triggerAction: 'all',
	editable: true,
	hiddenName: 'DispClass_id',
	valueField: 'DispClass_id',
	displayField: 'DispClass_Name',
	fieldLabel: 'Анкета',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{DispClass_Code}</font>&nbsp;{DispClass_Name}',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.SwRlsClsatcRemoteCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			url: '?c=QuestionType&m=loadDispClassList',
			key: 'DispClass_id',
			autoLoad: false,
			fields: [
				{name: 'DispClass_id',  type:'int'},
				{name: 'DispClass_Code',  type:'int'},
				{name: 'DispClass_Name',  type:'string'}
			],
			sortInfo: {
				field: 'DispClass_Code'
			}
		});
	}
});
Ext.reg('swqtdispclasscombo', sw.Promed.SwQTDispClassCombo);

sw.Promed.SwQuestionTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	triggerAction: 'all',
	editable: true,
	hiddenName: 'QuestionType_id',
	valueField: 'QuestionType_id',
	displayField: 'QuestionType_Name',
	fieldLabel: 'Элемент анкеты',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{QuestionType_Code}</font>&nbsp;{QuestionType_Name}',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.SwQuestionTypeCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			url: '/?c=QuestionType&m=loadQuestionTypeList',
			autoLoad: false,
			key: 'QuestionType_id',
			fields: [
				{name: 'QuestionType_id', type:'int'},
				{name: 'QuestionType_pid', type:'int'},
				{name: 'QuestionType_rid', type:'int'},
				{name: 'QuestionType_Code', type:'int'},
				{name: 'QuestionType_Name', type:'string'},
				{name: 'QuestionType_SysNick', type:'string'},
				{name: 'AnswerType_id', type:'int'},
				{name: 'AnswerType_Code', type:'int'},
				{name: 'AnswerType_Name', type:'string'},
				{name: 'AnswerClass_id', type:'int'},
				{name: 'AnswerClass_Code', type:'int'},
				{name: 'AnswerClass_SysNick', type:'string'},
				{name: 'AnswerClass_Name', type:'string'}
			],
			sortInfo: {
				field: 'QuestionType_Code'
			}
		});
	}
});
Ext.reg('swquestiontypecombo', sw.Promed.SwQuestionTypeCombo);

// Комбобокс для справочника виды компонентов 
sw.Promed.SwExtemporalCompTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	allowSysNick: false,
	autoLoad: false,
	comboSubject: 'ExtemporalCompType',
	editable: false,
	typeCode: 'string',
	orderBy: 'id',
	prefix: '',
	suffix: '',
	moreFields: [],
	onLoadStore: Ext.emptyFn,
	initComponent: function() {
		if ( this.comboSubject != '' ) {

			this.addListener('keydown', function(inp, e) {
				if ( e.getKey() == e.DELETE||e.getKey() == e.BACKSPACE){
					inp.clearValue();
					inp.setRawValue(null);
				}
			});

			sw.Promed.SwExtemporalCompTypeCombo.superclass.initComponent.apply(this, arguments);

			if ( Ext.isEmpty(this.displayField) ) {
				this.displayField = this.comboSubject + '_Name';
			}

			if ( Ext.isEmpty(this.hiddenName) ) {
				this.hiddenName = this.comboSubject + '_id';
			}
			
			var fields = [
				{name: this.comboSubject + '_id', mapping: this.comboSubject + '_id'},
				{name: this.comboSubject + '_Name', mapping: this.comboSubject + '_Name'}
			];

			fields = fields.concat(this.moreFields);

			this.store = new Ext.db.AdapterStore({
				autoLoad: this.autoLoad,
				dbFile: 'Promed.db',
				fields: fields,
				key: this.comboSubject + '_id',
				listeners: {
					'load': function(store) {
						this.setValue(this.getValue());
						this.onLoadStore(store);
					}.createDelegate(this)
				},
				sortInfo: {
					field: this.comboSubject + '_' + this.orderBy
				},
				tableName: this.prefix + this.comboSubject + this.suffix
			});
			if(!this.tpl) {
				this.tpl = new Ext.XTemplate(
					'<tpl for="."><div class="x-combo-list-item">',
					'{' + this.comboSubject + '_Name}',
					'</div></tpl>'
				);
			}
			this.valueField = this.comboSubject + '_id';
		}
	}
});
Ext.reg('swextemporalcomptypecombo', sw.Promed.SwExtemporalCompTypeCombo);

sw.Promed.SwGoodsUnitCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
    mode: 'local',
    triggerAction: 'all',
    displayField:'GoodsUnit_Nick',
    valueField: 'GoodsUnit_id',
    fieldLabel: langs('Ед. изм.'),
    width: 140,
	onLoadStore: Ext.emptyFn,
    tpl: '<tpl for="."><div class="x-combo-list-item">'+
        '{GoodsUnit_Nick}&nbsp;'+
        '</div></tpl>',
    initComponent: function() {
        sw.Promed.SwGoodsUnitCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			url: '/?c=GoodsUnit&m=loadGoodsUnitCombo',
			key: 'GoodsUnit_id',
			autoLoad: true,
			fields: [
				{name: 'GoodsUnit_id', type: 'int'},
				{name: 'GoodsUnit_Nick', type: 'string'},
				{name: 'GoodsUnit_Name', type: 'string'}
			],
			sortInfo: {
				field: 'GoodsUnit_Nick'
			},
			listeners: {
				'load': function(store) {
					this.setValue(this.getValue());
					this.onLoadStore(store);
				}.createDelegate(this)
			}
		});
    }
});
Ext.reg('swgoodsunitcombo', sw.Promed.SwGoodsUnitCombo);

sw.Promed.SwCustomRemoteCombo = Ext.extend(sw.Promed.SwBaseRemoteCombo, {
    fieldLabel: 'Выбор значения',
    hiddenName: 'Object_id',
    displayField: 'Object_Name',
    valueField: 'Object_id',
    allowBlank: true,
    editable: true,
    triggerAction: 'all',
    tpl: null,
    store: null,
    listeners: {
        'change': function(combo, newValue) {
            combo.onBeforeChange(combo, newValue);
            combo.setLinkedFieldValues('change');
        }
    },
    setValueById: function(id) {
        var combo = this;
        combo.getStore().baseParams[combo.valueField] = id;
        combo.getStore().load({
            callback: function(){
                combo.setValue(id);
                combo.getStore().baseParams[combo.valueField] = null;
                combo.setLinkedFieldValues('set_by_id');
                combo.onSetValue();
            }
        });
    },
    setLinkedFieldValues: function(event_name) {},
    onLoadData: Ext.emptyFn,
    onBeforeChange: Ext.emptyFn,
    onSetValue: Ext.emptyFn,
    loadData: function() {
        var combo = this;
        combo.getStore().load({
            callback: function(){
                combo.setValue(null);
                combo.onLoadData();
            }
        });
    },
    clearValue: function() {
        var combo = this;
        sw.Promed.SwBaseRemoteCombo.superclass.clearValue.apply(this, arguments);
        combo.setLinkedFieldValues('clear');
    },
    getSelectedRecordData: function() {
        var combo = this;
        var value = combo.getValue();
        var data = new Object();
        if (value > 0) {
            var idx = this.getStore().findBy(function(record) {
                return (record.get(combo.valueField) == value);
            })
            if (idx > -1) {
                Ext.apply(data, this.getStore().getAt(idx).data);
            }
        }
        return data;
    },
    fullReset: function() {
        this.reset();
        this.getStore().baseParams = new Object();
        Ext.apply(this.getStore().baseParams, this.defaultBaseParams);
        delete this.lastQuery;
    },
    initComponent: function() {
        sw.Promed.SwCustomRemoteCombo.superclass.initComponent.apply(this, arguments);

        this.getStore().baseParams = new Object();
        this.defaultBaseParams = new Object();

        if (!this.tpl) {
            this.tpl = new Ext.XTemplate(
                '<tpl for="."><div class="x-combo-list-item">',
                '&nbsp;{' + this.displayField + '}',
                '</div></tpl>'
            );
        }
    }
});

Ext.reg('swcustomremotecombo', sw.Promed.SwCustomRemoteCombo);

sw.Promed.SwCustomOwnerCombo = Ext.extend(sw.Promed.SwCustomRemoteCombo, {
    allowReloadDisabledChildren: false, // флаг, разрешение автоматической перезагрузки дочерних заблокированных комбобоксов
    childrenList: [], // список дочерних комбобоксов
    heritageList: [], // список полей, значение которых передается дочерним полям. по умолчанию содержит valueField
    ownerWindow: null,
    listeners: {
        'change': function(combo, newValue) {
            combo.onBeforeChange(combo, newValue);

            var record_data = combo.getSelectedRecordData();
            combo.childrenList.forEach(function(field_name){
                var f_combo = combo.ownerWindow.form.findField(field_name);
                for (var i = 0; i < combo.heritageList.length; i++) {
                    f_combo.getStore().baseParams[combo.heritageList[i]] = !Ext.isEmpty(record_data[combo.heritageList[i]]) ? record_data[combo.heritageList[i]] : null;
                }
                if (!f_combo.disabled || combo.allowReloadDisabledChildren) {
                    f_combo.clearValue();
                    f_combo.loadData();
                }
            });
            combo.setLinkedFieldValues('change');
        }
    },
    setValueById: function(id) {
        var combo = this;
        combo.getStore().baseParams[combo.valueField] = id;
        combo.getStore().load({
            callback: function(){
                combo.setValue(id);
                combo.getStore().baseParams[combo.valueField] = null;

                var record_data = combo.getSelectedRecordData();
                combo.childrenList.forEach(function(field_name){
                    var f_combo = combo.ownerWindow.form.findField(field_name);
                    for (var i = 0; i < combo.heritageList.length; i++) {
                        f_combo.getStore().baseParams[combo.heritageList[i]] = !Ext.isEmpty(record_data[combo.heritageList[i]]) ? record_data[combo.heritageList[i]] : null;
                    }
                });
                combo.setLinkedFieldValues('set_by_id');
            }
        });
    },
    clearValue: function() {
        var combo = this;
        sw.Promed.SwBaseRemoteCombo.superclass.clearValue.apply(this, arguments);
        this.childrenList.forEach(function(field_name){
            var f_combo = combo.ownerWindow.form.findField(field_name);
            for (var i = 0; i < combo.heritageList.length; i++) {
                f_combo.getStore().baseParams[combo.heritageList[i]] = null;
            }
            if (!f_combo.disabled || combo.allowReloadDisabledChildren) {
                f_combo.clearValue();
                f_combo.loadData();
            }
        });
        combo.setLinkedFieldValues('clear');
		combo.fireEvent('clearCombo');
    },
    initComponent: function() {
        sw.Promed.SwCustomOwnerCombo.superclass.initComponent.apply(this, arguments);

        //инициализация спика полей для передачи дочерним комбобоксам
        if (!(this.heritageList instanceof Array) || this.heritageList.length == 0) {
            this.heritageList = [this.valueField];
        }
    }
});
Ext.reg('swcustomownercombo', sw.Promed.SwCustomOwnerCombo);

sw.Promed.SwCmpCallCardAutoCompleteCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	hideTrigger: true,
	displayField: 'CmpCallCard_Numv',
	valueField: 'CmpCallCard_id',
	fieldLabel: 'Номер талона вызова',

	beforeLoadStore: function(store, options) {

	},
	onLoadStore: function(store) {
		this.lastQuery = '';
	},

	fieldTpl: new Ext.XTemplate(
		'<tpl if="values.CmpCallCard_id &gt; 0">',
		'{CmpCallCard_Numv}, ',
		'{[Ext.util.Format.date(values.CmpCallCard_prmDate,"d.m.Y")]}, ',
		'{Person_SurName} {Person_FirName} {Person_SecName}, ',
		'{PersonAgeStr}',
		'</tpl>'
	),

	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<tpl if="values.CmpCallCard_id &gt; 0">',
		'{CmpCallCard_Numv}, ',
		'{[Ext.util.Format.date(values.CmpCallCard_prmDate,"d.m.Y")]}, ',
		'{Person_SurName} {Person_FirName} {Person_SecName}, ',
		'{PersonAgeStr}',
		'</tpl>',
		'&nbsp;</div></tpl>'
	),

	initComponent: function() {
		var me = this;

		me.store = new Ext.data.JsonStore({
			url: '/?c=CmpCallCard&m=loadCmpCallCardList',
			key: 'CmpCallCard_id',
			autoLoad: false,
			fields: [
				{name: 'CmpCallCard_id', type: 'int'},
				{name: 'CmpCallCard_Numv', type: 'int'},
				{name: 'CmpCallCard_prmDate', type: 'date', dateFormat: 'd.m.Y'},
				{name: 'CmpCallCard_prmTime', type: 'string'},
				{name: 'Person_id', type: 'int'},
				{name: 'Person_SurName', type: 'string'},
				{name: 'Person_FirName', type: 'string'},
				{name: 'Person_SecName', type: 'string'},
				{name: 'Person_BirthDay', type: 'date', dateFormat: 'd.m.Y'},
				{name: 'PersonAgeStr', type: 'string'}
			],
			sortInfo: {
				field: 'CmpCallCard_prmDate'
			}
		});

		sw.Promed.SwCmpCallCardAutoCompleteCombo.superclass.initComponent.apply(this, arguments);

		me.getStore().on('beforeLoad', function(store, options) {
			return me.beforeLoadStore(store, options);
		});
		me.getStore().on('load', function(store) {
			return me.onLoadStore(store);
		});
	}
});
Ext.reg('swcmpcallcardautocompletecombo', sw.Promed.SwCmpCallCardAutoCompleteCombo);

//комбобоксы gps/glonass(wialon and tnc)
//Wialon
sw.Promed.SwEmergencyTeamWialonCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	editable: false,
	displayField:'nm',
	valueField: 'id',
	fieldLabel: langs('GPS/ГЛОНАСС'),
	initComponent: function()
	{
		sw.Promed.SwEmergencyTeamWialonCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			url: '?c=Wialon&m=getAllAvlUnitsForMerge',
			autoLoad: true,
			fields: [
				{name:'id', type:'int'},
				{name:'nm', type:'string'}
			],
			root: 'data',
			sortInfo:
			{
				field: 'id'
			}
		});
	}
});
Ext.reg('swEmergencyTeamWialonCombo', sw.Promed.SwEmergencyTeamWialonCombo);

//TNC
sw.Promed.SwEmergencyTeamTNCCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	editable: false,
	displayField:'name',
	valueField: 'id',
	fieldLabel: langs('GPS/ГЛОНАСС'),
	initComponent: function()
	{
		sw.Promed.SwEmergencyTeamTNCCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			url: '?c=TNC&m=getTransportList',
			autoLoad: true,
			fields: [
				{name:'id', type:'int'},
				{name:'name', type:'string'}
			],
			//root: 'data',
			sortInfo:
			{
				field: 'id'
			}
		});
	}
});
Ext.reg('swEmergencyTeamTNCCombo', sw.Promed.SwEmergencyTeamTNCCombo);

// Выбор любого человека с МО
sw.Promed.SwMedPersonalRemoteCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	displayField: 'MedPersonal_full',
	valueField: 'MedPersonal_id',
	triggerAction: 'all',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',		
		'<table style="min-height:40px; border: 0;">',
		'<tr><td><font color="red">{MedPersonal_TabCode}</font> <b>{Person_Fio}</b></td><tr>',
		'<tr><td>{Post_Name} &nbsp;',
		'<div style="font-size: 10px;">{[!Ext.isEmpty(values.WorkData_begDate) ? "Дата начала работы: " + values.WorkData_begDate:""]} {[!Ext.isEmpty(values.WorkData_endDate) ? "Дата увольнения: " + values.WorkData_endDate : ""]}</div>',
		'</tr></td>',
		'</table></div></tpl>'
	),
	width: 500,
	listWidth: 500,
	initComponent: function() {
		var me = this;
		sw.Promed.SwMedPersonalRemoteCombo.superclass.initComponent.apply(me, arguments);

		me.store = new Ext.data.Store({
			autoLoad: false,
			reader: new Ext.data.JsonReader({
				id: 'MedPersonal_id'
			}, [
				{ type: 'int', name: 'MedPersonal_id' },
				{ type: 'int', name: 'Post_id' },
				{ type: 'int', name: 'notWork'},
				{ type: 'string', name: 'Person_Fio' },
				{ type: 'string', name: 'MedPersonal_TabCode' },
				{ type: 'string', name: 'MedPersonal_full' },
				{ type: 'string', name: 'Post_Name' },
				{ type: 'string', name: 'WorkData_begDate' },
				{ type: 'string', name: 'WorkData_endDate' }
			]),
			url:'/?c=MedPersonal&m=getMedPersonalListWithPosts'
		}),

		me.getStore().on('beforeload',function(store,options){
			console.log(store.baseParams.query,store.baseParams.MedPersonal_id);
			if(!store.baseParams.query && !store.baseParams.MedPersonal_id) return false;
		});

		me.getStore().on('load', function(store,recs) {
			var MedPersonal_id = store.baseParams.MedPersonal_id;
			if(MedPersonal_id) {
				var rec = store.getById(MedPersonal_id);
				me.setValue(MedPersonal_id);
				delete store.baseParams.MedPersonal_id;
			}
		})

		me.addListener('beforeselect', function(combo,rec,idx) {
			console.log(rec);
			if(rec.get('notWork') == 1) {
				Ext.Msg.alert("Сообщение", "Нельзя выбрать уволенного специалиста");
				return false;
			}
		});
	}
});
Ext.reg('swmedpersonalremotecombo', sw.Promed.SwMedPersonalRemoteCombo);

// Сотрудник организации
sw.Promed.SwPersonWorkCombo = Ext.extend(sw.Promed.SwCustomOwnerCombo, {
    fieldLabel: 'Сотрудник организации',
    hiddenName: 'PersonWork_id',
    displayField: 'PersonWork_Name',
    valueField: 'PersonWork_id',

    initComponent: function() {
		this.store = new Ext.data.SimpleStore({
			autoLoad: false,
			fields: [
				{name: 'PersonWork_id', mapping: 'PersonWork_id'},
				{name: 'PersonWork_Name', mapping: 'PersonWork_Name'},
				{name: 'Person_id', mapping: 'Person_id'},
				{name: 'Post_id', mapping: 'Post_id'}
			],
			key: 'PersonWork_id',
			sortInfo: { field: 'PersonWork_Name' },
			url:'/?c=Person&m=loadPersonWorkList'
		});

        sw.Promed.SwPersonWorkCombo.superclass.initComponent.apply(this, arguments);
    },
    onTrigger2Click: function() {
        var combo = this;
        if (combo.disabled) {
            return false;
        }
        getWnd('swPersonWorkEditWindow').show({
            action: 'add',
            onSave: function(data) {
                if (!Ext.isEmpty(data.PersonWork_id)) {
                    combo.setValueById(data.PersonWork_id);
                }
            }
        });
    }
});
Ext.reg('swpersonworkcombo', sw.Promed.SwPersonWorkCombo);

//sw.Promed.SwPersonWorkCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
sw.Promed.SwPersonWorkCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwPersonWorkCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwPersonWorkCombo.prototype.trigger2Class = 'x-form-search-trigger';
sw.Promed.SwPersonWorkCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;

sw.Promed.SwLpuSURCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'BIN',
	displayField: 'FullNameRU',
	valueField: 'ID',
	hiddenName: 'LpuSUR_id',
	fieldLabel: 'МО СУР',
	editable: true,
	ignoreCodeField: true,

	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{BIN}</font> {FullNameRU}&nbsp;',
		'</div></tpl>'
	),

	initComponent: function() {
		this.store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{name: 'ID', type: 'string'},
				{name: 'BIN', type: 'string'},
				{name: 'FullNameRU', type: 'string'}
			],
			key: 'ID',
			sortInfo: {
				field: 'FullNameRU'
			},
			url: '/?c=ServiceSUR&m=loadMOList'
		});

		sw.Promed.SwLpuSURCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swlpusurcombo', sw.Promed.SwLpuSURCombo);

sw.Promed.swMonthsWithoutNefroVisitCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
	{
		store: new Ext.data.SimpleStore({
			data: [
				['1',langs('Нет')],
				['2',langs('Более месяца')],
				['3',langs('Более 3-x месяцев')],
				['4',langs('Более года')]
			],
			editable: false,
			key: 'MonthsWithoutNefroVisit_id',
			autoLoad: false,
			fields: [
				{name: 'MonthsWithoutNefroVisit_id', type:'int'},
				{name: 'MonthsWithoutNefroVisit_Name', type:'string'}
			]
		}),
		displayField:'MonthsWithoutNefroVisit_Name',
		valueField: 'MonthsWithoutNefroVisit_id',
		hiddenName: 'MonthsWithoutNefroVisit_id',
		fieldLabel: langs('Нет визитов к нефрологу'),
		mode: 'local',
		editable: false,
		tpl: '<tpl for="."><div class="x-combo-list-item">{MonthsWithoutNefroVisit_Name}</div></tpl>',
		initComponent: function() {
			sw.Promed.SwPersonRegisterTypeCombo.superclass.initComponent.apply(this, arguments);
		}
	});
Ext.reg('swmonthswithoutnefrovisitcombo', sw.Promed.swMonthsWithoutNefroVisitCombo);

sw.Promed.RegionSmpUnits = Ext.extend(Ext.form.ComboBox,
	{
		displayField: 'LpuBuilding_Name',
		enableKeyEvents: true,
		fieldLabel: langs('Подразделение СМП'),
		forceSelection: true,
		initComponent: function() {
			this.store = new Ext.data.JsonStore({
				autoLoad: true,
				fields: [
					{name: 'LpuBuilding_id', type: 'int'},
					{name: 'LpuBuilding_Code', type: 'int'},
					{name: 'LpuBuilding_Name', type: 'string'},
					{name: 'Lpu_Nick', type: 'string'},
					{name: 'Lpu_id', type: 'int'}
				],
				key: 'LpuBuilding_id',
				sortInfo: {
					field: 'LpuBuilding_Name'
				},
				url: '/?c=CmpCallCard&m=loadRegionSmpUnits'
			});
		},
		minChars: 2,
		minLength: 1,
		mode: 'remote',
		queryDelay: 1000,
		resizable: true,
		selectOnFocus: true,
		tpl: new Ext.XTemplate(
			'<tpl for="."><div class="x-combo-list-item">',
			'<h3>{Lpu_Nick}/{LpuBuilding_Name}&nbsp;</h3>',
			'</div></tpl>'
		),
		triggerAction: 'all',
		valueField: 'LpuBuilding_id'
	});

Ext.reg('swregionsmpunitscombo', sw.Promed.RegionSmpUnits);

// 'Форма собственности'
sw.Promed.swLpuOwnershipCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'LpuOwnership_id',
	codeField: 'LpuOwnership_Code',
	displayField: 'LpuOwnership_Name',
	valueField: 'LpuOwnership_id',
	editable: false,
	fieldLabel: 'Форма собственности',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'LpuOwnership_id' },
			{ name: 'LpuOwnership_Code' },
			{ name: 'LpuOwnership_Name' }
		],
		key: 'LpuOwnership_id',
		tableName: 'LpuOwnership'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{LpuOwnership_Name}',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.swLpuOwnershipCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swLpuOwnershipCombo', sw.Promed.swLpuOwnershipCombo);


//Справочник 'Территориальный признак'
sw.Promed.swMOAreaFeatureCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'MOAreaFeature_id',
	codeField: 'MOAreaFeature_Code',
	displayField: 'MOAreaFeature_Name',
	valueField: 'MOAreaFeature_id',
	editable: false,
	fieldLabel: 'Территориальный признак',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{ name: 'MOAreaFeature_id' },
			{ name: 'MOAreaFeature_Code' },
			{ name: 'MOAreaFeature_Name' }
		],
		key: 'MOAreaFeature_id',
		tableName: 'MOAreaFeature'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{MOAreaFeature_Name}',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.swMOAreaFeatureCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swMOAreaFeatureCombo', sw.Promed.swMOAreaFeatureCombo);

// 'Основное здание'
sw.Promed.SwLpuBuildingPassCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField: 'LpuBuildingPass_Name',
	editable: false,
	fieldLabel: 'Основное здание',
	hiddenName: 'LpuBuildingPass_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{LpuBuildingPass_Name:defaultValue("&nbsp;")}',
		'</div></tpl>'
	),
	valueField: 'LpuBuildingPass_id',
	initComponent: function() {
		sw.Promed.SwLpuBuildingPassCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{name: 'LpuBuildingPass_id', type: 'int'},
				{name: 'LpuBuildingPass_Name', type: 'string'}
			],
			key: 'LpuBuildingPass_id',
			sortInfo: {
				field: 'LpuBuildingPass_Name'
			},
			url: '/?c=LpuPassport&m=LpuBuildingPassList'
		});
	}
});
Ext.reg('swLpuBuildingPasscombo', sw.Promed.SwLpuBuildingPassCombo);

// справочник Федеральный результат схемы fed
sw.Promed.SwFedLeaveTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'LeaveType_Code',
	displayField: 'LeaveType_Name',
	editable: false,
	fieldLabel: 'Федеральный результат',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{LeaveType_Code}</font>&nbsp;{LeaveType_Name}',
		'</div></tpl>'
	),
	valueField: 'LeaveType_id',
	initComponent: function() {
		sw.Promed.SwFedLeaveTypeCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			autoLoad: true,
			fields: [
				{name: 'LeaveType_id', type: 'int'},
				{name: 'LeaveType_Name', type: 'string'},
				{name: 'LeaveType_Code', type: 'string'}
			],
			key: 'LeaveType_id',
			sortInfo: {
				field: 'LeaveType_Name'
			},
			url: '/?c=CmpCallCard&m=getFedLeaveTypeList'
		});
	}
});
Ext.reg('swfedleavetypecombo', sw.Promed.SwFedLeaveTypeCombo);

// справочник результат схемы persis Тип (Форма 30)
sw.Promed.SwFRMPSubdivisionTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'id',
	displayField: 'fullname',
	editable: false,
	fieldLabel: langs('Тип (Форма 30)'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{id}</font>&nbsp;{fullname}',
		'</div></tpl>'
	),
	valueField: 'id',
	initComponent: function() {
		sw.Promed.SwFedLeaveTypeCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			autoLoad: true,
			fields: [
				{name: 'id', type:'int'},
				{name: 'name', type:'string'},
				{name: 'fullname', type:'string'},
				{name: 'parent', type:'string'}
			],
			key: 'id',
			sortInfo: {
				field: 'parent'
			},
			url: '/?c=LpuStructure&m=getFRMPSubdivisionType'
		});
	}
});
Ext.reg('swfrmpsubdivisiontypecombo', sw.Promed.SwFRMPSubdivisionTypeCombo);

// список значений из CmpCloseCardCombo
// обязательно указать comboSys или CmpCloseCardCombo_Code родителя
sw.Promed.SwCloseCardComboCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'CmpCloseCardCombo_Code',
	displayField: 'ComboName',
	editable: false,
	parentComboSys: null,
	parentComboCode: null,
	valueField: 'CmpCloseCardCombo_id',
	initComponent: function() {
		sw.Promed.SwFedLeaveTypeCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			autoLoad: true,
			baseParams: {ComboSys: this.parentComboSys, CmpCloseCardCombo_Code: this.parentComboCode},
			fields: [
				{name: 'CmpCloseCardCombo_id', type: 'int'},
				{name: 'ComboName', type: 'string'},
				{name: 'CmpCloseCardCombo_Code', type: 'int'},
				{name: 'CmpCloseCardCombo_ItemSort', type: 'int'}
			],
			key: 'CmpCloseCardCombo_id',
			sortInfo: {
				field: 'CmpCloseCardCombo_ItemSort'
			},
			url: '/?c=CmpCallCard&m=getComboValuesList'
		});
	}
});
Ext.reg('swclosecardcombocombo', sw.Promed.SwCloseCardComboCombo);

sw.Promed.SwDrugListObjCombo = Ext.extend(sw.Promed.SwBaseRemoteComboSingleTrigger, {
	displayField: 'DrugListObj_Name',
	valueField: 'DrugListObj_id',
	hiddedName: 'DrugListObj_id',
	fieldLabel: 'Издатель',
	triggerAction: 'all',
	withoutTrigger: true,

	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'{DrugListObj_Name}&nbsp;',
		'</div></tpl>'
	),

	initComponent: function() {
		this.store = new Ext.data.JsonStore({
			url: '/?c=DrugList&m=loadDrugListObjList',
			key: 'DrugListObj_id',
			autoLoad: false,
			fields: [
				{name: 'DrugListObj_id', type:'int'},
				{name: 'DrugListObj_Name', type:'string'},
				{name: 'DrugListObj_PublisherNick', type:'string'}
			],
			sortInfo: {
				field: 'DrugListObj_Name'
			}
		});

		if (!this.listWidth) {
			this.listWidth = this.width;
		}

		if (this.withoutTrigger) {
			this.initTrigger = Ext.form.ComboBox.prototype.initTrigger;
			Ext.form.ComboBox.prototype.initComponent.apply(this, arguments);
		} else {
			Ext.form.TwinTriggerField.prototype.initComponent.apply(this, arguments);
		}
	}
});
Ext.reg('swdruglistobjcombo', sw.Promed.SwDrugListObjCombo);

sw.Promed.SwDrugListObjCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
sw.Promed.SwDrugListObjCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
sw.Promed.SwDrugListObjCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
sw.Promed.SwDrugListObjCombo.prototype.trigger2Class = 'x-form-plus-trigger';
sw.Promed.SwDrugListObjCombo.prototype.onTrigger2Click = function() {
	var combo = this;

	var params = {
		action: 'add'
	};
	if (combo.DrugListType_Code) {
		params.DrugListType_Code = combo.DrugListType_Code;
	}
	params.callback = function(DrugListObj_id) {
		combo.getStore().load({
			params: {DrugListObj_id: DrugListObj_id},
			callback: function() {
				combo.setValue(DrugListObj_id);
			}
		});
	};

	getWnd('swDrugListObjEditWindow').show(params);
};

sw.Promed.SwRzhdWorkerCategoryCombo = Ext.extend(sw.Promed.SwBaseLocalComboSingleTrigger, {
	fieldLabel: 'Категория населения',
	editable: false,
	displayField: 'name',
	valueField: 'id',
	tpl: new Ext.XTemplate(
		'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: left;">',
		'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
		'<td style="padding: 2px;">{name}&nbsp;</td>',
		'</tr></tpl>',
		'</table>'
	),
	initComponent: function() {
		var store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{name: 'id', type: 'int'}, 
				{name: 'name', type: 'string'}
			],
			key: 'id',
			url: '/?c=RzhdRegistry&m=getAllCategories'
		});

		if(!this.store){
			this.store = store;
			this.store.load();
		}
	}
}),
Ext.reg('swrzhdworkercategorycombo',sw.Promed.SwRzhdWorkerCategoryCombo);

sw.Promed.SwRzhdWorkerGroupCombo = Ext.extend(sw.Promed.SwBaseLocalComboSingleTrigger,{
	fieldLabel: 'Группа рабочего',
	editable: false,
	displayField: 'name',
	valueField: 'id',
	tpl: new Ext.XTemplate(
		'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: left;">',
		'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
		'<td style="padding: 2px;">{name}&nbsp;</td>',
		'</tr></tpl>',
		'</table>'
	),
	initComponent: function() {
		var store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{name: 'id', type: 'int'}, 
				{name: 'name', type: 'string'},
				{name: 'category_id', type: 'int'}
			],
			key: 'id',
			url: '/?c=RzhdRegistry&m=getAllGroups'
		});

		if(!this.store){
			this.store = store;
			this.store.load();
		}
	}
});
Ext.reg('swrzhdworkergroupcombo', sw.Promed.SwRzhdWorkerGroupCombo);

sw.Promed.SwRzhdWorkerSubgroupCombo = Ext.extend(sw.Promed.SwBaseLocalComboSingleTrigger,{
	fieldLabel: 'Подгруппа рабочего',
	displayField: 'name',
	valueField: 'id',
	tpl: new Ext.XTemplate(
		'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: left;">',
		'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
		'<td style="padding: 2px;">{name}&nbsp;</td>',
		'</tr></tpl>',
		'</table>'
	),
	initComponent: function() {
		var store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{name: 'id', type: 'int'},
				{name: 'name', type: 'string'},
				{name: 'group_id', type: 'int'}
			],
			key: 'id',
			url: '/?c=RzhdRegistry&m=getAllSubgroups'
		});

		if(!this.store){
			this.store = store;
			this.store.load();
		}
	}
});
Ext.reg('swrzhdworkersubgroupcombo', sw.Promed.SwRzhdWorkerSubgroupCombo);

sw.Promed.SwRzhdOrgCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,{
	fieldLabel: 'Организация РЖД',
	displayField: 'Org_Nick',
	valueField: 'RzhdOrg_id',
	tpl: new Ext.XTemplate(
		'<table cellpadding="0" cellspacing="0" style="width: 100%;"><tr style="font-family: tahoma; font-size: 10pt; font-weight: bold; text-align: left;">',
		'<tpl for="."><tr class="x-combo-list-item" style="white-space: normal; overflow: auto; text-overflow: clip;">',
		'<td style="padding: 2px;">{Org_Nick}&nbsp;</td>',
		'</tr></tpl>',
		'</table>'
	),
	listeners:{
		'valid': function(){
			if(this.getRawValue().trim()==""){
				this.value = "";
			}
		}
	},
	initComponent: function() {
		var store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{name: 'RzhdOrg_id', type: 'int'},
				{name: 'Org_Nick', type: 'string'}
			],
			key: 'id',
			url: '/?c=RzhdRegistry&m=getRzhdOrgs'
		});

		if(!this.store){
			this.store = store;
			this.store.load();
		}
	}
});
Ext.reg('swrzhdorgcombo',sw.Promed.SwRzhdOrgCombo);


sw.Promed.SwLpuFilialCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	mode: 'local',
	editable: false,
	codeField: 'LpuFilial_Code',
	triggerAction: 'all',
	hiddenName:'LpuFilial_id',
	displayField:'LpuFilial_Name',
	valueField: 'LpuFilial_id',
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
	'<font color="red">{LpuFilial_Code}</font>&nbsp;{LpuFilial_Name}'+
	'</div></tpl>',

	initComponent: function() {

		sw.Promed.SwLpuFilialCombo.superclass.initComponent.apply(this, arguments);


		this.store = new Ext.data.JsonStore({
			url: C_GETOBJECTLIST,
			baseParams: {Object:'LpuFilial', Lpu_id: '', LpuFilial_id: '', LpuFilial_Code: '', LpuFilial_Name: ''},
			key: 'LpuFilial_id',
			autoLoad: false,
			fields: [
				{name: 'LpuFilial_id', type:'int'},
				{name: 'LpuFilial_Code', type:'string'},
				{name: 'LpuFilial_Name', type:'string'}
			],
			sortInfo: {
				field: 'LpuFilial_Name'
			},

			listeners: {
				load: function(store) {

						var data = {LpuFilial_id: '', LpuFilial_Code: '', LpuFilial_Name: ''},
							record = new Ext.data.Record(data);

						store.insert(0,[record]);

				}

			}

		});

	}

});

Ext.reg('swlpufilialcombo', sw.Promed.SwLpuFilialCombo);

// Кабинет
sw.Promed.SwLpuBuildingOfficeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName:'LpuBuildingOffice_id',
	displayField: 'LpuBuildingOffice_Display',
	valueField: 'LpuBuildingOffice_id',

	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{LpuBuildingOffice_Number}</font>&nbsp;{LpuBuildingOffice_Name}',
		'</div></tpl>'
	),

	setValue: function(v) {

		// alert('v = ' + v); // 3
		var text = v;

		// alert('valueField = ' + this.valueField); // valueField = LpuBuildingOffice_id
		if(this.valueField){
			var r = this.findRecord(this.valueField, v);

			// alert('r = ' + r); // r = undefined
			if(r){

				// alert('r.data[this.displayField] = ' + r.data[this.displayField]);
				text = r.data[this.displayField];
			} else if(this.valueNotFoundText !== undefined){
				text = this.valueNotFoundText;
			}
		}
		this.lastSelectionText = text;
		if(this.hiddenField){
			this.hiddenField.value = v;
		}
		Ext.form.ComboBox.superclass.setValue.call(this, text);
		this.value = v;
	},

	initComponent: function() {

		sw.Promed.SwLpuFilialCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{ name: 'LpuBuildingOffice_id', mapping: 'LpuBuildingOffice_id' },
				{ name: 'LpuBuildingOffice_Number', mapping: 'LpuBuildingOffice_Number' },
				{ name: 'LpuBuildingOffice_Name', mapping: 'LpuBuildingOffice_Name' },
				{ name: 'LpuBuildingOffice_begDate', mapping: 'LpuBuildingOffice_begDate', type: 'date', dateFormat: 'd.m.Y' },
				{ name: 'LpuBuildingOffice_endDate', mapping: 'LpuBuildingOffice_endDate', type: 'date', dateFormat: 'd.m.Y' },
				{ name: 'LpuBuilding_id', mapping: 'LpuBuilding_id' },
				{ name: 'LpuBuildingOffice_Display',
					convert: function(val,row) {
						return row.LpuBuildingOffice_Number + '. ' + row.LpuBuildingOffice_Name;
					}
				}
			],
			key: 'LpuBuildingOffice_id',
			sortInfo: {
				field: 'LpuBuildingOffice_Name'
			},
			url: C_LBO_LOAD_LBOC,
			listeners: {
				'load': function(store) {
					this.setValue(this.getValue());
				}.createDelegate(this)
			}
		});

	}

});
Ext.reg('swlpubuildingofficecombo', sw.Promed.SwLpuBuildingOfficeCombo);


sw.Promed.SwMedicalCareType59combo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	editable: false,
	valueField: 'MedicalCareType_id',
	hiddenName: 'MedicalCareType_id',
	codeField: 'MedicalCareType_Code',
	displayField:'MedicalCareType_Name',
	fieldLabel: langs('Тип мед. помощи'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{MedicalCareType_Code}</font>&nbsp;{MedicalCareType_Name}',
		'</div></tpl>'
	),

	initComponent: function() {
		sw.Promed.SwMedicalCareType59combo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name:'MedicalCareType_id', type: 'int'},
				{name:'MedicalCareType_Code', type: 'int'},
				{name:'MedicalCareType_Name', type:'string'}
			],
			key: 'MedicalCareType_id',
			sortInfo:{
				field: 'MedicalCareType_Code'
			},
			tableName: 'r59_MedicalCareType'
		});
	}
});
Ext.reg('swmedicalcaretype59combo', sw.Promed.SwMedicalCareType59combo);

sw.Promed.SwMedicalCareBudgTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	editable: false,
	valueField: 'MedicalCareBudgType_id',
	hiddenName: 'MedicalCareBudgType_id',
	codeField: 'MedicalCareBudgType_Code',
	displayField:'MedicalCareBudgType_Name',
	fieldLabel: langs('Тип мед. помощи'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{MedicalCareBudgType_Code}</font>&nbsp;{MedicalCareBudgType_Name}',
		'</div></tpl>'
	),

	initComponent: function() {
		sw.Promed.SwMedicalCareBudgTypeCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name:'MedicalCareBudgType_id', type: 'int'},
				{name:'MedicalCareBudgType_Code', type: 'int'},
				{name:'MedicalCareBudgType_Name', type:'string'}
			],
			key: 'MedicalCareBudgType_id',
			sortInfo:{
				field: 'MedicalCareBudgType_Code'
			},
			tableName: 'MedicalCareBudgType'
		});
	}
});
Ext.reg('swmedicalcarebudgtypecombo', sw.Promed.SwMedicalCareBudgTypeCombo);

sw.Promed.SwConsultingFormCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	valueField: 'ConsultingForm_id',
	displayField: 'ConsultingForm_Name',
	editable: false,
	fieldLabel: langs('Режим оказания консультации'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'&nbsp;{ConsultingForm_Name}',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.SwConsultingFormCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			autoLoad: true,
			fields: [
				{name: 'ConsultingForm_id', type:'int'},
				{name: 'ConsultingForm_Name', type:'string'}
			],
			key: 'ConsultingForm_id',
			sortInfo: {
				field: 'ConsultingForm_Name'
			},
			url: '/?c=EvnDirection&m=getConsultingFormList'
		});
	}
});
Ext.reg('swconsultingformcombo', sw.Promed.SwConsultingFormCombo);

sw.Promed.SwTumorStageNewCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	valueField: 'TumorStage_id',
	displayField: 'TumorStage_Name',
	loadParams: {}, // mode 0 - все записи, 1 - свой регион, 2 - region_id is null
	editable: false,
	fieldLabel: langs('Стадия опухолевого процесса'),
	onLoadStore: Ext.emptyFn,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'&nbsp;{TumorStage_Name}',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.SwTumorStageNewCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			autoLoad: true,
			baseParams: this.loadParams,
			fields: [
				{name: 'TumorStage_id', type:'int'},
				{name: 'TumorStage_Code', type:'int'},
				{name: 'TumorStage_Name', type:'string'},
				{name: 'Region_id', type:'int'},
				{name: 'KLCountry_id', type:'int'}

			],
			key: 'TumorStage_id',
			listeners: {
				'load': function(store) {
					if ( typeof this.onLoadStore == 'function' ) {
						this.onLoadStore(store);
					}
				}.createDelegate(this)
			},
			sortInfo: {
				field: 'TumorStage_Name'
			},
			url: '/?c=MorbusOnkoTumorStatus&m=loadTumorStageList'
		});
	}
});
Ext.reg('swtumorstagenewcombo', sw.Promed.SwTumorStageNewCombo);

sw.Promed.swRegistryHealDepErrorTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	valueField: 'RegistryHealDepErrorType_id',
	displayField: 'RegistryHealDepErrorType_Name',
	loadParams: {},
	editable: true,
	triggerAction: 'all',
	forceSelection: true,
	fieldLabel: langs('Ошибка'),
	onLoadStore: Ext.emptyFn,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{RegistryHealDepErrorType_Code}</font>&nbsp;{RegistryHealDepErrorType_Name}',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.swRegistryHealDepErrorTypeCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			autoLoad: true,
			baseParams: this.loadParams,
			fields: [
				{name: 'RegistryHealDepErrorType_id', type: 'int'},
				{name: 'RegistryHealDepErrorType_Code', type: 'string'},
				{name: 'RegistryHealDepErrorType_Name', type: 'string'}
			],
			key: 'RegistryHealDepErrorType_id',
			listeners: {
				'load': function(store) {
					if ( typeof this.onLoadStore == 'function' ) {
						this.onLoadStore(store);
					}
				}.createDelegate(this)
			},
			sortInfo: {
				field: 'RegistryHealDepErrorType_Code'
			},
			url: '/?c=Registry&m=loadRegistryHealDepErrorTypeCombo'
		});
	}
});
Ext.reg('swregistryhealdeperrortypecombo', sw.Promed.swRegistryHealDepErrorTypeCombo);

// счетчик
sw.Promed.SwNumCounterField = Ext.extend(Ext.form.TwinTriggerField, {
	width: 100,
	step: 1,
	editable: false, // работает все равно только с комбобоксами
	startValue: 0,
	initTrigger: function(){
		var ts = this.trigger.select('.x-form-spinner-default', true);
		this.wrap.setStyle('overflow', 'hidden');
		var triggerField = this;
		ts.each(function(t, all, index){
			t.hide = function(){
				var w = triggerField.wrap.getWidth();
				this.dom.style.display = 'none';
				triggerField.el.setWidth(w-triggerField.trigger.getWidth());
			};
			t.show = function(){
				var w = triggerField.wrap.getWidth();
				this.dom.style.display = '';
				triggerField.el.setWidth(w-triggerField.trigger.getWidth());
			};
			var triggerIndex = 'Trigger'+(index+1);
			if(this['hide'+triggerIndex]){
				t.dom.style.display = 'none';
			}
			t.on("click", this['on'+triggerIndex+'Click'], this, {preventDefault:true});
			t.addClassOnOver('x-form-spinner-over');
			t.addClassOnClick('x-form-spinner-click');
		}, this);
		this.triggers = ts.elements;
	},
	listeners: {
		focus: function (field) {
			field.blur();
		},
		keypress: function (field, e) {
			e.preventDefault(); // запрещаем прямой ввод
			field.blur();
		}
	},
	beforeTriggerCheck: function (newValue, currValue, action)
	{
		return true;
	},
	handleTriggerClick: function (action) {
		var currValue = this.getValue(),
			step = this.step || 1;

		if (Ext.isEmpty(currValue))
		{
			currValue = this.startValue;
		}

		var newValue = action === 'up' ? Number(currValue) + Number(step) : Number(currValue) - Number(step);

		if (typeof this.beforeTriggerCheck === 'function' && this.beforeTriggerCheck(newValue, currValue, action) === true)
		{
			this.setValue(newValue);
			this.fireEvent('change', this, newValue, currValue);
		}

		return true;
	},
	onTrigger1Click: function () {
		return this.handleTriggerClick('up');
	},
	onTrigger2Click: function() {
		return this.handleTriggerClick('down');
	},
	initComponent: function () {
		sw.Promed.SwNumCounterField.superclass.initComponent.call(this);

		this.triggerConfig = {
			tag:'div', cls:'x-form-twin-triggers-spinner', cn:[
				{tag: "div", cls: "x-form-spinner x-form-spinner-default x-form-spinner-up"},
				{tag: "div", cls: "x-form-spinner x-form-spinner-default x-form-spinner-down"}
			]};
	}


});
Ext.reg('swnumcounterfield', sw.Promed.SwNumCounterField);

/**
 * Комбобокс выбора территории облсуживания
 */
sw.Promed.SwERTerrCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'ERTerr_id',
	displayField: 'ERTerr_Name',
	editable: true,
	fieldLabel: langs('Территория'),
	forceSelection: true,
	hiddenName: 'ERTerr_id',
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'ERTerr_Code', type: 'int'},
			{name: 'ERTerr_id', type: 'int'},
			{name: 'ERTerr_Name', type: 'string'},
			{name: 'KLRgn_id', type: 'int'}
		],
		key: 'ERTerr_id',
		sortInfo: {
			field: 'ERTerr_Code',
			direction: 'ASC'
		},
		tableName: 'ERTerr'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{ERTerr_id}</font>&nbsp;{ERTerr_Name}',
		'</div></tpl>'
	),
	valueField: 'ERTerr_id',
	width: 500,
	initComponent: function() {
		sw.Promed.SwERTerrCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swerterrcombo', sw.Promed.SwERTerrCombo);

/**
 * Комбобокс выбора профилей с загрузкой сервера с фильтрами
 */
sw.Promed.SwLpuSectionProfileRemoteComboTimetable = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	mode: 'remote',
	store: new sw.Promed.Store({
		url: '/?c=TimetableQuote&m=getLpuSectionProfileList',
		key: 'LpuSectionProfile_id',
		autoLoad: false,
		fields: [
			{name: 'LpuSectionProfile_id', type:'int'},
			{name: 'LpuSectionProfile_Code', type:'string'},
			{name: 'LpuSectionProfile_Name', type:'string'}
		]/*,
		sortInfo: {
			field: 'LpuSectionProfile_Name'
		}*/
	}),
	editable: false,
	codeField: 'LpuSectionProfile_Code',
	triggerAction: 'all',
	hiddenName:'LpuSectionProfile_id',
	displayField:'LpuSectionProfile_Name',
	valueField: 'LpuSectionProfile_id',
	fieldLabel: langs('Профиль'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
	'<font color="red">{LpuSectionProfile_Code}</font>&nbsp;{LpuSectionProfile_Name}'+
	'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwLpuSectionProfileRemoteComboTimetable.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swlpusectionprofileremotecombotimetable', sw.Promed.SwLpuSectionProfileRemoteComboTimetable);

sw.Promed.swTFOMSQueryStatus = Ext.extend(Ext.form.ComboBox, {
	store: new Ext.data.JsonStore({
		url: '/?c=TFOMSQuery&m=loadTFOMSQueryStatusList',
		fields: [
			{name:'TFOMSQueryStatus_id', type:'int'},
			{name:'TFOMSQueryStatus_Code', type: 'int'},
			{name:'TFOMSQueryStatus_Name', type:'string'}
		],
		key:'TFOMSQueryStatusid',
		sortInfo:{
			field:'TFOMSQueryStatus_Code'
		}
	}),
	triggerAction: 'all',
	editable: false,
	codeField: 'TFOMSQueryStatus_Code',
	displayField:'TFOMSQueryStatus_Name',
	hiddenName: 'TFOMSQueryStatus_id',
	valueField: 'TFOMSQueryStatus_id',
	fieldLabel: langs('Статус запроса'),
	initComponent: function()
	{
		sw.Promed.swTFOMSQueryStatus.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swtfomsquerystatus', sw.Promed.swTFOMSQueryStatus);

sw.Promed.swEMDDocumentType = Ext.extend(sw.Promed.SwBaseLocalCombo, {
  valueField: 'EMDDocumentType_id',
  displayField: 'EMDDocumentType_Name',
  mode: 'local',
  initComponent: function() {
	sw.Promed.swEMDDocumentType.superclass.initComponent.apply(this, arguments);	
	this.store = new Ext.data.JsonStore({
		autoLoad: true,
		fields: [
			{name: 'EMDDocumentType_id', type: 'int'},
			{name: 'EMDDocumentType_Name', type: 'string'}
		],
		key: 'EMDDocumentType_id',
		sortInfo: {
			field: 'EMDDocumentType_id'
		},
		url: '/?c=EMD&m=getDocumentTypeList'
	});
  }
});
Ext.reg('swemddocumenttype', sw.Promed.swEMDDocumentType);

sw.Promed.SwFedMedSpecCombo = Ext.extend(sw.Promed.SwCommonSprCombo, {
	autoLoad: false,
	comboSubject: 'MedSpec',
	ctxSerach: true,
	displayField: 'MedSpec_Display',
	editable: true,
	fieldLabel: langs('Специальность'),
	filterDate: null,
	loadParams: null,
	moreFields: [
		{ name: 'MedSpec_begDate', type: 'date', dateFormat: 'd.m.Y' },
		{ name: 'MedSpec_endDate', type: 'date', dateFormat: 'd.m.Y' },
		{ name: 'MedSpecClass_id', type: 'int' },
		{ name: 'MedSpecClass_Code', type: 'int' },
		{ name: 'MedSpecClass_Name', type: 'string' },
		{ name: 'MedSpecClass_begDate', type: 'date', dateFormat: 'd.m.Y' },
		{ name: 'MedSpecClass_endDate', type: 'date', dateFormat: 'd.m.Y' },
		{ name: 'MedSpec_Display',
			convert: function(val,row) {
				if ( !Ext.isEmpty(row.MedSpecClass_id) ) {
					return row.MedSpec_Name + ' (V021: ' + row.MedSpecClass_Code + ' - ' + row.MedSpecClass_Name + ')';
				}
				else {
					return row.MedSpec_Name;
				}
			}	
		}
	],
	suffix: 'Fed',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">' +
		'<font color="red">{MedSpec_Code}</font> {MedSpec_Name} {[(values.MedSpecClass_id) ? " (V021: " + values.MedSpecClass_Code + " - " + values.MedSpecClass_Name + ")" : "" ]}&nbsp;' +
		'</div></tpl>'
	),
	typeCode: 'int',
	useCommonFilter: false,

	initComponent: function() {
		sw.Promed.SwFedMedSpecCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swfedmedspeccombo', sw.Promed.SwFedMedSpecCombo);
sw.Promed.swHTMedicalCareClassLocalCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	listWidth: 1000,
	valueField: 'HTMedicalCareClass_id',
	codeField: 'HTMedicalCareClass_Code',
	displayField: 'HTMedicalCareClass_Name',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><tr>',
		'<td style="width: 45px;"><font color="red">{HTMedicalCareClass_Code}&nbsp;</font></td>',
		'<td style="width: 45px;"><b>{HTMedicalCareClass_Name}</b>&nbsp;</td></tr>',
		'{[(getRegionNick() == "ufa")?this.personModelName(values.HTMedicalPersonModel_Name):""]}',
		'</tr></table>',
		'</div></tpl>',
		{
			personModelName: function(nameValue) {
				var val = (!Ext.isEmpty(nameValue)) ? nameValue : '&nbsp;';
				return '<tr><td colspan="2"><div style="font-size: 10px; white-space: normal;padding-left:10px;">'+val+'</div></td></tr>';
			}
		}
	),
	initComponent: function() {
		sw.Promed.swHTMedicalCareClassLocalCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{ name: 'HTMedicalCareClass_id', type: 'int' },
				{ name: 'HTMedicalCareClass_Code', type: 'int' },
				{ name: 'HTMedicalCareClass_Name', type: 'string' },
				{ name: 'HTMedicalCareClass_begDate', type: 'date', dateFormat: 'd.m.Y' },
				{ name: 'HTMedicalCareClass_endDate', type: 'date', dateFormat: 'd.m.Y' },
				{ name: 'HTMedicalCareClass_fid', type: 'int' },
				{ name: 'HTMedicalCareType_id', type: 'int' },
				{ name: 'HTMedicalPersonModel_Name', type: 'string'},
				{ name: 'HTMedicalCareType_Name', type: 'string' }
			],
			key: 'HTMedicalCareClass_id',
			sortInfo: { field: 'HTMedicalCareClass_Code' },
			url: '/?c=HTMRegister&m=getHTMedicalCareClassComboStore'
		});
	}
});

Ext.reg('swhtmedicalcareclasslocalcombo', sw.Promed.swHTMedicalCareClassLocalCombo);



/*
 * BOB - 21.03.2019 
 * комбо Уровень сознания
 */
sw.Promed.SwReanimatConsciousCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField:'ConsciousType_Name',
	valueField:'ConsciousType_id',
	editable: false,
	fieldLabel:'Уровень сознания',
	labelSeparator: '',

	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">'+
		'{ConsciousType_Name} '+ '&nbsp;' +
		'</div></tpl>' 
	),

	initComponent: function() {
		sw.Promed.SwReanimatConsciousCombo.superclass.initComponent.apply(this, arguments);
		

		if (!this.store) {
			this.store = new Ext.db.AdapterStore({
				autoLoad: false,
				dbFile: 'Promed.db',
				fields: [
					{name: 'ConsciousType_id', mapping: 'ConsciousType_id'},
					{name: 'ConsciousType_Name', mapping: 'ConsciousType_Name'},
					{name: 'ConsciousType_ByGlasgow', mapping: 'ConsciousType_ByGlasgow'}
				],
				key: 'ConsciousType_id',
				sortInfo: {field: 'ConsciousType_id'},
				listeners: {
					'load': function(store) {
						this.setValue(this.getValue());
					}.createDelegate(this)
				},
				tableName: 'ConsciousType'
			});
		}
	}
});
Ext.reg('swreanimatconsciouscombo', sw.Promed.SwReanimatConsciousCombo);

/*
 * BOB - 21.03.2019 
 * комбо режимы ИВЛ
 */
sw.Promed.SwReanimatIVLRegimCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField:'IVLRegim_Name',
	valueField:'IVLRegim_id',
	editable: false,
	fieldLabel:'Режим ИВЛ',
	labelSeparator: '',

	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">'+
		'{IVLRegim_Name} '+ '&nbsp;' +
		'</div></tpl>' 
	),

	initComponent: function() {
		sw.Promed.SwReanimatIVLRegimCombo.superclass.initComponent.apply(this, arguments);
		

		if (!this.store) {
			this.store = new Ext.db.AdapterStore({
				autoLoad: false,
				dbFile: 'Promed.db',
				fields: [
					{name: 'IVLRegim_id', mapping: 'IVLRegim_id'},
					{name: 'IVLRegim_Name', mapping: 'IVLRegim_Name'},
					{name: 'IVLRegim_SysNick', mapping: 'IVLRegim_SysNick'}
				],
				key: 'IVLRegim_id',
				sortInfo: {field: 'IVLRegim_id'},
				listeners: {
					'load': function(store) {
						this.setValue(this.getValue());
					}.createDelegate(this)
				},
				tableName: 'IVLRegim'
			});
		}
	}
});
Ext.reg('swreanimativlregimcombo', sw.Promed.SwReanimatIVLRegimCombo);


/*
 * BOB - 21.03.2019 
 * типы шкал / мероприятий в реанимации
 */
sw.Promed.SwReanimatActScTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	editable: false,

	initComponent: function() {
		sw.Promed.SwReanimatActScTypeCombo.superclass.initComponent.apply(this, arguments);
		
		this.displayField = this.comboSubject + '_Name';
		this.valueField = this.comboSubject + '_SysNick';

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: this.comboSubject + '_id', mapping: this.comboSubject + '_id'},
				{name: this.comboSubject + '_Name', mapping: this.comboSubject + '_Name'},
				{name: this.comboSubject + '_SysNick', mapping: this.comboSubject + '_SysNick'}
			],
			key: this.comboSubject + '_id',
			sortInfo: {field: this.comboSubject + '_id'},
			listeners: {
				'load': function(store) {
					this.setValue(this.getValue());
				}.createDelegate(this)
			},
			tableName: this.comboSubject + this.suffix
		});
		this.tpl = new Ext.XTemplate(
			'<tpl for="."><div class="x-combo-list-item">',
			'{' + this.comboSubject + '_Name}',
			'</div></tpl>'
		);				
	}
});
Ext.reg('swreanimatactsctypecombo', sw.Promed.SwReanimatActScTypeCombo);

/*
 * BOB - 21.03.2019 
 * вены / артерии , используемых при катетеризации 
 */
sw.Promed.SwReanimatCathetVeinsCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField:'ReanimatCathetVeins_NameI',
	valueField:'ReanimatCathetVeins_id',
	editable: false,
	fieldLabel:'Вена',
	labelSeparator: '',

	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">'+
		'{ReanimatCathetVeins_NameI} '+ '&nbsp;' +
		'</div></tpl>' 
	),

	initComponent: function() {
		sw.Promed.SwReanimatCathetVeinsCombo.superclass.initComponent.apply(this, arguments);
		

		if (!this.store) {
			this.store = new Ext.db.AdapterStore({
				autoLoad: false,
				dbFile: 'Promed.db',
				fields: [
					{name: 'ReanimatCathetVeins_id', mapping: 'ReanimatCathetVeins_id'},
					{name: 'ReanimatCathetVeins_NameI', mapping: 'ReanimatCathetVeins_NameI'},
					{name: 'ReanimatCathetVeins_NameR', mapping: 'ReanimatCathetVeins_NameR'}
				],
				key: 'ReanimatCathetVeins_id',
				sortInfo: {field: 'ReanimatCathetVeins_id'},
				listeners: {
					'load': function(store) {
						this.setValue(this.getValue());
					}.createDelegate(this)
				},
				tableName: 'ReanimatCathetVeins'
			});
		}
	}
});
Ext.reg('swreanimatcathetveinscombo', sw.Promed.SwReanimatCathetVeinsCombo);


sw.Promed.SwLpuOnmkCombo = Ext.extend(Ext.form.ComboBox, {
	baseFilterFn: null,
	baseFilterScope: null,
	checkAccessRights: false,
	codeField: 'Lpu_Nick',
	countSymbolsCode: 6,
	disableBlurAction: false,
	displayField: 'Lpu_Nick',
	emptyText: 'Введите название МО...',
	enableKeyEvents: true,
	fieldLabel: 'МО',
	focusOnShiftTab: null,
	focusOnTab: null,
	forceSelection: false,
	hideTrigger: false,
	listWidth: 600,
	loadingText: langs('Идет поиск...'),
	minChars: 1,
	minLength: 1,
	minLengthText: langs('Поле должно быть заполнено'),
	mode: 'local',
	onTabKeyDown: Ext.emptyFn,
    onLoadStore: Ext.emptyFn,
	resizable: true,
	/* глубина разрешенного выбора в дереве. По умолчанию можно выбирать только листы (4) */
	selectionDepth: 4,
	selectOnFocus: true,
	triggerClass: 'x-form-search-trigger',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 45px;"><font color="red">{Lpu_Nick}</font></td><td><h3>{Lpu_Name}</h3></td></tr></table>',
		'</div></tpl>'
	),

	valueField: 'Lpu_id',
	width: 220,
	withGroups: false,
	doQuery: function(q, forceAll) {

		var cur = this;
		if (q === undefined || q === null)
		{
			q = '';
		}


		var qe = {
			query: q,
			forceAll: forceAll,
			combo: this,
			cancel: false
		};

		if (this.fireEvent('beforequery', qe) === false || qe.cancel)
		{
			return false;
		}

		q = qe.query;
		forceAll = qe.forceAll;		
	
		if (q.length >= this.minChars || ( this.allQueryFilter && this.allQueryFilter != '' ) )
		{

			if (this.lastQuery != q || ( this.allQueryFilter && this.allQueryFilter != '' ) )
			{

				this.lastQuery = q;
				this.selectedIndex = -1;

				var where = " where lpu_nick like '%"+q+"%'";
				var clause = '';
				
				this.getStore().load({
					params: {where: where, clause: clause}
				});
			}
			else
			{
				this.selectedIndex = -1;
				this.onLoad();
			}
		}
		else
		{

			this.getStore().removeAll();
			this.collapse();
		}
		this.afterQuery = true;

	},
	listeners: {
		'select': function(combo, record, index) {
			if ( record )
			{
				combo.setValue(record.get(combo.valueField));
			}
		}
	},	
	onTriggerClick: function() {

		if (this.disabled)
			return false;
		var combo = this;
		combo.disableBlurAction = true;

		getWnd('swLpuSearchTreeWindow').show({
			
			onSelect: function(lpuData) {				


				combo.getStore().removeAll();
				combo.getStore().loadData([{					
					Lpu_id: lpuData.Lpu_id,
					Lpu_Nick: lpuData.Lpu_Nick,
					Lpu_Name: lpuData.Lpu_Name
				}]);
				combo.setValue(lpuData[combo.valueField]);

				var index = combo.getStore().findBy(function(rec) {
					return (rec.get(combo.valueField) == lpuData[combo.valueField]);
				});

				if ( index == -1 ) {
					return false;
				}

				var record = combo.getStore().getAt(index);
				if ( typeof record == 'object' ) {
					combo.disableBlurAction = false;
					combo.fireEvent('select', combo, record, index);
					combo.fireEvent('change', combo, record.get(combo.valueField));
				}

				getWnd('swLpuSearchTreeWindow').hide();
				return true;
			}
		});
	},
	initComponent: function() {
		
		sw.Promed.SwLpuOnmkCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'Lpu_id', mapping: 'Lpu_id'},
				{name: 'Lpu_Nick', mapping: 'Lpu_Nick'},
				{name: 'Lpu_Name', mapping: 'Lpu_Name'}
			],
			key: 'Lpu_id',
			sortInfo: {field: 'Lpu_Nick'},
			tableName: 'Lpu'
		});
		this.queryDelay = (Ext.isIndexedDb || Ext.isRemoteDB)?600:300;
	}
});
Ext.reg('swlpuonmkcombo', sw.Promed.SwLpuOnmkCombo);

sw.Promed.SwRecMethodTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'RecMethodType_id',
	valueField: 'RecMethodType_id',
	displayField: 'RecMethodType_Name',
	loadParams: {},
	editable: true,
	triggerAction: 'all',
	forceSelection: true,
	fieldLabel: langs('Источник записи'),
	onLoadStore: Ext.emptyFn,
	tpl:
		'<tpl for="."><div class="x-combo-list-item">'+
			'{RecMethodType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwRecMethodTypeCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			autoLoad: true,
			baseParams: this.loadParams,
			fields: [
				{name: 'RecMethodType_id', mapping: 'RecMethodType_id'},
				{name: 'RecMethodType_Code', mapping: 'RecMethodType_Code'},
				{name: 'RecMethodType_Name', mapping: 'RecMethodType_Name'}
			],
			key: 'RecMethodType_id',
			listeners: {
				'load': function(store) {
					if ( typeof this.onLoadStore == 'function' ) {
						this.onLoadStore(store);
					}
				}.createDelegate(this)
			},
			sortInfo: { field: 'RecMethodType_Code' },
			url: '/?c=PersonCard&m=getRecMethodTypeCombo'
		});
	}
});
Ext.reg('swrecmethodtypecombo', sw.Promed.SwRecMethodTypeCombo);

// 'Классификация МИ (форма 30)'
sw.Promed.SwMedProductClassFormCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField: 'MedProductClassForm_Name',
	editable: false,
	fieldLabel: 'Основное здание',
	hiddenName: 'MedProductClassForm_id',
	width: 500,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<table style="border: 0;"><td style="width: 45px;"><font color="red">{MedProductClassForm_Code}</font></td><td><h3>{MedProductClassForm_Name}</h3></td></tr></table>',
		'</div></tpl>'
	),
	valueField: 'MedProductClassForm_id',
	initComponent: function() {
		sw.Promed.SwMedProductClassFormCombo.superclass.initComponent.apply(this, arguments);
		this.store = new Ext.data.JsonStore({
			autoLoad: false,
			fields: [
				{name: 'MedProductClassForm_id', type: 'int'},
				{name: 'MedProductClassForm_Name', type: 'string'},
				{name: 'MedProductClassForm_Code', type: 'string'}
			],
			key: 'MedProductClassForm_id',
			sortInfo: {
				field: 'MedProductClassForm_Name'
			},
			url: '/?c=LpuPassport&m=loadMedProductClassForm'
		});
	}
});
Ext.reg('swMedProductClassFormcombo', sw.Promed.SwMedProductClassFormCombo);

sw.Promed.SwBiologycalMaterialTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'BiologycalMaterialType_id',
	//anchor: '80%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'BiologycalMaterialType',
		key: 'BiologycalMaterialType_id',
		autoLoad: false,
		fields: [
			{name: 'BiologycalMaterialType_id',  type:'int'},
			{name: 'BiologycalMaterialType_Name',  type:'string'},
			{name: 'BiologycalMaterialType_Code',  type:'string'}
		],
		sortInfo: {
			field: 'BiologycalMaterialType_Name'
		}
	}),
	triggerAction: 'all',
	editable: true,
	displayField: 'BiologycalMaterialType_Name',
	valueField: 'BiologycalMaterialType_id',
	fieldLabel: langs('Макро-описание'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{BiologycalMaterialType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwBiologycalMaterialTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swbiologycalmaterialtypecombo', sw.Promed.SwBiologycalMaterialTypeCombo);

sw.Promed.SwPathologicProcessTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'PathologicProcessType_id',
	//anchor: '80%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'PathologicProcessType',
		key: 'PathologicProcessType_id',
		autoLoad: false,
		fields: [
			{name: 'PathologicProcessType_id',  type:'int'},
			{name: 'PathologicProcessType_Name',  type:'string'},
			{name: 'PathologicProcessType_Code',  type:'string'}
		],
		sortInfo: {
			field: 'PathologicProcessType_Name'
		}
	}),
	triggerAction: 'all',
	editable: true,
	displayField: 'PathologicProcessType_Name',
	valueField: 'PathologicProcessType_id',
	fieldLabel: langs('Характер патологического процесса'),
	tpl: '<tpl for="."><div class="x-combo-list-item">'+
				'{PathologicProcessType_Name}'+
			'</div></tpl>',
	initComponent: function() {
		sw.Promed.SwPathologicProcessTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swpathologicprocesstypecombo', sw.Promed.SwPathologicProcessTypeCombo);


sw.Promed.SwPrehospStatusCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'PrehospStatus_Code',
	displayField: 'PrehospStatus_Name',
	editable: false,
	fieldLabel: langs('prehosp_status'),
	hiddenName: 'PrehospStatus_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{PrehospStatus_Code}</font>&nbsp;{PrehospStatus_Name}',
		'</div></tpl>'
	),
	valueField: 'PrehospStatus_id',
	initComponent: function() {
		sw.Promed.SwPrehospTypeCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'PrehospStatus_Name', mapping: 'PrehospStatus_Name'},
				{name: 'PrehospStatus_Code', mapping: 'PrehospStatus_Code'},
				{name: 'PrehospStatus_id', mapping: 'PrehospStatus_id'}
			],
			key: 'PrehospStatus_id',
			sortInfo: {field: 'PrehospStatus_Code'},
			tableName: 'PrehospStatus'
		});
	}
});
Ext.reg('swprehospstatuscombo', sw.Promed.SwPrehospStatusCombo);

sw.Promed.SwPathologicCategoryTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'PathologicCategoryType_Code',
	displayField: 'PathologicCategoryType_Name',
	autoLoad:false,
	editable: false,
	fieldLabel: langs('slojnost'),
	store: new Ext.db.AdapterStore({
		autoLoad: false,
		dbFile: 'Promed.db',
		fields: [
			{name: 'PathologicCategoryType_id', type: 'int'},
			{name: 'PathologicCategoryType_Code', type: 'string'},
			{name: 'PathologicCategoryType_Name', type: 'string'}
		],
		key: 'PathologicCategoryType_id',
		sortInfo: {field: 'PathologicCategoryType_Code'},
		tableName: 'PathologicCategoryType'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{PathologicCategoryType_Code}</font>&nbsp;{PathologicCategoryType_Name}',
		'</div></tpl>'
	),
	valueField: 'PathologicCategoryType_id',
	initComponent: function() {
		if(this.autoLoad){
			this.getStore().load()
		}
		sw.Promed.SwPathologicCategoryTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});

Ext.reg('swpathologiccategorytypecombo', sw.Promed.SwPathologicCategoryTypeCombo);

sw.Promed.SwPlaceArrivalCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'PlaceArrival_Code',
	displayField: 'PlaceArrival_Name',
	autoLoad: false,
	editable: false,
	fieldLabel: langs('slojnost'),
	store: new Ext.db.AdapterStore({
		autoLoad: this.autoLoad,
		dbFile: 'Promed.db',
		fields: [
			{name: 'PlaceArrival_id', type: 'int'},
			{name: 'PlaceArrival_Code', type: 'string'},
			{name: 'PlaceArrival_Name', type: 'string'}
		],
		key: 'PlaceArrival_id',
		sortInfo: {field: 'PlaceArrival_Code'},
		tableName: 'PlaceArrival'
	}),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{PlaceArrival_Code}</font>&nbsp;{PlaceArrival_Name}',
		'</div></tpl>'
	),
	valueField: 'PlaceArrival_id',
	initComponent: function() {
		if(this.autoLoad){
			this.getStore().load()
		}
		sw.Promed.SwPlaceArrivalCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swplacearrivalcombo', sw.Promed.SwPlaceArrivalCombo);

sw.Promed.SwInvalidPeriodTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'InvalidPeriodType_id',
	anchor: '100%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'InvalidPeriodType',
		key: 'InvalidPeriodType_id',
		autoLoad: false,
		fields: [
			{name: 'InvalidPeriodType_id',  type:'int'},
			{name: 'InvalidPeriodType_Code', type:'int'},
			{name: 'InvalidPeriodType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'InvalidPeriodType_id'
		}
	}),
	triggerAction: 'all',
	displayField: 'InvalidPeriodType_Name',
	valueField: 'InvalidPeriodType_id',
	fieldLabel: '',
	tpl: '<tpl for="."><div class="x-combo-list-item"><table height="20" style="border: 0;"><tr>'+
			'<td>{InvalidPeriodType_Name}</td>'+
			'</tr></table></div></tpl>',
	initComponent: function() {
		sw.Promed.SwInvalidPeriodTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swinvalidperiodtypecombo', sw.Promed.SwInvalidPeriodTypeCombo);

sw.Promed.SwStaticCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField: 'name',
	valueField: 'code',
	value: 0,
	width: 200,
	comboData: [ [ 0, 'Все' ] ],
	initComponent: function() {
		this.store = new Ext.data.SimpleStore({
			id: 0,
			fields: ['code','name'],
			data: this.comboData
		});
		sw.Promed.SwStaticCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swstaticcombo', sw.Promed.SwStaticCombo);


sw.Promed.SwInvalidPeriodTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'InvalidPeriodType_id',
	anchor: '100%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'InvalidPeriodType',
		key: 'InvalidPeriodType_id',
		autoLoad: false,
		fields: [
			{name: 'InvalidPeriodType_id',  type:'int'},
			{name: 'InvalidPeriodType_Code', type:'int'},
			{name: 'InvalidPeriodType_Name',  type:'string'}
		],
		sortInfo: {
			field: 'InvalidPeriodType_id'
		}
	}),
	triggerAction: 'all',
	displayField: 'InvalidPeriodType_Name',
	valueField: 'InvalidPeriodType_id',
	fieldLabel: '',
	tpl: '<tpl for="."><div class="x-combo-list-item"><table height="20" style="border: 0;"><tr>'+
			'<td>{InvalidPeriodType_Name}</td>'+
			'</tr></table></div></tpl>',
	initComponent: function() {
		sw.Promed.SwInvalidPeriodTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swinvalidperiodtypecombo', sw.Promed.SwInvalidPeriodTypeCombo);

sw.Promed.SwRiskTypeCombo = Ext.extend(sw.Promed.SwCommonSprCombo, {
	fieldLabel: 'Тип риска',
	moreFields: [
		{ name: 'RiskType_IsRadzin', mapping: 'RiskType_IsRadzin' },
		{ name: 'RiskType_IsRisk572', mapping: 'RiskType_IsRisk572' },
		{ name: 'RiskType_IsRiskPR', mapping: 'RiskType_IsRiskPR' },
		{ name: 'RiskType_IsRiskTotal', mapping: 'RiskType_IsRiskTotal' }
	],
	comboSubject: 'RiskType',
	typeCode: 'int',
	initComponent: function() {
		sw.Promed.SwRiskTypeCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swrisktypecombo', sw.Promed.SwRiskTypeCombo);

sw.Promed.SwMaterialChangeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	codeField: 'MaterialChange_Code',
	displayField: 'MaterialChange_Name',
	editable: false,
	fieldLabel: langs('Характер изменений тканей'),
	hiddenName: 'MaterialChange_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{MaterialChange_Code}</font>&nbsp;{MaterialChange_Name}',
		'</div></tpl>'
	),
	valueField: 'MaterialChange_id',
	initComponent: function() {
		sw.Promed.SwMaterialChangeCombo.superclass.initComponent.apply(this, arguments);

		this.store = new Ext.db.AdapterStore({
			autoLoad: false,
			dbFile: 'Promed.db',
			fields: [
				{name: 'MaterialChange_Name', mapping: 'MaterialChange_Name'},
				{name: 'MaterialChange_Code', mapping: 'MaterialChange_Code'},
				{name: 'MaterialChange_id', mapping: 'MaterialChange_id'}
			],
			key: 'MaterialChange_id',
			sortInfo: {field: 'MaterialChange_Code'},
			tableName: 'MaterialChange'
		});
	}
});
Ext.reg('swmaterialchangecombo', sw.Promed.SwMaterialChangeCombo);

sw.Promed.SwAnatomicLocalCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'AnatomicLocal_id',
	anchor: '100%',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'AnatomicLocal',
		key: 'AnatomicLocal_id',
		autoLoad: false,
		fields: [
			{name: 'AnatomicLocal_id',  type:'int'},
			{name: 'AnatomicLocal_Code', type:'int'},
			{name: 'AnatomicLocal_Area', type:'string'},
			{name: 'AnatomicLocal_Name',  type:'string'}
		],
		sortInfo: {
			field: 'AnatomicLocal_id'
		}
	}),
	triggerAction: 'all',
	displayField: 'AnatomicLocal_Name',
	valueField: 'AnatomicLocal_id',
	fieldLabel: langs('Локализация патологического процесса'),
	tpl: '<tpl for="."><div class="x-combo-list-item"><table height="20" style="border: 0;"><tr>'+
			'<td>{AnatomicLocal_Name}</td>'+
			'</tr></table></div></tpl>',
	initComponent: function() {
		sw.Promed.SwAnatomicLocalCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swanatomiclocalcombo', sw.Promed.SwAnatomicLocalCombo);

sw.Promed.SwEmploymentCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'Employment_id',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'Employment',
		key: 'Employment_id',
		autoLoad: false,
		fields: [
			{name: 'Employment_id',  type:'int'},
			{name: 'Employment_Code', type:'int'},
			{name: 'Employment_Name',  type:'string'}
		],
		sortInfo: {
			field: 'Employment_id'
		}
	}),
	triggerAction: 'all',
	displayField: 'Employment_Name',
	valueField: 'Employment_id',
	fieldLabel: '',
	initComponent: function() {
		sw.Promed.SwEmploymentCombo.superclass.initComponent.apply(this, arguments);
		
		this.tpl = new Ext.XTemplate(
			'<tpl for="."><div class="x-combo-list-item">',
			'<font color="red">{Employment_Code}</font>&nbsp;{Employment_Name}',
			'</div></tpl>'
		);
	}
});

Ext.reg('swemploymentcombo', sw.Promed.SwEmploymentCombo);

sw.Promed.SwEducationLevelCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'EducationLevel_id',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'EducationLevel',
		key: 'EducationLevel_id',
		autoLoad: false,
		fields: [
			{name: 'EducationLevel_id',  type:'int'},
			{name: 'EducationLevel_Code', type:'int'},
			{name: 'EducationLevel_Name',  type:'string'}
		],
		sortInfo: {
			field: 'EducationLevel_id'
		}
	}),
	triggerAction: 'all',
	displayField: 'EducationLevel_Name',
	valueField: 'EducationLevel_id',
	fieldLabel: '',
	initComponent: function() {
		sw.Promed.SwEducationLevelCombo.superclass.initComponent.apply(this, arguments);

		this.tpl = new Ext.XTemplate(
			'<tpl for="."><div class="x-combo-list-item">',
			'<font color="red">{EducationLevel_Code}</font>&nbsp;{EducationLevel_Name}',
			'</div></tpl>'
		);
	}
});

Ext.reg('sweducationlevelcombo', sw.Promed.SwEducationLevelCombo);

sw.Promed.SwNewslatterGroupTypeComboCombo = Ext.extend(sw.Promed.SwBaseLocalCombo,
{
	store: new Ext.db.AdapterStore(
	{
		dbFile: 'Promed.db',
		tableName: 'NewslatterGroupType',
		key: 'NewslatterGroupType_id',
		autoLoad: true,
		fields:
		[
			{name: 'NewslatterGroupType_id', type:'int'},
			{name: 'NewslatterGroupType_Code', type:'int'},
			{name: 'NewslatterGroupType_Name', type:'string'}
		],
		sortInfo:
		{
			field: 'NewslatterGroupType_Code'
		}
	}),
	editable: false,
	codeField: 'NewslatterGroupType_Code',
	displayField:'NewslatterGroupType_Name',
	valueField: 'NewslatterGroupType_id',
	hiddenName: 'NewslatterGroupType_id',
	fieldLabel: langs('Тип группировки'),
	tpl:
			'<tpl for="."><div class="x-combo-list-item">'+
			'<font color="red">{LpuSectionAgeNewslatterGroupType_Code}</font>&nbsp;{NewslatterGroupType_Name}'+
			'</div></tpl>',

	initComponent: function()
	{
		sw.Promed.SwNewslatterGroupTypeComboCombo.superclass.initComponent.apply(this, arguments);
	}
});
Ext.reg('swnewslattergrouptypecombo', sw.Promed.SwNewslatterGroupTypeComboCombo);

sw.Promed.SwDrugQualityCytologicCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'DrugQualityCytologic_id',
	store: new Ext.db.AdapterStore({
		dbFile: 'Promed.db',
		tableName: 'DrugQualityCytologic',
		key: 'DrugQualityCytologic_id',
		autoLoad: false,
		fields: [
			{name: 'DrugQualityCytologic_id',  type:'int'},
			{name: 'DrugQualityCytologic_Code', type:'string'},
			{name: 'DrugQualityCytologic_Name',  type:'string'}
		],
		sortInfo: {
			field: 'DrugQualityCytologic_id'
		}
	}),
	triggerAction: 'all',
	displayField: 'DrugQualityCytologic_Name',
	valueField: 'DrugQualityCytologic_id',
	fieldLabel: langs('Качество препарата'),
	initComponent: function() {
		sw.Promed.SwDrugQualityCytologicCombo.superclass.initComponent.apply(this, arguments);
		
		this.tpl = new Ext.XTemplate(
			'<tpl for="."><div class="x-combo-list-item">',
			'<font color="red">{DrugQualityCytologic_Code}</font>&nbsp;{DrugQualityCytologic_Name}',
			'</div></tpl>'
		);
	}
});
Ext.reg('swdrugqualitycytologiccombo', sw.Promed.SwDrugQualityCytologicCombo);

sw.Promed.SwScreeningSmearTypeCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	hiddenName: 'ScreeningSmearType_id',
	autoLoad: false,
	displayField: 'ScreeningSmearType_Name',
	valueField: 'ScreeningSmearType_id',
	fieldLabel: langs('Тип мазка'),
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{ScreeningSmearType_Code}</font>&nbsp;{ScreeningSmearType_Name}',
		'</div></tpl>'
	),
	initComponent: function() {
		sw.Promed.SwScreeningSmearTypeCombo.superclass.initComponent.apply(this, arguments);
		if ( !this.store ) {
			this.store = new Ext.data.JsonStore({
				autoLoad: this.autoLoad,
				fields: [
					{name: 'ScreeningSmearType_id',  type:'int'},
					{name: 'ScreeningSmearType_pid', type:'int'},
					{name: 'ScreeningSmearType_Code', type:'string'},
					{name: 'ScreeningSmearType_Name',  type:'string'}
				],
				key: 'ScreeningSmearType_id',
				url: '/?c=EvnCytologicProto&m=loadScreeningSmearTypeCombo'
			})
		}
	}
});
Ext.reg('swscreeningsmeartypecombo', sw.Promed.SwScreeningSmearTypeCombo);

sw.Promed.SwCytologicMaterialPathologyCombo = Ext.extend(sw.Promed.SwBaseLocalCombo, {
	displayField: 'CytologicMaterialPathology_Name',
	editable: true,
	fieldLabel: langs('Цитограмма соответствует'),
	hiddenName: 'CytologicMaterialPathology_id',
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="x-combo-list-item">',
		'<font color="red">{CytologicMaterialPathology_Code}</font>&nbsp;{CytologicMaterialPathology_Name}'+
		'</div></tpl>'
	),
	valueField: 'CytologicMaterialPathology_id',
	autoLoad: false,
	initComponent: function() {
		sw.Promed.SwCytologicMaterialPathologyCombo.superclass.initComponent.apply(this, arguments);

		if ( !this.store ) {
			this.store = new Ext.data.JsonStore({
				autoLoad: this.autoLoad,
				fields: [
					{name: 'CytologicMaterialPathology_id', type: 'int'},
					{name: 'CytologicMaterialPathology_Code', type: 'string'},
					{name: 'CytologicMaterialPathology_Name', type: 'string'},
					{name: 'CytologicMaterialPathology_pid', type: 'int'}
				],
				key: 'CytologicMaterialPathology_id',
				url: '/?c=EvnCytologicProto&m=loadCytologicMaterialPathologyCombo'
			});
		}
	}
});
Ext.reg('swcytologicmaterialpathologycombo', sw.Promed.SwCytologicMaterialPathologyCombo);


sw.Promed.SwFSIDICombo = Ext.extend(sw.Promed.SwCommonSprCombo, {
	comboSubject: 'FSIDI',
	fieldLabel: lang['instrumental_diagnostic'],
	UslugaGost_Code: null,
	hideOnInit: false,
	valueField: 'FSIDI_id',
	allowBlank: true,
	moreFields: [{ name: 'FSIDI_CodeNMU', mapping: 'FSIDI_CodeNMU' }],
	onLoadStore: function(store) {
		if (store.getCount() == 1) {
			this.setValue(store.getAt(0).get(this.valueField));
		}
		// если из-за фильтра ничего не нашло, грузим без него
		if(store.getCount() === 0) {
			store.load();
		}else{
			// если нет выбранного значения в новом списке, убраем его
			if( this.getValue() && store.find('FSIDI_id', this.getValue()) == '-1' ){
				this.setValue('');
			}
		}
	},
	initComponent: function() {
		sw.Promed.SwFSIDICombo.superclass.initComponent.apply(this, arguments);
		if(this.UslugaGost_Code){
			this.setLoadParams();
		}

		this.addListener('render',function(combo) {
			if(this.hideOnInit){
				this.setContainerVisible(false);
			}
			if(combo.autoLoad == false) {
				if(combo.loadParams) {
					combo.getStore().removeAll();
					combo.getStore().load(combo.loadParams);
				} else if(combo.getStore().getCount() == 0) {
					combo.getStore().load();
				}
			}
		});
	},
	setLoadParams: function() {
		if(this.UslugaGost_Code){
			this.loadParams = {params: { where: "where FSIDI_CodeNMU like '%" + this.UslugaGost_Code + "%'" }};
		}
	},
	checkVisibilityAndGost: function(UslugaComplex_id){
		var that = this;
		if(UslugaComplex_id){
			Ext.Ajax.request({
				url: '/?c=Usluga&m=getUslugaAtributTypeAndGost',
				params: {UslugaComplex_id: UslugaComplex_id},
				success: function(data) {
					var response_obj = Ext.util.JSON.decode(data.responseText);
					if( response_obj.UslugaComplexAttributeType_SysNick ){
						that.enable();
						that.setAllowBlank(false);
						that.setContainerVisible(true);
					}else{
						that.disable();
						that.setAllowBlank(true);
						that.setContainerVisible(false);
						// that.setValue('');
					}
					if(response_obj.UslugaGost_Code){
						that.UslugaGost_Code = response_obj.UslugaGost_Code;
						that.setLoadParams();
						that.getStore().load(that.loadParams);
						/*if(that.getStore().getCount() === 0) {
							that.getStore().load();
						}*/
					}else{
						that.getStore().load();
					}
				},
				failure: function() {
					sw.swMsg.alert('Внимание!', 'Ошибка получения данных по услуге');
				}
			});
		} else {
			that.disable();
			that.setAllowBlank(true);
			that.setContainerVisible(false);
			that.setValue('');
		}
	},
});
Ext.reg('swfsidicombo', sw.Promed.SwFSIDICombo);